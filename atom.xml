<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieJava&#39;s blog</title>
  
  <subtitle>记录最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiejava.gitee.io/"/>
  <updated>2023-04-11T06:21:42.963Z</updated>
  <id>https://xiejava.gitee.io/</id>
  
  <author>
    <name>XieJava</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>运营商在安全领域的优势分析</title>
    <link href="https://xiejava.gitee.io/posts/3b6a1140/"/>
    <id>https://xiejava.gitee.io/posts/3b6a1140/</id>
    <published>2023-04-11T06:03:26.000Z</published>
    <updated>2023-04-11T06:21:42.963Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230410/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A84.jpeg" alt="网络安全" title="网络安全"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>近年来，中美贸易摩擦加剧，国际争端凸显，国家高度重视网络安全的建设，网络安全已上升及国家战略层面，网络空间作为“第五疆域”受到极大重视。个人与企业对于网络安全的需求不断增加，中国网络安全市场也随之发展。</p><h3 id="政策支持，网络安全需求不断增加"><a href="#政策支持，网络安全需求不断增加" class="headerlink" title="政策支持，网络安全需求不断增加"></a>政策支持，网络安全需求不断增加</h3><p>近年来，网络安全被提升到国家战略高度，正在加快推进网络安全技术自主创新，朝着建设网络强国目标不懈努力。2014年以来先后设立中国安全委员会、中央网络安全和信息化委员会，发布了《国家安全法》、《中华人民共和国网络安全法》、《国家网络空间安全战略》、《网络空间国际合作战略》、《中华人民共和国数据安全法》等多项鼓励行业发展的法规和政策。这些法规政策规范了网络信息安全行业，为网络安全行业发展营造了良好的环境。</p><h3 id="信息化水平、云计算、大数据、5G、物联网水平提升，网络安全对产业及业态提出新要求"><a href="#信息化水平、云计算、大数据、5G、物联网水平提升，网络安全对产业及业态提出新要求" class="headerlink" title="信息化水平、云计算、大数据、5G、物联网水平提升，网络安全对产业及业态提出新要求"></a>信息化水平、云计算、大数据、5G、物联网水平提升，网络安全对产业及业态提出新要求</h3><p>近年来，中国信息化水平不断攀升：云计算的进步带动计算能力和数据的集中；大数据的出现带来数据收集、处理、分析业态的革新；5G网络加速了网络数据处理速度；随着“云+5G”的共同催化，联网设备将呈现指数级增长，中国网络安全行业未来将布局更多的应用领域。<br>同时，以上科技进步也引发了新的网络安全问题，对网络安全行业提出新要求，数据的产生流通和应用更加普遍化和密集化，使网络安全的防范更加复杂，对网络安全提出更高的挑战。<br>2019年9月27日工信部公开征求对《关于促进网络安全产业发展的指导意见（征求意见稿）》的意见，征求意见稿中提出，到2025年，培育形成一批年营收超过20亿的网络安全企业，形成若干具有国际竞争力的网络安全骨干企业，网络安全产业规模超过2000亿。</p><p>在此背景下大型国有企业尤其是电信运营商纷纷布局网络安全。如中国移动收购启明星辰、中国电信组建专门的网络与信息安全研究院成立成立天翼安全科技有限公司、联通成立一家专注于网络安全服务的新公司计划将信息安全业务打造成创新业务发展的主要增长点。</p><h2 id="优势分析"><a href="#优势分析" class="headerlink" title="优势分析"></a>优势分析</h2><p>那么运营商在安全领域发展都会有哪些优势呢？</p><h3 id="一、网络优势"><a href="#一、网络优势" class="headerlink" title="一、网络优势"></a>一、网络优势</h3><p>电信运营商，作为国家网络基础设施的建设者和运营者，具备强大的网络优势。在工信部《关于促进网络安全产业发展的指导意见（征求意见稿）》明确提出鼓励基础电信企业和云服务提供商发挥网络资源优势，面向客户提供网络安全监测预警、攻击防护、应急保障等增值服务。</p><h3 id="二、数据优势"><a href="#二、数据优势" class="headerlink" title="二、数据优势"></a>二、数据优势</h3><p>运营商有大网的数据优势，如：DDOS异常流量监测数据、IDC/ISP数据、僵木蠕恶意程序数据、互联网暴露资产数据等，通过整合电信运营商大网数据能力，汇聚各类安全数据资源，结合大网威胁情报信息，能够更好的赋能安全产品。</p><h3 id="三、产品优势"><a href="#三、产品优势" class="headerlink" title="三、产品优势"></a>三、产品优势</h3><p>运营商自身自研建设了大量的安全基础能力。以电信为例，近年来积极打造了一系列硬核自主研发的安全产品如云堤抗DDoS、互联网测绘平台、安全态势感知平台、安全运营中心、安全资源池等保租手等等，安全产品均已通过运营商级的大网实战验证。生态开放，具备端到端的产品集成、产品研发和定制能力，提供一体化、全方位、一站式的综合解决方案。相对于传统的安全产商，传统安全设备产商的某些个别的产品可能有优势，但产品可能只适配自家的产品，对其他厂商比较封闭，端到端的产品集成和定制化能力相对较弱。</p><h3 id="四、运营优势"><a href="#四、运营优势" class="headerlink" title="四、运营优势"></a>四、运营优势</h3><p>成功的安全在于运营，运营商自身作为典型的关基行业企业，面对工信部、通管局、公安、网信办等多个监管部门的监管和考核，自身积累了丰富的安全运营经验和实战化的重保经验，并且将自身的安全运营经验、重保经验赋能至安全产品。可面向行业监管单位和关基等客户量身打造基于实战化、可视化、专业级的安全运营产品集。而传统安全产商，一般只提供标准产品，安全运营经验赋能产品相对不足。</p><h3 id="五、服务优势"><a href="#五、服务优势" class="headerlink" title="五、服务优势"></a>五、服务优势</h3><p>电信运营商具备强大的信息化和安全的一体两翼的能力，比传统安全公司更懂信息化和网络，建立了从信息系统和网络的规划与设计、再到实施建设、生产运行维护，涉及整个业务系统安全稳定运行的安全服务体系。</p><p>电信运营商具备覆盖全国的省-市-县的本地化专业的安全服务团队，专业安全服务团队能对客户形成一对一的贴身服务。</p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230410/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A84.jpeg&quot; alt=&quot;网络安全&quot; title
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty+OpenWAF的WEB防护实战</title>
    <link href="https://xiejava.gitee.io/posts/dbe7a5ab/"/>
    <id>https://xiejava.gitee.io/posts/dbe7a5ab/</id>
    <published>2023-04-07T08:38:57.000Z</published>
    <updated>2023-04-07T08:54:38.127Z</updated>
    
    <content type="html"><![CDATA[<p>OpenResty是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。本文介绍通过OpenResty+OpenWAF来搭建软WAF的应用，用来防护DVWA的靶机，然后我们通过攻击DVWA的靶机来看一下OpenWAF的防护效果。</p><h2 id="一、OpenResty-OpenWAF安装"><a href="#一、OpenResty-OpenWAF安装" class="headerlink" title="一、OpenResty+OpenWAF安装"></a>一、OpenResty+OpenWAF安装</h2><h3 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ wget GeoIP-devel git swig make perl perl-ExtUtils-Embed readline-devel zlib-devel -y</span><br></pre></td></tr></table></figure><p>安装libcidr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget http://www.over-yonder.net/~fullermd/projects/libcidr/libcidr-1.2.3.tar.xz</span><br><span class="line">tar -xvf libcidr-1.2.3.tar.xz</span><br><span class="line"><span class="built_in">cd</span> /opt/libcidr-1.2.3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>升级openssl版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget -c http://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1d.tar.gz --no-check-certificat</span><br><span class="line">tar -zxvf openssl-1.1.1d.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.1.1d/</span><br><span class="line">./config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>下载pcre-jit<br>并解压pcre-jit，后面安装OpenResty的时候引入并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://udomain.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz --no-check-certificate</span><br><span class="line">tar -zxvf pcre-8.45.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2、安装OpenWAF"><a href="#2、安装OpenWAF" class="headerlink" title="2、安装OpenWAF"></a>2、安装OpenWAF</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/titansec/OpenWAF.git</span><br><span class="line">mv /opt/OpenWAF/lib/openresty/ngx_openwaf.conf /etc</span><br><span class="line">mv /opt/OpenWAF/lib/openresty/configure /opt/openresty-1.19.3.1</span><br><span class="line">cp -RP /opt/OpenWAF/lib/openresty/* /opt/openresty-1.19.9.1/bundle/</span><br><span class="line"><span class="built_in">cd</span> /opt/OpenWAF/</span><br><span class="line">make clean</span><br><span class="line">make install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/libcidr.so /opt/OpenWAF/lib/resty/libcidr.so</span><br></pre></td></tr></table></figure><h3 id="3、安装OpenResty"><a href="#3、安装OpenResty" class="headerlink" title="3、安装OpenResty"></a>3、安装OpenResty</h3><p>OpenResty官网的下载地址 <a href="https://openresty.org/en/download.html" target="_blank" rel="noopener">https://openresty.org/en/download.html</a><br>目前最新版本是1.21.4.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://openresty.org/download/openresty-1.21.4.1.tar.gz</span><br><span class="line">tar -zxvf openresty-1.21.4.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> /opt/openresty-1.21.4.1/</span><br><span class="line">./configure --with-pcre-jit --with-ipv6 --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_sub_module --with-http_geoip_module --with-openssl=/opt/openssl-1.1.1d --with-pcre=/opt/pcre-8.45</span><br><span class="line">gmake &amp;&amp; gmake install</span><br></pre></td></tr></table></figure><p>设置nginx开机自启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"><span class="comment"># 查看服务当前状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 启动nginx服务</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="comment"># 停止nginx服务</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="comment"># 重启nginx服务</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>当我们启动nginx的时候发现启动失败了，原因是因为原来安装了apache端口是80，nginx的端口也是80，端口冲突了。解决方案要不是改nginx端口，要不就是改apache的端口。这里将apache的端口改成8080。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost OpenWAF]<span class="comment"># systemctl start nginx</span></span><br><span class="line">Job <span class="keyword">for</span> nginx.service failed because the control process exited with error code. See <span class="string">"systemctl status nginx.service"</span> and <span class="string">"journalctl -xe"</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>查看nginx启动状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost OpenWAF]<span class="comment"># systemctl status nginx</span></span><br><span class="line">● nginx.service - nginx</span><br><span class="line">Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled)</span><br><span class="line">Active: failed (Result: <span class="built_in">exit</span>-code) since Tue 2023-04-04 04:00:44 PDT; 19s ago</span><br><span class="line">Process: 42096 ExecStart=/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx (code=exited, status=1/FAILURE)</span><br><span class="line">Apr 04 04:00:42 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:42 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:43 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:43 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:44 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:44 localhost.localdomain nginx[42096]: nginx: [emerg] still could not <span class="built_in">bind</span>()</span><br></pre></td></tr></table></figure><p>修改apache的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line">Listen 8080</span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/1-apache%E7%AB%AF%E5%8F%A3.png" alt="修改apache端口的效果"></p><p>将apache的端口改成8080后，再次启动nginx就可以看到OpenResty成功启动了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/2-%E6%88%90%E5%8A%9F%E5%90%AF%E5%8A%A8OpenResty.png" alt="OpenResty成功启动了"></p><h2 id="二、配置OpenWAF的web防护"><a href="#二、配置OpenWAF的web防护" class="headerlink" title="二、配置OpenWAF的web防护"></a>二、配置OpenWAF的web防护</h2><p>这边DVWA靶机的地址是<a href="http://192.168.1.24:8080/DVWA/" target="_blank" rel="noopener">http://192.168.1.24:8080/DVWA/</a>  DVWA靶机的安装见另一篇博文《<a href="https://blog.csdn.net/fullbug/article/details/129879670" target="_blank" rel="noopener">CentOS7+LAMP+DVWA靶机搭建</a>》<a href="https://blog.csdn.net/fullbug/article/details/129879670" target="_blank" rel="noopener">https://blog.csdn.net/fullbug/article/details/129879670</a><br>我们需要配置OpenResty+OpenWAF来对192.168.1.24:8080进行WEB防护<br>参考《<a href="https://github.com/titansec/OpenWAF/blob/master/doc/%E8%BD%BB%E6%9D%BE%E7%8E%A9%E8%BD%ACOpenWAF%E4%B9%8B%E5%85%A5%E9%97%A8%E7%AF%87.md" target="_blank" rel="noopener">轻松玩转OpenWAF之入门篇</a>》及 《<a href="https://github.com/titansec/OpenWAF/blob/master/doc/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6OpenWAF%E4%B9%8Bnginx%E9%85%8D%E7%BD%AE.md" target="_blank" rel="noopener">深入研究OpenWAF之nginx配置</a>》</p><h3 id="1、nginx配置修改"><a href="#1、nginx配置修改" class="headerlink" title="1、nginx配置修改"></a>1、nginx配置修改</h3><p>在 nginx 的 http 级别添加如下两行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include /opt/OpenWAF/conf/twaf_main.conf;</span><br><span class="line">include /opt/OpenWAF/conf/twaf_api.conf;</span><br></pre></td></tr></table></figure><p>要防护的 server 或 location 级别添加如下一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /opt/OpenWAF/conf/twaf_server.conf;</span><br></pre></td></tr></table></figure><p>OpenResty的nginx的配置文件在 /usr/local/openresty/nginx/conf/nginx.conf</p><p>具体配置参考下图：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/3-OpenResty%E7%9A%84nginx%E9%85%8D%E7%BD%AE.png" alt="nginx.conf相关配置"></p><h3 id="2、OpenWAF接入规则修改"><a href="#2、OpenWAF接入规则修改" class="headerlink" title="2、OpenWAF接入规则修改"></a>2、OpenWAF接入规则修改</h3><p>修改/opt/OpenWAF/conf/twaf_access_rule.json文件<br>具体配置参考下图：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/4-OpenWAF%E7%9A%84twaf_access_rule.json%E7%9A%84%E9%85%8D%E7%BD%AE.png" alt="twaf_access_rule.json文件的配置"></p><h3 id="3、测试验证"><a href="#3、测试验证" class="headerlink" title="3、测试验证"></a>3、测试验证</h3><p>这时候我们访问<a href="http://192.168.1.24/DVWA/" target="_blank" rel="noopener">http://192.168.1.24/DVWA/</a>  ，注意是没有带8080端口的，因为是通过OpenResty+OpenWAF来反向代理了127.0.0.1的8080端口，访问<a href="http://192.168.1.24/DVWA/" target="_blank" rel="noopener">http://192.168.1.24/DVWA/</a>  是经过了OpenWAF防护的。<br>这时候我们开始通过SQL注入对DVWA的靶机进行SQL注入的攻击。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/5-SQL%E6%B3%A8%E5%85%A5.png" alt="SQL注意"></p><p>防护效果：<br>可以看到OpenWAF提示标识为攻击并记录，提示是有次SQL注入的攻击，并进行了防护。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/5-SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E6%8A%A4%E6%95%88%E6%9E%9C.png" alt="SQL注入防护效果"></p><p>接下来我们进行一次XSS的攻击<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/6-XSS%E6%94%BB%E5%87%BB.png" alt="在这里插入图片描述"></p><p>同样OpenWAF给出了XSS的攻击提示，并进行了防护。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/6-XSS%E9%98%B2%E6%8A%A4%E6%95%88%E6%9E%9C.png" alt="XSS的防护效果"></p><p>至此，本文介绍了OpenResty+OpenWAF的安装，并通过配置对DVWA的靶机进行了WEB防护，通过SQL注入及XSS的攻击，验证了OpenWAF的效果。OpenResty+OpenWAF是开源的软WAF解决方案，安装和配置相对简单，对于中小企业的web防护来说不失为一个低成本的解决方案。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OpenResty是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。本文介绍通过OpenResty+OpenW
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7+LAMP+DVWA靶机搭建</title>
    <link href="https://xiejava.gitee.io/posts/4405dad8/"/>
    <id>https://xiejava.gitee.io/posts/4405dad8/</id>
    <published>2023-03-31T07:43:55.000Z</published>
    <updated>2023-03-31T08:03:55.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是DVWA"><a href="#一、什么是DVWA" class="headerlink" title="一、什么是DVWA"></a>一、什么是DVWA</h2><p>Damn Vulnerable Web Application (DVWA)(译注：可以直译为：”该死的”不安全Web应用程序)，是一个编码差的、易受攻击的 PHP/MySQL Web应用程序。 它的主要目的是帮助信息安全专业人员在合法的环境中，练习技能和测试工具，帮助 Web 开发人员更好地了解如何加强 Web 应用程序的安全性，并帮助学生和教师在可控的教学环境中了解和学习 Web 安全技术。<br>DVWA的中文介绍见 <a href="https://github.com/digininja/DVWA/blob/master/README.zh.md" target="_blank" rel="noopener">https://github.com/digininja/DVWA/blob/master/README.zh.md</a><br>下载地址：git clone <a href="https://github.com/digininja/DVWA.git" target="_blank" rel="noopener">https://github.com/digininja/DVWA.git</a></p><h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><h3 id="1、LAMP环境安装"><a href="#1、LAMP环境安装" class="headerlink" title="1、LAMP环境安装"></a>1、LAMP环境安装</h3><p>DVWA的安装依赖的软件包如下：</p><ul><li>apache2 </li><li>libapache2-mod-php </li><li>mariadb-server </li><li>mariadb-client php</li><li>php-mysqli php-gd</li></ul><p>就是依赖于LAMP环境，可以参考官方文档一个依赖包手工安装也可以通过下载lamp统一安装脚本一键安装。<br>安装 - LAMP一键安装包<br>运行 <code>wget -c http://soft.vpser.net/lnmp/lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; ./install.sh lamp</code> 一路回车选择默认项，稍等片刻，即可完成安装<br>如果是手工安装：<code>yum install -y httpd php php-mysql php-gd mariadb-server mariadb</code></p><h2 id="三、安装DVWA"><a href="#三、安装DVWA" class="headerlink" title="三、安装DVWA"></a>三、安装DVWA</h2><h3 id="1、下载DVWA的软件包"><a href="#1、下载DVWA的软件包" class="headerlink" title="1、下载DVWA的软件包"></a>1、下载DVWA的软件包</h3><p>进入到默认的web发布目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/digininja/DVWA.git</span><br></pre></td></tr></table></figure><p>直接通过地址访问DVWA<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/%E8%AE%BF%E9%97%AEDVWA.png" alt="访问DVWA"><br>他会提示需要将config/config.inc.php.dist复制成config/config.inc.php并配置环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp config.inc.php.dist config.inc.php</span><br></pre></td></tr></table></figure><h3 id="2、配置数据库"><a href="#2、配置数据库" class="headerlink" title="2、配置数据库"></a>2、配置数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.ini.php</span><br></pre></td></tr></table></figure><p>找到数据库的配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_DVWA</span> = array();</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_server'</span> ]   = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_database'</span> ] = <span class="string">'dvwa'</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_user'</span> ]     = <span class="string">'dvwa'</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_password'</span> ] = <span class="string">'p@ssw0rd'</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_port'</span>] = <span class="string">'3306'</span>;</span><br></pre></td></tr></table></figure><p>根据config.inc.php的数据库配置信息配置数据库，注意不要用root来访问数据库。<br>先用客户端工具创建dvwa的数据库，再创建dvwa的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all on dvwa.* to <span class="string">'dvwa'</span>@<span class="string">'localhost'</span> identified by <span class="string">'p@ssw0rd'</span> with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>登录数据库查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u dvwa -p</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/showdatabases.png" alt="show databases"></p><h3 id="3、修改php-ini的配置"><a href="#3、修改php-ini的配置" class="headerlink" title="3、修改php.ini的配置"></a>3、修改php.ini的配置</h3><p>再次访问DVWA<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/setupcheck.png" alt="在这里插入图片描述"></p><p>这里提示要修改php.ini的配置将 <code>allow_url_fopen=On</code> 和<code>allow_url_include=On</code>。</p><p>找到环境的php.ini我这里是在/etc/php.ini进行修改，不要修改/var/www/html/DVWA/php.ini中的配置了。<br>配置好后重启apache </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p>刷新浏览器，可以看到红色的Disabled告警消失了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/%E6%A3%80%E6%9F%A5check.png" alt="红色告警消失了"></p><p>reCAPTCHA key: Missing 这个告警是因为reCAPTCHA没有配置，这个需要去谷歌的网站申请公钥和私钥。可以不用管</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ReCAPTCHA settings</span></span><br><span class="line"><span class="comment">#   Used for the 'Insecure CAPTCHA' module</span></span><br><span class="line"><span class="comment">#   You'll need to generate your own keys at: https://www.google.com/recaptcha/admin</span></span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'recaptcha_public_key'</span> ]  = <span class="string">''</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'recaptcha_private_key'</span> ] = <span class="string">''</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 -R hackable</span><br><span class="line">chmod 777 -R config</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/%E4%BF%AE%E5%A4%8D%E7%BB%93%E6%9E%9C.png" alt="在这里插入图片描述"></p><h3 id="4、创建数据"><a href="#4、创建数据" class="headerlink" title="4、创建数据"></a>4、创建数据</h3><p>配置完后点击“Create/Reset Database”</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/createdatabase.png" alt="成功创建数据库"></p><h3 id="5、登录靶机"><a href="#5、登录靶机" class="headerlink" title="5、登录靶机"></a>5、登录靶机</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/dvwa%E7%99%BB%E5%BD%95.png" alt="在这里插入图片描述"><br>DVWA的默认用户名和密码是admin /password<br>登录成功后就可以开始进行靶机的实验了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/DVWA%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.png" alt="在这里插入图片描述"><br>后续我们将通过Open-WAF来搭建一个WAF来防护这个靶机感受一下软waf的防护情况。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是DVWA&quot;&gt;&lt;a href=&quot;#一、什么是DVWA&quot; class=&quot;headerlink&quot; title=&quot;一、什么是DVWA&quot;&gt;&lt;/a&gt;一、什么是DVWA&lt;/h2&gt;&lt;p&gt;Damn Vulnerable Web Application (DVWA)(译注：
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之认识勒索病毒</title>
    <link href="https://xiejava.gitee.io/posts/8510060b/"/>
    <id>https://xiejava.gitee.io/posts/8510060b/</id>
    <published>2023-03-23T08:36:27.000Z</published>
    <updated>2023-03-23T09:18:30.816Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230323/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92.png" alt="勒索病毒"></p><h2 id="一、什么是勒索病毒"><a href="#一、什么是勒索病毒" class="headerlink" title="一、什么是勒索病毒"></a>一、什么是勒索病毒</h2><p>勒索病毒，是一种新型电脑病毒，伴随数字货币兴起，主要以邮件、程序木马、网页挂马、服务器入侵、捆绑软件等多种形式进行传播，一旦感染将给用户带来无法估量的损失。如果遭受勒索病毒攻击，将会使绝大多数文件被加密算法加密，并添加一个特殊的后缀，用户无法读取原文件内容，被感染者一般无法解密，必须拿到解密的私钥才有可能无损还原被加密文件。而拿到解密的私钥，通常需要向攻击者支付高昂的赎金，这些赎金必须是通过数字货币支付，一般无法溯源，因此极易造成严重损失。</p><p>一般被勒索病毒感染后，将导致重要文件无法读取、关键数据被损坏、计算机被锁死无法正常使用等情况；为了指引被感染者缴纳赎金，勒索病毒还会在桌面等明显位置生成勒索提示文件，被感染者需要通过缴纳高额赎金才能获取解密密钥恢复计算机系统和数据文件的正常使用，多数情况即使缴纳了高额的赎金也未必能正常恢复数据。因此，勒索病毒具有数据恢复代价大和数据恢复可能性极低的特点。</p><h2 id="二、勒索病毒传播路径"><a href="#二、勒索病毒传播路径" class="headerlink" title="二、勒索病毒传播路径"></a>二、勒索病毒传播路径</h2><p>常见勒索病毒传播途径包括：</p><ol><li>网站挂马。用户浏览挂有木马病毒的网站，上网终端计算机系统极可能被植入木马并感染上勒索病毒。</li><li>邮件传播。邮件传播是目前互联网上常见的病毒传播方式。攻击者通过利用当前热门字样，在互联网上撒网式发送垃圾邮件、钓鱼邮件，一旦收件人点开带有勒索病毒的链接或附件，勒索病毒就会在计算机后台静默运行，实施勒索。</li><li>漏洞传播。通过计算机操作系统和应用软件的漏洞攻击并植入病毒是近年来流行的病毒传播方式。最典型的案例是2017年在国内泛滥的WannaCry大规模勒索事件，攻击者正是利用微软445端口协议漏洞，进行感染传播网内计算机。</li><li>捆绑传播。攻击者将勒索病毒与其他软件尤其是盗版软件、非法破解软件、激活工具进行捆绑，从而诱导用户点击下载安装，并随着宿主文件的捆绑安装进而感染用户的计算机系统。</li><li>介质传播。攻击者通过提前植入或通过交叉使用感染等方式将携有勒索病毒的U盘、光盘等介质进行勒索病毒的移动式传播。此种传播途径往往发生在文印店、公共办公区域等高频交叉使用可移动存储介质的场所，也可能通过广告活动派发、街区丢弃等方式实现诱导用户使用携带勒索病毒的U盘、光盘。携带勒索病毒的光盘、U盘一旦接入计算机，勒索病毒即可能随着其自动运行或用户点击运行导致计算机被感染。</li></ol><h2 id="三、勒索病毒防护难点"><a href="#三、勒索病毒防护难点" class="headerlink" title="三、勒索病毒防护难点"></a>三、勒索病毒防护难点</h2><p>教育、企业、制造业、医疗、政府等行业由于数据重要性和较好的经济能力，已经成为勒索团队的重点攻击目标。以下是勒索病毒常见的攻击行为。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230323/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA.png" alt="勒索病毒攻击行为"></p><p>从勒索病毒的攻击行为来看，勒索病毒的防护存以下几个主要难点：</p><ul><li>勒索病毒变种多样 ：对程序 / 脚本的加壳、混淆操作，已经有一套相当成熟的自动化流程，能够快速对病毒进行变种，从而绕过传统静态防护。</li><li>边界突破手段多样：包括但不限于 RDP 爆破、SMB 爆破、漏洞利用、钓鱼邮件等等，其中爆破手段是最常使用的入侵手法。</li><li>防御规避手段多样：如无文件攻击、白进程利用、卸载安全服务等，从运营数据看 ,</li><li>采用黑客工具直接卸载终端安全服务、利用白进程进行加密的绕过手段是最为常见。</li><li>勒索病毒识别精准度不足：部分终端防护可以识别出“病毒”，但不能进一步识别出“勒索病毒”，未引起足够重视，导致后续攻击成功。</li></ul><h2 id="四、常见的勒索病毒"><a href="#四、常见的勒索病毒" class="headerlink" title="四、常见的勒索病毒"></a>四、常见的勒索病毒</h2><h3 id="1、GlobeImposter-勒索病毒"><a href="#1、GlobeImposter-勒索病毒" class="headerlink" title="1、GlobeImposter 勒索病毒"></a>1、GlobeImposter 勒索病毒</h3><p>Globelmposter3.0家族的变种采用RSA+AES算法加密，目前该勒索病毒加密的文件暂无解密工具，文件被加密后会被加上Ox4444、China4444、Help4444、Rat4444 、Tiger4444 、Rabbit4444、Dragon4444 、Snake4444 、Horse4444、Goat4444 、Monkey4444、Rooster4444、Dog4444等后缀。在被加密的目录下会生成一个名为”HOW_TO_BACK_FILES”的txt文件，显示受害者的个人ID序列号以及黑客的联系方式等。</p><p>GlobeImposter病毒本身不具备传播性。主要通过垃圾邮件和RDP暴破植入传播。</p><h3 id="2、GandCrab-勒索病毒"><a href="#2、GandCrab-勒索病毒" class="headerlink" title="2、GandCrab 勒索病毒"></a>2、GandCrab 勒索病毒</h3><p>GandCrab勒索病毒于2018年1月面世以来，短短一年内历经多次版本更新，目前最新的版本为V5。该病毒利用多种方式对企业网络进行攻击传播，受感染主机上的数据库、文档、图片、压缩包等文件将被加密，若没有相应数据或文件的备份，将会影响业务的正常运行。从2018年9月份V5版本面世以来，GandCrab出现了包括了5.0、5.0.2、5.0.3、5.0.4以及最新的5.0.5多个版本的变种。病毒采用Salsa20和RSA-2048算法对文件进行加密，并修改文件后缀为.GDCB、.GRAB、.KRAB或5-10位随机字母，勒索信息文件为GDCB-DECRYPT.txt、KRAB-DECRYPT.txt、[5-10随机字母]-DECRYPT.html\txt，并将感染主机桌面背景替换为勒索信息图片。</p><p>GandCrab病毒家族主要通过RDP暴力破解、钓鱼邮件、捆绑恶意软件、僵尸网络以及漏洞利用传播。病毒本身不具有蠕虫传播能力，但会通过枚举方式对网络共享资源进行加密，同时攻击者往往还会通过内网人工渗透方式，利用口令提取、端口扫描、口令爆破等手段对其他主机进行攻击并植入该病毒。主要影响Windows 系统</p><h3 id="3、Satan-变种病毒"><a href="#3、Satan-变种病毒" class="headerlink" title="3、Satan 变种病毒"></a>3、Satan 变种病毒</h3><p>撒旦（Satan）勒索病毒最开始可以追溯到2017年1月，当时病毒作者提供一个门户网站（RaaS，勒索软件即服务）允许任何人注册和创建撒旦勒索软件的自定义版本。<br>2017年11月左右，撒旦开发者开始更新勒索软件的计划，以更好地适应这些趋势。他们采取的第一步是在Satan程序中加入EternalBlue SMB漏洞的攻击和扫描模块。添加此漏洞意味着在撒旦感染计算机后，勒索软件将使用EternalBlue扫描本地网络，查找具有过时SMB服务的计算机并感染它们，从而最大限度地提高攻击效果。<br>2018年5月底出现了撒旦(Satan)勒索病毒的最新的变种，它不仅仅利用了永恒之蓝漏洞，还利用了多个WEB相关的漏洞进行传播。<br>2018年10月底MalwareHunterTeam发现了一款新型的Satan勒索病毒——DBGer勒索病毒。其属于撒旦(Satan)勒索病毒的最新的变种样本，不仅仅利用了之前的一些安全漏洞，同时还加上了Mimikatz的功能。其加密后的文件后缀名变为了.dbger。<br>2018年11月初，发现部分金融客户出现linux和windows跨平台的远控病毒样本，其样本行为与本次捕获样本极其相似。<br>2018年11月底，国内金融厂商开始出现Satan的最新变种，可以在Linux和Windows平台同时进行传播。将本地文件进行勒索加密，将加密后的文件名修改为.lucky。同时在Linux和Windows平台进行蠕虫式传播。</p><p>Satan病毒家族通过下面8种通用漏洞进行传播。目前发现Satan在linux平台会进行内部IP遍历+端口列表的方式进行漏洞扫描。在windows平台会以IP列表+端口列表的方式进行漏洞扫描。<br>JBoss反序列化漏洞(CVE-2013-4810)<br>JBoss默认配置漏洞(CVE-2010-0738)<br>Tomcat任意文件上传漏洞（CVE-2017-12615）<br>Tomcat web管理后台弱口令爆破<br>Weblogic WLS 组件漏洞（CVE-2017-10271）<br>Windows SMB远程代码执行漏洞MS17-010<br>Apache Struts2远程代码执行漏洞S2-045<br>Apache Struts2远程代码执行漏洞S2-057</p><h3 id="4、Sodinoki-勒索病毒"><a href="#4、Sodinoki-勒索病毒" class="headerlink" title="4、Sodinoki 勒索病毒"></a>4、Sodinoki 勒索病毒</h3><p>业内发现邮件附件中的恶意样本，经分析，样本为2019年6月新出的sodinokibi勒索病毒。该病毒以钓鱼邮件来传播，邮件附件中包含伪装成word文档的可执行文件，诱导员工打开附件，加密主机文件。<br>Sodinokibi勒索病毒暂无解密工具，可先将被加密的重要文件、勒索信息文件备份保存，以待将来有解密工具时解密。</p><h2 id="五、勒索病毒发展趋势"><a href="#五、勒索病毒发展趋势" class="headerlink" title="五、勒索病毒发展趋势"></a>五、勒索病毒发展趋势</h2><p>随着勒索技术的发展，勒索病毒呈现加密速度更快，跨平台发展的趋势。</p><ul><li>加密方式更多的转向“间歇性加密”，加密速度更快</li></ul><p>2021 年中旬，LockFile 勒索软件是首批使用间歇性加密来逃避检测机制的主要勒索软件系列之一，该勒索软件每隔 16 个字节对文件进行加密。此后，越来越多的勒索软件操作加入了这一趋势。如 BlackCat(ALPHV)、PLAY、Qyick、Agenda、Black Basta 等。间歇性加密指对受害者文件进行部分加密，这种加密方法不仅可以大大提高加密速度也可以帮助勒索软件运营商逃避基于统计分析的勒索软件检测技术。</p><ul><li>编程语言更多的转向Rust，实现跨平台勒索</li></ul><p>近年，越来越多的勒索软件编程语言转向 Rust 语言。该语言不仅具有与 C/C++ 类似的性能开发优势，而且具有更好的内存管理实现并发编程以避免内存错误，此外在静态分析工具低检出率方面也存在优势。BlackCat是第一个使用Rust的专业/商业化分布式恶意软件家族，也是迄今为止最繁荣的。<br>Rust 是一种跨平台语言，使威胁行为者能够轻松地为 Windows 和 Linux 等不同操作系统创建定制的恶意软件。现在有不少于 10 个勒索软件家族推出了针对 Linux 系统的版本，其中包括 REvil 的 Linux 版本、DarkSide、Dark Angels 、BlackMatter 以及 Defray777 等家族。勒索团伙倾向于以企业为目标，随着越来越多的组织将业务迁移到 VM 以简化设备管理和提高资源利用效率，将攻击目标转向 Linux 平台具有良好的商业意义，因为这样做可以让他们以最小的努力加密多个服务器。</p><h2 id="六、勒索病毒防护建议："><a href="#六、勒索病毒防护建议：" class="headerlink" title="六、勒索病毒防护建议："></a>六、勒索病毒防护建议：</h2><ol><li>定期做好重要数据、文件的备份工作；</li><li>及时更新升级操作系统和应用软件，修复存在的中高危漏洞；</li><li>安装正版杀毒软件并及时升级病毒库，定期进行全面病毒扫描查杀；</li><li>在系统中禁用U盘、移动硬盘、光盘的自动运行功能，不要使用/打开来路不明的U盘、光盘、电子邮件、网址链接、文件；</li><li>避免使用弱口令，为每台服务器和终端设置不同口令，且采用大小写字母、数字、特殊字符混合的高复杂度组合结构，口令位数应8位以上；</li><li>不要在网上下载安装盗版软件、非法破解软件以及激活工具。</li></ol><h2 id="七、勒索病毒应急处置流程"><a href="#七、勒索病毒应急处置流程" class="headerlink" title="七、勒索病毒应急处置流程"></a>七、勒索病毒应急处置流程</h2><h3 id="1、-检测阶段"><a href="#1、-检测阶段" class="headerlink" title="1、 检测阶段"></a>1、 检测阶段</h3><p>如何发现勒索病毒，可通过如下两个场景进行识别：</p><ul><li>场景一：感染但未加密<br>从攻击者渗透进入内部网络的某一台主机到执行加密行为往往有一段时间，如果在这段时间能够做出响应，完全可以避免勒索事件的发生。如果有以下情况，可能是处于感染未加密状态：</li></ul><ol><li>监测设备告警<br>如果使用了监测系统进行流量分析、威胁监测，系统产生大量告警日志，例如“SMB 远程溢出攻击”、“弱口令爆破”等，可能是病毒在尝试扩散。</li><li>资源占用异常<br>病毒会伪装成系统程序，释放攻击包、扫描局域网络 445 端口等占用大量系统资源，当发现某个疑似系统进程的进程在长期占用 CPU 或内存，有可能是感染病毒。</li></ol><ul><li>场景二：感染已加密<br>如果有以下情况，可能是处于感染且已加密状态：</li></ul><ol><li>统一的异常后缀<br>勒索病毒执行加密程序后会加密特定类型的文件，不同的勒索病毒会加密几十到几百种类型的文件，基本都会包括常见的文档、图片、数据库文件。当文件夹下文件变成如下统一异常不可用后缀，就是已经被加密了。</li><li>勒索信或桌面被篡改<br>勒索病毒加密文件的最终目的是索要赎金，所以会在系统明显位置如桌面上留下文件提示，或将勒索图片更改为桌面。勒索信绝大多数为英文，引导被勒索的用户交赎金。<h3 id="2、抑制阶段"><a href="#2、抑制阶段" class="headerlink" title="2、抑制阶段"></a>2、抑制阶段</h3>发现勒索病毒后如何进行隔离：</li></ol><ul><li>采取可行措施进行隔离，避免影响其它主机（如断网隔离）</li><li>通过边界控制设备，防止网络区域间相互影响</li></ul><p>防止勒索病毒扩散：</p><ul><li>采取及时的补救加固措施（安全加固）</li><li>相关漏洞的扫描修补与跟踪</li><li>配置核查<h3 id="3、处置阶段"><a href="#3、处置阶段" class="headerlink" title="3、处置阶段"></a>3、处置阶段</h3>信息收集：</li><li>IT管理人员截图取证主机中的勒索信息文件</li><li>截图取证被加密的时间和文件后缀名</li><li>检查服务器开放端口情况、补丁更新情况，并截图取证</li><li>检查服务器当日的安全日志，截图取证或导出当天日志<h3 id="4、-恢复阶段"><a href="#4、-恢复阶段" class="headerlink" title="4、 恢复阶段"></a>4、 恢复阶段</h3>业务恢复：</li><li>从备份中恢复损坏的数据 </li><li>调整可能影响业务正常运转的策略</li></ul><p>文件解密：</p><ul><li>付费风险：部分中招主机可能包含关键信息，企业处于业务考虑可能会考虑通过比特币付款，但不能确认付款可以恢复数据，建议企业慎重考虑。</li><li>解密工具：可查看安全厂商已发布部分勒索病毒的解密工具。<h3 id="5、安全加固"><a href="#5、安全加固" class="headerlink" title="5、安全加固"></a>5、安全加固</h3>通常应从如下方面进行加固：</li><li>多数勒索软件会利用RDP(远程桌面协议)暴力破解传播，在不影响业务的前提下避免3389端口对外开放。利用IPS、防火墙等设备对3389端口进行防护</li><li>开启windows自身的防火墙尽量关闭3389、445、139、135等不用的高危端口</li><li>在计算机中配置账户锁定策略，连续登陆失败即锁定账户</li><li>要求每台服务器设置唯一口令，且禁止设置弱口令（复杂度要求采用大小写字母、数字、特殊符号混合）</li><li>对员工进行安全意识培训，避免打开陌生邮件的附件、下载破解版软件和运行来源不明的程序</li><li>定时对重要数据进行异地备份，防止数据破坏和丢失</li><li>及时更新系统及应用版本，及时打漏洞补丁</li><li>及时安装防病毒软件，并更新到最新的病毒库和引擎</li><li>定时通过扫描器做专项口令排查，可排查通用口令和弱口令</li></ul><h2 id="部分公开的勒索相关解密工具"><a href="#部分公开的勒索相关解密工具" class="headerlink" title="部分公开的勒索相关解密工具"></a>部分公开的勒索相关解密工具</h2><p>公开的勒索病毒相关解密工具（Free Ransomware Decryption Tools），可供应急查询使用：<br>1、kaspersky<br>Free Ransomware Decryptors - Kaspersky Lab <a href="https://noransom.kaspersky.com/" target="_blank" rel="noopener">https://noransom.kaspersky.com/</a><br>2、avast<br>Free Ransomware Decryption Tools | Unlock Your Files | Avast<br><a href="https://www.avast.com/ransomware-decryption-tools" target="_blank" rel="noopener">https://www.avast.com/ransomware-decryption-tools</a><br>3、avg<br>Free Ransomware Decryption Tools | Unlock Your Files | AVG<br><a href="https://www.avg.com/en-us/ransomware-decryption-tools" target="_blank" rel="noopener">https://www.avg.com/en-us/ransomware-decryption-tools</a><br>4、No More Ransom<br>The No More Ransom Project<br><a href="https://www.nomoreransom.org/en/decryption-tools.html" target="_blank" rel="noopener">https://www.nomoreransom.org/en/decryption-tools.html</a><br>5、Bitdefender<br>Free Tools – Bitdefender Labs<br><a href="https://labs.bitdefender.com/category/free-tools/" target="_blank" rel="noopener">https://labs.bitdefender.com/category/free-tools/</a><br>6、MalwareHunter<br>ID Ransomware<br><a href="https://id-ransomware.malwarehunterteam.com/index.php" target="_blank" rel="noopener">https://id-ransomware.malwarehunterteam.com/index.php</a><br>7、McAfee<br>McAfee Ransomware Recover (Mr2) | McAfee Free Tools<br><a href="https://www.mcafee.com/enterprise/en-us/downloads/free-tools/ransomware-decryption.html" target="_blank" rel="noopener">https://www.mcafee.com/enterprise/en-us/downloads/free-tools/ransomware-decryption.html</a><br>8、 Trend Micro<br>Using the Trend Micro Ransomware File Decryptor Tool<br><a href="https://success.trendmicro.com/portal_kb_articledetail?solutionid=1114221" target="_blank" rel="noopener">https://success.trendmicro.com/portal_kb_articledetail?solutionid=1114221</a></p><hr><p>博客文章：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230323/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92.png&quot; alt=&quot;勒索病毒&quot;&gt;&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python日志logging实战教程</title>
    <link href="https://xiejava.gitee.io/posts/c24f493c/"/>
    <id>https://xiejava.gitee.io/posts/c24f493c/</id>
    <published>2023-03-19T06:21:31.000Z</published>
    <updated>2023-03-19T06:52:17.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是日志"><a href="#一、什么是日志" class="headerlink" title="一、什么是日志"></a>一、什么是日志</h2><p>在<a href="http://xiejava.ishareread.com/posts/6a8b36cb/" target="_blank" rel="noopener">《网络安全之认识日志采集分析审计系统》</a>中我们认识了日志。日志数据的核心就是日志消息或日志，日志消息是计算机系统、设备、软件等在某种刺激下反应生成的东西。</p><p>日志数据（log data）就是一条日志消息的内在含义，用来告诉你为什么生成日志消息的信息。日志（log）指用于展示某些事件全貌的日志消息的集合。</p><h2 id="二、为什么要写日志"><a href="#二、为什么要写日志" class="headerlink" title="二、为什么要写日志"></a>二、为什么要写日志</h2><p>日志是对软件执行时所发生事件的一种追踪方式。软件开发人员对他们的代码添加日志调用，借此来指示某事件的发生。一个事件通过一些包含变量数据的描述信息来描述。对于软件系统来说，健全的日志记录是程序调试、故障定位、事件追溯的有效手段。</p><p>日志通用的几种类型：</p><ul><li>信息（Info）:告诉用户和管理员发生了一些没有风险的事情。</li><li>调试（Debug）:在应用程序代码运行时生成调试信息，给软件开发人员提供故障检测和定位问题的帮助。</li><li>警告（Warning）:缺少需要的文件、参数、数据，但又不影响系统运行时生成警告。</li><li>错误（Error）:传达在计算机系统重出现的各种级别的错误。许多错误消息只能给出为什么出错的起点，要寻找出导致错误发生的根本原因还需要进一步的调查。</li></ul><h2 id="三、Python日志logging模块实战"><a href="#三、Python日志logging模块实战" class="headerlink" title="三、Python日志logging模块实战"></a>三、Python日志logging模块实战</h2><p>在进行Python程序开发时，Python提供了logging模块，能够很好的帮助开发人员很方便的的记录日志信息。</p><p>对于简单的日志使用来说日志功能提供了一系列便利的函数。它们是 debug()，info()，warning()，error() 和 critical()。想要决定何时使用日志，请看下表，其中显示了对于每个通用任务集合来说最好的工具。</p><table><thead><tr><th>你想要执行的任务</th><th>此任务的最好的工具</th></tr></thead><tbody><tr><td>对于命令行或程序的应用，结果显示在控制台。</td><td>print()</td></tr><tr><td>在对程序的普通操作发生时提交事件报告(比如：状态监控和错误调查)</td><td>logging.info() 函数(当有诊断目的需要详细输出信息时使用 logging.debug() 函数)</td></tr><tr><td>提出一个警告信息基于一个特殊的运行时事件</td><td>warnings.warn() 位于代码库中，该事件是可以避免的，需要修改客户端应用以消除告警logging.warning() 不需要修改客户端应用，但是该事件还是需要引起关注</td></tr><tr><td>对一个特殊的运行时事件报告错误</td><td>引发异常</td></tr><tr><td>报告错误而不引发异常(如在长时间运行中的服务端进程的错误处理)</td><td>logging.error(), logging.exception() 或 logging.critical() 分别适用于特定的错误及应用领域</td></tr></tbody></table><p>日志功能应以所追踪事件级别或严重性而定。各级别适用性如下（以严重性递增）：</p><table><thead><tr><th>级别</th><th>何时使用</th></tr></thead><tbody><tr><td>DEBUG</td><td>细节信息，仅当诊断问题时适用。</td></tr><tr><td>INFO</td><td>确认程序按预期运行。</td></tr><tr><td>WARNING</td><td>表明有已经或即将发生的意外（例如：磁盘空间不足）。程序仍按预期进行。</td></tr><tr><td>ERROR</td><td>由于严重的问题，程序的某些功能已经不能正常执行</td></tr><tr><td>CRITICAL</td><td>严重的错误，表明程序已不能继续执行</td></tr></tbody></table><p>默认的级别是 WARNING，意味着只会追踪该级别及以上的事件，除非更改日志配置。</p><p>所追踪事件可以以不同形式处理。最简单的方式是输出到控制台。另一种常用的方式是写入磁盘文件。</p><p>Python的logging库采用模块化方法，并提供了几类组件：记录器，处理程序，过滤器和格式化程序。</p><ul><li>记录器（Logger）：提供应用程序代码直接使用的接口。 </li><li>处理器（Handler）：将日志记录（由记录器创建）发送到适当的目的地。</li><li>筛选器（Filter）：提供了更细粒度的功能，用于确定要输出的日志记录。 </li><li>格式器（Formatter）：程序在最终输出日志记录的内容格式。</li></ul><p>logging的工作流程：以记录器Logger为对象，设置合适的处理器Handler，辅助以筛选器Filter、格式器Formatter，设置日志级别以及常用的方法，最终输出理想的日志记录给到指定目标<br>一个Logger可以包含多个Handler；<br>每个Handler可以设置自己的Filter和Formatter；<br>记录器和处理器中的日志事件信息流程如下图所示：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/1_logging%E6%B5%81%E7%A8%8B.png" alt="日志事件信息流程"></p><p>接下来我们通过几个简单的应用场景来进行日志记录实战</p><h3 id="1、最简单的日志记录"><a href="#1、最简单的日志记录" class="headerlink" title="1、最简单的日志记录"></a>1、最简单的日志记录</h3><p><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span>:</span></span><br><span class="line">    logging.debug(<span class="string">'this is print_hi debug'</span>)</span><br><span class="line">    logging.info(<span class="string">'this is print_hi info'</span>)</span><br><span class="line">    logging.warning(<span class="string">'this is print_hi warning'</span>)</span><br><span class="line">    logging.error(<span class="string">'this is print_hi error'</span>)</span><br><span class="line">    logging.critical(<span class="string">'this is print_hi critical'</span>)</span><br><span class="line">    print(<span class="string">f'Hi print_hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_hi(<span class="string">'XieJava'</span>)</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/2_%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C.png" alt="最简单的日志记录结果"></p><p>这里体现了两个问题：<br>1.通过print()在控制台打印的日志，比logging打印的日志提前打印显示，说明日志记录是多线程的。在平时日志调试跟踪的时候注意这一点，print()的信息有时会打印在logging前有时会在logging后。</p><p>2.debug和info的日志没有打印出来，说明logging默认的日志级别是waring。<br>如果要设置改变默认的日志级别可以通过配置来设置日志级别如：level=logging.DEBUG</p><h3 id="2、设置日志级别"><a href="#2、设置日志级别" class="headerlink" title="2、设置日志级别"></a>2、设置日志级别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG) <span class="comment">#设置日志级别</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span>:</span></span><br><span class="line">    logging.debug(<span class="string">'this is print_hi debug'</span>)</span><br><span class="line">    logging.info(<span class="string">'this is print_hi info'</span>)</span><br><span class="line">    logging.warning(<span class="string">'this is print_hi warning'</span>)</span><br><span class="line">    logging.error(<span class="string">'this is print_hi error'</span>)</span><br><span class="line">    logging.critical(<span class="string">'this is print_hi critical'</span>)</span><br><span class="line">    print(<span class="string">f'Hi print_hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_hi(<span class="string">'XieJava'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/3_%E8%AE%BE%E7%BD%AE%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BB%93%E6%9E%9C.png" alt="设置日志级别结果"></p><p>这下从DEBUG到CRITICAL级别的都打印出来了。</p><h3 id="3、设置日志显示格式"><a href="#3、设置日志显示格式" class="headerlink" title="3、设置日志显示格式"></a>3、设置日志显示格式</h3><p>默认的日志打印显示的格式是， 日志级别：logger实例名称（默认是root）：日志消息内容<br>如这里显示的是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is print_hi debug</span><br><span class="line">INFO:root:this is print_hi info</span><br><span class="line">WARNING:root:this is print_hi warning</span><br><span class="line">ERROR:root:this is print_hi error</span><br><span class="line">CRITICAL:root:this is print_hi critical</span><br></pre></td></tr></table></figure><p>在真实使用的场景下，一般都要显示日志的时间，我们可以通过设置日志显示格式来调整我们需要显示的日志格式和内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG)</span><br></pre></td></tr></table></figure><p>这里设置了日志发生时间、日志级别、logger实例名称、日志发生的文件名、日志发生所在的行、日志消息内容。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/4_%E8%AE%BE%E7%BD%AE%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F.png" alt="设置日志格式"></p><p>更多的logRecord属性如下：</p><table><thead><tr><th>属性名称</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>args</td><td>此属性不需要用户进行格式化。</td><td>合并到 msg 以产生 message 的包含参数的元组，或是其中的值将被用于合并的字典（当只有一个参数且其类型为字典时）。</td></tr><tr><td>asctime</td><td>%(asctime)s</td><td>表示 LogRecord 何时被创建的供人查看时间值。 默认形式为 ‘2003-07-08 16:49:45,896’ （逗号之后的数字为时间的毫秒部分）。</td></tr><tr><td>created</td><td>%(created)f</td><td>LogRecord 被创建的时间（即 time.time() 的返回值）。</td></tr><tr><td>exc_info</td><td>此属性不需要用户进行格式化。</td><td>异常元组（例如 sys.exc_info）或者如未发生异常则为 None。</td></tr><tr><td>filename</td><td>%(filename)s</td><td>pathname 的文件名部分。</td></tr><tr><td>funcName</td><td>%(funcName)s</td><td>函数名包括调用日志记录。</td></tr><tr><td>levelname</td><td>%(levelname)s</td><td>消息文本记录级别（’DEBUG’，’INFO’，’WARNING’，’ERROR’，’CRITICAL’）</td></tr><tr><td>levelno</td><td>%(levelno)s</td><td>消息数字的记录级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)</td></tr><tr><td>lineno</td><td>%(lineno)d</td><td>发出日志记录调用所在的源行号（如果可用）。</td></tr><tr><td>message</td><td>%(message)s</td><td>记入日志的消息，即 msg % args 的结果。 这是在发起调用 Formatter.format() 时设置的。</td></tr><tr><td>module</td><td>%(module)s</td><td>模块 (filename 的名称部分)。</td></tr><tr><td>msecs</td><td>%(msecs)d</td><td>LogRecord 被创建的时间的毫秒部分。</td></tr><tr><td>msg</td><td>此属性不需要用户进行格式化。</td><td>在原始日志记录调用中传入的格式字符串。 与 args 合并以产生 message，或是一个任意对象 (参见 使用任意对象作为消息)。</td></tr><tr><td>name</td><td>%(name)s</td><td>用于记录调用的日志记录器名称。</td></tr><tr><td>pathname</td><td>%(pathname)s</td><td>发出日志记录调用的源文件的完整路径名（如果可用）。</td></tr><tr><td>process</td><td>%(process)d</td><td>进程ID（如果可用）</td></tr><tr><td>processName</td><td>%(processName)s</td><td>进程名（如果可用）</td></tr><tr><td>relativeCreated</td><td>%(relativeCreated)d</td><td>以毫秒数表示的 LogRecord 被创建的时间，即相对于 logging 模块被加载时间的差值。</td></tr><tr><td>stack_info</td><td>此属性不需要用户进行格式化。</td><td>当前线程中从堆栈底部起向上直到包括日志记录调用并引发创建当前记录堆栈帧创建的堆栈帧信息（如果可用）。</td></tr><tr><td>thread</td><td>%(thread)d</td><td>线程ID（如果可用）</td></tr><tr><td>threadName</td><td>%(threadName)s</td><td>线程名（如果可用）</td></tr></tbody></table><h3 id="4、记录日志到日志文件"><a href="#4、记录日志到日志文件" class="headerlink" title="4、记录日志到日志文件"></a>4、记录日志到日志文件</h3><p>logging默认是显示在控制台，在真实生产环境肯定时需要将日志记录到日志文件的。logging也是可以通过配置很方便的将日志记录到日志文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">'log.log'</span>,format=LOG_FORMAT,level=logging.DEBUG)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/5_%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E5%88%B0%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" alt="输出到日志文件中"><br>输出到日志文件<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/6_%E8%BE%93%E5%87%BA%E5%88%B0%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%95%88%E6%9E%9C.png" alt="输出到日志文件效果"><br>将日志输出到日志文件，如果是日志量非常大，在实际生产环境经常碰到的是要对日志文件进行分隔，根据日志文件的大小或日期来分割生成多个日志文件。<br>这里介绍通过日志文件大小分割和通过日期来分割日志文件。</p><h4 id="1-通过日志文件大小分割"><a href="#1-通过日志文件大小分割" class="headerlink" title="1.通过日志文件大小分割"></a>1.通过日志文件大小分割</h4><p>RotatingFileHandler<br>日志记录到文件中，且支持指定日志文件大小，备份文件数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.handlers.RotatingFileHandler(filename, mode=<span class="string">'a'</span>, maxBytes=<span class="number">0</span>, backupCount=<span class="number">0</span>, encoding=<span class="literal">None</span>, delay=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>maxBytes：日志文件大小，单位为字节<br>backupCount：备份文件数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">rfh=logging.handlers.RotatingFileHandler(filename=<span class="string">'log.log'</span>,encoding=<span class="string">'UTF-8'</span>, maxBytes=<span class="number">1024</span>, backupCount=<span class="number">2</span>)</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG,handlers=[rfh])</span><br></pre></td></tr></table></figure><p>这里设置的是当文件超过1024bytes就会对文件进行分割，备份文件数量为2，得到log.log.1、log.log.2，当log.log.2写满时又回循环写到log.log中。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/7_%E6%A0%B9%E6%8D%AE%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E5%BE%AA%E7%8E%AF%E5%88%87%E5%89%B2%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" alt="根据日志文件大小循环切割生成日志文件"></p><h4 id="2-通过日期来分割日志文件"><a href="#2-通过日期来分割日志文件" class="headerlink" title="2.通过日期来分割日志文件"></a>2.通过日期来分割日志文件</h4><p>TimedRotatingFileHandler<br>日志记录到文件中，支持按时间间隔来更新日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.handlers.TimedRotatingFileHandler(filename, when=<span class="string">'h'</span>, interval=<span class="number">1</span>, backupCount=<span class="number">0</span>, encoding=<span class="literal">None</span>, delay=<span class="literal">False</span>, utc=<span class="literal">False</span>, atTime=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>指定的文件会被打开并用作日志记录的流。 对于轮换操作它还会设置文件名前缀。 轮换的发生是基于 when 和 interval 的积。<br>你可以使用 when 来指定 interval 的类型。 可能的值列表如下。 请注意它们不是大小写敏感的。</p><table><thead><tr><th>值</th><th>间隔类型</th><th>如果/如何使用 atTime</th></tr></thead><tbody><tr><td>‘S’</td><td>秒</td><td>忽略</td></tr><tr><td>‘M’</td><td>分钟</td><td>忽略</td></tr><tr><td>‘H’</td><td>小时</td><td>忽略</td></tr><tr><td>‘D’</td><td>天</td><td>忽略</td></tr><tr><td>‘W0’-‘W6’</td><td>工作日(0=星期一)</td><td>用于计算初始轮换时间</td></tr><tr><td>‘midnight’</td><td>如果未指定 atTime 则在午夜执行轮换，否则将使用 atTime。</td><td>用于计算初始轮换时间</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">tfh=logging.handlers.TimedRotatingFileHandler(<span class="string">'tfh_log.log'</span>, when=<span class="string">'S'</span>, interval=<span class="number">1.5</span>, backupCount=<span class="number">2</span>, encoding=<span class="string">'UTF-8'</span>, delay=<span class="literal">False</span>, utc=<span class="literal">False</span>, atTime=time)</span><br><span class="line">rfh=logging.handlers.RotatingFileHandler(filename=<span class="string">'log.log'</span>,encoding=<span class="string">'UTF-8'</span>, maxBytes=<span class="number">1024</span>, backupCount=<span class="number">2</span>)</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG,handlers=[rfh,tfh])</span><br></pre></td></tr></table></figure><p>为了演示方便，这里when=’S’, interval=1.5 即1.5秒循环生成一个日志文件。在实际生产环境一般根据日志量的大小，可以配置成每天生成一个日志文件。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/8_%E6%A0%B9%E6%8D%AE%E6%97%A5%E6%9C%9F%E5%88%87%E5%89%B2%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" alt="通过日期来分割日志文件"></p><h3 id="5、既生成日志文件又在控制台打印日志"><a href="#5、既生成日志文件又在控制台打印日志" class="headerlink" title="5、既生成日志文件又在控制台打印日志"></a>5、既生成日志文件又在控制台打印日志</h3><p>有时候为了调试方便，还是想在控制台打印日志。能不能既生成日志文件又在控制台打印日志呢？通过配置logging的StreamHandler也是可以做到的。<br>StreamHandler<br>StreamHandler 类位于核心 logging 包，它可将日志记录输出发送到数据流例如 sys.stdout, sys.stderr 或任何文件类对象（或者更精确地说，任何支持 write() 和 flush() 方法的对象）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh=logging.StreamHandler()</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG,handlers=[rfh,tfh,sh])</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/9_%E6%97%A2%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8F%88%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97.png" alt="既生成日志文件又在控制台打印日志"></p><h3 id="6、多个模块中记录日志"><a href="#6、多个模块中记录日志" class="headerlink" title="6、多个模块中记录日志"></a>6、多个模块中记录日志</h3><p>在实际项目使用过程中，一个好的实践是将日志配置的模块封装好成为一个通用的日志模块组件，可以给项目中所有的模块使用。<br>这里我们将配置好的日志logging从main.py中抽出来形成一个logutils.py的通用模块，其他模块就可以使用了<br><strong>logutils.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">tfh=logging.handlers.TimedRotatingFileHandler(<span class="string">'tfh_log.log'</span>, when=<span class="string">'S'</span>, interval=<span class="number">1.5</span>, backupCount=<span class="number">2</span>, encoding=<span class="string">'UTF-8'</span>, delay=<span class="literal">False</span>, utc=<span class="literal">False</span>, atTime=time)</span><br><span class="line">rfh=logging.handlers.RotatingFileHandler(filename=<span class="string">'log.log'</span>,encoding=<span class="string">'UTF-8'</span>, maxBytes=<span class="number">1024</span>, backupCount=<span class="number">2</span>)</span><br><span class="line">sh=logging.StreamHandler()</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG,handlers=[rfh,tfh,sh])</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/10_logutils.png" alt="公共日志模块"></p><p>如在othermodule.py中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logutils <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestModule</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.info(<span class="string">'this is TestModule.print_log() info'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log_staic</span><span class="params">()</span>:</span></span><br><span class="line">        logging.info(<span class="string">'this is TestModule.print_log_staic info'</span>)</span><br></pre></td></tr></table></figure><p>在main.py中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logutils <span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> othermodule <span class="keyword">import</span> TestModule</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span>:</span></span><br><span class="line">    logging.debug(<span class="string">'this is print_hi debug'</span>)</span><br><span class="line">    logging.info(<span class="string">'this is print_hi info'</span>)</span><br><span class="line">    logging.warning(<span class="string">'this is print_hi warning'</span>)</span><br><span class="line">    logging.error(<span class="string">'this is print_hi error'</span>)</span><br><span class="line">    logging.critical(<span class="string">'this is print_hi critical'</span>)</span><br><span class="line">    print(<span class="string">f'Hi print_hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_hi(<span class="string">'XieJava'</span>)</span><br><span class="line">    TestModule.print_log_staic() <span class="comment">#类方法中打印日志</span></span><br><span class="line">    testModule=TestModule()</span><br><span class="line">    testModule.print_log()  <span class="comment">#实例方法中打印日志</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/11_%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97.png" alt="其他模块中显示日志"></p><p>项目工程中所有的模块只要通过 <code>from logutils import logging</code> 引入logging就可以使用配置好的logging记录日志了。</p><h3 id="7、每个不同的模块使用不同的日志记录器记录日志"><a href="#7、每个不同的模块使用不同的日志记录器记录日志" class="headerlink" title="7、每个不同的模块使用不同的日志记录器记录日志"></a>7、每个不同的模块使用不同的日志记录器记录日志</h3><p>现在我们在所有的模块中都是用的默认的root记录器来记录的日志，实际上也可以让每个不同的模块使用不同的日志记录器记录日志。<br>日志事件信息在 LogRecord 实例中的记录器、处理器、过滤器和格式器之间传递。<br>通过调用 Logger 类（以下称为 loggers ， 记录器）的实例来执行日志记录。<br>在命名记录器时使用的一个好习惯是在每个使用日志记录的模块中使用模块级记录器，命名如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure><p>这意味着记录器名称跟踪包或模块的层次结构，并且直观地从记录器名称显示记录事件的位置。<br>记录器层次结构的根称为根记录器。 这是函数 debug() 、 info() 、 warning() 、 error() 和 critical() 使用的记录器，它们就是调用了根记录器的同名方法。 函数和方法具有相同的签名。 根记录器的名称在输出中打印为 ‘root’ 。<br>实际上我们只要通过 <code>logger = logging.getLogger(__name__)</code> 给每个模块定义一个记录器就可以了。<br><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logutils <span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> othermodule <span class="keyword">import</span> TestModule</span><br><span class="line">logger=logging.getLogger(__name__)  <span class="comment">#定义模块日志记录器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span>:</span></span><br><span class="line">    logger.debug(<span class="string">'this is print_hi debug'</span>)</span><br><span class="line">    logger.info(<span class="string">'this is print_hi info'</span>)</span><br><span class="line">    logger.warning(<span class="string">'this is print_hi warning'</span>)</span><br><span class="line">    logger.error(<span class="string">'this is print_hi error'</span>)</span><br><span class="line">    logger.critical(<span class="string">'this is print_hi critical'</span>)</span><br><span class="line">    print(<span class="string">f'Hi print_hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_hi(<span class="string">'XieJava'</span>)</span><br><span class="line">    TestModule.print_log_staic() <span class="comment">#类方法中打印日志</span></span><br><span class="line">    testModule=TestModule()</span><br><span class="line">    testModule.print_log()  <span class="comment">#实例方法中打印日志</span></span><br></pre></td></tr></table></figure><p><strong>othermodule.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logutils <span class="keyword">import</span> logging</span><br><span class="line">logger=logging.getLogger(__name__) <span class="comment">#定义模块日志记录器</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestModule</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        logger.info(<span class="string">'this is TestModule.print_log() info'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log_staic</span><span class="params">()</span>:</span></span><br><span class="line">        logger.info(<span class="string">'this is TestModule.print_log_staic info'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/12_%E6%AF%8F%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%99%A8%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97.png" alt="每个不同的模块使用不同的日志记录器记录日志"><br>可以看到模块日志记录器打印出来的日志中模块名不再是默认的root，而是各自的模块名。</p><h3 id="8、通过配置文件配置日志记录器"><a href="#8、通过配置文件配置日志记录器" class="headerlink" title="8、通过配置文件配置日志记录器"></a>8、通过配置文件配置日志记录器</h3><p>在实际项目应用的过程中，通常通过配置文件来配置日志记录器的各种配置，这样的好处就是改变日志记录的配置不需要修改代码，直接修改配置文件就可以了。<br>接下来介绍如何通过配置文件配置logging日志记录器<br>新建 logging.conf 配置文件，通过如下配置将前面代码中的处理器，日志记录器，通过配置文件的方式配置好。<br> <strong>logging.conf</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys=root,logger01</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=sh</span><br><span class="line"></span><br><span class="line">[logger_logger01]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=sh,tfh,rfh</span><br><span class="line">qualname=logger01</span><br><span class="line">propagate=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=sh,tfh,rfh</span><br><span class="line"></span><br><span class="line">[handler_sh]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(sys.stderr,)</span><br><span class="line"></span><br><span class="line">[handler_tfh]</span><br><span class="line">class=handlers.TimedRotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(<span class="string">'tfh_log.log'</span>,<span class="string">'S'</span>,<span class="number">1.5</span>,<span class="number">2</span>,)</span><br><span class="line"></span><br><span class="line">[handler_rfh]</span><br><span class="line">class=handlers.RotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(<span class="string">'log.log'</span>,<span class="string">'a'</span>,<span class="number">1024</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=form01</span><br><span class="line"></span><br><span class="line">[formatter_form01]</span><br><span class="line">format=%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s</span><br></pre></td></tr></table></figure><p>在logutils.py中应用配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line">logging.config.fileConfig(<span class="string">"logging.conf"</span>)</span><br></pre></td></tr></table></figure><p>logutils.py中的代码就异常简单了，应为原来通过代码实现的配置，都写到了logging.conf配置文件中了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/12_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B8%80%E6%A0%B7%E7%9A%84%E5%8A%9F%E8%83%BD.png" alt="配置文件实现了日志代码中的功能"></p><p>这里要注意的是，在应用日志记录器的时候，需要引用配置文件中配置的记录器，如配置文件中配置了root和logger01，在应用的时候可以引用这两个记录器，当然也可以在配置文件中配置更多的记录器。<br>在mian.py和othermodule.py中应用日志记录器的时候，需要注意记录器用要配置文件中定义的记录器，这里是logger01。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger=logging.getLogger(<span class="string">'logger01'</span>)  <span class="comment">#定义模块日志记录器</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/13_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C%E5%BC%95%E7%94%A8%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%99%A8.png" alt="定义模块日志记录器"></p><h3 id="8、日志中中文显示"><a href="#8、日志中中文显示" class="headerlink" title="8、日志中中文显示"></a>8、日志中中文显示</h3><p>当日志信息中有中文的时候，在控制台输出会自动的转码，但有时在文件输出的时候会出现乱码。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/14_%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E6%B2%A1%E9%97%AE%E9%A2%98.png" alt="中文信息控制台输出没有问题"></p><p>控制台输出中文，但日志文件中是乱码。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/15_%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E4%B8%AD%E4%B9%B1%E7%A0%81.png" alt="日志文件中是乱码"></p><p>对照python官方说明文档设置编码，设置处理器的编码为UTF-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[handler_tfh]</span><br><span class="line">class=handlers.TimedRotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(<span class="string">'tfh_log.log'</span>,<span class="string">'S'</span>,<span class="number">1.5</span>,<span class="number">2</span>,<span class="string">'UTF-8'</span>)</span><br><span class="line"></span><br><span class="line">[handler_rfh]</span><br><span class="line">class=handlers.RotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(<span class="string">'log.log'</span>,<span class="string">'a'</span>,<span class="number">1024</span>,<span class="number">2</span>,<span class="string">'UTF-8'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/16_%E8%AE%BE%E7%BD%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="配置文件的参数"><br>现在重新执行main.py，可以看到日志文件中可以正常显示中文。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/17_%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87.png" alt="日志文件显示中文"></p><p>至此，我们从一个简单的日志记录实战，一步一步实现了自定义日志格式、写日志文件、抽出公共日志模块让其他模块用、同时写多个日志文件并进行日志文件切割、通过配置文件实现日志参数的定义、解决日志中文显示问题。基本覆盖了真实应用场景日志的使用。</p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是日志&quot;&gt;&lt;a href=&quot;#一、什么是日志&quot; class=&quot;headerlink&quot; title=&quot;一、什么是日志&quot;&gt;&lt;/a&gt;一、什么是日志&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://xiejava.ishareread.com/posts/6a8b
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python实现简单信号滤波实战</title>
    <link href="https://xiejava.gitee.io/posts/3918ce28/"/>
    <id>https://xiejava.gitee.io/posts/3918ce28/</id>
    <published>2023-03-13T07:19:26.000Z</published>
    <updated>2023-03-13T07:24:32.665Z</updated>
    
    <content type="html"><![CDATA[<p>在有些项目中需要对信号进行滤波处理，尤其是在医疗的设备中如心跳、脉搏等设备的采样后进行处理。滤波的目的就是除去某些频率的信号如噪声。常见的包括有低通滤波、高通滤波、带通滤波。</p><p>低通滤波指的是去除高于某一阈值频率的信号；高通滤波去除低于某一频率的信号；带通滤波指的是类似低通高通的结合保留中间频率信号；带阻滤波也是低通高通的结合只是过滤掉的是中间部分。通过滤波可以过滤到一些无用的噪音，得到的比较平滑的波形，用来进行分析。</p><p>scipy模块提供了常用简单的信号滤波方法包括低通滤波、高通滤波、带通滤波、带阻滤波等。</p><h2 id="一、scipy信号滤波函数介绍"><a href="#一、scipy信号滤波函数介绍" class="headerlink" title="一、scipy信号滤波函数介绍"></a>一、scipy信号滤波函数介绍</h2><ol><li>滤波器构造函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.signal.butter(N, Wn, btype=<span class="string">'low'</span>, analog=<span class="literal">False</span>, output=<span class="string">'ba'</span>)</span><br></pre></td></tr></table></figure><p> 输入参数：<br> N:滤波器的阶数<br> Wn：归一化截止频率。计算公式Wn=2*截止频率/采样频率。（注意：根据采样定理，采样频率要大于两倍的信号本身最大的频率，才能还原信号。截止频率一定小于信号本身最大的频率，所以Wn一定在0和1之间）。当构造带通滤波器或者带阻滤波器时，Wn为长度为2的列表。<br> btype : 滤波器类型{‘lowpass’, ‘highpass’, ‘bandpass’, ‘bandstop’},<br> output : 输出类型{‘ba’, ‘zpk’, ‘sos’},<br> 输出参数：<br> b，a: IIR滤波器的分子（b）和分母（a）多项式系数向量。output=’ba’<br> z,p,k: IIR滤波器传递函数的零点、极点和系统增益. output= ‘zpk’<br> sos: IIR滤波器的二阶截面表示。output= ‘sos’</p><ol start="2"><li>滤波函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.signal.filtfilt(b, a, x, axis=<span class="number">-1</span>, padtype=<span class="string">'odd'</span>, padlen=<span class="literal">None</span>, method=<span class="string">'pad'</span>, irlen=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p> 输入参数：<br> b: 滤波器的分子系数向量<br> a: 滤波器的分母系数向量<br> x: 要过滤的数据数组。（array型）<br> axis: 指定要过滤的数据数组x的轴<br> padtype: 必须是“奇数”、“偶数”、“常数”或“无”。这决定了用于过滤器应用的填充信号的扩展类型。{‘odd’, ‘even’, ‘constant’, None}<br> padlen：在应用滤波器之前在轴两端延伸X的元素数目。此值必须小于要滤波元素个数- 1。（int型或None）<br> method：确定处理信号边缘的方法。当method为“pad”时，填充信号；填充类型padtype和padlen决定，irlen被忽略。当method为“gust”时，使用古斯塔夫森方法，而忽略padtype和padlen。{“pad” ，“gust”}<br> irlen：当method为“gust”时，irlen指定滤波器的脉冲响应的长度。如果irlen是None，则脉冲响应的任何部分都被忽略。对于长信号，指定irlen可以显著改善滤波器的性能。（int型或None）<br> 输出参数：<br> y:滤波后的数据数组</p><h2 id="二、代码介绍"><a href="#二、代码介绍" class="headerlink" title="二、代码介绍"></a>二、代码介绍</h2><p>scipy模块signal滤波器类型包括低通滤波、高通滤波、带通滤波、带阻滤波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pip install scipy</span><br><span class="line"><span class="comment">#低通滤波</span></span><br><span class="line"><span class="comment">#假设采样频率为1000hz,信号本身最大的频率为500hz，要滤除400hz以上频率成分，即截至频率为400hz,则wn=2*400/1000=0.8。Wn=0.8</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, <span class="number">0.8</span>, <span class="string">'lowpass'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, data)  <span class="comment">#data为要过滤的信号</span></span><br><span class="line"><span class="comment">#高通滤波</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, <span class="number">0.2</span>, <span class="string">'highpass'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, data)  <span class="comment">#data为要过滤的信号</span></span><br><span class="line"><span class="comment">#带通滤波</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, [<span class="number">0.2</span>,<span class="number">0.8</span>], <span class="string">'bandpass'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, data)  <span class="comment">#data为要过滤的信号</span></span><br><span class="line"><span class="comment">#带阻滤波</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, [<span class="number">0.2</span>,<span class="number">0.8</span>], <span class="string">'bandstop'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, data)  <span class="comment">#data为要过滤的信号</span></span><br></pre></td></tr></table></figure><h2 id="三、信号滤波实战"><a href="#三、信号滤波实战" class="headerlink" title="三、信号滤波实战"></a>三、信号滤波实战</h2><p>这里以一个真实的心电数据为例，来实战对心电图某一段时间采样的信号数据进行高通滤波处理，对比一下原始的信号和高通滤波后的信号波形，然后输出成图片文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引入包</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> signal</span><br><span class="line"><span class="comment">#读取心电图数据文件</span></span><br><span class="line">bspfile=<span class="string">'data/1.txt'</span></span><br><span class="line">bsp_f = open(bspfile, <span class="string">"r"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">bsp_content = bsp_f.read()</span><br><span class="line">ary=bsp_content.split(<span class="string">' '</span>)</span><br><span class="line">ary=[float(s) <span class="keyword">for</span> s <span class="keyword">in</span> bsp_content.split(<span class="string">' '</span>)]</span><br><span class="line">ary_data=ary[<span class="number">0</span>:<span class="number">10000</span>] <span class="comment">#取前10秒数据</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, <span class="number">0.3</span>, <span class="string">'highpass'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line"><span class="comment">#绘图</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, ary_data)  <span class="comment">#data为要过滤的信号</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">32</span>, <span class="number">4</span>))</span><br><span class="line">axes[<span class="number">0</span>].plot(ary_data)</span><br><span class="line">axes[<span class="number">0</span>].set(title=<span class="string">'Source signal'</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(filtedData)</span><br><span class="line">axes[<span class="number">1</span>].set(title=<span class="string">'highpass signal'</span>)</span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">plt.savefig(<span class="string">'./signal1.png'</span>, <span class="comment"># ⽂件名：png、jpg、pdf</span></span><br><span class="line">dpi = <span class="number">80</span>, <span class="comment"># 保存图⽚像素密度</span></span><br><span class="line">bbox_inches = <span class="string">'tight'</span>)<span class="comment"># 保存图⽚完整</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230313/signal1.png" alt="心电图高通滤波后的效果"></p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><p>微信公众号：fullbug  关注微信公众号，回复“信号滤波”获取全部代码+数据集</p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在有些项目中需要对信号进行滤波处理，尤其是在医疗的设备中如心跳、脉搏等设备的采样后进行处理。滤波的目的就是除去某些频率的信号如噪声。常见的包括有低通滤波、高通滤波、带通滤波。&lt;/p&gt;
&lt;p&gt;低通滤波指的是去除高于某一阈值频率的信号；高通滤波去除低于某一频率的信号；带通滤波指
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="数据处理" scheme="https://xiejava.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之认识日志采集分析审计系统</title>
    <link href="https://xiejava.gitee.io/posts/6a8b36cb/"/>
    <id>https://xiejava.gitee.io/posts/6a8b36cb/</id>
    <published>2023-03-10T09:12:22.000Z</published>
    <updated>2023-03-10T09:26:08.538Z</updated>
    
    <content type="html"><![CDATA[<p>日志对于大家来说非常熟悉，机房中的各种系统、防火墙、交换机、路由器等等，都在不断地产生日志。无数实践告诉我们，健全的日志记录和分析系统是系统正常运营与优化以及安全事故响应的基础。我们一起来认识日志采集分析审计系统。</p><h2 id="一、什么是日志数据"><a href="#一、什么是日志数据" class="headerlink" title="一、什么是日志数据"></a>一、什么是日志数据</h2><h3 id="1、日志的概念"><a href="#1、日志的概念" class="headerlink" title="1、日志的概念"></a>1、日志的概念</h3><p>日志数据的核心就是日志消息或日志，日志消息是计算机系统、设备、软件等在某种刺激下反应生成的东西。例如：Linux用户登录和注销、防火墙ACL通过和拒绝、存储系统故障等。</p><p>日志数据（log data）就是一条日志消息的内在含义，用来告诉你为什么生成日志消息的信息。日志（log）指用于展示某些事件全貌的日志消息的集合。</p><h3 id="2、日志的类型"><a href="#2、日志的类型" class="headerlink" title="2、日志的类型"></a>2、日志的类型</h3><p>日志通用的几种类型：</p><ul><li>信息（Info）:告诉用户和管理员发生了一些没有风险的事情。</li><li>调试（Debug）:在应用程序代码运行时生成调试信息，给软件开发人员提供故障检测和定位问题的帮助。</li><li>警告（Warning）:缺少需要的文件、参数、数据，但又不影响系统运行时生成警告。</li><li>错误（Error）:传达在计算机系统重出现的各种级别的错误。许多错误消息只能给出为什么出错的起点，要寻找出导致错误发生的根本原因还需要进一步的调查。</li><li>警报（Alarm）:警报表明发生了一些有趣的事情。一般情况下，警报数据安全设备和安全相关系统领域的。如IPS检测到了一个恶意链接，可能会采取任何预先配置的行动，IPS会记录下检测结果以及所采取的行动。</li></ul><p>可以看到日志数据包含了系统运行的很多重要信息，了解日志、做好日志的分析审计可以很好帮助用户更好监控和保障信息系统运行，及时识别针对信息系统的入侵攻击、内部违规等信息。</p><h2 id="二、为什么要做日志分析审计"><a href="#二、为什么要做日志分析审计" class="headerlink" title="二、为什么要做日志分析审计"></a>二、为什么要做日志分析审计</h2><h3 id="1、满足法律法规的要求"><a href="#1、满足法律法规的要求" class="headerlink" title="1、满足法律法规的要求"></a>1、满足法律法规的要求</h3><p>国家的政策法规、行业标准等都明确对日志审计提出了要求，日志审计已成为企业满足合规内控要求所必须的一项基本要求。 2017年6月1日起施行的《中华人民共和国网络安全法》中规定：采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月。 </p><p>《网络安全等级保护基本要求》（GB∕T 22239-2019）中规定：二到四级需要对网络、主机、应用安全三部分进行日志审计，留存日志需符合法律法规规定。</p><p>我国政府及相关行业已相继推出了数十部法律法规。如国家《企业内控基本规范》、国家《计算机信 息系统安全等级保护划分准则》同时银行、证券、通信行业均提出了相关标准及要求，确立了面向内控的信息安全审计的必要性。如：<br>《ISO27001:2013 》4.3.3小节、 《ISO17799:2005 》10.10小节<br>《商业银行内部控制指引》第一百二十六条 银监局《商业银行信息科技风险管理指引》<br>《银行业金融机构信息系统风险管理指引》第四十六条<br>《证券公司内部控制指引》第一百一十七条<br>《互联网安全保护技术措施规定》第八条</p><h3 id="2、满足系统安全管理需求"><a href="#2、满足系统安全管理需求" class="headerlink" title="2、满足系统安全管理需求"></a>2、满足系统安全管理需求</h3><p>当前信息安全形势日益严峻，信息安全防护工作面临前所未有的困难和挑战。日志审计能够帮助用户更好监控和保障信息系统运行，及时识别针对信息系统的入侵攻击、内部违规等信息，同时日志审计能够为安全事件的事后分析、调查取证提供必要的信息。</p><h2 id="三、日志分析审计的挑战"><a href="#三、日志分析审计的挑战" class="headerlink" title="三、日志分析审计的挑战"></a>三、日志分析审计的挑战</h2><ol><li>日志数据量巨大，无法很好的管控<br>每类设备产生的日志量都是十分巨大，分析审计员无法对数量巨大的日志进行查看与管控。</li><li>日志数据格式各异，可读性差<br>不同品牌、不同类型设备的日志格式都不相同，分析审计员无法准确解读所有设备的日志。</li><li>日志数据存储风险，彼此割裂<br>各类设备分散在网络中的不同位置，分析审计人员无法及时有效的查看到存储于不同位置的日志。</li><li>日志数据无法关联，分析困难<br>当威胁产生时无法关联其他日志进行溯源分析，无法找到问题的源头从根本上解决问题。</li></ol><h2 id="四、日志采集分析审计系统的主要核心功能"><a href="#四、日志采集分析审计系统的主要核心功能" class="headerlink" title="四、日志采集分析审计系统的主要核心功能"></a>四、日志采集分析审计系统的主要核心功能</h2><p>对于前面的日志分析审计现状带来的挑战，很多企业购买或自建了日志采集分析审计系统。一方面满足合规要求，另一方面满足自身业务系统安全管理的要求。</p><p>日志采集分析审计系统，通过海量日志采集、异构设备日志范式化、安全事件关联分析等技术，<strong>实现日志全生命周期管理</strong>。协助运维人员从事前（发现安全风险）、事中（分析溯源）及事后（调查取证）等多个维度监控网络安全事件。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230310/%E6%97%A5%E5%BF%97%E5%85%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86.png" alt="日志全生命周期管理"></p><p>一般来说日志采集分析审计系统核心功能包括日志采集、日志存储、日志分析、日志查询、日志监控、日志事件告警、统计展示。</p><h3 id="1、日志采集"><a href="#1、日志采集" class="headerlink" title="1、日志采集"></a>1、日志采集</h3><p>系统应提供全面的日志采集能力：支持网络安全设备、网络设备、数据库、windows/linux主机日志、web服务器日志、虚拟化平台日志以及自定义等日志；<br>提供多种的数据源管理功能：支持数据源的信息展示与管理、采集器的信息展示与管理以及agent的信息展示与管理；提供分布式外置采集器、Agent等多种日志采集方式；支持IPv4、IPv6日志采集、分析以及检索查询；</p><h3 id="2、日志存储"><a href="#2、日志存储" class="headerlink" title="2、日志存储"></a>2、日志存储</h3><p>提供原始日志、范式化日志的存储，可自定义存储周期，支持FTP日志备份以及NFS网络文件共享存储等多种存储扩展方式。一般来说支持大数据技术的存储方式如ES等，日志数据存储需要满足不少于六个月。</p><h3 id="3、日志分析"><a href="#3、日志分析" class="headerlink" title="3、日志分析"></a>3、日志分析</h3><p>提供便捷的日志分析操作，支持对日志进行分组、分组查询以及从叶子节点可直接查询分析日志；</p><h3 id="4、日志查询"><a href="#4、日志查询" class="headerlink" title="4、日志查询"></a>4、日志查询</h3><p>提供丰富灵活的日志查询方式，支持全文、key-value、多kv布尔组合、括弧、正则、模糊等检索；<br>提供便捷的日志检索操作，支持保存检索、从已保存的检索导入见多条件等；</p><h3 id="5、日志监控"><a href="#5、日志监控" class="headerlink" title="5、日志监控"></a>5、日志监控</h3><p>在采集器维度对日志源情况进行实时监控，对日志源的基本情况及事件信息进行展示，提供日志监控能力，支持对采集器、采集器资产的实时状态进行监控。如发现某一采集器在一段时间内没有日志数据报送，就需要排查是否是源系统或网络传输出现了问题。<br>在平台维度对平台自身的组件进行实时监控，保障平台自身的稳定运行。支持查看CPU、磁盘、内存总量及当前使用情况；支持查看资产的概览信息及资产关联的事件分布；</p><h3 id="6、日志事件告警"><a href="#6、日志事件告警" class="headerlink" title="6、日志事件告警"></a>6、日志事件告警</h3><p>能够实现单事件的关联、多事件的关联分析；支持自定义事件规则，可按照日志、字段布尔逻辑关系等方式自定义规则；支持时间的查询、查询结果统计以及统计结果的展示等；支持对告警规则的自定义，可设置针对事件的各种筛选规则、告警等级等；</p><p>能够进行统计关联分析、时序关联分析、逻辑关联分析<br><strong>统计关联</strong>：基于统计条件规则的关联分析，如某一事件重复出现多次。典型的如：暴力破解，在某一时间段某一相同账号频繁多次失败的尝试登录日志。<br><strong>时序关联</strong>：基于时序的规则的分析，如发生某动作后接着发生了其他的动作。如：发生了在某一时间段某一相同账号频繁多次失败的尝试登录日志后，发生了一次成功登录的日志。就有可能怀疑是暴力破解成功了。<br><strong>逻辑关联</strong>：基于逻辑的关联，如满足什么条件的情况下发生了什么。如：不是白名单的IP访问了某台设备等。</p><h3 id="7、统计展示"><a href="#7、统计展示" class="headerlink" title="7、统计展示"></a>7、统计展示</h3><p>支持丰富的内置报表以及灵活的自定义报表模式，按照日、周、月、年生成专项审计报告，支持实时报表、定时报表、周期性任务报表等方式；支持编辑报表的目录接口、引用统计项、设置报表标题、展示页眉和页码、报表配置基本内容（名称、描述等）；支持html，pdf，word格式的报表文件以及报表logo的灵活配置；可视化的交互界面能够展现当前审计情况，展现日志审计工作成果与价值。</p><p>通过对人员角色的定义，可根据角色定义监控的个人工作台，过滤关键重要的事件和监控指标，更加方便安全的日常审计工作，有效提升日志审计的关注度和时效性。</p><h2 id="五、日志采集分析审计系统的价值"><a href="#五、日志采集分析审计系统的价值" class="headerlink" title="五、日志采集分析审计系统的价值"></a>五、日志采集分析审计系统的价值</h2><ol><li>日志集中管控<br>日志采集分析审计系统可以帮助客户对海量日志进行集中管控，客户能够从日志采集、存储、分析、告警等环节参与日志全生命周期管理，有效解决日志分散、日志量大、日志格式不统一的问题，助力安全运维。</li><li>日志回溯与取证<br>日志采集分析审计系统能够对日志进行留存，支持回溯查询，有效解决事后追查困难、无法提供有效证据的难题。</li><li>监测体系构建<br>日志作为网络安全监测体系中比较重要的一环，可在信息获取和分析验证等方面提供技术支撑，当体系做出调整后，日志能够更加准确的反映出系统情况，助力企业网络安全监测体系构建，提升安全防御能力。</li><li>等保合规<br>日志采集分析审计系统平台支持大数据日志存储方案，可助力客户满足网络安全法、等保合规日志留存6个月的要求，同时支持灵活的自定义报表，可满足多样化的报表需求。</li></ol><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;日志对于大家来说非常熟悉，机房中的各种系统、防火墙、交换机、路由器等等，都在不断地产生日志。无数实践告诉我们，健全的日志记录和分析系统是系统正常运营与优化以及安全事故响应的基础。我们一起来认识日志采集分析审计系统。&lt;/p&gt;
&lt;h2 id=&quot;一、什么是日志数据&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之资产及攻击面管理</title>
    <link href="https://xiejava.gitee.io/posts/dc7085dc/"/>
    <id>https://xiejava.gitee.io/posts/dc7085dc/</id>
    <published>2023-03-05T04:54:30.000Z</published>
    <updated>2023-03-10T09:21:50.210Z</updated>
    
    <content type="html"><![CDATA[<p>“摸清家底，认清风险”做好资产管理是安全运营的第一步。那么什么是资产，资产管理的难点痛点是什么，如何做好资产管理，认清风险。带着这些问题我们来认识一下资产及攻击面管理。</p><h2 id="一、资产的定义"><a href="#一、资产的定义" class="headerlink" title="一、资产的定义"></a>一、资产的定义</h2><p>《GBT 20984-2007信息安全技术信息安全风险评估规范》中，对于资产的定义为“<strong>对组织有价值的信息或资源，是安全策略保护的对象</strong>”。</p><p>对于网络空间资产来说，这里的资产是指赛博空间中某机构所拥有的一切可能被潜在攻击者利用的设备、信息、应用等数字资产。具体对象包括但不限于硬件设备、云主机、操作系统、IP地址、端口、证书、域名、Web应用、业务应用、中间件、框架、机构公众号、小程序、App、API、源代码等。概括来说，<strong>只要是可操作的对象，不管是实体还是属性。都可以称之为“网络空间资产”</strong>。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230305/%E8%B5%84%E4%BA%A7%E5%85%A8%E8%A7%86%E5%9B%BE.png" alt="安全资产视图"></p><p>借用“魔方安全”的图，一切可操作对象和属性，都是资产。</p><h2 id="二、资产管理的挑战"><a href="#二、资产管理的挑战" class="headerlink" title="二、资产管理的挑战"></a>二、资产管理的挑战</h2><p>通过上面的定义和图示，可以看到其实网络空间资产，所涉及的覆盖面特别广，给企业资产管理安全运营带来的巨大的挑战：<br>1、对象多<br>按数字资产类型划分如网站、IP、域名、移动门户和云服务等一切可能被潜在攻击者利用的设备、信息、应用等都是网络空间资产。所以资产管理需要纳管的类型多，且随着业务的互联网化、社交化，导致资产及暴露面快速增长。<br>2、分布广<br>随着数字化应用的深入，资产分布在多个数据中心、私有云、公有云、混合云、边缘计算和物联网等各种基础设施环境中，照成了资产信息割裂碎片化，给资产的统一管理带来了困难。<br>3、变化快<br>随着数字化转型业务发展和新型IT技术应用，为快速响应市场和业务需求，互联网暴露资产无时无刻都在跟着生产运营动态变化。<br>4、更隐蔽<br>影子资产的存在，包括钓鱼欺诈网站、暗网交易数据、用户信息泄露、代码仓库等外部隐藏的企业资产，给企业经济或商誉上带来更大的伤害。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>一切可能被潜在攻击者利用的设备、信息、应用等都是网络空间资产。你永远都无法知道攻击者如何利用这些网络空间资产进行攻击。</p><p>所以摸清家底是第一步，要搞清楚自己的资产都有哪些，分布在那里，有哪些漏洞风险。这里互联网暴露资产及影子资产尤为关键。影子IT(shadow it)：指那些不在企业和组织IT部门掌控下的IT设备、软件及服务。影子资产就是影子IT中资产。互联网暴露面是网络攻击的入口，是网络安全运营的第一道防线；影子资产的存在更是让安全运营人员防不胜防，因为“你无法保护你看不见的东西”。为了解决这些问题业界推出了攻击面管理的概念。</p><p><strong>攻击面管理</strong>以保护组织数字资产安全为出发点，聚焦在<strong>攻击者视角</strong>去审视网络空间内不同形态种类的资产所组成的攻击暴露面，同时特别强调“可观测性”、“可运营”,这意味着资产的全面性可度量、风险可度量、响应处置可度量。</p><p>攻击面管理的包括暴露面资产全面发现、资产脆弱性风险识别、多源数据融合分析、专项暴露面收敛。</p><h3 id="1、暴露面的全面发现"><a href="#1、暴露面的全面发现" class="headerlink" title="1、暴露面的全面发现"></a>1、暴露面的全面发现</h3><p>暴露面的发现主要以攻击者视角为主，涵盖外部信息、网络资产等维度。</p><p>外部信息包括攻击者能够收集到的机构信息、在开源代码共享平台上的代码、外部接口等。</p><ul><li>机构信息收集</li></ul><p>潜在攻击者首先会搜集用户的机构信息，搜集维度包括但不限于总部及分支机构名称、品牌、安全管理制度、业务运行时间、集团行政架构、各分支机构间的关系等等；针对高权限的IT管理人员，重点搜集姓名、邮箱、手机号、VPN账户、昵称、社会关系等等;搜集渠道主要有各大搜索引擎、天眼查类平台、网盘文库、官网、公众号、钉钉群、微信群、代码共享平台等。因此，安全团队可以通过外部攻击面发现平台，对此类信息做持续周期性的发现。先于攻击者发现此类资产，为响应收敛争取时间。</p><ul><li>源代码发现与收敛</li></ul><p>代码共享平台存在隐匿的攻击暴露面，例如管理后台URL、VPN账户密码等，开发运维人员因缺乏安全意识，无意中将此类敏感信息上传至GitHub、Gitee等代码共享平台，为信息安全事故埋下导火索。攻击者主要是以用户机构的业务关键字、品牌名称、公司名称、IT人员的个人GitHub账户等渠道搜集这类信息，因此安全团队应以技术监测手段与内部行政管理相结合的方式，对此类攻击暴露面进行持续发现、收敛。</p><ul><li>外部接口管理</li></ul><p>除了代码平台，还有一类常被忽视的攻击暴露面是外部接口，如与合作伙伴或第三方平台的API数据接口，与微信公众号菜单对接的URL、小程序或H5中隐含的数据接口等。这类外部接口，开发测试使用过后，即随着项目结束而被遗忘，极易成为潜在的攻击暴露面。同代码平台监测一样，安全团队应当以“技术+管理”相结合的方式，对此进行持续发现、收敛。</p><ul><li>网络资产攻击面覆盖</li></ul><p>通过扫描探测、流量监听、主机代理、特征匹配、其他CMDB系统对接等多种方式，持续动态的发现、汇集资产数据，建立与业务之间的关联关系，安全责任落实责任人，做到摸清家底，解决资产掌握的“不准”、“不全”问题。建立统一的资产台账，对台账数据进行定期自动化探测稽核以及持续动态监测，发现未能了解或掌握暴露于网络空间的资产攻击面，对未申报的遗漏暴露面资产（影子资产）进行自动发现并预警，解决“大海捞针”的工作困扰。</p><h3 id="2、脆弱性风险识别"><a href="#2、脆弱性风险识别" class="headerlink" title="2、脆弱性风险识别"></a>2、脆弱性风险识别</h3><p>脆弱性风险识别包括弱口令识别、漏洞发现、安全配置不合规项的检查识别</p><ul><li>弱口令识别</li></ul><p>弱口令没有严格和准确的定义，通常认为容易被别人猜测到或被破解工具破解的口令均为弱口令。近年来，账户密码的不断泄露导致暗网的密码数据库不断增加，日益开放的网络环境降低了边界的可防御性，远程设备的迅速涌入使互联网络上的用户和终端身份的安全管理更加复杂。可以说，金融行业的弱口令攻击面仍然是在不断扩大的。因此，攻击面发现能力中，对攻击面脆弱性的评估，首先还是要关注弱口令。<br>弱口令的发现方式相对也并不复杂，在发现管理后台页面、口令认证接口等类型资产时，相关产品或工具能够进一步辅以口令字典进行测试即可。这里的字典要支持用户上传进行自定义，同时针对不同的资产发现场景和任务，修改不同级别的弱口令测试强度，不影响业务。</p><ul><li>漏洞发现</li></ul><p>作为攻击者，往往依赖于新爆出的0day或1day漏洞。这就决定了在新的漏洞威胁出现后，安全团队需要抢在攻击者之前，更快、更全、更准地定位潜在受漏洞威胁的风险资产。攻击面管理首先要做到在漏洞爆发之前，就对资产台账中的所有资产信息按照业务优先级进行标记，同时对所使用的系统、应用、中间件及资产的版本号等关键信息做到精细管理、持续更新。如此一来，在漏洞爆发时，才能第一时间做到资产快速筛选、PoC快速分发、漏洞精准匹配、虚拟补丁临时修复等快速检测与响应，赶在攻击者行动之前完成风险收敛。</p><ul><li>安全配置合规检查</li></ul><p>安全配置通常都是由于人为的疏忽造成主要包括了账号、口令、授权、日志、IP通信等方面内容，反映了系统自身的安全脆弱性。攻击者往往利用主机、中间件的如脆弱的访问控制配置漏洞进行渗透。安全配置基线合规管控方案是能够有效保障网络设备、信息系统安全的手段之一，其内容主要涉及：登录配置、远程管理保护、访问控制、安全日志、安全协议等多方面内容，只有实现及时自动的采集和核查发现安全配置不合规项并进行整改，才能更好的保障网络资产的安全。</p><h3 id="3、多源数据融合分析"><a href="#3、多源数据融合分析" class="headerlink" title="3、多源数据融合分析"></a>3、多源数据融合分析</h3><p>随着数字化应用的深入，资产分布在多个数据中心、私有云、公有云、混合云、边缘计算和物联网等各种基础设施环境中，无论用户的单独一个部门亦或是单独某一家供应商，不可能覆盖所有资产，因此，统一的攻击面管理一定要具备“多源资产数据的接入并融合分析”的能力。主要解决统一可视化管理的问题，包括资产的可视化、资产与资产之间的关系可视化、风险可视化、业务影响可视化、责任可视化。这都要求具备统一的资产及攻击面管理平台实现多源资产数据的统一接入汇聚，多源数据的融合与分析。</p><ul><li>多源资产数据接入</li></ul><p>应能对接的多源资产数据，包括但不限于CMDB、终端管理平台、AD域等运维数据，以及NDR、EDR、HDR(含HIDS)等具备资产发现能力的安全产品及解决方案。接入范围应该覆盖企业数据中心、私有云、公有云、混合云、边缘计算和物联网等各种基础设施环境中的所有的数据资产数据。</p><ul><li>数据融合与分析</li></ul><p>多源资产数据接入汇总后，并非简单的叠加，而是要进行持续的交叉验证、去重/扩充、属性补全、标记等操作。需要结合业务数据流、网络流量、访问拓扑等多个维度，综合描绘出资产之间的关系链，建立“人-地-网”进行深度的关联和立体化模型，对地理、资产、事件、情报等大数据进行融合分析，结合可视化呈现技术，实现企业整体统一全面的资产地图，让网络资产“看得到、看得清、管得好”，到对于攻击能够“防的住”。</p><h3 id="4、专项暴露面收敛"><a href="#4、专项暴露面收敛" class="headerlink" title="4、专项暴露面收敛"></a>4、专项暴露面收敛</h3><p>通过前面的暴露面资产发现、脆弱性设别筛选定位出所有潜在威胁的风险资产，然后根据资产的业务优先级、所属部门，下发不同的响应策略。在不影响业务连续性的前提下，确定漏洞修复方案前，对部分资产做临时下线处理。对于一小部分受业务连续性要求，既不能下线又不能修复的资产，则通过“虚拟补丁/透明补丁”的方式临时加固，待将来允许时，再行修复。</p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“摸清家底，认清风险”做好资产管理是安全运营的第一步。那么什么是资产，资产管理的难点痛点是什么，如何做好资产管理，认清风险。带着这些问题我们来认识一下资产及攻击面管理。&lt;/p&gt;
&lt;h2 id=&quot;一、资产的定义&quot;&gt;&lt;a href=&quot;#一、资产的定义&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>学习英语，你认为“长期”的坚持是多长，“大量”的阅读又是多少？</title>
    <link href="https://xiejava.gitee.io/posts/a9bec41d/"/>
    <id>https://xiejava.gitee.io/posts/a9bec41d/</id>
    <published>2023-03-02T10:32:35.000Z</published>
    <updated>2023-03-02T11:10:00.339Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230302/LearnEnglish.png" alt="English" title="English"><br>今天在豆瓣上翻到我在2020年4月发的一篇文章《<a href="https://book.douban.com/review/12481861/" target="_blank" rel="noopener">看完全套149本《书虫》是种什么样的体验</a>》。有豆友留言在问“现在英语怎么样了”？顿时感觉脸上火辣辣的，被啪啪打脸！</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230302/%E8%B1%86%E7%93%A3%E5%9B%9E%E5%A4%8D.png" alt="豆瓣回复" title="豆瓣回复"></p><p>到今天2023年3月了，快三年了，自己的英语又回到了原点。在我学习英语的生涯中又添加了一次英语学习失败的经历。陷入了第N+1轮的从坚持到放弃，从放弃到开始的魔咒。</p><p>终究还是把英语学习看得太轻了！对于英语的学习，我经历过《<a href="https://book.douban.com/review/10294018/" target="_blank" rel="noopener">坚持了330天，我终于放弃了背单词</a>》、《<a href="https://book.douban.com/review/12481861/" target="_blank" rel="noopener">看完全套149本《书虫》是种什么样的体验</a>》、《<a href="https://book.douban.com/review/12484676/" target="_blank" rel="noopener">英语学渣的我是如何撸完这本英文原著的</a>》。经历了1年的背单词的过程，半年的看完全套书虫，半年撸完10本英文原著（见豆列《<a href="https://www.douban.com/doulist/118432400/" target="_blank" rel="noopener">我读过的英文读本</a>》）。</p><p>关于学习英语这件事，大家都知道需要“长期”的坚持，“大量”的阅读应用。那么你认为长期的坚持是多长，大量的阅读是多少呢？我前前后后花了两年的时间，完成了149本书虫，看完了上十本英文原著，我觉得我已经很努力了，很能坚持了。当我试图在网上寻找这个答案时，发现自己认为花了两年的时间很长，人家已经坚持了七八上十年了；自己嘚瑟看完了全套书虫，人家不但晒完了全套书虫还晒完了哈利波特系列、床头灯系列后每年还坚持撸完二三十本原著。你所谓的“坚持”和“大量”，在人家眼里那只能是渣渣！学英语的路上，总能遇到比你厉害的人却还比你更努力！</p><p>学习这件事，真的没有捷径，谁更用功谁功夫深。好在已经有大量的人已经验证过，英语这个技能是可以通过“长期”的坚持和“大量”的应用可以习得的，我们应该笃信这个事情。<strong>“长期”的坚持是多长，”大量”的阅读是多少，最终只能通过效果来验证</strong>。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230302/%E5%AD%A6%E4%B9%A0%E6%8B%90%E7%82%B9.png" alt="学习拐点" title="学习拐点"></p><p>知识和能力的习得与积累是有复利效应的。所以，应该要相信自己能够通过“长期”和“大量”的积累和复利获得成功和成长，实现自己的英语应用的自由。有人通过自己的长期坚持和大量的积累成功的突破了拐点，实现了自己的目标。自己还没有成功，说明坚持得不久，积累得不够，在拐点到来之前就慢慢的放弃了，如果继续放弃那以前花费的时间精力只能是变成沉默成本不会有任何效果了。实现英语阅读自由只能是梦想了。</p><p><strong>革命尚未成功，同志仍需努力！梦想还是要有的，现在开始继续坚持英语学习吧！</strong></p><hr><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230302/LearnEnglish.png&quot; alt=&quot;English&quot; title=&quot;English&quot;&gt;&lt;br&gt;今天在豆瓣上翻到
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="英语" scheme="https://xiejava.gitee.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>安全评估之漏洞扫描、基线检查、渗透测试</title>
    <link href="https://xiejava.gitee.io/posts/78efec46/"/>
    <id>https://xiejava.gitee.io/posts/78efec46/</id>
    <published>2023-03-01T01:41:25.000Z</published>
    <updated>2023-03-05T05:04:29.289Z</updated>
    
    <content type="html"><![CDATA[<p>为保证业务系统运营的安全稳定，在业务系统上线前需要开展三同步检查，针对新业务系统上线、新版本上线、项目验收前开展安全评估。可以帮助其在技术层面了解系统存在的安全漏洞。今天就来了解一下安全评估之漏洞扫描、基线检查、渗透测试。</p><p>安全评估的内容主要涉及主机漏洞扫描、安全基线检查、渗透测试三个方面：</p><h2 id="主机漏洞扫描"><a href="#主机漏洞扫描" class="headerlink" title="主机漏洞扫描"></a>主机漏洞扫描</h2><p>主机漏洞扫描一般是采用漏洞扫描工具，根据其内置的弱点测试方法，从网络侧对被评估对象进行一系列的检查，从而发现弱点。发现其存在的不安全漏洞后进行人工分析和确认，针对每个漏洞的整改意见完成报告的输出。被评估对象系统的管理人员根据扫描的结果以及修复建议修复网络安全漏洞，在黑客攻击前进行防范。被评估对象系统的管理人员对这些漏洞进行修复后，安服工程师会对漏洞扫描报告中每个漏洞进行漏洞复测，并输出复测报告。使用户更加全面的了解全网的安全状态，提高对安全漏洞的认识和管理能力，并通过对漏洞的修补加强应用系统抵御恶意入侵的能力。</p><h2 id="安全基线检查"><a href="#安全基线检查" class="headerlink" title="安全基线检查"></a>安全基线检查</h2><p>安全基线检查是通过采用安全检查设备以及人工检查两种方法从对应目标的安全合规性等方面开展对系统的全量安全基线检查，从而发现其基线的不合规项。其次在发现基线不合规项之后由安服工程师进行人工二次确认，依据工信部基线安全标准，针对性提供每个基线不合规项的整改建议，并完成基线不合规项报告输出。评估对象系统的管理人员可根据输出报告对基线不合规项进行基线整改。整改完成后，安服工程师会对按照工信部基线安全标准对所涉及不合规项进行安全基线复测，并输出复测报告。确保系统安全性得到提升，建立系统基础的安全防御体系。</p><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><p>渗透测试主要是模拟黑客的攻击手法，通过自动化漏洞扫描工具结合手工测试的方式对系统进行无害化的安全评估。渗透测试包含应用安全测试和业务安全测试两部分，应用安全测试包括但不限于如下内容：</p><table><thead><tr><th>序号</th><th>应用安全检查项</th><th>检查项说明</th></tr></thead><tbody><tr><td>1</td><td>注入类攻击</td><td>注入攻击漏洞，例如SQL，OS以及LOAP注入，这些攻击发生在当不可信的数据作为命令或者查询语句的一部分，被发送给解释器的时候，攻击者发送的恶意数据可以欺骗解释器，以执行计划外的命令或者访问未授权的数据。</td></tr><tr><td>2</td><td>跨站脚本（XSS）</td><td>当应用程序收到含有不可信的数据，在没有进行适当的验证和转义的情况下，就将它发送给一个网页浏览器，这就会产生跨站脚本攻击（简称XSS）。XSS允许攻击者在受害者的浏览器上执行脚本，从而劫持用户会话、危害网站、或者将用户转向恶意网站。</td></tr><tr><td>3</td><td>失效的身份认证和会话管理</td><td>与身份认证和会话管理相关的应用程序功能往往得不到正确的实现，这就导致了攻击者破坏密码、秘钥、会话令牌或攻击其他的漏洞去冒充其他用户的身份</td></tr><tr><td>4</td><td>不安全的直接对象引用</td><td>当开发人员暴露一个对内部实现对象的引用时，例如，一个文件、目录或数据库秘钥，就会产生一个不安全的直接对象引用，在没有访问控制检测或者其他保护时，攻击者会操作这些引用去访问未授权数据。</td></tr><tr><td>5</td><td>跨站请求伪造</td><td>一个跨站请求伪造攻击迫使登陆用户的浏览器将伪造的HTTP请求，包括该用户的会话cookie和其他认证信息，发送到一个存在漏洞的web应用程序，这就允许了攻击者迫使用户浏览器向存在漏洞的应用程序发送请求，而这些请求会被应用程序认为是用户的合法请求。</td></tr><tr><td>6</td><td>安全配置错误</td><td>好的安全需要对应用程序、框架、应用程序服务器、web服务器、数据库服务器和平台，定义和执行安全配置。由于许多设置的默认值并不是安全的，因此，必须定义、实施和维护所有这些设置。这包括了对所有的软件保持及时地更新，包括所有应用程序的库文件。</td></tr><tr><td>7</td><td>不安全的加密存储</td><td>许多web应用程序并没有使用恰当的加密措施或Hash算法保护敏刚数据，比如信用卡、身份证等等。攻击者可能利用这种弱保护数据实行身份盗窃、信用卡诈骗或其他犯罪。</td></tr><tr><td>8</td><td>没有限制URL访问</td><td>许多web应用程序在显示受保护的链接和按钮之前会检测URL访问权限。但是，当这些页面被访问是，应用程序也需要执行类似的访问控制检测，否则攻击者将可以伪造这些URL去访问隐藏的页面</td></tr><tr><td>9</td><td>传输层的保护不足</td><td>应用程序时常没有进行身份认证，加密措施，甚至没有保护敏感网络数据的保密性和完整性。而当进行保护时，应用程序有时采用弱算法，使用过期或者无效的证书，或不正确地使用这些技术。</td></tr><tr><td>10</td><td>未验证的重定向和转发</td><td>WEB应用程序经常将用户重新定向和转发到其他网页和网站，并且利用不可信的数据去判定目的页面，如果没有得到适当验证，攻击者可以重定向受害用户到钓鱼软件或恶意网站，或者使用转发去访问未授权的页面</td></tr></tbody></table><p>业务安全测试包括但不限于如下内容：</p><table><thead><tr><th>序号</th><th>业务安全检查项</th><th>检查项说明</th></tr></thead><tbody><tr><td>1</td><td>身份认证管理</td><td>该项测试主要针对身份认证环节，以及在非授权情况下访问一些授权用户才能访问的页面，或进行授权用户的操作。</td></tr><tr><td>2</td><td>业务一致性</td><td>该项测试主要针对办理业务过程中用户的身份与用户办理的业务是否相关联一直的安全测试</td></tr><tr><td>3</td><td>业务授权安全</td><td>该项测试主要针对于是否存在非授权情况下访问一些授权用户才能访问的页面，或进行授权用户的操作。</td></tr><tr><td>4</td><td>用户输入合法性验证</td><td>Web应用程序没有对用户输入数据的合法性进行判断，就会使应用程序存在安全隐患。从而容易受到跨站脚本及SQL注入等攻击</td></tr><tr><td>5</td><td>误操作回退</td><td>手动进行误操作尝试，看系统是否能够正确回滚。例如，交易操作，在购买未完成时异常退出，看系统是否能够自动释放被购买物的锁定状态。又例如办理操作，如话费套餐变更，更改过程出错或异常退出是否能正确回滚到办理之前的状态</td></tr><tr><td>6</td><td>验证码机制</td><td>验证码控制是一种由WEB应用程序生成的随机数，以确保用户提交的请求不是由bot生成。</td></tr><tr><td>7</td><td>业务数据篡改</td><td>该项测试主要针对于办理业务过程中用户浏览器端传递至服务端的字段篡改测试。</td></tr><tr><td>8</td><td>业务流乱序</td><td>该项测试主要针对业务的处理流程是否有正常的顺序，确保不会通过技术手段绕过某些重要流程步骤。</td></tr><tr><td>9</td><td>信息正确呈现</td><td>对于用户提交的请求，是否能够返回用户需要的页面信息。</td></tr><tr><td>10</td><td>业务接口恶意调用</td><td>1.对于敏感的业务接口，是否预先有身份认证机制？查看此类可能被恶意大规模调用的业务接口，如用户登录模块、密码找回、密码重置等等。<br>2.对于具有查询展示办理功能的业务皆苦，如果不需要身份认证是否有强制验证码机制防止机器人程序等自动化大规模的恶意调用。</td></tr></tbody></table><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为保证业务系统运营的安全稳定，在业务系统上线前需要开展三同步检查，针对新业务系统上线、新版本上线、项目验收前开展安全评估。可以帮助其在技术层面了解系统存在的安全漏洞。今天就来了解一下安全评估之漏洞扫描、基线检查、渗透测试。&lt;/p&gt;
&lt;p&gt;安全评估的内容主要涉及主机漏洞扫描、
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>写给两年后2025年的自己</title>
    <link href="https://xiejava.gitee.io/posts/c33148ad/"/>
    <id>https://xiejava.gitee.io/posts/c33148ad/</id>
    <published>2023-03-01T01:40:54.000Z</published>
    <updated>2023-03-10T09:24:26.345Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230228/%E8%87%B4%E6%9C%AA%E6%9D%A5.png" alt="致未来"></p><p>2025年的我应该是实现了架子鼓演奏自由，可以轻松的驾驭并享受架子鼓演奏带来的愉悦和快乐。可以很自信的在抖音或B站上上传自己平时很惬意的架子鼓日常练习，不用再担心有人说”节奏不稳、勉强还行”了。技巧应该很熟了，什么重轻音、滚奏、双踩都不在话下了，16分节奏型速度在120以上那都是小case，可以挑战一些有难度的歌曲了。可以很有底气的说我会打架子鼓！要不要来表演一段？</p><p>2025年的我应该是实现了英语阅读的自由，可以享受在英语文献中获取知识带来的快乐，可以不带字幕的看懂大部分的美剧大片了。不用再忍受看一页原版英语小说还要不停的翻英汉字典，搞得阅读兴趣全无了。应该可以畅快的看懂英文的计算机相关的技术文档了，可以尝试翻译英文技术文档了。</p><p>2025年的我技术能力水平应该更高了，心智更加成熟，思考更加有深度了，更加乐意写技术文章做技术分享了。CSDN账号的粉丝应该是到了10W，可以小小的嘚瑟一下了！</p><p>2025年的我还没有达到财富自由，上班还是在上班，但心态没有这么累了，应该是在享受工作了。开了多年的老爷车应该是换了，换成了新能源的混动车，偶尔可以开着新车去旅行，感受不一样的风景了。</p><p><strong>如今的各种不如意，都是来自于过去的不努力！</strong></p><p><strong>2025年的我，要感谢现在努力的自己！</strong></p><hr><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230228/%E8%87%B4%E6%9C%AA%E6%9D%A5.png&quot; alt=&quot;致未来&quot;&gt;&lt;/p&gt;
&lt;p&gt;2025年的我应该
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之认识挖矿木马</title>
    <link href="https://xiejava.gitee.io/posts/2f88a4b/"/>
    <id>https://xiejava.gitee.io/posts/2f88a4b/</id>
    <published>2023-02-22T01:33:44.000Z</published>
    <updated>2023-03-10T09:28:28.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是挖矿木马？"><a href="#一、什么是挖矿木马？" class="headerlink" title="一、什么是挖矿木马？"></a>一、什么是挖矿木马？</h2><p>比特币是以区块链技术为基础的虚拟加密货币，比特币具有匿名性和难以追踪的特点，经过十余年的发展，已成为网络黑产最爱使用的交易媒介。大多数勒索病毒在加密受害者数据后，会勒索代价高昂的比特币。比特币在2021年曾达到1枚6.4万美元的天价，比特币的获得需要高性能计算机（又称矿机，一般配置顶级CPU和GPU）按特定算法计算，计算的过程被形象的称为“挖矿”。</p><p>矿机价格昂贵，为生产比特币，有人不惜重金购置大量矿机组成网络集群挖矿。挖矿又非常耗电，因此矿场往往会寻找偏僻地区的小水电、小火电而建，因为电费便宜，有人为节约成本偷电挖矿。</p><p>当数字加密币市值暴涨时，挖矿业务会水涨船高，高端CPU、GPU、高端显卡、大容量硬盘被炒上天价还卖断货。目前，我国政府宣布要实现碳达峰碳中和的目标，严重耗能的虚拟加密币相关生产、交易被认定为非法，我国境内所有（生产加密货币的）矿场必须关闭。</p><p>因挖矿需要大量财力投入，从一开始，就有人想到利用木马控制他人的计算机组建僵尸网络集群挖矿的办法，这就是所谓“挖矿木马”。</p><p>不法分子通过各种非法手段将矿机程序植入受害者的计算机中，利用受害者计算机的运算能力进行挖矿活动，从而获取非法收益。这类非法侵入用户计算机的矿机程序被称作挖矿木马病毒。</p><h2 id="二、挖矿木马的主要入侵方式"><a href="#二、挖矿木马的主要入侵方式" class="headerlink" title="二、挖矿木马的主要入侵方式"></a>二、挖矿木马的主要入侵方式</h2><p>挖矿木马常见的攻击方式及攻击后果可以参考下图：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230222/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E5%85%A5%E4%BE%B5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="挖矿木马的主要入侵方式"></p><h3 id="1、漏洞攻击"><a href="#1、漏洞攻击" class="headerlink" title="1、漏洞攻击"></a>1、漏洞攻击</h3><p>利用系统漏洞快速获取相关服务器权限，植入挖矿木马是目前最为普遍的传播方式之一。常见的漏洞包括Windows系统漏洞、服务器组件插件漏洞、中间件漏洞、Web漏洞等。例如传播较广的WannaMine挖矿家族，利用了永恒之蓝漏洞在内网蠕虫式传播，给不少公司和机构带来巨大损失。</p><h3 id="2、弱口令爆破"><a href="#2、弱口令爆破" class="headerlink" title="2、弱口令爆破"></a>2、弱口令爆破</h3><p>弱口令指的是仅包含简单口令、有规律的键盘组合或历次泄漏过的密码，攻击者通常会针对redis、ssh、3389、mssql、IPC$等服务进行爆破弱口令攻击。爆破成功后，尝试获取系统权限，植入挖矿木马并设置持久化。</p><h3 id="3、伪装正常软件"><a href="#3、伪装正常软件" class="headerlink" title="3、伪装正常软件"></a>3、伪装正常软件</h3><p>攻击者将挖矿木马伪装为游戏软件、娱乐社交软件、安全软件、游戏外挂等进行传播，欺骗用户下载并执行。由于多数游戏对显卡、CPU等硬件性能要求较高，故挖矿木马通常伪装成游戏辅助外挂，通过社交群、网盘等渠道传播，感染大量机器。</p><h2 id="三、挖矿木马的安全危害"><a href="#三、挖矿木马的安全危害" class="headerlink" title="三、挖矿木马的安全危害"></a>三、挖矿木马的安全危害</h2><p>挖矿木马攻击，就是发生率较高，极可能造成业务系统中断的威胁事件，挖矿木马最明显的影响是大量消耗系统资源，使系统其他软件或服务运行缓慢，性能变差。主要安全危害包括业务故障、资源损耗及其他的安全威胁。</p><h3 id="1、业务故障"><a href="#1、业务故障" class="headerlink" title="1、业务故障"></a>1、业务故障</h3><p>挖矿木马会占用CPU进行超频运算，从而占用主机大量的CPU资源，导致设备性能不足，业务访问缓慢，设备过载宕机重启，异常网络链接等问题，严重影响服务器上的其他应用的正常运行，最终会影响业务系统工作运行。</p><h3 id="2、资源损耗"><a href="#2、资源损耗" class="headerlink" title="2、资源损耗"></a>2、资源损耗</h3><p>挖矿木马的挖矿活动会使设备各器件高速运行，产生大量热能，增加电能消耗，加速设备器件老化等问题，造成资源损耗浪费。</p><h3 id="3、安全威胁"><a href="#3、安全威胁" class="headerlink" title="3、安全威胁"></a>3、安全威胁</h3><p>挖矿木马作为一款应用程序，在服务器中运行，其拥有服务器权限，对服务器主机产生安全威胁。部分挖矿木马还具备蠕虫化的特点，在主机被成功入侵之后，挖矿木马还会向内网渗透，并在被入侵的服务器上持久化驻留以获取最大收益。</p><h2 id="四、挖矿木马的检测手段"><a href="#四、挖矿木马的检测手段" class="headerlink" title="四、挖矿木马的检测手段"></a>四、挖矿木马的检测手段</h2><h3 id="1、挖矿主机指纹识别"><a href="#1、挖矿主机指纹识别" class="headerlink" title="1、挖矿主机指纹识别"></a>1、挖矿主机指纹识别</h3><p>通过主机探测平台内置指纹知识库，如：Body特征、Header特征，对挖矿木马指纹进行识别，进而发现感染挖矿木马主机资产。</p><h3 id="2、挖矿主机端口识别"><a href="#2、挖矿主机端口识别" class="headerlink" title="2、挖矿主机端口识别"></a>2、挖矿主机端口识别</h3><p>通过研究分析目前主流的挖矿木马类型存在的通信端口，感染主机的标记端口等，形成挖矿木马常用端口知识库，并对资产开放端口进行聚合分析，探测这些端口的指纹信息进行识别和确认。</p><h3 id="3、挖矿主机协议检测"><a href="#3、挖矿主机协议检测" class="headerlink" title="3、挖矿主机协议检测"></a>3、挖矿主机协议检测</h3><p>通过挖矿木马的通信协议特征，对比分析网络资产开放的服务协议，定位存在挖矿木马感染风险的资产主机。</p><h3 id="4、IOC威胁情报关联检测"><a href="#4、IOC威胁情报关联检测" class="headerlink" title="4、IOC威胁情报关联检测"></a>4、IOC威胁情报关联检测</h3><p>通过大数据威胁情报，实时更新最新的挖矿木马情报。包括挖矿木马家族使用的C&amp;C域名、恶意文件hash、矿池域名和IP、挖矿木马使用的加密货币钱包地址等进行挖矿木马流量检测告警。</p><h3 id="5、挖矿木马行为特征检测"><a href="#5、挖矿木马行为特征检测" class="headerlink" title="5、挖矿木马行为特征检测"></a>5、挖矿木马行为特征检测</h3><p>通过网络流量检测分析引擎，对其挖矿木马通信的端口、协议、内容、行为特征、恶意文件检测等挖矿木马流量特征进行检测分析，定位出存在恶意挖矿行为的终端及主机。</p><h3 id="6、DNS流量检测挖矿域名"><a href="#6、DNS流量检测挖矿域名" class="headerlink" title="6、DNS流量检测挖矿域名"></a>6、DNS流量检测挖矿域名</h3><p>通过DNS威胁流量检测，基于域名分析算法结合威胁情报系统对C&amp;C域名、挖矿网站域名、DNS解析IP等进行聚类分析，进而发现内网存在的恶意挖矿行为。</p><h2 id="五、挖矿木马的清理"><a href="#五、挖矿木马的清理" class="headerlink" title="五、挖矿木马的清理"></a>五、挖矿木马的清理</h2><p>参考网上给出的腾讯安全专家撰写的《挖矿木马自助清理手册》的挖矿木马清理步骤和方法：</p><h3 id="1、及时隔离主机"><a href="#1、及时隔离主机" class="headerlink" title="1、及时隔离主机"></a>1、及时隔离主机</h3><p>部分带有蠕虫功能的挖矿木马在取得主机的控制权后，会继续对公网的其他主机，或者以当前主机作为跳板机对同一局域网内的其他主机进行横向渗透，所以在发现主机被植入挖矿木马后，在不影响业务正常运行的前提下，应该及时隔离受感染的主机，然后进行下一步分析和清除工作。</p><h3 id="2、阻断异常网络通信"><a href="#2、阻断异常网络通信" class="headerlink" title="2、阻断异常网络通信"></a>2、阻断异常网络通信</h3><p>挖矿木马不仅会连接矿池，还有可能会连接黑客的C2服务器，接收并执行C2指令、投递其他恶意木马，所以需要及时进行网络阻断。<br>（1）检查主机防火墙当前生效的iptables规则中是否存在业务范围之外的可疑地址和端口，它们可能是挖矿木马的矿池或C2地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure><p>（2）从iptables规则中清除可疑地址和端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>（3）阻断挖矿木马的网络通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s 可疑地址 -j DROP</span><br><span class="line">iptables -A OUTPUT -d 可疑地址 -j DROP</span><br></pre></td></tr></table></figure><h3 id="3、清除计划任务"><a href="#3、清除计划任务" class="headerlink" title="3、清除计划任务"></a>3、清除计划任务</h3><p>大部分挖矿木马会通过在受感染主机中写入计划任务实现持久化，如果仅仅只是清除挖矿进程，无法将其根除，到了预设的时间点，系统会通过计划任务从黑客的C2服务器重新下载并执行挖矿木马。<br>可以通过执行如下命令查看是否存在可疑定时任务，若有，则先保存相关记录用于后续分析，再进行删除：<br>查看系统当前用户的计划任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>查看系统特定用户的计划任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -u username -l</span><br></pre></td></tr></table></figure><p>查看其他计划任务文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/crontabcat /var/spool/croncat /etc/anacrontabcat /etc/cron.d/cat /etc/cron.daily/cat /etc/cron.hourly/cat /etc/cron.weekly/cat /etc/cron.monthly/cat /var/spool/cron/</span><br></pre></td></tr></table></figure><h3 id="4、清除启动项"><a href="#4、清除启动项" class="headerlink" title="4、清除启动项"></a>4、清除启动项</h3><p>除了计划任务，挖矿木马通过添加启动项同样能实现持久化。可以使用如下命令查看开机启动项中是否有异常的启动服务。<br>CentOS7以下版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig –list</span><br></pre></td></tr></table></figure><p>CentOS7及以上版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files</span><br></pre></td></tr></table></figure><p>如果发现有恶意启动项，可以通过如下命令进行关闭：<br>CentOS7以下版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig 服务名 off</span><br></pre></td></tr></table></figure><p>CentOS7及以上版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> 服务名</span><br></pre></td></tr></table></figure><p>另外，还需要仔细排查以下目录及文件，及时删除可疑的启动项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/systemd/system</span><br><span class="line">/usr/lib/systemd/system/multi-user.target.wants</span><br><span class="line">/etc/rc.local</span><br><span class="line">/etc/inittab</span><br><span class="line">/etc/rc0.d/</span><br><span class="line">/etc/rc1.d/</span><br><span class="line">/etc/rc2.d/</span><br><span class="line">/etc/rc3.d/</span><br><span class="line">/etc/rc4.d/</span><br><span class="line">/etc/rc5.d/</span><br><span class="line">/etc/rc6.d/</span><br><span class="line">/etc/rc.d/</span><br></pre></td></tr></table></figure><p>排查的时候，可以按照文件修改时间来排序，重点排查近期被创建服务项。</p><h3 id="5、清除预加载so"><a href="#5、清除预加载so" class="headerlink" title="5、清除预加载so"></a>5、清除预加载so</h3><p>通过配置/etc/ld.so.preload，可以自定义程序运行前优先加载的动态链接库，部分木马通过修改该文件，添加恶意so文件，从而实现挖矿进程的隐藏等恶意功能。<br>检查/etc/ld.so.preload（该文件默认为空），清除异常的动态链接库。</p><h3 id="6、清除SSH公钥"><a href="#6、清除SSH公钥" class="headerlink" title="6、清除SSH公钥"></a>6、清除SSH公钥</h3><p>挖矿木马通常还会在  ~/.ssh/authoruzed_keys 文件中写入黑客的SSH公钥，这样子就算用户将挖矿木马清除得一干二净，黑客还是可以免密登陆该主机，这也是常见的保持服务器控制权的手段。<br>排查 ~/.ssh/authorized_keys文件 ，如果发现可疑的SSH公钥，直接删除。</p><h3 id="7、清除挖矿木马"><a href="#7、清除挖矿木马" class="headerlink" title="7、清除挖矿木马"></a>7、清除挖矿木马</h3><p>（1）清除挖矿进程<br>挖矿木马最大的特点就是会在用户不知情的情况下，利用主机的算力进行挖矿，从而消耗主机大量的CPU资源，所以，通过执行如下命令排查系统中占用大量CPU资源的进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -cps -ef</span><br></pre></td></tr></table></figure><p>确认相关进程为挖矿进程后，按照如下步骤将其清除：<br>获取并记录挖矿进程的文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /proc/<span class="variable">$PID</span>/exe</span><br></pre></td></tr></table></figure><p>杀死挖矿进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br></pre></td></tr></table></figure><p>删除挖矿进程对应的文件<br>（2）清除其它相关恶意进程<br>恶意进程与外部的C2服务器进行通信时，往往会开启端口进行监听。执行如下命令，查看服务器是否有未被授权的端口被监听。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp</span><br></pre></td></tr></table></figure><p>若有未授权进程，按照如下步骤将其清除：<br>获取并记录未授权进程的文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /proc/<span class="variable">$PID</span>/exe</span><br></pre></td></tr></table></figure><p>杀死未授权进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br></pre></td></tr></table></figure><p>删除未授权进程对应的文件<br>还可以通过如下命令排查近期新增的文件，清除相关木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /etc -ctime -2 （这里指定目录为/etc，获取近2天内的新增文件）lsof</span><br></pre></td></tr></table></figure><h3 id="8、风险排查、安全加固"><a href="#8、风险排查、安全加固" class="headerlink" title="8、风险排查、安全加固"></a>8、风险排查、安全加固</h3><p>对系统进行风险排查和安全加固，避免挖矿木马卷土重来。</p><hr><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是挖矿木马？&quot;&gt;&lt;a href=&quot;#一、什么是挖矿木马？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是挖矿木马？&quot;&gt;&lt;/a&gt;一、什么是挖矿木马？&lt;/h2&gt;&lt;p&gt;比特币是以区块链技术为基础的虚拟加密货币，比特币具有匿名性和难以追踪的特点，
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>任何说30天快速学会架子鼓的都是骗人的!</title>
    <link href="https://xiejava.gitee.io/posts/ba190f8/"/>
    <id>https://xiejava.gitee.io/posts/ba190f8/</id>
    <published>2023-02-19T08:23:36.000Z</published>
    <updated>2023-03-05T04:57:41.267Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230218/%E9%AD%94%E9%B2%A8%E6%9E%B6%E5%AD%90%E9%BC%93.png" alt="架子鼓"></p><center>架子鼓</center>从去年的圣诞节报了架子鼓的班以后，过了一年多了，发现自己这个架子鼓还没有入门！！！<p>报班的时候感觉信心满满，这架子鼓不就是拿个鼓槌敲来敲去，这还不容易学？而且刷抖音、B站上大把的都是30天快速入门、一个月学会打《逆战》，看得我天真的认为我也能行。现实让我啪啪的打脸，过了一年多了，发现还没有入门，只会打简单的动次打次，敲最简单的《yellow》。</p><p>回顾一年多学习架子鼓的历程：</p><p>头三个月，才报完班，兴致满满，每周都想约老师上课，由于没有买鼓也没有去鼓房去练习，所以每次上课的时候总是被老师打击”你这个根本就没有练习啊”，或者是”你这上节课的内容还没有练熟啊”，硬着头皮去上课发现头半节课是在练习，后半节课老师匆匆讲一、两个知识点或教一、两个手法。由于完全是零基础老师讲时值，全音符、4分、8分、16分音符等乐理知识，听得得自己一头雾水；教手法是一听就会，一练就费。就这么稀里糊涂的上了大概7节课后，这个信心被打击得不行了，上课的兴趣没有那么大了。想想，这样下去也不是办法，关键是没有条件练习，既然想学好架子鼓，还是得自己买个鼓！于是花了近4千大洋买了个电鼓。</p><p>自己有了鼓以后果然兴致又大增。鼓刚到的几天，天天在家练。毕竟咱也是成熟的大人了，知道要学好一门乐器，师傅领进门，修行靠个人，需要自己花时间慢慢的练习。又碰上疫情不断，老师也不能上课。于是自己在B站上找架子鼓视频，今天看到一个新手小白必练节奏型，明天看到一个架子鼓新手快速入门。今天看到这个视频好，练了几天，明天发现另外一个视频可能更适合，又开始跟着这个视频练，练了几天后发现因为不成体系，东练一下西练一下啥都没有学会。又想去找老师线下教，把剩下的几节课上完，结果发现因为疫情原因，报名学鼓的地方老板已经搞不下去，教学点已经转让了。联系了几次老板，老板抱怨说”过了这么久我都已经撑不下去不搞了，你们怎么12节课都还没有学完？”后来根本就不理我们了。</p><p>开了个头，总得要学出个名堂来吧？回顾这段学鼓的历程，无疑是段失败的学鼓之路。总结一下，自己学鼓没有目标，不了解学习架子鼓的整个技能知识结构、像个无头苍蝇一样不知道如何有计划的学习和训练，想依赖老师确又没有按照老师的节奏来，把学乐器想得太简单了，不可能通过短短的12次课时就可能把架子鼓学会。人家30天入门、一个月打歌，那基本上都是有基础的，而且是每天都花了大量的时间在练习。个人认为正常情况零基础的学习者没有经过一两年有体系有计划的训练是很难流畅的打好一首中等难度的歌曲的。</p><p>痛定思痛，为了学好架子鼓，我开始思考并改变策略。不再无脑的跟B站那些免费的视频教程了，因为大部分免费的视频教程都有个很大的问题就是不成体系。为此我买了一本《成人零基础学架子鼓》的教材，详细了解要学习架子鼓的整体的体系框架，现在知道了学习架子鼓得知道基本的握槌击打方法、套鼓的组成及击打方式、4分、8分、16分、休止符、基本节奏型、还有前8后16、前16后8、切分、附点等等，这些都是需要一个个的去理解理会，通过不断的练习来熟练掌握的。有了这些基本功后才有可能通过组合应用到实战歌曲里面来完成打一首完整的歌曲。为了更好的掌握这些基本功的练习方法，我在抖音上花了499买了一套完整的视频教学课程，可以跟着课程将这些基本功及常用的技巧进行练习。剩下的就是抛弃速成的幻想，扎扎实实一步步的开始练习了。</p><p>今年的目标是扎扎实实的把基本功练好，拿下最初定下来的《大风吹》这首歌！</p><hr><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230218/%E9%AD%94%E9%B2%A8%E6%9E%B6%E5%AD%90%E9%BC%93.png&quot; alt=&quot;架子鼓&quot;
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="架子鼓" scheme="https://xiejava.gitee.io/tags/%E6%9E%B6%E5%AD%90%E9%BC%93/"/>
    
  </entry>
  
  <entry>
    <title>网络安全保障之“三同步”</title>
    <link href="https://xiejava.gitee.io/posts/955b1d60/"/>
    <id>https://xiejava.gitee.io/posts/955b1d60/</id>
    <published>2023-02-06T07:54:39.000Z</published>
    <updated>2023-03-10T09:45:02.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。<br>                                                                                                                                                               <p align='right'>–《网络安全法》第三十三条 </p></p></blockquote><p>信息系统的生命周期层面和安全保障要素层面不是相互孤立的，而是相互关联、密不可分的。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230206/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A8%A1%E5%9E%8B.png" alt="信息系统安全保障生命周期的安全保障要素"><br>在信息系统生命周期模型中，将信息系统的整个生命周期抽象成计划组织、开发采购、实施交付、运行维护和废弃5个阶段，加上在运行维护阶段的变更产生的反馈，形成信息系统生命周期完整的闭环结构。在信息系统生命周期中的任何时间点上，都需要综合信息系统安全保障的技术、管理、工程和人员保障要素。从信息系统建设开始，就应该综合考虑系统的安全保障要求，确保信息系统建设和信息系统安全保障建设同步规划、同步实施。也就是我们平时讲的<strong>信息系统和安全保障要“三同步”–同步规划、同步建设、同步使用</strong>。</p><ul><li><strong>同步规划</strong></li></ul><p>关键信息基础设施运营者应：<br>a）同步分析安全需求，即在关键信息基础设施建设或改建之初，从本组织的职能或业务的角度分析对关键信息基础设施实施网络安全的需求，形成安全需求说明书。<br>b）同步定义安全要求，即基于网络安全需求说明书，定义关键信息基础设施的网络安全要求，形成网络安全功能和性能说明书。<br>c）确保安全需求说明书得到网络安全责任部门签字认可。</p><ul><li><strong>同步建设</strong></li></ul><p>关键信息基础设施运营者应：<br>a）同步设计安全体系结构，即基于已经定义的关键信息基础设施的网络安全要求，设计网络安全体系结构，明确系统内的各类信息安全组件，说明各组件提供的信息安全服务及可能的实现机制。<br>b）同步开展详细的安全设计，即根据安全保护等级选择基本安全措施，细化安全机制在关键信息基础设施中的具体实现。<br>c）在建设或改建过程中，按照GB/T 22239工程实施相应等级的要求，同步建设符合其等级要求的网络安全设施，包括自行软件开发。<br>d）建设完成后，组织对关键信息基础设施进行验收并将网络安全作为验收的重要内容。</p><ul><li><strong>同步使用</strong></li></ul><p>关键信息基础设施运营者应：<br>a）同步运行安全设施，确保安全设施保持启用状态。<br>b）按照GB/T 22239安全运维管理相应等级的要求进行安全运维。<br>c）关键信息基础设施及其运行环境发生明显变化时，评估其风险，及时升级安全设施并实施变更管理。<br>d）对安全设施同步实施配置管理，包括制定配置管理计划，制定、记录、维护基线配置，保留基线配置的历史版本，便于必要时恢复历史配置。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。&lt;br&gt;                                                                
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>AI机器学习时序序列特征提取实现分类预测实战</title>
    <link href="https://xiejava.gitee.io/posts/9421a9eb/"/>
    <id>https://xiejava.gitee.io/posts/9421a9eb/</id>
    <published>2023-01-06T13:02:35.000Z</published>
    <updated>2023-03-19T07:58:52.215Z</updated>
    
    <content type="html"><![CDATA[<p>最近有位做医疗项目的同学咨询有一批人员的身高、体重、性别、年龄、心电图、是否有心脏病等数据是否可以根据这些数据预测某个人是否有心脏病的迹象。这当然是可以的，AI机器学习不就是干这事的吗？这是一个典型的分类算法。根据这些人体特征来判断是否存在潜在的疾病。问题是如何对心电图进行特征提取，提取出相关的特征，让模型进行学习和训练。</p><p>拿到数据后，第一步，我们首先来看一下数据。</p><h2 id="一、数据探索"><a href="#一、数据探索" class="headerlink" title="一、数据探索"></a>一、数据探索</h2><h3 id="1、读入数据"><a href="#1、读入数据" class="headerlink" title="1、读入数据"></a>1、读入数据</h3><p>导入numpy、pandas、matplotlib三大件，读入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">df=pd.read_csv(<span class="string">'data_csv.csv'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/1_%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt="在这里插入图片描述"></p><p>数据集中有age年龄、ismale性别、Weight身高、Height体重、HRTrend心电图、label是否有心脏病（1，是有心脏病、0是无心脏病）<br>这里看到主要的几个关键性的指标。HRTrend是csv中载入的时候数据是文本字符串格式，还有nan及\n等字符串，我们要将这些数据进行清洗规则化，将其转化为数组。</p><h3 id="2、数据处理"><a href="#2、数据处理" class="headerlink" title="2、数据处理"></a>2、数据处理</h3><p>先拿一个样本数据来看看数据的情况。对它进行相应的处理，包括去掉回车换行符、去多余空格、然后以空格作为分隔形成数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HRTrend_Data=df[<span class="string">'HRTrend'</span>][<span class="number">1</span>][<span class="number">1</span>:len(df[<span class="string">'HRTrend'</span>][<span class="number">1</span>])<span class="number">-1</span>]</span><br><span class="line">HRTrend_Data=HRTrend_Data.replace(<span class="string">'\n'</span>,<span class="string">''</span>) <span class="comment">#替换掉换行符</span></span><br><span class="line">HRTrend_Data=HRTrend_Data.replace(<span class="string">'nan'</span>,str(<span class="number">0</span>))   <span class="comment">#将nan补0</span></span><br><span class="line">HRTrend_Data=re.sub(<span class="string">' +'</span>, <span class="string">' '</span>, HRTrend_Data).strip() <span class="comment">#去掉多余的空格</span></span><br><span class="line">HRTrend_Data=np.asarray([float(s) <span class="keyword">for</span> s <span class="keyword">in</span> HRTrend_Data.split(<span class="string">' '</span>)])  <span class="comment">#将字符串通过空格分隔，转换成数组</span></span><br><span class="line">pd.DataFrame(HRTrend_Data).plot()</span><br><span class="line">HRTrend_Data</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/2_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.png" alt="在这里插入图片描述"></p><p>这个图形不是很规则不平滑，看数据是因为异常值太多，后面的数据都是0，这些0都是因为数据为Non补充进来的，有可能是应为数据采集的时候某个点位没有采集到。我们需要将这些异常值给处理掉。<br>对于中间为0的，我们可以通过采用前值填充或者后值填充（也就是用前面的值或后面的值来替代为0的值），后面全部为0的部分要去掉。应为会影响到一些关键性的特征，如均值、50%的值、70%的值等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_HRTrend1=pd.DataFrame(HRTrend_Data)</span><br><span class="line">df_HRTrend1.describe()</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/3_%E6%95%B0%E6%8D%AE%E6%8F%8F%E8%BF%B01.png" alt="在这里插入图片描述"></p><p>可以看到，这些异常值将会很大程度的影响一些关键特征，所以我们要处理异常值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HRTrend_Data=np.trim_zeros(HRTrend_Data)  <span class="comment">#去掉首尾的0</span></span><br><span class="line">df_data1=pd.DataFrame(HRTrend_Data)</span><br><span class="line">df_data1.replace(to_replace=<span class="number">0</span>, method=<span class="string">'ffill'</span>,inplace=<span class="literal">True</span>)  <span class="comment">#用前值替换掉中间的异常0</span></span><br><span class="line">df_data1.plot()</span><br><span class="line">df_data1.describe()</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/4_%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%90%8E.png" alt="在这里插入图片描述"></p><p>把刚对一个样本处理的过程写成一个函数，应用到所有的样本数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procdata</span><span class="params">(df_dataclumn)</span>:</span></span><br><span class="line">    ary_data=df_dataclumn[<span class="number">1</span>:len(df_dataclumn)<span class="number">-1</span>]</span><br><span class="line">    ary_data=ary_data.replace(<span class="string">'\n'</span>,<span class="string">''</span>)</span><br><span class="line">    ary_data=ary_data.replace(<span class="string">'nan'</span>,str(<span class="number">0</span>))</span><br><span class="line">    ary_data=re.sub(<span class="string">' +'</span>, <span class="string">' '</span>, ary_data).strip()</span><br><span class="line">    ary_data=np.asarray([float(s) <span class="keyword">for</span> s <span class="keyword">in</span> ary_data.split(<span class="string">' '</span>)])</span><br><span class="line">    ary_data=np.trim_zeros(ary_data)</span><br><span class="line">    df_data=pd.DataFrame(ary_data)</span><br><span class="line">    df_data.replace(to_replace=<span class="number">0</span>, method=<span class="string">'ffill'</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    ary_data=df_data.values</span><br><span class="line">    <span class="keyword">return</span> ary_data</span><br><span class="line"></span><br><span class="line">df[<span class="string">'HRTrend'</span>]=df[<span class="string">'HRTrend'</span>].map(procdata)</span><br><span class="line">df[<span class="string">'Weight'</span>].replace(to_replace=<span class="number">0</span>, method=<span class="string">'ffill'</span>,inplace=<span class="literal">True</span>) <span class="comment">#去异常值</span></span><br><span class="line">df[<span class="string">'Height'</span>].replace(to_replace=<span class="number">0</span>, method=<span class="string">'ffill'</span>,inplace=<span class="literal">True</span>) <span class="comment">#去异常值</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/5_%E5%8E%BB%E5%BC%82%E5%B8%B8%E5%80%BC%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE.png" alt="在这里插入图片描述"><br>找前六个样本看看效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">3</span>,figsize=(<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">        axes[x,y].plot(df[<span class="string">'HRTrend'</span>][i])</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/6_%E6%9F%A5%E7%9C%8B%E5%89%8D%E5%85%AD%E4%B8%AA%E6%95%B0%E6%8D%AE.png" alt="在这里插入图片描述"></p><h2 id="二、特征工程及模型训练"><a href="#二、特征工程及模型训练" class="headerlink" title="二、特征工程及模型训练"></a>二、特征工程及模型训练</h2><h3 id="方法一：通过描叙统计提取时序特征并进行模型训练"><a href="#方法一：通过描叙统计提取时序特征并进行模型训练" class="headerlink" title="方法一：通过描叙统计提取时序特征并进行模型训练"></a>方法一：通过描叙统计提取时序特征并进行模型训练</h3><ul><li>特征提取</li></ul><p>有量纲时序特征提取包括以内容。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/7_%E6%8F%8F%E8%BF%B0%E7%BB%9F%E8%AE%A1.png" alt="在这里插入图片描述"></p><p>可以看到，大部分内容都可以通过describe()获取。可以写个函数方法来获取相关的特征值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdescribefeatures</span><span class="params">(data)</span>:</span></span><br><span class="line">    df_feature=pd.DataFrame(data)</span><br><span class="line">    df_feature=df_feature.describe().T</span><br><span class="line">    range=df_feature[<span class="string">'max'</span>][<span class="number">0</span>]-df_feature[<span class="string">'min'</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> range,df_feature[<span class="string">'count'</span>][<span class="number">0</span>],df_feature[<span class="string">'mean'</span>][<span class="number">0</span>],df_feature[<span class="string">'std'</span>][<span class="number">0</span>],df_feature[<span class="string">'min'</span>][<span class="number">0</span>],df_feature[<span class="string">'25%'</span>][<span class="number">0</span>],df_feature[<span class="string">'50%'</span>][<span class="number">0</span>],df_feature[<span class="string">'75%'</span>][<span class="number">0</span>],df_feature[<span class="string">'max'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">HRTrend_np=np.array(df[<span class="string">'HRTrend'</span>])</span><br><span class="line">HRTrend_features_ary=[getdescribefeatures(d) <span class="keyword">for</span> d <span class="keyword">in</span> HRTrend_np]</span><br><span class="line">df_HRTrend_features=pd.DataFrame(HRTrend_features_ary,columns=[<span class="string">'HRTrend'</span>+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(HRTrend_features_ary[<span class="number">0</span>]))])</span><br><span class="line">df_HRTrend_features</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/8_%E6%8F%8F%E8%BF%B0%E7%BB%9F%E8%AE%A1%E7%89%B9%E5%BE%81.png" alt="在这里插入图片描述"></p><p>将心电图提出的统计信息特征与年龄、性别、身高、体重等特征合并，形成特征集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data=df[[<span class="string">'age'</span>,<span class="string">'ismale'</span>,<span class="string">'Weight'</span>,<span class="string">'Height'</span>,<span class="string">'label'</span>]].join(df_HRTrend_features)</span><br></pre></td></tr></table></figure><p>预留15个样本做最后的预测看效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_train_data=df_data[<span class="number">0</span>:len(df_data)<span class="number">-15</span>]    <span class="comment">#训练数据</span></span><br><span class="line">df_predict_data=df_data[len(df_data)<span class="number">-15</span>:len(df_data)]  <span class="comment">#用于预测的数据</span></span><br></pre></td></tr></table></figure><ul><li>模型训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> recall_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">x_tt, x_validation, y_tt, y_validation = train_test_split(x, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 将训练集再切分为训练集和测试集</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_tt, y_tt, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将模型的名字和模型函数作为元组添加到列表当中存储；</span></span><br><span class="line">models = []</span><br><span class="line">models.append((<span class="string">"KNN"</span>,KNeighborsClassifier(n_neighbors=<span class="number">3</span>))) <span class="comment">#指定邻居个数</span></span><br><span class="line">models.append((<span class="string">"SVM Classifier"</span>,SVC(C=<span class="number">1000</span>)))</span><br><span class="line"><span class="comment">#可以通过参数C来控制精度，C越大要求精度越高；  C——错分点的惩罚度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环调用所有模型进行训练、预测</span></span><br><span class="line"><span class="keyword">for</span> clf_name, clf <span class="keyword">in</span> models:</span><br><span class="line">    clf.fit(x_train, y_train)</span><br><span class="line">    xy_lst = [(x_train, y_train), (x_validation, y_validation), (x_test, y_test)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(xy_lst)):</span><br><span class="line">        x_part = xy_lst[i][<span class="number">0</span>]  <span class="comment"># 为遍历中的第0部分</span></span><br><span class="line">        y_part = xy_lst[i][<span class="number">1</span>]  <span class="comment"># 为遍历中的第1部分</span></span><br><span class="line">        y_pred = clf.predict(x_part)</span><br><span class="line">        print(i)  <span class="comment"># i是下标，0表示训练集，1表示验证集，2表示测试集</span></span><br><span class="line">        print(clf_name, <span class="string">"ACC:"</span>, accuracy_score(y_part, y_pred))</span><br><span class="line">        print(clf_name, <span class="string">"REC:"</span>, recall_score(y_part, y_pred))</span><br><span class="line">        print(clf_name, <span class="string">"F-score:"</span>, f1_score(y_part, y_pred))</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/9_%E6%8F%8F%E8%BF%B0%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%95%88%E6%9E%9C.png" alt="在这里插入图片描述"></p><p>SVM分类模型的效果要稍好于KNN的模型，但整体效果还不是很好。应该是提取的特征还是不够。我们来试下通过tsfresh提取时序特征并进行模型训练。</p><h3 id="方法二：通过tsfresh提取时序特征并进行模型训练"><a href="#方法二：通过tsfresh提取时序特征并进行模型训练" class="headerlink" title="方法二：通过tsfresh提取时序特征并进行模型训练"></a>方法二：通过tsfresh提取时序特征并进行模型训练</h3><ul><li>特征提取</li></ul><p>tsfresh可以自动提取各种时间特征，可以参考官方文档，一般的取最大、最小、偏度、峰度等统计指标这些都自动化集成了。<br><a href="https://tsfresh.readthedocs.io/en/latest/text/introduction.html" target="_blank" rel="noopener">https://tsfresh.readthedocs.io/en/latest/text/introduction.html</a><br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/10_tsfresh.png" alt="在这里插入图片描述"></p><p>通过tsfresh提取时序特征代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tsfresh <span class="keyword">import</span> extract_features</span><br><span class="line"><span class="keyword">from</span> tsfresh <span class="keyword">import</span> select_features</span><br><span class="line">dfx_HRTrend=pd.DataFrame()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">    df_i=pd.DataFrame(df[<span class="string">'HRTrend'</span>][i],columns=[<span class="string">'HRTrend'</span>])</span><br><span class="line">    df_i[<span class="string">'id'</span>]=i</span><br><span class="line">    df_i[<span class="string">'time'</span>]=np.array(range(<span class="number">1</span>,len(df_i)+<span class="number">1</span>))</span><br><span class="line">    df_i[<span class="string">'label'</span>]=df[<span class="string">'label'</span>][i]</span><br><span class="line">    dfx_HRTrend=pd.concat(objs=[dfx_HRTrend,df_i])</span><br><span class="line"></span><br><span class="line">dfx_xtracted_features = extract_features(dfx_HRTrend,column_id=<span class="string">"id"</span>, column_sort=<span class="string">"time"</span>)</span><br><span class="line">dfx_xtracted_features</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/11_%E6%97%B6%E5%BA%8F%E7%89%B9%E5%BE%81%E6%89%A9%E5%B1%95.png" alt="在这里插入图片描述"></p><p>可以看到tsfresh自动提取了1574colums的特征，但是我们要选取与标签有相关性的特征。tsfresh可以自动做到这一点，通过tsfresh的select_features传入特征和标签来选择与标签有相关性的特征，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tsfresh.utilities.dataframe_functions <span class="keyword">import</span> impute</span><br><span class="line">impute(dfx_xtracted_features)</span><br><span class="line">df_HRTrend_features = select_features(dfx_xtracted_features, df[<span class="string">'label'</span>])</span><br><span class="line">df_HRTrend_features</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/12_%E6%97%B6%E5%BA%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96.png" alt="在这里插入图片描述"></p><p>通过特征选择自动选取了有相关性的143个特征，比前面缩减了很多，有利于提高模型训练的效率和精度。<br>我们再来看一下模型训练的效果。<br>同样将心电图通过tsfresh提出的时序特征与年龄、性别、身高、体重等特征合并，形成特征集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data=df[[<span class="string">'age'</span>,<span class="string">'ismale'</span>,<span class="string">'Weight'</span>,<span class="string">'Height'</span>,<span class="string">'label'</span>]].join(df_HRTrend_features)</span><br></pre></td></tr></table></figure><p>预留15个样本做最后的预测看效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_train_data=df_data[<span class="number">0</span>:len(df_data)<span class="number">-15</span>]    <span class="comment">#训练数据</span></span><br><span class="line">df_predict_data=df_data[len(df_data)<span class="number">-15</span>:len(df_data)]  <span class="comment">#用于预测的数据</span></span><br></pre></td></tr></table></figure><p>模型训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> recall_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">x_tt, x_validation, y_tt, y_validation = train_test_split(x, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 将训练集再切分为训练集和测试集</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_tt, y_tt, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将模型的名字和模型函数作为元组添加到列表当中存储；</span></span><br><span class="line">models = []</span><br><span class="line">models.append((<span class="string">"KNN"</span>,KNeighborsClassifier(n_neighbors=<span class="number">3</span>))) <span class="comment">#指定邻居个数</span></span><br><span class="line">models.append((<span class="string">"SVM Classifier"</span>,SVC(C=<span class="number">1000</span>)))</span><br><span class="line"><span class="comment">#可以通过参数C来控制精度，C越大要求精度越高；  C——错分点的惩罚度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环调用所有模型进行训练、预测</span></span><br><span class="line"><span class="keyword">for</span> clf_name, clf <span class="keyword">in</span> models:</span><br><span class="line">    clf.fit(x_train, y_train)</span><br><span class="line">    xy_lst = [(x_train, y_train), (x_validation, y_validation), (x_test, y_test)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(xy_lst)):</span><br><span class="line">        x_part = xy_lst[i][<span class="number">0</span>]  <span class="comment"># 为遍历中的第0部分</span></span><br><span class="line">        y_part = xy_lst[i][<span class="number">1</span>]  <span class="comment"># 为遍历中的第1部分</span></span><br><span class="line">        y_pred = clf.predict(x_part)</span><br><span class="line">        print(i)  <span class="comment"># i是下标，0表示训练集，1表示验证集，2表示测试集</span></span><br><span class="line">        print(clf_name, <span class="string">"ACC:"</span>, accuracy_score(y_part, y_pred))</span><br><span class="line">        print(clf_name, <span class="string">"REC:"</span>, recall_score(y_part, y_pred))</span><br><span class="line">        print(clf_name, <span class="string">"F-score:"</span>, f1_score(y_part, y_pred))</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/13_%E6%97%B6%E5%BA%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E5%90%8E%E7%9A%84%E6%95%88%E6%9E%9C.png" alt="在这里插入图片描述"></p><p>可以看到不管是KNN模型和SVM的模型都取得了不错的效果。</p><h2 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h2><p>最后我们来看一下，用预留的15个样本预测的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pre_test_y=df_predict_data[<span class="string">'label'</span>]</span><br><span class="line">pre_test_x=df_predict_data.drop(columns=<span class="string">'label'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clf_name, clf <span class="keyword">in</span> models:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pre_test_x.index:</span><br><span class="line">        y_predict=clf.predict(pre_test_x.loc[[i]])</span><br><span class="line">        predict_result=<span class="string">'预测错误！'</span></span><br><span class="line">        <span class="keyword">if</span> y_predict==pre_test_y.loc[[i]].values:</span><br><span class="line">            predict_result=<span class="string">'预测正确！'</span></span><br><span class="line">        print(<span class="string">'第'</span>+str(i)+<span class="string">'个样本'</span>+clf_name+<span class="string">' 预测y='</span>+str(y_predict)+<span class="string">'--实际 y='</span>+str(pre_test_y.loc[[i]].values)+<span class="string">' - '</span>+predict_result)</span><br><span class="line">    print(<span class="string">'-'</span>*<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>先是通过描叙统计提取时序特征并进行模型训练后模型预测的结果：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/14_%E6%8F%8F%E5%8F%99%E7%BB%9F%E8%AE%A1%E9%A2%84%E6%B5%8B.png" alt="在这里插入图片描述"></p><p>还是有不少预测错误了。<br>再来看通过tsfresh提取时序特征并进行模型训练后模型预测的结果：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230106/15_%E6%97%B6%E5%BA%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E9%A2%84%E6%B5%8B.png" alt="在这里插入图片描述"></p><p>可以看到预留的15个样本都预测正确，取得了不错的效果！</p><p>本文通过心电图分类模型介绍了从数据处理、时序特征提取、模型训练和效果评估。验证了对于小数据量，通过tsfresh提取时序特征，往往能够取得很好的效果。</p><p>全部源代码及数据集见：<a href="https://download.csdn.net/download/fullbug/87369380" target="_blank" rel="noopener">https://download.csdn.net/download/fullbug/87369380</a></p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有位做医疗项目的同学咨询有一批人员的身高、体重、性别、年龄、心电图、是否有心脏病等数据是否可以根据这些数据预测某个人是否有心脏病的迹象。这当然是可以的，AI机器学习不就是干这事的吗？这是一个典型的分类算法。根据这些人体特征来判断是否存在潜在的疾病。问题是如何对心电图进行
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="AI机器学习" scheme="https://xiejava.gitee.io/tags/AI%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Django+Celery+Flower实现异步和定时任务及其监控告警</title>
    <link href="https://xiejava.gitee.io/posts/c2fa9556/"/>
    <id>https://xiejava.gitee.io/posts/c2fa9556/</id>
    <published>2023-01-06T13:00:15.000Z</published>
    <updated>2023-03-19T06:52:53.903Z</updated>
    
    <content type="html"><![CDATA[<p>用Django框架进行web开发非常的快捷方便，但Django框架请求/响应是同步的。但我们在实际项目中经常会碰到一些耗时的不能立即返回请求结果任务如：数据爬取、发邮件等，如果常时间等待对用户体验不是很好，在这种情况下就需要实现异步实现，马上返回响应请求，但真正的耗时任务在后台异步执行。Django框架本身无法实现异步响应但可以通过Celery很快的实现异步和定时任务。本文将介绍如何通过Django+Celery+Flower实现异步和定时任务及其任务的监控告警。</p><p>常见的任务有两类，一类是异步任务，一类是定时任务（定时执行或按一定周期执行）。Celery都能很好的支持。</p><p>Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理， 如果你的业务场景中需要用到异步任务，就可以考虑使用celery， 举几个实例场景中可用的例子:</p><ul><li>异步任务：将耗时的操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音频处理等等</li><li>做一个定时任务，比如每天定时执行爬虫爬取指定内容</li></ul><p>Celery 在执行任务时需要通过一个消息中间件（Broker）来接收和发送任务消息，以及存储任务结果， 一般使用rabbitMQ、Redis或其他DB。</p><p>本文使用redis作为消息中间件和结果存储，在后面的通过数据库监控任务执行案例将介绍用到数据库作为结果存储。</p><h2 id="一、在Django中引入Celary"><a href="#一、在Django中引入Celary" class="headerlink" title="一、在Django中引入Celary"></a>一、在Django中引入Celary</h2><h3 id="1、安装库"><a href="#1、安装库" class="headerlink" title="1、安装库"></a>1、安装库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install redis</span><br><span class="line">pip install eventlet  <span class="comment">#在windows环境下需要安装eventlet包</span></span><br></pre></td></tr></table></figure><h3 id="2、引入celary"><a href="#2、引入celary" class="headerlink" title="2、引入celary"></a>2、引入celary</h3><p>在主项目目录下，新建celary.py文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统环境变量，否则在启动celery时会报错</span></span><br><span class="line"><span class="comment"># taskproject 是当前项目名</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'taskproject.settings'</span>)</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line">celery_app = Celery(<span class="string">'taskproject'</span>)</span><br><span class="line">celery_app.config_from_object(<span class="string">'django.conf:settings'</span>)</span><br><span class="line">celery_app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/1_%E5%BC%95%E5%85%A5celery.png" alt="在这里插入图片描述"></p><p>在主目录的<strong>init</strong>.py中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'celery_app'</span>]</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/2___init__py%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81.png" alt="在这里插入图片描述"></p><h3 id="3、在settings-py中设置celery的相关参数"><a href="#3、在settings-py中设置celery的相关参数" class="headerlink" title="3、在settings.py中设置celery的相关参数"></a>3、在settings.py中设置celery的相关参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###----Celery redis 配置-----###</span></span><br><span class="line"><span class="comment"># Broker配置，使用Redis作为消息中间件</span></span><br><span class="line">BROKER_URL = <span class="string">'redis://:redispassword@127.0.0.1:6379/0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BACKEND配置，使用redis</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:redispassword@127.0.0.1:6379/1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT=[<span class="string">'json'</span>]</span><br><span class="line">CELERY_TASK_SERIALIZER=<span class="string">'json'</span></span><br><span class="line"><span class="comment"># 结果序列化方案</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务结果过期时间，秒</span></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区配置</span></span><br><span class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/3_setting%E4%B8%AD%E8%AE%BE%E7%BD%AEcelery%E7%9A%84%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0.png" alt="在这里插入图片描述"></p><p>这时候Celery的基本配置完成了，可以实现并添加任务了。</p><h2 id="二、实现异步任务"><a href="#二、实现异步任务" class="headerlink" title="二、实现异步任务"></a>二、实现异步任务</h2><h3 id="1、创建tasks-py"><a href="#1、创建tasks-py" class="headerlink" title="1、创建tasks.py"></a>1、创建tasks.py</h3><p>在子应用下建立各自对应的任务文件tasks.py(<code>必须是tasks.py这个名字，不允许修改</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(x)):</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        logger.info(<span class="string">'this is task1 '</span>+str(i))</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scheduletask1</span><span class="params">()</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    logger.info(<span class="string">'this is scheduletask '</span>+now.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在tasks.py中我们定义了两个任务，这两个任务要用@shared_task装饰起来，否则celery无法管理。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/4_@shared_task.png" alt="在这里插入图片描述"></p><p>为了放便执行我们通过views把这两个任务通过函数方法调用起来，用URL进行发布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">views.py</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> tasks</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runtask</span><span class="params">(request)</span>:</span></span><br><span class="line">    x=request.GET.get(<span class="string">'x'</span>)</span><br><span class="line">    tasks.task1.delay(x)</span><br><span class="line">    content= &#123;<span class="string">'200'</span>: <span class="string">'run task1 success!---'</span>+str(x)&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runscheduletask</span><span class="params">(request)</span>:</span></span><br><span class="line">    tasks.scheduletask1.delay()</span><br><span class="line">    content= &#123;<span class="string">'200'</span>: <span class="string">'success！'</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(content)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/5_views%E5%8F%91%E5%B8%83%E4%BB%BB%E5%8A%A1.png" alt="在这里插入图片描述"></p><p>在urls中加入路由进行发布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> taskapp <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'task'</span>, views.runtask),</span><br><span class="line">    path(<span class="string">'runscheduletask'</span>, views.runscheduletask),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/6_urls%E5%8A%A0%E5%85%A5%E8%B7%AF%E7%94%B1%E8%BF%9B%E8%A1%8C%E5%8F%91%E5%B8%83.png" alt="在这里插入图片描述"></p><p>在项目的主urls中加入子项目的urls<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/images/2023/20230112/7_%E4%B8%BBurls%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%AD%90%E9%A1%B9%E7%9B%AE%E7%9A%84urls.png" alt="在这里插入图片描述"></p><h3 id="2、启动celery"><a href="#2、启动celery" class="headerlink" title="2、启动celery"></a>2、启动celery</h3><blockquote><p>在启动celery之前，先要启动redis服务，因为celery在settings中配置要用到redis作为消息中间件和结果存储。<br>windows环境下启动redis的命令为redis-server.exe redis.windows.conf</p></blockquote><p>在控制台启动celery的worker</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/8_%E5%90%AF%E5%8A%A8celery.png" alt="在这里插入图片描述"></p><p>启动django访问url调用任务，看异步效果<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/9.%E6%9F%A5%E7%9C%8B%E5%BC%82%E6%AD%A5%E6%95%88%E6%9E%9C.png" alt="在这里插入图片描述"></p><h3 id="3、查看任务"><a href="#3、查看任务" class="headerlink" title="3、查看任务"></a>3、查看任务</h3><p>控制台查看异步任务执行的情况，可以看web的url很快返回响应结果，后台控制台一直在执行异步任务。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/10_%E6%9F%A5%E7%9C%8B%E4%BB%BB%E5%8A%A1.png" alt="在这里插入图片描述"></p><h2 id="三、实现定时任务"><a href="#三、实现定时任务" class="headerlink" title="三、实现定时任务"></a>三、实现定时任务</h2><p>Celery实现定时任务也很方便</p><h3 id="1、定义调度器"><a href="#1、定义调度器" class="headerlink" title="1、定义调度器"></a>1、定义调度器</h3><p>在settings.py中加入定时任务的定义就可以实现定时任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'every_5_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.scheduletask1'</span>,</span><br><span class="line">        <span class="comment"># 每5秒执行一次</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'args'</span>: ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里这个scheduletask1是前面tasks.py中定义的任务，当然也可以定义多个定时任务，如加一个task1，task1是有参数的，可以在’args’: ()中传入参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'every_5_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.scheduletask1'</span>,</span><br><span class="line">        <span class="comment"># 每5秒执行一次</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'args'</span>: ()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'every_10_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.task1'</span>,</span><br><span class="line">        <span class="comment"># 每10秒执行一次,task1的参数是5</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">'args'</span>: ([<span class="number">5</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/11_%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E4%BB%BB%E5%8A%A1.png" alt="在这里插入图片描述"></p><p>这里定义了task1是10秒执行一次，传入的参数是5。</p><h3 id="2、启动beat"><a href="#2、启动beat" class="headerlink" title="2、启动beat"></a>2、启动beat</h3><p>需要保持worker进程，另外开一个控制台启动beat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="3、查看任务-1"><a href="#3、查看任务-1" class="headerlink" title="3、查看任务"></a>3、查看任务</h3><p>启动任务后看控制台打印的日志task1和scheduletask1都按计划定时执行了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/12_%E6%9F%A5%E7%9C%8Btask%E5%92%8Cscheduletask.png" alt="在这里插入图片描述"></p><h2 id="三、通过数据库配置定时任务"><a href="#三、通过数据库配置定时任务" class="headerlink" title="三、通过数据库配置定时任务"></a>三、通过数据库配置定时任务</h2><p>虽然通过settings.py的配置可以实现定时任务的配置，做为实际项目中可能还是不够实用，更加工程化的做法是将定时任务的配置放到数据库里通过界面来配置。同样Celery对此也提供了很好的支持，这需要安装django-celery-beat插件。以下将介绍使用过程。</p><h3 id="1、安装djiango-celery-beat"><a href="#1、安装djiango-celery-beat" class="headerlink" title="1、安装djiango-celery-beat"></a>1、安装djiango-celery-beat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-beat</span><br></pre></td></tr></table></figure><h3 id="2、在APP中注册djiango-celery-beat"><a href="#2、在APP中注册djiango-celery-beat" class="headerlink" title="2、在APP中注册djiango-celery-beat"></a>2、在APP中注册djiango-celery-beat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">....</span><br><span class="line"><span class="string">'django_celery_beat'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3、在settings-py中设置调度器及时区"><a href="#3、在settings-py中设置调度器及时区" class="headerlink" title="3、在settings.py中设置调度器及时区"></a>3、在settings.py中设置调度器及时区</h3><p>在settings.py中屏蔽到原来的调度器，加入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CELERYBEAT_SCHEDULER = <span class="string">'django_celery_beat.schedulers.DatabaseScheduler'</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/13_settings%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt="在这里插入图片描述"></p><p>在setings.py中设置好语言、时区等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="4、进行数据库迁移"><a href="#4、进行数据库迁移" class="headerlink" title="4、进行数据库迁移"></a>4、进行数据库迁移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate django_celery_beat</span><br></pre></td></tr></table></figure><h3 id="5、分别启动woker和beta"><a href="#5、分别启动woker和beta" class="headerlink" title="5、分别启动woker和beta"></a>5、分别启动woker和beta</h3><p>在两个控制台分别启动woker和beta</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="6、启动django服务，访问admin的web管理端"><a href="#6、启动django服务，访问admin的web管理端" class="headerlink" title="6、启动django服务，访问admin的web管理端"></a>6、启动django服务，访问admin的web管理端</h3><p>访问 <a href="http://localhost:8000/admin/" target="_blank" rel="noopener">http://localhost:8000/admin/</a> 可以看到周期任务的管理菜单，管理定时任务非常方便。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/14_Django%E7%AE%A1%E7%90%86web%E7%AB%AF.png" alt="在这里插入图片描述"></p><h3 id="7、配置定时任务"><a href="#7、配置定时任务" class="headerlink" title="7、配置定时任务"></a>7、配置定时任务</h3><p>点击“间隔”<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/15_%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%82%B9%E5%87%BB%E9%97%B4%E9%9A%94.png" alt="在这里插入图片描述"></p><p>点击“增加间隔”来增加定时任务的配置，增加一个5秒执行一次的定时器。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/16_%E7%82%B9%E5%87%BB%E5%A2%9E%E5%8A%A0%E9%97%B4%E9%9A%94.png" alt="在这里插入图片描述"></p><p>看到有个每5秒的定时器<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/17_%E6%AF%8F5%E7%A7%92%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="在这里插入图片描述"></p><p>这时可以用这个定时器去新建调度任务了。选择周期性任务，点击“增加周期性任务”<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/18_%E5%A2%9E%E5%8A%A0%E5%91%A8%E6%9C%9F%E6%80%A7%E4%BB%BB%E5%8A%A1.png" alt="在这里插入图片描述"></p><p>填入任务名，选择需要定时执行的任务<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/19_%E5%A2%9E%E5%8A%A0%E5%91%A8%E6%9C%9F%E6%80%A7%E4%BB%BB%E5%8A%A1%E7%95%8C%E9%9D%A2.png" alt="在这里插入图片描述"></p><p>因为task1需要参数，在后面参数设置中进行参数的设置。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/20_%E5%91%A8%E6%9C%9F%E6%80%A7%E4%BB%BB%E5%8A%A1%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE.png" alt="在这里插入图片描述"></p><p>保存后可以看到新加了一条“每5秒执行一次task1”的调度任务。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/21_%E6%88%90%E5%8A%9F%E6%B7%BB%E5%8A%A0%E6%AF%8F5%E7%A7%92%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1task1.png" alt="在这里插入图片描述"></p><h3 id="8、查看调度效果"><a href="#8、查看调度效果" class="headerlink" title="8、查看调度效果"></a>8、查看调度效果</h3><p>在woker和beta的控制台都可以看到有定时任务执行的信息，说明任务被成功调度执行了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/22_%E6%9F%A5%E7%9C%8B%E8%B0%83%E5%BA%A6%E6%95%88%E6%9E%9C.png" alt="在这里插入图片描述"></p><h2 id="四、通过django的web界面监控任务执行情况"><a href="#四、通过django的web界面监控任务执行情况" class="headerlink" title="四、通过django的web界面监控任务执行情况"></a>四、通过django的web界面监控任务执行情况</h2><p>在控制台监控任务执行情况，还不是很方便，最好是能够通过web界面看到任务的执行情况，如有多少任务在执行，有多少任务执行失败了等。这个Celery也是可以做到了，就是将任务执行结果写到数据库中，通过web界面显示出来。这里要用到django-celery-results插件。通过插件可以使用Django的orm作为结果存储，这样的好处在于我们可以直接通过django的数据查看到任务状态，同时为可以制定更多的操作，下面介绍如何使用orm作为结果存储。</p><h3 id="1、安装django-celery-results"><a href="#1、安装django-celery-results" class="headerlink" title="1、安装django-celery-results"></a>1、安装django-celery-results</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-results</span><br></pre></td></tr></table></figure><h3 id="2、配置settings-py，注册app"><a href="#2、配置settings-py，注册app" class="headerlink" title="2、配置settings.py，注册app"></a>2、配置settings.py，注册app</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">...,</span><br><span class="line"><span class="string">'django_celery_results'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3、修改backend配置，将Redis改为django-db"><a href="#3、修改backend配置，将Redis改为django-db" class="headerlink" title="3、修改backend配置，将Redis改为django-db"></a>3、修改backend配置，将Redis改为django-db</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BACKEND配置，使用redis</span></span><br><span class="line"><span class="comment">#CELERY_RESULT_BACKEND = 'redis://:12345678@127.0.0.1:6379/1'</span></span><br><span class="line"><span class="comment"># 使用使用django orm 作为结果存储</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'django-db'</span>  <span class="comment">#使用django orm 作为结果存储</span></span><br></pre></td></tr></table></figure><h3 id="4、迁移数据库"><a href="#4、迁移数据库" class="headerlink" title="4、迁移数据库"></a>4、迁移数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate django_celery_results</span><br></pre></td></tr></table></figure><p>可以看到创建了django_celery_results相关的表<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/23_%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="在这里插入图片描述"></p><h3 id="5、查看任务"><a href="#5、查看任务" class="headerlink" title="5、查看任务"></a>5、查看任务</h3><p>启动django服务后，执行异步和定时任务，就可以在管理界面看到任务的执行情况，执行了哪些任务，哪些任务执行失败了等。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/24_web%E7%95%8C%E9%9D%A2%E6%9F%A5%E7%9C%8B%E4%BB%BB%E5%8A%A1.png" alt="在这里插入图片描述"></p><h2 id="五、通过Flower监控任务执行情况"><a href="#五、通过Flower监控任务执行情况" class="headerlink" title="五、通过Flower监控任务执行情况"></a>五、通过Flower监控任务执行情况</h2><p>如果不想通django的管理界面监控任务的执行，还可以通过Flower插件来进行任务的监控。FLower的界面更加丰富，可以监控的信息更全。以下介绍通过Flower来进行任务监控。</p><h3 id="1、安装flower"><a href="#1、安装flower" class="headerlink" title="1、安装flower"></a>1、安装flower</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flower</span><br></pre></td></tr></table></figure><h3 id="2、启动flower"><a href="#2、启动flower" class="headerlink" title="2、启动flower"></a>2、启动flower</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject flower --port<span class="number">-5566</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/25_%E5%90%AF%E5%8A%A8flower.png" alt="在这里插入图片描述"></p><h3 id="3、使用flower进行任务监控"><a href="#3、使用flower进行任务监控" class="headerlink" title="3、使用flower进行任务监控"></a>3、使用flower进行任务监控</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/26_%E4%BD%BF%E7%94%A8flower%E8%BF%9B%E8%A1%8C%E4%BB%BB%E5%8A%A1%E7%9B%91%E6%8E%A7.png" alt="在这里插入图片描述"></p><p>点击失败的我们可以看到执行失败的详情，这里是故意给task1的参数传了个‘a’字符，导致它执行报错了。可以看到任务执行的报错信息也展示出来了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/27_flower%E7%BB%93%E6%9E%9C.png" alt="在这里插入图片描述"></p><h2 id="六、实现任务异常自动邮件告警"><a href="#六、实现任务异常自动邮件告警" class="headerlink" title="六、实现任务异常自动邮件告警"></a>六、实现任务异常自动邮件告警</h2><p>虽然可以通过界面来监控了，但是我们想要得更多，人不可能天天盯着界面看吧，如果能实现任务执行失败就自动发邮件告警就好了。这个Celery当然也是没有问题的。<br>通过钩子程序在异常的时候触发邮件通知。</p><h3 id="1、加入钩子程序"><a href="#1、加入钩子程序" class="headerlink" title="1、加入钩子程序"></a>1、加入钩子程序</h3><p>对tasks.py的改造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Task</span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHookTask</span><span class="params">(Task)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_success</span><span class="params">(self, retval, task_id, args, kwargs)</span>:</span></span><br><span class="line">        info=<span class="string">f'任务成功-- 0task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , successful !'</span></span><br><span class="line">        logger.info(info)</span><br><span class="line">        send_mail(<span class="string">'celery任务监控'</span>, info, <span class="string">'sendmail@qq.com'</span>, [<span class="string">'tomail@qq.com'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_failure</span><span class="params">(self, exc, task_id, args, kwargs, einfo)</span>:</span></span><br><span class="line">        info=<span class="string">f'任务失败-- task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , failed ! erros: <span class="subst">&#123;exc&#125;</span>'</span></span><br><span class="line">        logger.info(info)</span><br><span class="line">        send_mail(<span class="string">'celery任务监控异常'</span>, info, <span class="string">'sendmail@qq.com'</span>, [<span class="string">'tomail@qq.com'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_retry</span><span class="params">(self, exc, task_id, args, kwargs, einfo)</span>:</span></span><br><span class="line">        logger.info(<span class="string">f'task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , retry !  erros: <span class="subst">&#123;exc&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task(base=MyHookTask, bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">(self,x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(x)):</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        logger.info(<span class="string">'this is task1 '</span>+str(i))</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scheduletask1</span><span class="params">()</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    logger.info(<span class="string">'this is scheduletask '</span>+now.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/28_%E5%8A%A0%E5%85%A5%E9%92%A9%E5%AD%90%E7%A8%8B%E5%BA%8F.png" alt="在这里插入图片描述"></p><h3 id="2、重启服务"><a href="#2、重启服务" class="headerlink" title="2、重启服务"></a>2、重启服务</h3><p>将work和beta服务关掉，在两个控制台分别重新启动woker和beta</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="3、验证效果"><a href="#3、验证效果" class="headerlink" title="3、验证效果"></a>3、验证效果</h3><p>在任务成功或失败的时候发邮件通知。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/29_%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%BB%93%E6%9E%9C.png" alt="在这里插入图片描述"></p><p>任务执行成功通知<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/30_%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%88%90%E5%8A%9F%E9%80%9A%E7%9F%A5.png" alt="在这里插入图片描述"></p><p>任务执行异常告警通知<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230112/31_%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%BC%82%E5%B8%B8%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5.png" alt="在这里插入图片描述"></p><p>Django如何发送邮件见 <a href="https://blog.csdn.net/fullbug/article/details/128495415" target="_blank" rel="noopener">https://blog.csdn.net/fullbug/article/details/128495415</a></p><p>至此，本文通过几个简单的应用介绍了Django+Celery+Flower实现异步和定时任务及其监控告警。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用Django框架进行web开发非常的快捷方便，但Django框架请求/响应是同步的。但我们在实际项目中经常会碰到一些耗时的不能立即返回请求结果任务如：数据爬取、发邮件等，如果常时间等待对用户体验不是很好，在这种情况下就需要实现异步实现，马上返回响应请求，但真正的耗时任务在
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>通过Django发送邮件</title>
    <link href="https://xiejava.gitee.io/posts/73474fe7/"/>
    <id>https://xiejava.gitee.io/posts/73474fe7/</id>
    <published>2022-12-30T06:57:46.000Z</published>
    <updated>2023-03-05T04:58:48.369Z</updated>
    
    <content type="html"><![CDATA[<p>通过Django发送邮件非常的简单，在Python中已经内置了一个smtplib邮件发送模块，Django在此基础上进行了简单地封装，我们可以在Django的环境中方便的发送邮件。大部分邮件发送成功主要是邮件的参数配置，本文以常用的126邮箱和QQ邮箱为例介绍Django发送邮件的配置，其他提供smtp邮件服务的邮箱都是一样的。</p><h2 id="一、Django邮件配置"><a href="#一、Django邮件配置" class="headerlink" title="一、Django邮件配置"></a>一、Django邮件配置</h2><p>用Django发送邮件需要告诉你的邮件服务器相应的参数配置，需要在settings.py中进行配置好。<br>默认情况下，使用配置文件中的<code>EMAIL_HOST</code>和<code>EMAIL_PORT</code>设置SMTP服务器主机和端口，<code>EMAIL_HOST_USER</code>和<br><code>EMAIL_HOST_PASSWORD</code>是用户名和密码。如果设置了EMAIL_USE_TLS和EMAIL_USE_SSL，它们将控制是否使用相应的加密链接。<br>典型的配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.126.com'</span>      <span class="comment">#126邮箱的邮箱服务地址</span></span><br><span class="line">EMAIL_PORT = <span class="number">25</span>          <span class="comment">#端口，大部分都是默认25</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'yourmail@126.com'</span>    <span class="comment">#这里是你的邮箱账号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'yourpassword'</span>   <span class="comment">#注意这里不能用你邮箱账号的密码，而要用申请的设备授权码。</span></span><br></pre></td></tr></table></figure><p>这里要注意的两个地方，一个是EMAIL_PORT端口、一个是EMAIL_HOST_PASSWORD密码。<br>端口一般默认是25，但有些邮箱改了默认端口或需要用加密链接465、578端口，可以从邮件服务商查到。<br>密码以前可以用邮箱账号密码，但这几年随着安全要求的提高，大部分主要的邮件服务提供商都要用申请的授权码进一步加强安全系数。<br>这里介绍这些关键的信息如何在邮件服务商获取。</p><blockquote><p> <code>注意EMAIL_HOST_PASSWORD这里不能用你邮箱账号的密码，而要用申请的设备授权码。</code></p></blockquote><h3 id="126邮箱"><a href="#126邮箱" class="headerlink" title="126邮箱"></a>126邮箱</h3><p>进入到邮箱配置界面，点击“POP3/SMTP/IMAP”，注意要开启SMTP。<br><img src="https://img-blog.csdnimg.cn/01e56aa8fcd4445d83f7d4363176c4d4.png" alt="126邮箱配置界面"></p><p>授权码是用于登录第三方邮件客户端的专用密码，点击”新增授权密码”，降会弹出一个账号安全验证，扫描后可以快速的发短信。<br><img src="https://img-blog.csdnimg.cn/e832aa92deae43348df02688c1df1a38.png" alt="账号安全验证界面"></p><p>用你的注册手机发完短信后点击”我已发送”就会弹出一个授权码的窗口，要把这个授权码记下来，这个窗口只显示一次。<br><img src="https://img-blog.csdnimg.cn/c7b70b42ca7f4dcb9f5c7cfbc175e642.png" alt="授权码显示界面"></p><h3 id="QQ邮箱"><a href="#QQ邮箱" class="headerlink" title="QQ邮箱"></a>QQ邮箱</h3><p>进入到QQ邮箱WEB界面后点击“设置”，点击“邮件设置”的“账户”页签拉到“账户安全”处就可以看到相关的SMTP服务信息</p><p><img src="https://img-blog.csdnimg.cn/0930d68e01c8495fa3c61882e941793b.png" alt="QQ邮箱配置界面"></p><p>点击“生成授权码”，将弹出验证密保的界面。<br><img src="https://img-blog.csdnimg.cn/70d5db3bcfee4daf8bb8fb199f8093fd.png" alt="验证密保界面"><br>根据提示发送短信后，点击我已发送，将会弹出生成授权码的界面显示授权码。<br><img src="https://img-blog.csdnimg.cn/a1779932a52544ee80fd34074eb57faf.png" alt="授权码生成界面"></p><p>如果需要SSL加密方式，可以进一步查看服务商的SMTP服务说明<br>如QQ邮箱的服务说明 <a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331" target="_blank" rel="noopener">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331</a><br><img src="https://img-blog.csdnimg.cn/a8a2c3710e6844cdb132a2e29a064568.png" alt="服务说明界面"></p><p>看到使用SSL，端口号是465或587</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.qq.com'</span>  <span class="comment">#QQ邮箱的smtp服务器</span></span><br><span class="line">EMAIL_PORT = <span class="number">465</span>           <span class="comment">#端口为465或587</span></span><br><span class="line">EMAIL_USE_SSL = <span class="literal">True</span>    <span class="comment">#SSL加密方式设置为True</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'yourmail@qq.com'</span>     <span class="comment">#这里是你的邮箱账号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'yourpassword'</span>   <span class="comment">#注意这里不能用你邮箱账号的密码，而要用申请的设备授权码。</span></span><br></pre></td></tr></table></figure><h2 id="二、测试发送邮件"><a href="#二、测试发送邮件" class="headerlink" title="二、测试发送邮件"></a>二、测试发送邮件</h2><p>可以用django的环境在shell中测试。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line">from django.core.mail import send_mail</span><br><span class="line">send_mail(<span class="string">'test'</span>,<span class="string">'this is test mail'</span>,<span class="string">'yourmail@qq.com'</span>,[<span class="string">'yourmail@126.com'</span>,<span class="string">'yormail@qq.com'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/85b59a9da2ad450793807d3e4260e8f6.png" alt="在这里插入图片描述"></p><p>如果反回1就表示发送成功了, 查收邮件到达。</p><p>如果发送不成功，请仔细核对邮箱服务的相关配置，一般来说与django无关。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过Django发送邮件非常的简单，在Python中已经内置了一个smtplib邮件发送模块，Django在此基础上进行了简单地封装，我们可以在Django的环境中方便的发送邮件。大部分邮件发送成功主要是邮件的参数配置，本文以常用的126邮箱和QQ邮箱为例介绍Django发
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>安全托管与重保安全服务</title>
    <link href="https://xiejava.gitee.io/posts/5381000/"/>
    <id>https://xiejava.gitee.io/posts/5381000/</id>
    <published>2022-12-28T06:48:37.000Z</published>
    <updated>2023-03-05T04:59:01.551Z</updated>
    
    <content type="html"><![CDATA[<p>近年来，高新技术数字经济快速发展，数字化转型成为各个行业高质量发展的重要引擎和创新路径。网络安全作为数字化建设的安全基石，却面临着网络安全人才缺口不断攀升的直接挑战。各安全公司依托自己网络安全经验的人才优势向客户提供各类安全服务，最常见的就是安全托管和重保安全。</p><p>安全托管服务与重保安全服务都是为客户提供安全服务，这两者有啥区别呢？</p><h2 id="一、安全托管服务"><a href="#一、安全托管服务" class="headerlink" title="一、安全托管服务"></a>一、安全托管服务</h2><p><strong>安全托管服务（Managed Security Service，MSS）</strong>，是由Gartner于2011年提出，简单来讲，即网络安全厂商通过自身的安全运营服务，包括人员、工具、平台等，为其用户提供7*24小时的安全托管服务。MSS安全托管服务最直接的目的，就是解决用户自身安全能力不足的问题，将专业的事情交给专业的人来做。说白了其实就是企业将自身的安全运营外包给有能力的安全厂商，解决自身安全运营能力不足的问题。</p><h2 id="二、重保安全服务"><a href="#二、重保安全服务" class="headerlink" title="二、重保安全服务"></a>二、重保安全服务</h2><p><strong>重保安全服务（Cybersecurity in Important Period, CIP）</strong>，是指在特殊时期（如HVV等）、重要活动（如两会等）、重大节日（如国庆等）期间为用户构建全方面的重要敏感时期的安全保障服务。保障网络基础设施、重点网站和业务系统安全，提供全方位的安全防守建设咨询以及事前、事中、事后的全面安全建设托管服务，确保企业客户的业务系统能够在重大活动期间安全平稳运行。</p><h2 id="三、安全托管服务与重保安全服务的区别"><a href="#三、安全托管服务与重保安全服务的区别" class="headerlink" title="三、安全托管服务与重保安全服务的区别"></a>三、安全托管服务与重保安全服务的区别</h2><p>从安全托管服务与重保安全服务的概念和定义上，个人理解安全托管服务与重保安全服务还是有所区别的。</p><p>一般来说，<strong>安全托管服务(MSS)服务侧重于管理和运营</strong>，以保障企业IT业务稳定运行为目的，主要是日常的安全运营。而<strong>重保安全更接近实战化</strong>主要侧重于重保期间的防护值守，有重点的企业客户的业务系统能够在重大活动期间安全平稳运行。</p><p>拿平时我们见到社会安保来类比，日常安全运营就是我们平时看到的日常治安巡逻；重保就是比如国庆期间、两会其间有针对性的加大安保防范力度如特警武装上岗执勤、某些重要场所限制人流、加强舆情监控等必要的防控手段。</p><ul><li><strong>从具体的服务内容来看：</strong></li></ul><p>安全托管服务主要是日常安全运营相关的内容如：资产的定期梳理、暴露面的检测、定期的漏扫、漏扫后的安全加固整改、安全监测、事件协助处置、安全策略定期优化等。</p><p>重保安全服务主要是针对重保时期有重点的安全保障更贴近实战化如：准备阶段的资产清查、暴露面识别、暴露面收敛等；重保初期的重点系统（或靶标系统）专项加固、情报收集、攻击阻断演练等；重保阶段的安全事件分析、响应处置、溯源反制、防守报告等。</p><ul><li><strong>从人员配置来看：</strong></li></ul><p>重保安全服务的人员配置不管是从人员数量还是个人网络安全专业水平来看都要比安全托管服务的高。一般来说重保安全服务的核心人员都会要求有攻防对抗能力。可以想像一下普通安保人员与武装特警的区别。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近年来，高新技术数字经济快速发展，数字化转型成为各个行业高质量发展的重要引擎和创新路径。网络安全作为数字化建设的安全基石，却面临着网络安全人才缺口不断攀升的直接挑战。各安全公司依托自己网络安全经验的人才优势向客户提供各类安全服务，最常见的就是安全托管和重保安全。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>认识XDR-扩展威胁检测与响应平台</title>
    <link href="https://xiejava.gitee.io/posts/160ef42d/"/>
    <id>https://xiejava.gitee.io/posts/160ef42d/</id>
    <published>2022-10-13T11:30:54.000Z</published>
    <updated>2022-10-13T11:37:12.680Z</updated>
    
    <content type="html"><![CDATA[<p>近年安全圈XDR的概念非常火，是近几年热点的安全技术之一，究竟什么是XDR，XDR核心能力是什么？能够解决什么问题，XDR与EDR、NDR关系和区别又是什么？让我们带着这些问题一起来认识一下XDR。</p><h1 id="一、什么是XDR"><a href="#一、什么是XDR" class="headerlink" title="一、什么是XDR"></a>一、什么是XDR</h1><p>XDR 于 2018 年由 Palo Alto 首席技术官 Nir Zuk 提出，2020-2021 年连续入选 Gartner 端点安全、安全运营技术成熟度曲线，目前处于创新启动期。</p><p>XDR全名是<strong>Extended Detection and Response（扩展检测和响应）</strong>，因为缩写与EDR重名了，所以就取了Extended第二个字母X，缩成了XDR。</p><p>Gartner给出的XDR定义为：XDR是一种基于SaaS的、绑定于特定供应商的安全威胁检测和事件响应工具，它将多个安全产品集成到一个统一了所有许可安全组件的内聚安全运营系统中。</p><p>通常情况下，可以认为XDR是一个融合了多种安全检测、响应能力的平台框架，只要是为了解决威胁检测与响应的问题能力模块，都可以往里装。它需要将多个安全产品能力有机的结合在一起，有统一的数据格式、策略、交互界面。相对于EDR（端点的检测与响应）和NDR（网络的检测与响应）来说，特别的强调X的概念，也就是可以扩展（Extended）的检测与响应。这里X覆盖了云、网、端、威胁情报等，EDR和NDR及其他的检测设备都可以作为XDR的能力模块为XDR提供数据来源和检测手段。</p><h1 id="二、XDR解决什么问题"><a href="#二、XDR解决什么问题" class="headerlink" title="二、XDR解决什么问题"></a>二、XDR解决什么问题</h1><p>近期， Gartner正式发布了2022安全运营技术成熟度曲线（Hype Cycle），正如大家所预测的那样，XDR终于站上了Peak of Inflated Expectations的顶端，成为安全运营体系中最炙手可热的技术之一，具体如下图所示：<br><img src="https://img-blog.csdnimg.cn/8267fb595e88455ea6d478b3ea5baa46.png#pic_center" alt="2022安全运营技术成熟度曲线"></p><p>那么在企业安全运营过程中究竟有什么困惑，XDR又能解决什么问题呢？</p><h2 id="1、安全运营的困惑"><a href="#1、安全运营的困惑" class="headerlink" title="1、安全运营的困惑"></a>1、安全运营的困惑</h2><ul><li><strong>单兵作战/数据孤岛</strong></li></ul><p>企业虽然有了SIEM/SOC等日志类数据分析平台，或是IDS、IPS、WAF、防火墙、EDR等单点安全设备，但前者无法理解下游检测设备告警，数据多而不准，安全误报多；后者获取的数据又有限，不同设备数据还无法紧密集成，最后变成了真实风险看不到，出现威胁防不了。</p><ul><li><strong>告警疲劳，误报多</strong></li></ul><p>安全人员每天都会收到来自不同安全设备的上万条威胁告警，而头疼的是，绝大多数（90%以上）都并非真实威胁，所以安全人员不是身体在处理误报的路上，就是精神在遭受误报的折磨，压力非常之大。</p><ul><li><strong>全局态势不可见</strong></li></ul><p>企业虽然买了一堆的安全设备，这些设备都产生了相应的告警，但是没有形成统一的全局的安全风险态势，对于安全主管来说要重点防范哪些地方，企业的安全建设还有哪些短板，这些都不可以知不可见。</p><ul><li><strong>响应处置能力弱</strong></li></ul><p>发生网络安全事件以后，无法有效溯源，快速的处置，尤其是多设备的联动处置，大多还停留在手工处置的阶段，处置效率先对比较低，不及时。</p><h2 id="2、XDR的作用"><a href="#2、XDR的作用" class="headerlink" title="2、XDR的作用"></a>2、XDR的作用</h2><p>XDR通过统一的交互框架、统一的数据标准、统一的数据存储方式进行安全数据采集、安全威胁集中分析、安全事件统一处置、响应编排。</p><p>XDR的核心作用在于能够跨越不同数据源与IT架构，集中汇集云、网、端、威胁情报等多源安全数据/工具。通过大数据与人工智能、用户行为分析等智能分析手段，对安全数据/事件进行关联分析，还原攻击路径，达到对整个攻击面的全面可视，解决安全孤岛的问题。基于动态更新的事件库与预置处置场景将产出的告警进行自动化编排与分诊，实现自动化响应。解决安全运营过程中数据孤岛、告警疲劳、全局态势不可见、响应处置能力弱的问题，更重要的是将企业安全运营水平和标准化产品挂钩，而非依赖不稳定的个人技术水平。</p><p><img src="https://img-blog.csdnimg.cn/688c91e5881d4e7bb938d660720fb8b0.png#pic_center" alt="XDR的作用"></p><h1 id="三、XDR与EDR、NDR的区别"><a href="#三、XDR与EDR、NDR的区别" class="headerlink" title="三、XDR与EDR、NDR的区别"></a>三、XDR与EDR、NDR的区别</h1><p>EDR从端点侧做威胁检测，确实能检测到攻击的准确信息，但是端点检测这种方式需要在用户主机上安装检测agent程序，无法覆盖用户所有的资产。并且端点检测的部署成本相比网络检测也更高，对于端点的操作系统、硬件配置、网络情况都有要求。</p><p>NDR从网络侧做威胁检测，检测到的更多都是攻击的特征或者攻击意图，此时攻击很有可能并未真正发生，或者并未造成严重后果。如果全部转化为威胁事件，则会造成告警风暴，给运营带来困难。</p><p>所以EDR的特点是检测的深但是覆盖面窄，而NDR的特点是检测的浅但是覆盖面广。</p><p>XDR则结合了这两者的全部优点，对于重点资产可采用端点检测方式，对于其他资产可采用网络检测方式。XDR平台会将这两种能力检测到的原始事件信息进行自动化关联，最终可将这些疑似的攻击信息，关联分析形成精准的威胁告警事件。</p><h1 id="四、XDR的架构和核心能力"><a href="#四、XDR的架构和核心能力" class="headerlink" title="四、XDR的架构和核心能力"></a>四、XDR的架构和核心能力</h1><h2 id="1、XDR的架构"><a href="#1、XDR的架构" class="headerlink" title="1、XDR的架构"></a>1、XDR的架构</h2><p>因为XDR是一个融合了多种安全检测、响应能力的平台框架，XDR的架构其关键组件包括前端组件（感应器，主要负责数据采集及检测）和后端平台组件（主要负责数据的汇聚、分析、威胁检测、响应处置）</p><p><img src="https://img-blog.csdnimg.cn/12a6d67ea8354eb6ae19c3307dbc5cbd.png#pic_center" alt="XDR的架构"><br>XDR前端组件，由生成安全遥测数据的“触角”（感应器）组成，这些触角包括但不限于EDR（终端检测与响应-Endpoint Detection and Response)、EPP(终端防护平台-Endpoint Protection Platforms)、NDR（流量检测与响应平台-Network Detection and Response)、SSE（安全服务边缘-Security Services Edge)、CWPP(云工作负载安全防护平台-Cloud Workload Protection Platforms)、蜜罐、邮件安全。</p><p>而XDR的后端平台，则是吸收所有关键位置的遥测数据、日志、威胁上下文信息，之后再对所有的数据进行关联、高级分析、从而完成威胁检测、调查分析、攻击溯源、工具编排、自动化响应等工作。</p><p>从整体架构上<strong>XDR可以看成是融合了各安全能力组件（EDR、NDR等）+SDC（安全数据中心）+SIEM/SA（安全信息事件管理/态势感知）+SOAR（安全编排与自动化响应）形成的一个安全运营系统</strong>。</p><h2 id="2、核心能力"><a href="#2、核心能力" class="headerlink" title="2、核心能力"></a>2、核心能力</h2><p>XDR核心能力包括数据集成、检测技术、可视化、编排响应技术。</p><ul><li><strong>安全数据全面集成</strong></li></ul><p>对不同安全设备的数据进行全面的采集包括：内部（资产、脆弱性）、外部（流量、日志）以及云端威胁情报接入等相关安全数据的全面采集，汇聚、分析。</p><ul><li><strong>安全威胁深度检测</strong></li></ul><p>对多源安全告警进行关联分析、规则分析、情报分析、机器学习等，发现潜伏的高级持续性威胁，提升告警检出率和准确率。</p><ul><li><strong>安全态势集中展示</strong></li></ul><p>告警可视、事件可视、攻击可视，从多安全事件、攻击方向、攻击趋势、影响范围等多维度多视角进行态势可视化呈现。</p><ul><li><strong>安全事件快速处置</strong></li></ul><p>通过可视化剧本编排，快速实现人员、流程、工具的有效协同，对接联动安全防护设备，在安全事件发生时自动下发阻断策略，并在必要时下发通知预警，及时完成安全闭环。</p><p>   XDR成熟度模型如下：<br><img src="https://img-blog.csdnimg.cn/3b14d884dc884e3a8f70e6b8811eac81.png#pic_center" alt="XDR成熟度模型"></p><h1 id="五、XDR应用场景"><a href="#五、XDR应用场景" class="headerlink" title="五、XDR应用场景"></a>五、XDR应用场景</h1><p>XDR集中汇集云、网、端、威胁情报等多源安全数据/工具，解决安全运营过程中数据孤岛、告警疲劳、全局态势不可见、响应处置能力弱的问题。可以有效应用于企业常态化安全运营及重保攻防实战对抗场景。</p><p><img src="https://img-blog.csdnimg.cn/4a48e9f6edf546e083b4d1d47ae9725a.png#pic_center" alt="XDR威胁检测联动响应示意图"></p><ul><li><strong>日常安全运营场景</strong></li></ul><p>日常安全运营，通过XDR提升安全运营的威胁检测能力和响应效率。<br>精准响应：更好的检测效果及响应能力，解决原有海量告警导致事件难以有效检测、溯源深度不足导致响应效果差的问题，有效应对攻防对抗加剧带来新的安全风险。<br>风险管理：从被动事件响应转向有计划的风险管理，预防重大安全事件。<br>处置闭环：采用简单有效的方式开展安全分析、管理、处置工作，实现事件处置的有效闭环管控。<br>态势可见：安全态势统一呈现，安全运营有地放矢，哪里不足补哪里。</p><ul><li><strong>攻防实战对抗场景</strong></li></ul><p>攻防实战，通过XDR实现异构可扩展的威胁检测响应能力，进行快速响应、加固优化安全措施、攻击反制。<br>检测深度：更精准的高级威胁检测和安全事件溯源能力。<br>检测广度：拥有丰富的数据，包括事件完整的上下文信息、原始报文等供客户深度挖掘；全方位的的威胁数据采集，全面的威胁检测分析，全局的态势呈现。<br>敏捷响应：可进行快速响应、加固优化安全措施、攻击反制。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近年安全圈XDR的概念非常火，是近几年热点的安全技术之一，究竟什么是XDR，XDR核心能力是什么？能够解决什么问题，XDR与EDR、NDR关系和区别又是什么？让我们带着这些问题一起来认识一下XDR。&lt;/p&gt;
&lt;h1 id=&quot;一、什么是XDR&quot;&gt;&lt;a href=&quot;#一、什么是
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Django自定义manage.py命令实现hexo博客迁移</title>
    <link href="https://xiejava.gitee.io/posts/32650d1c/"/>
    <id>https://xiejava.gitee.io/posts/32650d1c/</id>
    <published>2022-07-27T08:39:24.000Z</published>
    <updated>2022-07-27T09:07:02.433Z</updated>
    
    <content type="html"><![CDATA[<p>实现了hexo的md文件格式解析，通过什么方式怎么来迁移hexo的博客到django的博客呢？开始想到的是通过Django的manage.py的shell命令，通过shell可以执行写好的python脚本进行hexo的md文件格式解析并入库。后来想想为啥不直接自定义一个manage.py的命令直接进行迁移呢？就如我们新建Django工程迁移数据库一样，执行python manage.py migrate来迁移数据库。我们可以定义python manage.py xxx来执行的迁移hexo博客。</p><p>自定义Django-admin命令分三步：创建management文件夹、编写命令代码、测试验证</p><h2 id="一、创建management文件夹"><a href="#一、创建management文件夹" class="headerlink" title="一、创建management文件夹"></a>一、创建management文件夹</h2><p>自定义的Django-admin管理命令本质上是一个python脚本文件，它的存放路径必须遵循一定的规范，一般位于app/management/commands目录。整个文件夹的布局如下所示：<br><code>注意app要在setting中注册</code><br>在blog/management/commands包下面创建transblog.py文件<br><img src="https://img-blog.csdnimg.cn/1d10e4be2b5646d2bb3fc10642dc7b7b.png#pic_center" alt="在这里插入图片描述"></p><p>这里有两个要注意的地方:</p><blockquote><p>1、app要在setting中注册。如blog在setting中注册了所以可以在blog/management/commands包下面创建transblog.py文件，api和common都没有在setting中注册所以在这两个目录下创建的不会作为管理命令生效。<br>2、创建的management/commands是Python包，不是单纯的目录，区别就是目录里必须有<strong>init</strong>.py文件，空文件都可以。</p></blockquote><h2 id="二、编写命令代码"><a href="#二、编写命令代码" class="headerlink" title="二、编写命令代码"></a>二、编写命令代码</h2><p>创建命令管理文件后就可以在该文件中编写命令代码了。<br>每一个自定义的管理命令本质是一个Command类, 它继承了Django的Basecommand或其子类, 主要通过重写handle()方法实现自己的业务逻辑代码，而add_arguments()则用于帮助处理命令行的参数，如果运行命令时不需要额外参数，可以不写这个方法。<br>transblog.py的参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    :author: XieJava</span></span><br><span class="line"><span class="string">    :url: http://ishareread.com</span></span><br><span class="line"><span class="string">    :copyright: © 2021 XieJava &lt;xiejava@ishareread.com&gt;</span></span><br><span class="line"><span class="string">    :license: MIT, see LICENSE for more details.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost,BlogCategory,Tag</span><br><span class="line"><span class="keyword">from</span> utils.parseblog <span class="keyword">import</span> parseblog</span><br><span class="line"><span class="keyword">from</span> django.core.management.base <span class="keyword">import</span> BaseCommand</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">    help=<span class="string">'读取指定目录的.md文件解析至ishareblog'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_arguments</span><span class="params">(self, parser)</span>:</span></span><br><span class="line">        parser.add_argument(<span class="string">'--path'</span>,help=<span class="string">'输入.md文件的目录'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'--file'</span>,help=<span class="string">'输入.md文件的路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        inputfile = input(<span class="string">'请输入指定的目录路径或.md文件路径:'</span>)</span><br><span class="line">        <span class="keyword">if</span> inputfile.find(<span class="string">'.md'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">            self.transblogbyfile(inputfile)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.transblogbypath(inputfile)</span><br><span class="line">        <span class="keyword">if</span> options[<span class="string">'path'</span>]:</span><br><span class="line">            self.transblogbypath(options[<span class="string">'path'</span>])</span><br><span class="line">        <span class="keyword">if</span> options[<span class="string">'file'</span>]:</span><br><span class="line">            self.transblogbyfile(options[<span class="string">'file'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="string">'''读取目录解析md文件并写入数据库'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transblogbypath</span><span class="params">(self,filepath=<span class="string">''</span>,)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            files = os.listdir(filepath)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file.find(<span class="string">'.md'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                    blog_file = os.path.join(filepath, file)</span><br><span class="line">                    self.transblogbyfile(blog_file)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'请确认输入是否正确。'</span>,e)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''读取md文件入库'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transblogbyfile</span><span class="params">(self,blogfile=<span class="string">''</span>)</span>:</span></span><br><span class="line">        blog_info = parseblog(blogfile)</span><br><span class="line">        filename=os.path.basename(blogfile)</span><br><span class="line">        <span class="comment">#判断是否存在相同的title</span></span><br><span class="line">        qs=BlogPost.objects.filter(title=blog_info[<span class="string">'title'</span>])</span><br><span class="line">        <span class="keyword">if</span> len(qs)==<span class="number">0</span>:</span><br><span class="line">            category = <span class="literal">None</span></span><br><span class="line">            tag_objs = []</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'categories'</span> <span class="keyword">in</span> blog_info:</span><br><span class="line">                categories=blog_info[<span class="string">'categories'</span>]</span><br><span class="line">                <span class="keyword">if</span> len(categories)&gt;<span class="number">0</span>:</span><br><span class="line">                    category_title = categories[<span class="number">0</span>]</span><br><span class="line">                    category_qs=BlogCategory.objects.filter(title=category_title)</span><br><span class="line">                    <span class="keyword">if</span> len(category_qs)&gt;<span class="number">0</span>:</span><br><span class="line">                        category=category_qs[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'tags'</span> <span class="keyword">in</span> blog_info:</span><br><span class="line">                tags=blog_info[<span class="string">'tags'</span>]</span><br><span class="line">                <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">                    tag_obj,b=Tag.objects.get_or_create(tag=tag)</span><br><span class="line">                    print(tag_obj.id)</span><br><span class="line">                    tag_objs.append(tag_obj)</span><br><span class="line">            blog = BlogPost()</span><br><span class="line">            blog.title = blog_info[<span class="string">'title'</span>]</span><br><span class="line">            blog.content = blog_info[<span class="string">'content'</span>]</span><br><span class="line">            blog.isShow = <span class="number">1</span> <span class="comment">#默认显示</span></span><br><span class="line">            blog.summary=blog.content[<span class="number">0</span>:<span class="number">200</span>] <span class="comment">#默认提取内容的前200个字作为摘要</span></span><br><span class="line">            blog.category=category</span><br><span class="line">            blog.blogSource = filename</span><br><span class="line">            blog.pubTime=blog_info[<span class="string">'date'</span>]</span><br><span class="line">            blog.save()</span><br><span class="line">            <span class="keyword">if</span> len(tag_objs)&gt;<span class="number">0</span>:</span><br><span class="line">                blog.tags.add(*tag_objs)</span><br><span class="line">            print(filename + <span class="string">'读取解析入库成功！'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(blog_info[<span class="string">'title'</span>]+<span class="string">'已经存在！'</span>)</span><br></pre></td></tr></table></figure><p>代码很简单，就是根据读取命令行的参数，这个参数就是需要迁移hexo的.md文件的目录或文件路径，读取目录或文件路径进行文件的解析，并写入到数据库。<br>.md文件的解析参考:<a href="https://blog.csdn.net/fullbug/article/details/126007706" target="_blank" rel="noopener">Python二十行代码实现hexo的md文件格式解析</a></p><h2 id="三、测试验证"><a href="#三、测试验证" class="headerlink" title="三、测试验证"></a>三、测试验证</h2><p>命令代码写完后就可以进行测试了。<br>在命令行输入<code>python manage.py</code> 可以看到自定义的transblog已经加入到管理命令了<br><img src="https://img-blog.csdnimg.cn/0b77c9bace944cb5a771ac4da6bb2fa2.png#pic_center" alt="transblog已经加入到管理命令"></p><p>输入 <code>python manage.py transblog -h</code><br>会提示命令的参数和用法：<br><img src="https://img-blog.csdnimg.cn/589f23f74da647888b9a2607b68fcd64.png#pic_center" alt="管理命令帮助"></p><p>如执行 <code>python manage.py transblog</code> 会提示”请输入指定的目录路径或.md文件路径:”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) PS D:\Python\study\pythonproject\ishareblog\ishareblog&gt; python manage.py transblog</span><br><span class="line">请输入指定的目录路径或.md文件路径:</span><br></pre></td></tr></table></figure><p>我们输入需要迁移的.md文件或路径<br>如：E:\CloudStation\personal\xiejavablog\myhexo\myblog\source_posts\2022-07-27-Python二十行代码实现hexo的md文件格式解析.md<br>不出意外的情况下控制台会打印“XXXX.md读取解析入库成功！”的信息<br><img src="https://img-blog.csdnimg.cn/93af5466f7f0497285dfa3852b527e39.png#pic_center" alt="执行效果"></p><p>访问博客，可以看到文章已经迁移过来了<br><img src="https://img-blog.csdnimg.cn/e558541002124378bd43b67b5390dfa8.png#pic_center" alt="执行效果"><br>全部代码仓库：<a href="https://gitee.com/ishareblog/ishareblog" target="_blank" rel="noopener">https://gitee.com/ishareblog/ishareblog</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现了hexo的md文件格式解析，通过什么方式怎么来迁移hexo的博客到django的博客呢？开始想到的是通过Django的manage.py的shell命令，通过shell可以执行写好的python脚本进行hexo的md文件格式解析并入库。后来想想为啥不直接自定义一个ma
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="https://xiejava.gitee.io/tags/Hexo/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
</feed>
