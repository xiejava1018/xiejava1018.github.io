<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieJava&#39;s blog</title>
  
  <subtitle>记录最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiejava.gitee.io/"/>
  <updated>2022-02-10T10:08:08.506Z</updated>
  <id>https://xiejava.gitee.io/</id>
  
  <author>
    <name>XieJava</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pandas数据处理之合并与拼接</title>
    <link href="https://xiejava.gitee.io/posts/e7d4d6e1/"/>
    <id>https://xiejava.gitee.io/posts/e7d4d6e1/</id>
    <published>2022-02-10T06:10:57.000Z</published>
    <updated>2022-02-10T10:08:08.506Z</updated>
    
    <content type="html"><![CDATA[<p>在许多应用中，数据可能来自不同的渠道，在数据处理的过程中常常需要将这些数据集进行组合合并拼接，形成更加丰富的数据集。pandas提供了多种方法完全可以满足数据处理的常用需求。具体来说包括有join、merge、concat、append等。<br><img src="https://img-blog.csdnimg.cn/dd40ce2e4f694ae89ce8f85eceeb0c29.png#pic_center" alt="合并与拼接"><br>一般来说</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>join</td><td>最简单，主要用于基于索引的横向合并拼接</td></tr><tr><td>merge</td><td>最常用，主要用户基于指定列的横向合并拼接</td></tr><tr><td>concat</td><td>最强大，可用于横向和纵向合并拼接</td></tr><tr><td>append</td><td>主要用于纵向追加</td></tr><tr><td>combine_first</td><td>合并重叠数据，填充缺失值</td></tr><tr><td>update</td><td>将一个数据集的值更新到另一个数据集</td></tr></tbody></table><p>下面就来逐一介绍每个方法</p><h1 id="一、join"><a href="#一、join" class="headerlink" title="一、join"></a>一、join</h1><p>join主要用于基于索引的横向合并拼接<br>在介绍pandas的join之前我们来看一下SQL对数据集join的几种模式。如果大家对SQL比较熟悉的话应该对SQL操作数据集进行各种合并拼接印象深刻。SQL中各种JOIN的方法如下：<br><img src="https://img-blog.csdnimg.cn/4b3662215d2944efaf765b0846d6102a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SQL-JOIN"></p><p>pandas的join实现了<strong>left join、right jion、inner join、out jion</strong>常用的4中join方法<br>来自官网的参数说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dataframe.join(other,  <span class="comment"># 待合并的另一个数据集</span></span><br><span class="line">                   on=<span class="literal">None</span>,  <span class="comment"># 连接的键</span></span><br><span class="line">                   how=<span class="string">'left'</span>,   <span class="comment"># 连接方式：‘left’, ‘right’, ‘outer’, ‘inner’ 默认是left</span></span><br><span class="line">                   lsuffix=<span class="string">''</span>,  <span class="comment"># 左边（第一个）数据集相同键的后缀</span></span><br><span class="line">                   rsuffix=<span class="string">''</span>,  <span class="comment"># 第二个数据集的键的后缀</span></span><br><span class="line">                   sort=<span class="literal">False</span>)  <span class="comment"># 是否根据连接的键进行排序；默认False</span></span><br></pre></td></tr></table></figure><p>我们来看下实例，有两个数据集一个是人员姓名，一个是人员的工资</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left=pd.DataFrame([<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'钱七'</span>], index=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],columns=[<span class="string">'姓名'</span>])</span><br><span class="line">right=pd.DataFrame([<span class="number">13000</span>,<span class="number">15000</span>,<span class="number">9000</span>,<span class="number">8600</span>,<span class="number">10000</span>], index=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>],columns=[<span class="string">'工资'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1f04c5a156c44172960950508e287fbe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据集"></p><blockquote><p>注意，left和right的数据集分别都指定了index，因为join主要用于基于索引的横向合并拼接。</p></blockquote><h2 id="1、left-join"><a href="#1、left-join" class="headerlink" title="1、left join"></a>1、left join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.join(right)  <span class="comment">#默认how='left'</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1b288957d7e0406984f56457544cc4e0.png#pic_center" alt="left join"></p><p>jion操作默认是left jion的操作，可以看到left索引为7姓名为钱七，在right中没有索引为7的对应所以显示left的姓名但right的工资为NaN，right中索引为8的数据在left中没有索引为8的，所以没有显示。left join合并left的数据<br>left join 如下图所示<br><img src="https://img-blog.csdnimg.cn/f83248acc33f426cad52fd05f391f467.png#pic_center" alt="left join"></p><h2 id="2、right-join"><a href="#2、right-join" class="headerlink" title="2、right join"></a>2、right join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.join(right,how=<span class="string">'right'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9c959ac942b24db7a8740e1bdcae416a.png#pic_center" alt="right join"></p><p>右链接合并时可以看到，left的数据集没有索引为8的项，所以索引为8的项显示right数据集的工资数据但姓名为NaN，在left中索引为7的项因为right中不存在，所以没有显示。right join合并right的数据<br>right join 如下图所示<br><img src="https://img-blog.csdnimg.cn/57ca11901b8443a9bfd8eecfd39de242.png#pic_center" alt="right join"></p><h2 id="3、inner-join"><a href="#3、inner-join" class="headerlink" title="3、inner join"></a>3、inner join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.join(right,how=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2f46d399e5014f959aed74e50e3a8173.png#pic_center" alt="inner join"></p><p>内链接合并时，可以看到left数据集中的索引为7姓名为钱七因为在right数据集中找不到对应的索引，right数据集中索引为8的在left找不到对应的索引所以内连接合并时索引7和8都没有进行合并，inner join只合并两个数据集共有的数据<br>inner join 如下图所示<br><img src="https://img-blog.csdnimg.cn/28191c9ea9c04060a72a4c9e3586a342.png#pic_center" alt="inner join"></p><h2 id="4、out-join"><a href="#4、out-join" class="headerlink" title="4、out join"></a>4、out join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.join(right,how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c94d60a0e8ac49658d81f0ee959ddd30.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="out join"><br>外链接合并时，可以看到不管是left中的数据还是right中的数据都进行了合并。right join合并两个数据集中所有的数据。<br>outer join 如下图所示<br><img src="https://img-blog.csdnimg.cn/58c32617de5c476487c9cf0dfe7a0e82.png#pic_center" alt="outer join"><br>join很简单，但是它有局限性，因为它只能根据索引来合并。不能指定键来进行合并。比如我要根据编号和姓名来合并，join就比较难办了。但是pandas提供了merge的方法，可以指定列来进行合并拼接。</p><h1 id="二、merge"><a href="#二、merge" class="headerlink" title="二、merge"></a>二、merge</h1><p>merge最常用，主要用户基于指定列和横向合并拼接，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left, right, how=<span class="string">'inner'</span>, on=<span class="literal">None</span>, left_on=<span class="literal">None</span>, right_on=<span class="literal">None</span>,</span><br><span class="line">left_index=<span class="literal">False</span>, right_index=<span class="literal">False</span>, sort=<span class="literal">True</span>,suffixes=(<span class="string">'_x'</span>, <span class="string">'_y'</span>), copy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>left/right</td><td>两个不同的 DataFrame 对象。</td></tr><tr><td>on</td><td>指定用于连接的键（即列标签的名字），该键必须同时存在于左右两个 DataFrame 中，如果没有指定，并且其他参数也未指定， 那么将会以两个 DataFrame 的列名交集做为连接键。</td></tr><tr><td>left_on</td><td>指定左侧 DataFrame 中作连接键的列名。该参数在左、右列标签名不相同，但表达的含义相同时非常有用。</td></tr><tr><td>right_on</td><td>指定左侧 DataFrame 中作连接键的列名。</td></tr><tr><td>left_index</td><td>布尔参数，默认为 False。如果为 True 则使用左侧 DataFrame 的行索引作为连接键，若 DataFrame 具有多层索引(MultiIndex)，则层的数量必须与连接键的数量相等。</td></tr><tr><td>right_index</td><td>布尔参数，默认为 False。如果为 True 则使用左侧 DataFrame 的行索引作为连接键。</td></tr><tr><td>how</td><td>要执行的合并类型，从 {‘left’, ‘right’, ‘outer’, ‘inner’} 中取值，默认为“inner”内连接。</td></tr><tr><td>sort</td><td>布尔值参数，默认为True，它会将合并后的数据进行排序；若设置为 False，则按照 how 给定的参数值进行排序。</td></tr><tr><td>suffixes</td><td>字符串组成的元组。当左右 DataFrame 存在相同列名时，通过该参数可以在相同的列名后附加后缀名，默认为(‘_x’,’_y’)。</td></tr><tr><td>copy</td><td>默认为 True，表示对数据进行复制。</td></tr></tbody></table><p>我们来看下面的数据集，在上面的数据集中left数据集加入了员工的编号，right数据集加入了编号及姓名。索引就按默认的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">left=pd.DataFrame([[<span class="number">3</span>,<span class="string">'张三'</span>],[<span class="number">4</span>,<span class="string">'李四'</span>],[<span class="number">5</span>,<span class="string">'王五'</span>],[<span class="number">6</span>,<span class="string">'赵六'</span>],[<span class="number">7</span>,<span class="string">'钱七'</span>]],</span><br><span class="line">columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>])</span><br><span class="line"></span><br><span class="line">right=pd.DataFrame([[<span class="number">3</span>,<span class="string">'张三'</span>,<span class="number">13000</span>],[<span class="number">4</span>,<span class="string">'李四'</span>,<span class="number">15000</span>],[<span class="number">5</span>,<span class="string">'王五'</span>,<span class="number">9000</span>],[<span class="number">6</span>,<span class="string">'赵六'</span>,<span class="number">8600</span>],[<span class="number">8</span>,<span class="string">'孙八'</span>,<span class="number">10000</span>]],</span><br><span class="line">columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>,<span class="string">'工资'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fcc9ae729d564abd89ce6b0144269a53.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="merge数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left,right)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d3a58242a2da4719a3fa8b63aab5f9b9.png#pic_center" alt="pd.merge(left,right)"></p><p>没有指定连接键，默认用重叠列名，没有指定连接方式，默认inner内连接（取left和right编号和姓名的交集）<br>和join一样通过how来指定连接方式如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left,right,how=<span class="string">'left'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e6ba32e087644c7ca662e18969d3419b.png#pic_center" alt="pd.merge(left,right,how=&#39;left&#39;)"></p><p>how的连接方式和join一样支持left、right、inner、outer<br>merge还可以指定多个列进行合并链接，也就是和SQL一样设置多个关联的列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left,right,how=<span class="string">'outer'</span>,on=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ec980f11279948188c804f9bddd80f36.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="merge-out"></p><p>如果两个对象的列名不同，可以使用<code>left_on</code>，<code>right_on</code>分别指定，如我们把right数据集的“编码”列标签改成“ID”后如果需要left数据集的”编号”和right数据集的”ID”进行关联</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">right=pd.DataFrame([[<span class="number">3</span>,<span class="string">'张三'</span>,<span class="number">13000</span>],[<span class="number">4</span>,<span class="string">'李四'</span>,<span class="number">15000</span>],[<span class="number">5</span>,<span class="string">'王五'</span>,<span class="number">9000</span>],[<span class="number">6</span>,<span class="string">'赵六'</span>,<span class="number">8600</span>],[<span class="number">8</span>,<span class="string">'孙八'</span>,<span class="number">10000</span>]],columns=[<span class="string">'ID'</span>,<span class="string">'姓名'</span>,<span class="string">'工资'</span>])</span><br><span class="line"></span><br><span class="line">pd.merge(left,right,how=<span class="string">'outer'</span>,left_on=<span class="string">'编号'</span>,right_on=<span class="string">'ID'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dbd437e103634655bef58d4ef5b05d2b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="指定列名关联"></p><p>虽然说merge已经很强大了，但是pandas愿意给你更多，它提供了concat，可以实现横向和纵向的合并与拼接。也就是说不但实现了SQL中的join还实现了union</p><h1 id="三、concat"><a href="#三、concat" class="headerlink" title="三、concat"></a>三、concat</h1><p>concat() 函数用于沿某个特定的轴执行连接操作，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat(objs,axis=<span class="number">0</span>,join=<span class="string">'outer'</span>,join_axes=<span class="literal">None</span>,ignore_index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>objs</td><td>一个序列或者是Series、DataFrame对象。</td></tr><tr><td>axis</td><td>表示在哪个轴方向上（行或者列）进行连接操作，默认 axis=0 表示行方向。</td></tr><tr><td>join</td><td>指定连接方式，取值为{“inner”,”outer”}，默认为 outer 表示取并集，inner代表取交集。</td></tr><tr><td>ignore_index</td><td>布尔值参数，默认为 False，如果为 True，表示不在连接的轴上使用索引。</td></tr><tr><td>join_axes</td><td>表示索引对象的列表。</td></tr></tbody></table><p>来看具体的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left2=pd.DataFrame([[<span class="number">1</span>,<span class="string">'陈一'</span>],[<span class="number">2</span>,<span class="string">'周二'</span>]],columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/22564f0092714a18ba0a8e312bde8ff2.png#pic_center" alt="数据集"></p><h2 id="1、纵向合并"><a href="#1、纵向合并" class="headerlink" title="1、纵向合并"></a>1、纵向合并</h2><p>concat默认纵向拼接，我们要在left1数据集的基础上把left2数据集给合并上去，很简单用concat直接就可以合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df=pd.concat([left,left2])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/19c5007f016d4a46b5ef715aa4d52445.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="纵向合并"></p><h2 id="2、横向合并"><a href="#2、横向合并" class="headerlink" title="2、横向合并"></a>2、横向合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_outer=pd.concat([left,right],axis=<span class="number">1</span>,join=<span class="string">'outer'</span>)<span class="comment">#外链接</span></span><br><span class="line">df_inner=pd.concat([left,right],axis=<span class="number">1</span>,join=<span class="string">'inner'</span>)<span class="comment">#内链接</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d7bf47354d8b45dbabe3ed5f82aee366.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="横向合并"></p><blockquote><p>注意：因为concat的链接和join一样是通过索引来链接合并，并不能指定通过某个特定的列来链接进行合并，所以看到的合并后的数据集left和right的编号和姓名是错位的。</p></blockquote><p>如果要根据编号来关联可以指定编号作为索引再进行横向合并，这样就没有问题了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left.index=left[<span class="string">'编号'</span>].values</span><br><span class="line">right.index=right[<span class="string">'编号'</span>].values</span><br><span class="line">df_outer=pd.concat([left,right],axis=<span class="number">1</span>,join=<span class="string">'outer'</span>)</span><br><span class="line">df_inner=pd.concat([left,right],axis=<span class="number">1</span>,join=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5b57174ea9b14e7e96164c1ae1dd183d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="横向合并"></p><h1 id="四、append"><a href="#四、append" class="headerlink" title="四、append"></a>四、append</h1><p>df.append 可以将其他行附加到调用方的末尾，并返回一个新对象。它是最简单常用的数据合并方式。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.append(self, other, ignore_index=<span class="literal">False</span>,verify_integrity=<span class="literal">False</span>, sort=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>other 是它要追加的其他 DataFrame 或者类似序列内容 </li><li>ignore_index 如果为 True 则重新进行自然索引</li><li>verify_integrity 如果为 True 则遇到重复索引内容时报错 </li><li>sort 进行排序</li></ul><p>来看下面的例子：</p><h2 id="1、同结构数据追加"><a href="#1、同结构数据追加" class="headerlink" title="1、同结构数据追加"></a>1、同结构数据追加</h2><p>将同结构的数据追加在原数据后面，在left数据集后面追加left2数据集，left2的数据集内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left2=pd.DataFrame([[<span class="number">1</span>,<span class="string">'陈一'</span>],[<span class="number">2</span>,<span class="string">'周二'</span>]],columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>])</span><br><span class="line">left2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/82937b0bd5404b2a983a61e1afae4b1d.png#pic_center" alt="append数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.append(left2)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f968e6e71cd24039b3d5f3f728fe0efb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="append"></p><h2 id="2、不同结构数据追加"><a href="#2、不同结构数据追加" class="headerlink" title="2、不同结构数据追加"></a>2、不同结构数据追加</h2><p>不同结构数据追加，原数据没有的列会增加，没有对应内容的会为空NaN。<br>如：left3的数据集列有”编号”、”姓名”、”工资”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left3=pd.DataFrame([[<span class="number">8</span>,<span class="string">'孙八'</span>,<span class="number">10000</span>],[<span class="number">9</span>,<span class="string">'何九'</span>,<span class="number">15000</span>]],columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>,<span class="string">'工资'</span>])</span><br><span class="line">left3</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/63772c8399cf42e1b5fa4c8056cdcf5e.png#pic_center" alt="left3的数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.append(left3)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/40aa9fe061454ec1b5a2a2085ceacc4e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="不同结构数据追加"></p><p>当left后追加left3后的数据集会增加“工资列”，没有对应内容的会为空。</p><h2 id="3、追加合并多个数据集"><a href="#3、追加合并多个数据集" class="headerlink" title="3、追加合并多个数据集"></a>3、追加合并多个数据集</h2><p>append参数可带数据集列表，可以将多个数据集追加到原数据集<br>如我们将left2和left3都追加到left</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.append([left2,left3])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3e6c5584e92e46a287a1fbe89e19fa54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="追加合并多个数据集"></p><h1 id="五、combine-first"><a href="#五、combine-first" class="headerlink" title="五、combine_first"></a>五、combine_first</h1><p>combine_first可用于合并重复数据，用其他数据集填充没有的数据。如一个DataFrame数据集中出现了缺失数据，就可以用其他DataFrame数据集中的数据进行填充。语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">combine_first(other) <span class="comment">#只有一个参数other，该参数用于接收填充缺失值的DataFrame对象。</span></span><br></pre></td></tr></table></figure><p>如left数据集中没有”工资”的数据，我们可以用right数据集有的数据去填充left数据集中的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.combine_first(right) <span class="comment">#用right去填充left</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a7c3857131df4cd0879a6c211196eeb5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="combine_first"></p><h1 id="六、update"><a href="#六、update" class="headerlink" title="六、update"></a>六、update</h1><p>update和combine_first比较类似，区别在于：<br>1、填充合并方式稍有差异<br>combine_first：如果s1中c的值为空，用s2的值替换，否则保留s1的值<br>update：如果s2中的值不为空，那么替换s1，否则保留s1的值<br>2、update是更新原数据，combine_first会返回一个填充后的新数据集，对原数据不做更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.update(right) <span class="comment">#用right的数据更新left中的数据。</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/023ee8c45f0c4ebcab1591405bd43162.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="update"></p><p>至此，本文介绍了pandas的多种数据合并与拼接方法，并介绍了每种方法的异同，通过pandas的数据处理可以应付日常数据处理中大部分的数据处理工作。</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在许多应用中，数据可能来自不同的渠道，在数据处理的过程中常常需要将这些数据集进行组合合并拼接，形成更加丰富的数据集。pandas提供了多种方法完全可以满足数据处理的常用需求。具体来说包括有join、merge、concat、append等。&lt;br&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pandas基本操作之数据访问(查看与检索)</title>
    <link href="https://xiejava.gitee.io/posts/808d8fe8/"/>
    <id>https://xiejava.gitee.io/posts/808d8fe8/</id>
    <published>2022-02-07T15:40:32.000Z</published>
    <updated>2022-02-07T15:42:00.505Z</updated>
    
    <content type="html"><![CDATA[<p>对于数据分析来说，在构造或载入数据后最基本的操作应该就是对数据的访问了。看一看数据的结构、组成、分布等，根据需要从数据集中检索提取出相应的数据。pandas作为数据分析的利器，当然提供了多种查看和检索数据的方法。本文就来捋一捋pandas基本的数据访问。<br><img src="https://img-blog.csdnimg.cn/8581e4736c4e47ef8a6c71db7f941d18.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_10,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据访问"></p><h1 id="一、查看数据"><a href="#一、查看数据" class="headerlink" title="一、查看数据"></a>一、查看数据</h1><p>当我们拿到数据集后，第一步可能就是查看数据了，一方面是了解拿到的数据集的数据结构，另一方面随机检查一下数据的质量问题。<br>不管是Series还是DataFrame的数据集pandas常用的数据查看方法有：</p><table><thead><tr><th>方法</th><th>操作</th><th>结果</th></tr></thead><tbody><tr><td>head(n)</td><td>查看数据集对象的前n行</td><td>Series或DataFrame</td></tr><tr><td>tail(n)</td><td>查看数据集的最后n行</td><td>Series或DataFrame</td></tr><tr><td>sample(n)</td><td>随机查看n个样本</td><td>Series或DataFrame</td></tr><tr><td>describe()</td><td>数据集的统计摘要</td><td>Series</td></tr></tbody></table><p>以下就以一个DataFrame数据集为例来看看这些查看数据的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\staff.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d4afe8d481f64beaab0b6ecfa556bb17.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="studend数据集"></p><h2 id="1、查看头部-head-n"><a href="#1、查看头部-head-n" class="headerlink" title="1、查看头部 head(n)"></a>1、查看头部 head(n)</h2><p>head()方法如果不带参数，默认返回前5条记录，带了参数n就返回前n条记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head() <span class="comment">#默认查看前5条记录</span></span><br><span class="line">df.head(<span class="number">8</span>) <span class="comment">#指定查看前8条记录</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fc0d5daa5bf04091988e85fd660845df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="查看头部 head(n)"></p><h2 id="2、查看尾部-tail-n"><a href="#2、查看尾部-tail-n" class="headerlink" title="2、查看尾部 tail(n)"></a>2、查看尾部 tail(n)</h2><p>同样tail()方法如果不带参数，默认返回后面5条记录，带了参数n就返回后面n条记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.tail() <span class="comment">#默认查看后面5条记录</span></span><br><span class="line">df.tail(<span class="number">4</span>) <span class="comment">#指定查看后面4条记录</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3387c860aef141e5a91955907af1e0f0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="查看尾部 tail(n)"></p><h2 id="3、随机查看样本-sample-n"><a href="#3、随机查看样本-sample-n" class="headerlink" title="3、随机查看样本 sample(n)"></a>3、随机查看样本 sample(n)</h2><p>sample() 不带参数会随机返回一条样本数据，带了参数n就会随机返回n条记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.sample() <span class="comment">#随机查看一条记录</span></span><br><span class="line">df.sample(<span class="number">4</span>) <span class="comment">#随机查看4条记录</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dccdd7792d564c64b5b4a6f6b8b68cf5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="随机查看样本 sample(n)"></p><h2 id="4、查看统计摘要"><a href="#4、查看统计摘要" class="headerlink" title="4、查看统计摘要"></a>4、查看统计摘要</h2><p><code>df.describe()</code> 返回所有数字列的统计摘要。<br><img src="https://img-blog.csdnimg.cn/d9cb60a2e4324e6aae5a18e17f82e2be.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="查看统计摘要"></p><p>这里连staff_id的统计摘要就显示出来了，因为它是数字列。如果只看某一列的统计摘要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[[<span class="string">'staff_salary'</span>]].describe()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d1c277b8fc684e47b1ef6eacb1e59d7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="只看某一列的统计摘要"></p><h1 id="二、检索数据"><a href="#二、检索数据" class="headerlink" title="二、检索数据"></a>二、检索数据</h1><p>在数据分析过程中，很多时候需要从数据表中提取出相应的数据，而这么做的前提是需要先“检索”出这一部分数据。虽然通过 Python 提供的索引操作符”[]”和属性操作符”.”可以访问 Series 或者 DataFrame 中的数据，但这种方式只适应与少量的数据，为了解决这一问题，pandas 提供了多种类型的索引方式来实现数据的访问。包括[]、loc\iloc、at\iat、布尔索引<br>一般的:<br>df[‘name’] #会返回本列的Series<br>df.name   #也会返回本列的Series</p><blockquote><p>但是要注意，name应该是一个合法的python变量时才可以直接作为属性来使用。</p></blockquote><p>如：<br><strong>df[‘1级别’]可以正常返回索引列为“1级别”的数据，而df.1级别会报错，因为”1级别”不是一个合法的python变量。</strong><br><img src="https://img-blog.csdnimg.cn/311840594a5d4d968a8e071783b8ad8b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="列索引检索"><br>以下通过DataFrame数据集来说明常用检索数据的方法。对于DataFrame的数据集来说要检索数据通常是确定数据所在的行和列。而确定行和列也有两种方式，一是通过<strong>标签索引</strong>来确定，二是通过数据<strong>所在的位置</strong>来确定。<br>一般的：</p><table><thead><tr><th>操作</th><th>语法</th><th>返回结果</th></tr></thead><tbody><tr><td>选择列</td><td>df[col]</td><td>Series</td></tr><tr><td>按索引选择行</td><td>df.loc[label]</td><td>Series</td></tr><tr><td>按位置选择行</td><td>df.iloc[loc]</td><td>Series</td></tr><tr><td>使用切片选择行</td><td>df[2:5]</td><td>DataFrame</td></tr><tr><td>用表达式筛选行</td><td>df[bool]</td><td>DataFrame</td></tr></tbody></table><h2 id="1、切片"><a href="#1、切片" class="headerlink" title="1、切片[]"></a>1、切片[]</h2><p>通过[]进行检索，这将会对行进行切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#通过切片检索行数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8970b0d6e75847efa828127460679b29.png#pic_center" alt="在这里插入图片描述"></p><p>切片并不对列有效，如果是<code>df[0:3][1:2]</code>，会检索出0-3行，再在这三行切片的基础上切片中检索出第二行。<br><img src="https://img-blog.csdnimg.cn/fe95d1c6e4e44b9f850b8aa31a7a6ac9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="df[0:3][1:2]"></p><p>如果要在切片检索的结果上再选择列，则可以通过列标签索引列表来选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="number">0</span>:<span class="number">3</span>][[<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_gender'</span>]] <span class="comment">#通过列标签索引列表检索列数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5c44f494b92143c6b15c4933e9770b50.png#pic_center" alt="通过列标签索引列表来选择"></p><h2 id="2、loc-iloc"><a href="#2、loc-iloc" class="headerlink" title="2、loc\iloc"></a>2、loc\iloc</h2><h3 id="loc"><a href="#loc" class="headerlink" title="loc"></a>loc</h3><p>df.loc[] 只能使用标签索引，不能使用位置索引。当通过标签索引的切片方式来筛选数据时，它的取值前闭后闭，也就是只包括边界值标签（开始和结束）<br>.loc[] 具有多种访问方法，如下所示：</p><ul><li>一个标量标签 </li><li>标签列表 </li><li>切片对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="number">1</span>] <span class="comment">#标量标签，返回该行标签的Series数据</span></span><br><span class="line">df.loc[[<span class="number">1</span>,<span class="number">3</span>]] <span class="comment">#标签列表，返回标签列表的行DataFrame数据</span></span><br><span class="line">df.loc[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#切片对象，返回切片的行DataFrame数据</span></span><br><span class="line">df.loc[<span class="number">0</span>:<span class="number">3</span>,<span class="string">'staff_id'</span>:<span class="string">'staff_salary'</span>]  <span class="comment">#根据行切片，列切片检索数据</span></span><br><span class="line">df.loc[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_age'</span>]] <span class="comment">#根据行标签列表，列标签列表检索数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6c0b79c29b3b4bd1a6813716ca98d82a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="loc"></p><p>.loc[] 除了标量标签，标签列表和切片对象都接受两个参数，并以’,’分隔。第一个位置表示行检索，第二个位置表示列检索<br><img src="https://img-blog.csdnimg.cn/6fbe652ce26d40fea646154cef558db7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="loc2"></p><h3 id="iloc"><a href="#iloc" class="headerlink" title="iloc"></a>iloc</h3><p>df.iloc[] 只能使用位置索引(用整数表示所在行或列的位置如第几行第几列)，不能使用标签索引，通过整数索引切片选择数据时，前闭后开(不包含边界结束值)。同 Python 和 NumPy 一样，它们的<strong>索引都是从 0 开始</strong><br>.iloc[] 提供了以下方式来选择数据：</p><ul><li>整数索引   </li><li>整数列表  </li><li>数值范围</li></ul><p>为了说明方便，我们把数据集的行索引重名为字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=df.rename(index=&#123;<span class="number">0</span>:<span class="string">'A'</span>,<span class="number">1</span>:<span class="string">'B'</span>,<span class="number">2</span>:<span class="string">'C'</span>,<span class="number">3</span>:<span class="string">'D'</span>,<span class="number">4</span>:<span class="string">'E'</span>,<span class="number">5</span>:<span class="string">'F'</span>,<span class="number">6</span>:<span class="string">'G'</span>,<span class="number">7</span>:<span class="string">'H'</span>,<span class="number">8</span>:<span class="string">'I'</span>,<span class="number">9</span>:<span class="string">'J'</span>&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6803048b73534cefb40d294d9d6745cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="reanme"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">1</span>]  <span class="comment">#整数标量选择，数据从0开始，为1的就是第二行的数据，返回的是Series</span></span><br><span class="line">df.iloc[[<span class="number">1</span>,<span class="number">3</span>]] <span class="comment">#整数列表选择，选择位置为1和3的数据，返回的是DataFrame</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#切片选择，选择位置1至2的数据，不包含边界结束值，也就是不包含3的位置</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">4</span>] <span class="comment">#切片选择位置为1至3的行和1至4的列不含位置为3的行和位置为4的列</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/64187160c75f42a882300bb04b7df7e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="iloc"></p><h2 id="3、at-iat"><a href="#3、at-iat" class="headerlink" title="3、at\iat"></a>3、at\iat</h2><p>at和iat和loc和iloc类似，不同的是at和iat仅取一个具体的值，结构为 at[&lt;索引&gt;,&lt;列名&gt;]，iat[&lt;行位置&gt;,&lt;列位置&gt;]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.at[<span class="string">'A'</span>,<span class="string">'staff_name'</span>]  <span class="comment">#检索第“A”行的列标签为"staff_name"的数据</span></span><br><span class="line">df.iat[<span class="number">0</span>,<span class="number">1</span>]  <span class="comment">#检索第1行第2列的数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8fb64f577fce473eacf05bdf8202215d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="at\iat"></p><h2 id="4、布尔条件检索"><a href="#4、布尔条件检索" class="headerlink" title="4、布尔条件检索"></a>4、布尔条件检索</h2><h3 id="1、-里用布尔条件进行检索"><a href="#1、-里用布尔条件进行检索" class="headerlink" title="1、[] 里用布尔条件进行检索"></a>1、[] 里用布尔条件进行检索</h3><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df.staff_salary&gt;<span class="number">10000</span>)&amp;(df.staff_age&lt;<span class="number">40</span>)]  <span class="comment">#检索staff_age小于40且staff_salary&gt;10000的数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/01374b35c7244e23a70909fd04530e24.png#pic_center" alt="[] 里用布尔条件进行检索"></p><h3 id="2、loc索引部分用布尔条件检索"><a href="#2、loc索引部分用布尔条件检索" class="headerlink" title="2、loc索引部分用布尔条件检索"></a>2、loc索引部分用布尔条件检索</h3><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[(df.staff_salary&gt;<span class="number">10000</span>)&amp;(df.staff_age&lt;<span class="number">40</span>)]  <span class="comment">#检索staff_age小于40且staff_salary&gt;10000的数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4d160148aaaf4e778767ece4a5065283.png#pic_center" alt="loc索引部分用布尔条件检索"></p><h3 id="3、query函数布尔条件检索"><a href="#3、query函数布尔条件检索" class="headerlink" title="3、query函数布尔条件检索"></a>3、query函数布尔条件检索</h3><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.query(<span class="string">'staff_salary&gt;10000 &amp; staff_age&lt;40'</span>) <span class="comment">#通过函数检索staff_age小于40且staff_salary&gt;10000的数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4894b9dc467044de9adb17e56e1d5801.png#pic_center" alt="query函数布尔条件检索"></p><p>至此，本文介绍了pandas常用的数据访问操作通过head()、tail()、sample()、describe()查看数据，通过[]、loc\iloc、at\iat、及布尔条件检索数据。通过灵活运用pandas的各种数据访问方法可以很方便的根据需要查看和检索数据。</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于数据分析来说，在构造或载入数据后最基本的操作应该就是对数据的访问了。看一看数据的结构、组成、分布等，根据需要从数据集中检索提取出相应的数据。pandas作为数据分析的利器，当然提供了多种查看和检索数据的方法。本文就来捋一捋pandas基本的数据访问。&lt;br&gt;&lt;img s
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pandas数据处理之数据转换(映射map、替换replace、重命名rename)</title>
    <link href="https://xiejava.gitee.io/posts/2c80aac2/"/>
    <id>https://xiejava.gitee.io/posts/2c80aac2/</id>
    <published>2022-02-04T14:07:01.000Z</published>
    <updated>2022-02-04T14:09:06.650Z</updated>
    
    <content type="html"><![CDATA[<p>我们在数据处理的过程中经常碰到需要对数据进行转换的工作，比如将原来数据里的字典值根据字典转义成有意义的说明，将某些数据转换成其他的数据，将空值转换成其他值，将数据字段名进行重命名等。pandas作为数据处理分析的利器当然为上述的这些数据转换提供了便捷的方法。我们可以利用pandas提供的映射、替换、重命名等操作方便的进行相应的数据转换操作。</p><p>本文通过实例重点介绍pandas常用的数据转换工具映射map()、替换replace()、重命名rename()</p><p><strong>映射</strong>：map()函数 对数据集Serice中的元素根据映射关系进行映射（作用于Serice或DataFrame对象的一列）<br><strong>替换</strong>：replace()函数 替换元素 (作用于DataFrame)<br><strong>重命名</strong>：rename()函数  替换索引 (作用于index或columns)</p><h1 id="一、映射-map"><a href="#一、映射-map" class="headerlink" title="一、映射 map()"></a>一、映射 map()</h1><p>在平时数据处理的过程中常常会碰到，某个字段（数据列）是数字表示的要根据映射表转换成有意思的字符。如性别在数据集里存的是1和2分别表示“男”和“女”，如何将数据集中“性别”列的1和2替换成“男”和“女”如何做？绝对不能用for循环一个个去替换。pandas也好、Numpy也好，都是针对数据集处理的，我们应该抛弃以前针对单个数据处理的思维去拥抱针对数据集来编程。使用pandas的map()方法，最少仅需一行代码就可以解决。<br>map() 函数是做用于 Series 或 DataFrame 对象的一列，它接收一个函数或表示映射关系的字典做为参数，它的基本语法格式以下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series.map(arg,na_action=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>函数中的参数说明以下：</p><ul><li>arg：接收 function、dict 或 Series，表示映射关系；</li><li>na_action：类似R中的na.action，取值为None或ingore，用于控制遇到缺失值的处理方式，设置为ingore时串行运算过程中将忽略Nan值原样返回。</li></ul><p>下面通过实例来说明pandas的map()的使用，演示的student数据集如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\student.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b829442e9d9b402e9f241d04fc3d52ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="student数据集"></p><h2 id="1、通过数据字典映射"><a href="#1、通过数据字典映射" class="headerlink" title="1、通过数据字典映射"></a>1、通过数据字典映射</h2><p>map()方法接受数据字典参数，通过数据字典将数据进行映射。如我们需要将“性别”列的1和2替换成“男”和“女”，定义一个数据字典{1:’男’,2:’女’}，将1映射成“男”，将2映射成“女”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gender_map=&#123;<span class="number">1</span>:<span class="string">'男'</span>,<span class="number">2</span>:<span class="string">'女'</span>&#125;</span><br><span class="line">df[<span class="string">'性别'</span>]=df[<span class="string">'性别'</span>].map(gender_map)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d564c69bd9294e9fbe783c521f913e9f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据字典映射"><br>可以看到通过map()将需要转换的列的值进行的转换，具体的转换过程如下图所示：<br><img src="https://img-blog.csdnimg.cn/fbc75117bc9145098d3a43d848ce76d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="map转换过程"></p><h2 id="2、lambda函数映射"><a href="#2、lambda函数映射" class="headerlink" title="2、lambda函数映射"></a>2、lambda函数映射</h2><p>map()方法还接受lambda函数的方式进行值的映射，如我们现在要把数学分数为95分以上的映射数学等级为“优秀”，95及以下的映射为“良好”。可以通过lambda函数进行映射。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'数学等级'</span>]=df[<span class="string">'5-数学'</span>].map(<span class="keyword">lambda</span> x:<span class="string">'优秀'</span> <span class="keyword">if</span> x&gt;<span class="number">95</span> <span class="keyword">else</span> <span class="string">'良好'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ceea930a6c144766951c729461e4b67f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="lambda函数映射"></p><h2 id="3、通用函数映射"><a href="#3、通用函数映射" class="headerlink" title="3、通用函数映射"></a>3、通用函数映射</h2><p>map()方法可以接收自定义通用的函数进行值的映射，如我们现在要把语文分数为95以上的映射为语文等级为“优秀”，95及以下的映射为“良好”，也可以通过自定义函数来实现映射。<br>先定义一个函数score(x)用于接收需要映射的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(x)</span>:</span></span><br><span class="line">    score_class=<span class="string">'良好'</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">95</span>:</span><br><span class="line">        score_class=<span class="string">'优秀'</span></span><br><span class="line">    <span class="keyword">return</span> score_class</span><br><span class="line">    </span><br><span class="line">df[<span class="string">'语文等级'</span>]=df[<span class="string">'4-语文'</span>].map(score)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1d8ab00c51404059bd2a3738d6a09822.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="函数映射"></p><h1 id="二、替换-replace"><a href="#二、替换-replace" class="headerlink" title="二、替换 replace()"></a>二、替换 replace()</h1><p>如果要对全DataFrame数据集中的数据进行某种替换，map()可能需要对数据集中的每个列都进行map()操作才可以，但是通过pandas的替换方法replace可以一次性替换掉DataFrame中所有的数据。如：我们现在要将数据集中所有的“良好”替换成“良”，所有的“优秀”替换成“优”<br>可以直接通过 <code>df.replace([&#39;优秀&#39;,&#39;良好&#39;],[&#39;优&#39;,&#39;良&#39;])</code> 一句代码搞定。<br><img src="https://img-blog.csdnimg.cn/2dfc6617e129434dba02868ac172d15e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="替换"></p><p>以前文章中介绍了处理缺失值用fillna的方式来填充缺失值，用replace则提供了一种更加简单、灵活的处理缺失值或异常值的方式。<br>如在数据集中有一个数据列“是否接种”，这里的值有“已”、“是”、“否”、NaN，实际是在收集统计表格的时候大家填的数据不一致，不标准。现在需要将“已”的全部改成“是”，NaN没有填的改成“否”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.replace([<span class="string">'已'</span>,np.nan],[<span class="string">'是'</span>,<span class="string">'否'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d5a4ba993ea4540840d22c79204f7c0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="填充缺失值"></p><h1 id="三、重命名-rename"><a href="#三、重命名-rename" class="headerlink" title="三、重命名 rename()"></a>三、重命名 rename()</h1><p>在数据处理的过程有时候需要对列索引进行重命名，一个典型的例子就是对于数据的检索或其他操作df[column]对于任意列名均有效，但是df.column只在列名是有效的Python变量名时才有效。<br>我们在检索英语大于95分的数据时可以用<code>df[df[&#39;6-英语&#39;]&gt;95]</code><br><img src="https://img-blog.csdnimg.cn/3dbf9c7775484138b24860fffa065918.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="英语大于95分的数据"></p><p> 但是用<code>df.query(&#39;6-英语 &gt;95&#39;)</code> 就会报列名没有定义的错，因为’6-英语’列名不是有效的Python变量名。<br><img src="https://img-blog.csdnimg.cn/3e48e91116f94ee28d52a00fd49878ad.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="报列名没有定义的错"></p><p>这时候就需要将列名重命名为有效的Python变量名，有效的Python变量名应该是只能_，数字，字母组成，不可以是空格或者特殊字符(!@#$%^&amp;*~)，不能是数字开头，不能有中文。我们将“6-英语”的列名重命名为“english”。注意带上inplace=True参数用于更新作用于本数据集，而不是返回一个新的数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">'6-英语'</span>:<span class="string">'english'</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">df.query(<span class="string">'english &gt; 95'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/42e0aec53edb418c9844fda59025384f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="重命名"><br>可以看到“6-英语”列名改成了“english”，并且df.query(‘english &gt; 95’)不报错，可以正常检索出数据了。<br>更多的，如果要重命名多个列，可以传入一个需要重命名的多个字典值，进行多个列的重命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[[<span class="string">'1-学号'</span>,<span class="string">'2-姓名'</span>,<span class="string">'3-年龄'</span>]].rename(columns=&#123;<span class="string">'1-学号'</span>:<span class="string">'ID'</span>,<span class="string">'2-姓名'</span>:<span class="string">'name'</span>,<span class="string">'3-年龄'</span>:<span class="string">'age'</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/128baee4f1a14f3b9ebdce0d57f5cb27.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="多个列重命名"></p><p>如果需要重命名行索引，可以通过df.rename(index={‘原索引’:’重命名索引’})的方式进行重命名。</p><p>至此，本文通过几个实例介绍了pandas常用的数据转换工具映射map()、替换replace()、重命名rename()</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在数据处理的过程中经常碰到需要对数据进行转换的工作，比如将原来数据里的字典值根据字典转义成有意义的说明，将某些数据转换成其他的数据，将空值转换成其他值，将数据字段名进行重命名等。pandas作为数据处理分析的利器当然为上述的这些数据转换提供了便捷的方法。我们可以利用pa
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pandas数据分析之数据运算(逻辑运算、算术运算、统计运算、自定义运算)</title>
    <link href="https://xiejava.gitee.io/posts/f44191db/"/>
    <id>https://xiejava.gitee.io/posts/f44191db/</id>
    <published>2022-02-03T05:05:46.000Z</published>
    <updated>2022-02-03T05:07:21.447Z</updated>
    
    <content type="html"><![CDATA[<p>数据分析离不开数据运算，在介绍完pandas的数据加载、排序和排名、数据清洗之后，本文通过实例来介绍pandas的常用数据运算，包括逻辑运算、算术运算、统计运算及自定义运算。</p><h1 id="一、逻辑运算"><a href="#一、逻辑运算" class="headerlink" title="一、逻辑运算"></a>一、逻辑运算</h1><p>逻辑运算是程序代码中经常用到的一种运算。pandas的逻辑运算与Python基础语法中的逻辑运算存在一些差异。pandas的逻辑运算主要用于条件过滤根据条件逻辑运算得出的结果过滤检索出相应的数据。<br>我们来看一些例子：<br>数据集为学生数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\student.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/165443b3e5184f3f8bec6762a3b15c0a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="学生数据集"><br>我们要过滤检索出语文成绩大于95分的数据，通过<code>df[&#39;4-语文&#39;]&gt;95</code>的条件语句，可以得到一个结果为bool值的Series，True表示满足语文成绩&gt;95分的，False表示不满足语文成绩&gt;95的。<br>在pandas中，将Series与数值进行比较，会得到一个与自身形状相同且全为布尔值的Series，每个位置的布尔值对应该位置的比较结果。<br>这种进行比较的代码，返回值是布尔值，是一种布尔表达式，也可以被称为逻辑语句，只要代码返回的结果是布尔值，都可以把代码当成逻辑语句。<br><img src="https://img-blog.csdnimg.cn/e69800e180c14afaa4e8ad091047c63b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="语文大于95的逻辑运算"><br>根据逻辑语句的布尔值，可以用来对数据进行筛选，按我们的需要从大量数据中过滤出目标数据。如我们要过滤出语文成绩大于95的数据，就可以用上述逻辑语句的布尔值进行筛选。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">'4-语文'</span>]&gt;<span class="number">95</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b6f335ea42a84b36a9ae1f658a905ffe.png#pic_center" alt="语文大于95的结果"></p><p>除了直接的比较，pandas中有很多函数都会返回布尔值，如all()，any()，isna()等对整个DataFrame或Series的判断结果，eq()，ne()，lt()，gt()等比较函数的结果，都是布尔值。<br>逻辑语句是为逻辑运算服务的，可以直接作为判断条件。在复杂的逻辑关系中，需要使用复合逻辑运算，用逻辑运算符来连接多个逻辑语句，复合逻辑运算包含：逻辑与&amp;、逻辑或|、逻辑非~。</p><h2 id="逻辑与-amp"><a href="#逻辑与-amp" class="headerlink" title="逻辑与&amp;"></a>逻辑与&amp;</h2><p>pandas中用符号 &amp; 表示逻辑与，连接两个逻辑语句，同时为真才为真。在Python基本语法中，使用 and 表示逻辑与，但是Pandas中只能用 &amp; ，不能用and，会报模糊错误。<br>如我们要检索出一班并且语文成绩大于95的数据。可以用 <code>df[(df[&#39;4-语文&#39;]&gt;95) &amp; (df[&#39;班级&#39;]==&#39;一班&#39;)]</code><br>注意两个条件逻辑语句要分别用()括起来然后再用逻辑运算符进行运算。<br><img src="https://img-blog.csdnimg.cn/12811a4b89ac45b4868e756228183915.png#pic_center" alt="逻辑与&amp;"></p><h2 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或|"></a>逻辑或|</h2><p>pandas中用符号 | 表示逻辑或，连接两个逻辑语句，只要其中一个为真就为真。<br>在Python基本语法中，使用 or 表示逻辑或，但是Pandas中只能用 | ，不能用or。<br>如我们要检索出语文成绩大于95或英语成绩大于96的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df[<span class="string">'4-语文'</span>]&gt;<span class="number">95</span>)|(df[<span class="string">'6-英语'</span>]&gt;<span class="number">96</span>)]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/10e77ba0b0b44aceb3681be3c930f045.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="逻辑或|"></p><h2 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非~"></a>逻辑非~</h2><p>pandas中用符号 ~ 表示逻辑非，对逻辑语句取反。<br>在Python基本语法中，使用 not 表示逻辑非，但是Pandas中只能用 ~ ，不能用not。<br>如我们要检索出数据成绩&gt;98并且不是一班的同学</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df[<span class="string">'5-数学'</span>]&gt;<span class="number">98</span>) &amp; ~(df[<span class="string">'班级'</span>]==<span class="string">'一班'</span>)]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f2591c50f3d747b58e7e4750c6e993aa.png#pic_center" alt="逻辑非~"></p><p>当然也可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df[<span class="string">'5-数学'</span>]&gt;<span class="number">98</span>) &amp; (df[<span class="string">'班级'</span>]!=<span class="string">'一班'</span>)]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/eae9e964b0b7436486165af022d3084c.png#pic_center" alt="逻辑不等于"></p><h1 id="二、算术运算"><a href="#二、算术运算" class="headerlink" title="二、算术运算"></a>二、算术运算</h1><p>pandas最重要的一个功能是，它可以对不同索引的对象进行算术运算也就是（+、-、*、\）。<br>常见的算术云算是加法+运算，如果相加的对象是标量，则数据对象通过广播机制，每个数据值都+标量。如果相加的对象是数据对象则按索引进行算术运算。<br>通过一个数据集来看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data1=pd.DataFrame(np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>,<span class="number">4</span>)),columns=[<span class="string">'列1'</span>,<span class="string">'列2'</span>,<span class="string">'列3'</span>,<span class="string">'列4'</span>])</span><br><span class="line">data1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/78e20073ab2b4efbb2aa11947b0a3ddf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据运算数据集"></p><h2 id="1、使用算术运算符"><a href="#1、使用算术运算符" class="headerlink" title="1、使用算术运算符"></a>1、使用算术运算符</h2><p>和标量计算，标量运算会在算术运算过程中传播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data2=data1+<span class="number">1</span></span><br><span class="line">data2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6b1aa153243a4f1eb9341bd508470dc0.png#pic_center" alt="加标量"><br>可以看到数据集中每个值都+1了<br>和索引相同的数据对象运算，对每个数据值进行算术运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data3=pd.DataFrame(np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>,<span class="number">4</span>)),columns=[<span class="string">'列1'</span>,<span class="string">'列2'</span>,<span class="string">'列3'</span>,<span class="string">'列4'</span>])</span><br><span class="line">data4=data2+data3</span><br><span class="line">data4</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d0fbbb4f8e39444cad7c58013b6d7862.png#pic_center" alt="DataFrame相加"></p><p>在将对象相加时，如果存在不同的索引就是该索引对的并集。自动的数据对齐操作在不重叠的索引引入NA值。缺失值会在算术运算过程中传播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data5=pd.DataFrame(np.ones([<span class="number">3</span>,<span class="number">3</span>]),columns=[<span class="string">'列1'</span>,<span class="string">'列2'</span>,<span class="string">'列3'</span>])</span><br><span class="line">data5</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ee24e1fd53b34fc390af6e04093ed363.png#pic_center" alt="全为1的数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data6=data4+data5</span><br><span class="line">data6</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9231187b1e724d4bbc2c56c7da8e91d3.png#pic_center" alt="形状不同的数据集相加"></p><h2 id="2、使用算数运算函数"><a href="#2、使用算数运算函数" class="headerlink" title="2、使用算数运算函数"></a>2、使用算数运算函数</h2><p>算数运算函数包括add、sub、div、mul等对应于算术运算符如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>add,radd</td><td>用于加法（+）的方法</td></tr><tr><td>sub,rsub</td><td>用于减法（- ）的方法</td></tr><tr><td>div,rdiv</td><td>用于除法（/）的方法</td></tr><tr><td>floordiv,rfloordiv</td><td>用于底除（//）的方法</td></tr><tr><td>mul,rmul</td><td>用于乘法（* ）的方法</td></tr><tr><td>pow,rpow</td><td>用于指数（**）的方法</td></tr></tbody></table><h3 id="加法："><a href="#加法：" class="headerlink" title="加法："></a>加法：</h3><p>在对不同索引的对象进行算术运算时，如果希望当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值比如0，可以通过算术方法进行填充，然后再相加。<br><img src="https://img-blog.csdnimg.cn/948706b73b834294b8ea720e9eaa434c.png#pic_center" alt="加法函数"><br>上面的例子展示了，因为data5的行索引为3和列索引为列4用0填充后再相加所以行索引为3和列索引为列4的值是data4的值+0</p><h3 id="减法："><a href="#减法：" class="headerlink" title="减法："></a>减法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data4.sub(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/45161a0068d54041a02e414c27e0deb7.png#pic_center" alt="sub函数"></p><h3 id="乘法："><a href="#乘法：" class="headerlink" title="乘法："></a>乘法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data4.mul(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8e656f5db7204caba4b634dc59fbbc93.png#pic_center" alt="mul函数"></p><h3 id="除法："><a href="#除法：" class="headerlink" title="除法："></a>除法：</h3><p><img src="https://img-blog.csdnimg.cn/eff946f3fcbb47ab9feea24d9357b095.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="div函数"></p><h1 id="三、统计运算"><a href="#三、统计运算" class="headerlink" title="三、统计运算"></a>三、统计运算</h1><p>统计运算就是我们常用的数据集的求和、算平均值、最大值、最小值、绝对值、标准差等统计数据。在pandas中提供了丰富的统计函数可以方便的进行统计运算。</p><h2 id="1、describe汇总描述统计"><a href="#1、describe汇总描述统计" class="headerlink" title="1、describe汇总描述统计"></a>1、describe汇总描述统计</h2><p>通过np.random.randn(1000,4)生成1000个正态分布的随机数据集看一下describe的汇总描叙统计。<br>包含了数据个数count、均值mean、标准差std、最小值min、最大值等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1000个正态分布的随机数统计信息</span></span><br><span class="line">data=pd.DataFrame(np.random.randn(<span class="number">1000</span>,<span class="number">4</span>))</span><br><span class="line">data.describe()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6ef0a223ba2c49cea4f7386839c1998f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="describe汇总描述统计"></p><h2 id="2、统计函数"><a href="#2、统计函数" class="headerlink" title="2、统计函数"></a>2、统计函数</h2><p>pandas常用统计函数如下：<br><img src="https://img-blog.csdnimg.cn/80b3d851a7294c44b7523a9eb9a22bd3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="常用统计函数"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.max()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fa0ca68d2277473586de6ec2e089e47a.png#pic_center" alt="max函数"></p><p>可以算出DataFrame中每一列的最大值</p><p>如果只需要计算某一列的最大值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">1</span>].max()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4e11735cfe58470f91b72a915de7886b.png#pic_center" alt="计算某一列的最大值"></p><p>对单个函数进行统计的时候，坐标轴还是按照这些默认为columns(axis=0, default)，如果要对index进行统计，则要指明(axis=1) 这里的axis取值与axis=0对应index，axis=1对应columns不同</p><ul><li>使用0值表示沿着每一列或行标签\索引值向下执行方法</li><li>使用1值表示沿着每一行或者列标签模向执行对应的方法<br><img src="https://img-blog.csdnimg.cn/3827ea96c8724e879da33ce993bb1240.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="axis=1"></li></ul><p>如果要计算某一行的最大值<br>用<code>data.loc[0].max()</code>，通过loc[]检索出需要统计的行，再用统计函数进行统计<br><img src="https://img-blog.csdnimg.cn/f8c7621c31d14cfc8fca280df90e9081.png#pic_center" alt="计算某一行的最大值"><br>累计统计cumsum,计算前n个数的和<br><img src="https://img-blog.csdnimg.cn/3fe08e6ee5b64162bbfc25f6f5ab44ec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="计算前n个数的和"></p><h1 id="四、自定义运算"><a href="#四、自定义运算" class="headerlink" title="四、自定义运算"></a>四、自定义运算</h1><p>如果常用的统计运算还不能满足，pandas提供了方法可以进行自定义运算。</p><p> apply(func, axis=0)</p><ul><li>func – 自定义函数 axis=0 – 默认是列（按行标签方向执行方法）</li><li>axis=1为对行进行运算（按列标签方向执行方法）</li></ul><p>如：自定义一个对列求max-min的函数<br><img src="https://img-blog.csdnimg.cn/9c3f83e3362e4fbd98ca97692a2c730a.png#pic_center" alt="head()"><br>通过lambda匿名函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.apply(<span class="keyword">lambda</span> x: x.max() - x.min()) <span class="comment"># lambda为匿名函数，x为自变量，冒号后面为函数表达式</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5faf44ec89af43068ad3524f46fd1ee3.png#pic_center" alt="lambda匿名函数"></p><p>通过自定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxdivmin</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x.max()-x.min()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0c8d377e7cfb47189c03ee52257fc215.png#pic_center" alt="自定义函数"><br>至此，本文通过实例简单介绍了pandas数据分析的数据运算包括逻辑运算、算术运算、统计运算、自定义运算，也是平时在实际应用中常用的运算。</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据分析离不开数据运算，在介绍完pandas的数据加载、排序和排名、数据清洗之后，本文通过实例来介绍pandas的常用数据运算，包括逻辑运算、算术运算、统计运算及自定义运算。&lt;/p&gt;
&lt;h1 id=&quot;一、逻辑运算&quot;&gt;&lt;a href=&quot;#一、逻辑运算&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pandas数据清洗之处理缺失、重复、异常数据</title>
    <link href="https://xiejava.gitee.io/posts/a87a78e2/"/>
    <id>https://xiejava.gitee.io/posts/a87a78e2/</id>
    <published>2022-02-02T01:55:55.000Z</published>
    <updated>2022-02-02T01:58:21.527Z</updated>
    
    <content type="html"><![CDATA[<p>在数据分析和建模的过程中，有相当多的时间要用在数据准备上：加载、清理、转换以及重塑。这些工作会占到分析师时间的80%或更多。幸运的是pandas和内置的Python标准库提供了高效、灵活的工具可以帮助我们轻松的做这些事情。</p><p>本文重点介绍通过pandas进行数据的清洗。数据处理中的清洗工作主要包括对需要分析的数据集中的缺失值（空值）、重复值、异常值的处理。对于数据清洗一般也是分两个步骤，第一步就是要很方便快速的找到需要处理的数据，如何快速找到数据中的缺失值（空值）、重复数据或异常的数据，第二步是对找到的数据根据自己的实际使用需求进行处理，如删除还是替换成其他的数据。<br><img src="https://img-blog.csdnimg.cn/1013415fe61e4504be7a584b42f12daf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_8,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pandas数据清洗"></p><h1 id="一、处理缺失值"><a href="#一、处理缺失值" class="headerlink" title="一、处理缺失值"></a>一、处理缺失值</h1><p>在许多数据分析工作过程中，由于对数据质量问题，缺失数据是经常发生的。对于数值数据，pandas使用浮点值NaN(Not a Number)表示缺失数据。在pandas中，还采用了R语言中惯用的缺失值表示法NA，它表示不可用not available。在统计应用中，NA数据可能是不存在的数据或虽然存在但是看不到。进行数据清洗对缺失数据进行分析，以判断数据采集的问题或缺失数据导致的偏差。</p><h2 id="1、判断缺失值（空值）"><a href="#1、判断缺失值（空值）" class="headerlink" title="1、判断缺失值（空值）"></a>1、判断缺失值（空值）</h2><p>在pandas中通过isna()或isnull()方法判断空值，二者等价，用于判断一个series或dataframe各元素值是否为空的bool结果。需注意对空值的界定：即None或numpy.nan才算空值，而空字符串、空列表等则不属于空值；类似地，notna()和notnull()则用于判断是否非空。<br>看下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">stud_data=pd.Series([<span class="string">'张三'</span>,<span class="string">'李四'</span>,np.nan,[],<span class="string">''</span>,<span class="literal">None</span>,<span class="string">'王五'</span>])</span><br><span class="line">stud_data</span><br></pre></td></tr></table></figure><p>通过stud_data.isnull()和stud_data.isna()分别来判断空值<br><img src="https://img-blog.csdnimg.cn/5e5303378e084de8b8326c3a55d61d4a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="判断空值"></p><p>类似地，notna()和notnull()则用于判断是否非空<br><img src="https://img-blog.csdnimg.cn/24a955afccac4e9199e31fb91e3eb3d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_10,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="判断是否非空"><br>同样的对于DataFrame中的缺失数据判断也是一样的。<br>构建DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stud_df=pd.DataFrame(stud_data,columns=[<span class="string">'student_name'</span>])</span><br><span class="line">stud_df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa151caaefd54026927b43521b3e89af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="DataFrame中的缺失数据判断"></p><p>对于缺失值的处理有两种常用的方式，一是用按一定的策略对空值进行填充，二是对于缺失值干脆进行删除。</p><h2 id="2、填充缺失值（空值）"><a href="#2、填充缺失值（空值）" class="headerlink" title="2、填充缺失值（空值）"></a>2、填充缺失值（空值）</h2><p>pandas中用户填充缺失值的方法是fillna()，可以按一定的策略对空值进行填充，如常数填充、向前/向后填充等，也可通过inplace参数确定是否本地更改。</p><h3 id="1-常量填充"><a href="#1-常量填充" class="headerlink" title="1.常量填充"></a>1.常量填充</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stud_df[[<span class="string">'student_name'</span>]].fillna(<span class="string">'某某'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8b7c06b63b544d7698ceba74dd2cfe24.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="常量填充"></p><p>可以看到判断为缺失值的地方都填充了”某某”，因为空字符串和空列表都不是缺失值，所以没有填充。</p><h3 id="2-向前和向后填充NA"><a href="#2-向前和向后填充NA" class="headerlink" title="2.向前和向后填充NA"></a>2.向前和向后填充NA</h3><p>通过fillna(mathod=’ffill’)，mathod=’ffill’ 向前填充和 mathod=’bfill’ 向后填充，也就是说用前面的值来填充NA或用后面的值来填充NA<br>我们来增加一列性别列gender来看一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stud_gender_data=pd.Series([<span class="number">1</span>,<span class="number">0</span>,np.nan,<span class="string">'女'</span>,<span class="number">1</span>,<span class="literal">None</span>,<span class="string">'男'</span>])</span><br><span class="line">stud_df[<span class="string">'gender'</span>]=stud_gender_data</span><br><span class="line">stud_df</span><br><span class="line">stud_df[[<span class="string">'gender'</span>]].fillna(method=<span class="string">'ffill'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4347d66cbf6145e284457cf6dd72baf0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="向前和向后填充NA"></p><p>可以看到通过method=’ffill’，将NaN和None前面的值填充端到了NaN和None。<br>用fillna()进行填充会返回一个填充好的数据集的副本，并没有对原始数据进行操作，如果要修改原始数据可以通过inplace参数确定是否本地更改。<br><img src="https://img-blog.csdnimg.cn/57011ee8f66a472a94ce0af4fa5f3ee4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="通过inplace参数确定是否本地更改"></p><h2 id="3、删除缺失值（空值）"><a href="#3、删除缺失值（空值）" class="headerlink" title="3、删除缺失值（空值）"></a>3、删除缺失值（空值）</h2><p>如果想删除缺失值，那么使用 dropna() 函数与参数 axis 可以实现。在默认情况下，按照 axis=0 来按行处理，这意味着如果某一行中存在 NaN 值将会删除整行数据。如果在dropna()中传入<code>how=&#39;all&#39;</code>将只会删除全为NA或NaN的行。示例如下：<br><img src="https://img-blog.csdnimg.cn/0eed969515fe431e86b7a17cb7c6ec05.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="删除缺失值（空值）"></p><h1 id="二、处理重复值"><a href="#二、处理重复值" class="headerlink" title="二、处理重复值"></a>二、处理重复值</h1><p>重复数据也是在实际数据处理过程中碰到比较多的，处理重复数据就是在数据集中找出重复数据然后将其删除保留一个唯一不重复的数据。</p><h2 id="1、检测重复值"><a href="#1、检测重复值" class="headerlink" title="1、检测重复值"></a>1、检测重复值</h2><p>pandas通过duplicated()方法检测各行是否重复，返回一个行索引的bool结果，可通过keep参数设置保留第一行、最后一行、无保留，例如keep=first意味着在存在重复的多行时，首行被认为是合法的而可以保留。<br>构造一个DataFrame来看一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=pd.DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'A'</span>,<span class="string">'B'</span>]*<span class="number">3</span>+[<span class="string">'B'</span>],<span class="string">'key2'</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]&#125;)</span><br><span class="line">data</span><br><span class="line">data.duplicated()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e4e8559ffcf14f718f72f6a93f7d4c86.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="检测重复值"></p><h2 id="2、删除重复值"><a href="#2、删除重复值" class="headerlink" title="2、删除重复值"></a>2、删除重复值</h2><p>pandas通过drop_duplicates()方法按行检测并删除重复的记录，也可通过keep参数设置保留项。由于该方法默认是按行进行检测，如果存在某个需要需要按列删除，则可以先转置再执行该方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.drop_duplicates()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0b23707f00c84944a6eb1b417eb51e95.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_9,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="删除重复值"><br>可以看到第7行也就是index为6的重复行被删除了。<br>当带了<code>keep=&#39;last&#39;</code>参数时，保留最后一个重复项，前面的重复项将被丢弃。可以看到保留的是索引为6的，索引为5的重复项被丢弃了。<br><img src="https://img-blog.csdnimg.cn/16068ab867b04514b64a628d8b69f7e4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="保留最后一个重复项"></p><h1 id="三、处理异常值"><a href="#三、处理异常值" class="headerlink" title="三、处理异常值"></a>三、处理异常值</h1><h2 id="1、判断异常值"><a href="#1、判断异常值" class="headerlink" title="1、判断异常值"></a>1、判断异常值</h2><p>判断异常值的标准依赖具体分析数据，如大于或小于某个基线范围的值。<br>我们来看一个含有正态分布的DataFrame数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data=pd.DataFrame(np.random.randn(<span class="number">1000</span>,<span class="number">4</span>))</span><br><span class="line">data.describe()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/035abbd8a84e464da0b9a3c26e9db1df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="含有正态分布的DataFrame数据集"></p><p>假设我们认为某列中绝对值大小超过3的是异常值，那么判断异常值就是要找出某列中大小超过3的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[np.abs(col)&gt;<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/632fe5b430da4aeabf8ce886d9e833e5.png#pic_center" alt="找出某列中大小超过3的值"></p><p>要选出全部含有绝对值大小超过3的行，可以在布尔型DataFrame中使用any()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[(np.abs(data)&gt;<span class="number">3</span>).any(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4e076b66d0be430689a36f0ae2568742.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="全部含有绝对值大小超过3的行"></p><h2 id="2、替换异常值"><a href="#2、替换异常值" class="headerlink" title="2、替换异常值"></a>2、替换异常值</h2><p>对于异常值，可以直接替换。<br>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[np.abs(data)&gt;<span class="number">3</span>]=np.sign(data)*<span class="number">3</span></span><br></pre></td></tr></table></figure><p>这样就可以将异常值替换为绝对值不大于3的<br><img src="https://img-blog.csdnimg.cn/db6fd6434ca948fd8485a2aafe8f031c.png#pic_center" alt="替换异常值"></p><h2 id="3、删除异常值"><a href="#3、删除异常值" class="headerlink" title="3、删除异常值"></a>3、删除异常值</h2><p>删除异常值，可以用pandas的drop()方法，接受参数在特定轴线执行删除一条或多条记录，可通过axis参数设置是按行删除还是按列删除<br>如删除第3列，列索引为2的列中绝对值&gt;3的行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">col=data[<span class="number">2</span>]</span><br><span class="line">data.drop(data[np.abs(col)&gt;<span class="number">3</span>].index,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ab8dbd69ba3d4da2a94d77d280c36dcb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="删除异常值"></p><p>可以看到本来有1000行的，删除了3行，再用data[np.abs(col)&gt;3]验证，已经找不到数据了。</p><p>至此，本文通过实例介绍了pandas进行数据清洗包括缺失值、重复值及异常值的处理。数据清洗是数据分析前面的准备工作，数据质量的好坏将直接影响数据分析的结果。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在数据分析和建模的过程中，有相当多的时间要用在数据准备上：加载、清理、转换以及重塑。这些工作会占到分析师时间的80%或更多。幸运的是pandas和内置的Python标准库提供了高效、灵活的工具可以帮助我们轻松的做这些事情。&lt;/p&gt;
&lt;p&gt;本文重点介绍通过pandas进行数据
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pandas数据分析之排序和排名(sort和rank)</title>
    <link href="https://xiejava.gitee.io/posts/16c9fc17/"/>
    <id>https://xiejava.gitee.io/posts/16c9fc17/</id>
    <published>2022-01-30T01:14:37.000Z</published>
    <updated>2022-01-30T01:55:55.089Z</updated>
    
    <content type="html"><![CDATA[<p>对数据集进行排序和排名的是常用最基础的数据分析手段，pandas提供了方便的排序和排名的方法，通过简单的语句和参数就可以实现常用的排序和排名。</p><p>本文以student数据集的DataFrame为例来演示和介绍pandas数据分析之排序和排名(sort和rank)。<br>数据集内容如下，包括学生的学号、姓名、年龄及语文、数学、英语的成绩：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\student.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/50b98632593d4d96bc9d95d0914ba377.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="student数据集"><br>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><h1 id="一、排序"><a href="#一、排序" class="headerlink" title="一、排序"></a>一、排序</h1><p>对数据集进行排序是是常用的数据分析需求之一。pandas提供了按 索引标签排序sort_index()和按值排序sort_values()两种排序方法。对于DataFrame，可以根据任意一个轴上的索引标签进行排序。默认顺序排序，也可以设置按倒序排序。</p><h2 id="1、按标签排序"><a href="#1、按标签排序" class="headerlink" title="1、按标签排序"></a>1、按标签排序</h2><h3 id="1）按行标签索引排序"><a href="#1）按行标签索引排序" class="headerlink" title="1）按行标签索引排序"></a>1）按行标签索引排序</h3><p>pandas默认按行标签索引顺序排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按行索引排序</span></span><br><span class="line">df.sort_index()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7f59ca64cf504f0a81269276187a4ae9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按行索引排序"><br>可以通过设置<code>ascending=False</code>参数进行倒序排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按行索引倒序排序</span></span><br><span class="line">df.sort_index(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/62cc7ea3d992450ea8c69e1552605427.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按行索引倒序排序"></p><h3 id="2）按列标签索引排序"><a href="#2）按列标签索引排序" class="headerlink" title="2）按列标签索引排序"></a>2）按列标签索引排序</h3><p>通过给 axis 轴参数传递 0 或 1，可以对列标签进行排序。默认情况下，axis=0 表示按行排序；而 axis=1 则表示按列排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按列索引排序</span></span><br><span class="line">df.sort_index(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/555275e9780b4b9d911350ebf691b561.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按列索引排序"><br>同样可以设置ascending=False参数进行倒序排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按列索引倒序排序</span></span><br><span class="line">df.sort_index(axis=<span class="number">1</span>,ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2b8e879e51f94dfa8ed66013d5b46ebf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按列索引倒序排序"></p><h2 id="2、按值排序"><a href="#2、按值排序" class="headerlink" title="2、按值排序"></a>2、按值排序</h2><p>在实际应用中用得最多的应该是根据某一列的值进行排序。在pandas中可以通过sort_value()，在sort_value中可以设定按某个列排序，也可以通过sort_value(by=[])，通过设置by=[‘a’,’b’]列表来指定多个需要排序的列。</p><h3 id="1）对单个列的值排序"><a href="#1）对单个列的值排序" class="headerlink" title="1）对单个列的值排序"></a>1）对单个列的值排序</h3><p>如在数据集中对语文成绩进行排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩排序</span></span><br><span class="line">df.sort_values(<span class="string">'4-语文'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20590ee5b8ed45e69ec3f8936dadaba7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="对语文成绩进行排序"></p><h3 id="2）对多个列的值进行排序"><a href="#2）对多个列的值进行排序" class="headerlink" title="2）对多个列的值进行排序"></a>2）对多个列的值进行排序</h3><p>通过设置by=[‘a’,’b’]列表来指定多个需要排序的列。<br>如对数据集中的语文和数学进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文、数学排序</span></span><br><span class="line">df.sort_values(by=[<span class="string">'4-语文'</span>,<span class="string">'5-数学'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4137cab46c284d499f180dae9f32bdc2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="对数据集中的语文和数学进行排序"></p><h2 id="3、排序算法"><a href="#3、排序算法" class="headerlink" title="3、排序算法"></a>3、排序算法</h2><p>sort_values() 提供了参数kind用来指定排序算法。这里有三种排序算法：</p><ul><li>mergesort（归并排序） </li><li>heapsort（堆排序） </li><li>quicksort（快速排序）</li></ul><p>默认为 quicksort(快速排序) ，其中 mergesort归并排序是最稳定的算法。<br>具体用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文、数学用mergesort归并排序算法排序</span></span><br><span class="line">df.sort_values(by=[<span class="string">'4-语文'</span>,<span class="string">'5-数学'</span>],kind=<span class="string">'mergesort'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8def3ea3da0048298166f0fff482ccca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="排序算法"></p><h1 id="二、排名"><a href="#二、排名" class="headerlink" title="二、排名"></a>二、排名</h1><p>排名和排序的区别在于排序一定是有顺序，而排名分先后并列。如在现实生活中相同的分数存在排名并列的情况。<br>在《使用python进行数据分析》一书中对rank排名的描述为：排名是指对数组从1到有效数据点总数分配名次的操作。Series和DataFrame的rank方法是实现排名的方法，默认情况下，rank是通过“为各组分配一个平均排名”的方式破坏平级关系。这段话讲得是什么鬼？其实就是在存在并列排名的时候采用一定的策略来打破这种关系。<br>排名中的平级关系打破方法有如下几种：</p><table><thead><tr><th>method</th><th>说明</th></tr></thead><tbody><tr><td>average</td><td>默认：在每个组中分配平均排名</td></tr><tr><td>min</td><td>对整个组使用最小排名</td></tr><tr><td>max</td><td>对整个组使用最大排名</td></tr><tr><td>first</td><td>按照值在数据中出现的次序分配排名</td></tr><tr><td>dense</td><td>类似于method=’min’,但组件排名总是加1，而不是一个组中的相等元素的数量</td></tr></tbody></table><p><strong>rank()函数原型：</strong><code>rank(axis=0, method: str = &#39;average&#39;, numeric_only: Union[bool, NoneType] = None, na_option: str = &#39;keep&#39;, ascending: bool = True, pct: bool = False)</code><br>这里method取值可以为’average’，’first’，’min’， ‘max’，’dense’，用来打破排名中的平级关系的。<br>光看这些说明还是比较难理解。下面通过实例来说明：</p><h2 id="1、默认average-排名"><a href="#1、默认average-排名" class="headerlink" title="1、默认average 排名"></a>1、默认average 排名</h2><p>在数据集中我们只取“学号”、“姓名”、“语文”，然后取“语文”的排名，默认average</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_rank=df[[<span class="string">'1-学号'</span>,<span class="string">'2-姓名'</span>,<span class="string">'4-语文'</span>]].copy()</span><br><span class="line"><span class="comment">#按语文成绩进行rank的默认排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/213aa6cf088d48b69f48ac64845f4581.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="默认average 排名"></p><p>这个排名很奇怪，97分排名第一没有问题，居然没有第二名，三个96分排名均为3，还有两个90分排名为9.5。这是什么鬼？<br>原来这就是默认的“average”规则,成绩相同时，取顺序排名中所有名次之和除以该成绩的个数，如两个90分的名次为最后两名分别为9名和10名，即(9+10)/2=9.5，三个96分的名次分别为2、3、4 那么排名为（2+3+4)/3=9/3=3</p><h2 id="2、mothod-’min’的排名"><a href="#2、mothod-’min’的排名" class="headerlink" title="2、mothod=’min’的排名"></a>2、mothod=’min’的排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行min排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'min'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b289018016d448c6a59b03c6641ed06f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行min排名"></p><p>在这个排名中看到有3个并列为2的排名，但没有排名为3、4的，有两个排名为9的，但没有排名为10的。可以看出当method=“min”时，成绩相同的同学，取在顺序排名中最小的那个排名作为该值的排名，张三、王五、顾十三个同学都是96分排名分别为2、3、4，那么当method为min时，取2、3、4的最小的那个作为成绩为96的整体排名即第2名。因为有了三个2名，接下来就从5名开始，5、6、7、8，到了第9名又有两个同分数的取9、10的最小排名为9，所以有两个9名。</p><h2 id="3、mothod-’max’的排名"><a href="#3、mothod-’max’的排名" class="headerlink" title="3、mothod=’max’的排名"></a>3、mothod=’max’的排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行max排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'max'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/397162df3494435c9acde13fc286eee5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行max排名"><br>与min相反，成绩相同的同学，排名相同取顺序最大的排名，张三、王五、顾十三个同学都是96分排名分别为2、3、4，那么当method为min时，取2、3、4的最小的那个作为成绩为96的整体排名即第2名。当method为max时，取最大的4作为96分的整体排名，同理90分的取10为90分的整体排名。</p><h2 id="4、mothod-’first’的排名"><a href="#4、mothod-’first’的排名" class="headerlink" title="4、mothod=’first’的排名"></a>4、mothod=’first’的排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行first排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'first'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dfda709d0192404abf719ca156906758.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行first排名"></p><p>first排名很好理解了，有点先到先得的意思，成绩相同，谁的索引排前，谁的排名就靠前，比如张三、王五、顾十 这三个同学都是96分，按理应该是并列第2，但张三的索引比王五和顾十的都靠前，王五的索引比顾十靠前，所以他们的顺序分别为2、3、4，同理陈一、钱七的分数都是90分，但陈一的索引比钱七靠前所以陈一排名为9、钱七排名第10</p><h2 id="5、mothod-’dense’的排名"><a href="#5、mothod-’dense’的排名" class="headerlink" title="5、mothod=’dense’的排名"></a>5、mothod=’dense’的排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行dense排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'dense'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2156d32683ea43da8294df5329869bef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行dense排名"><br>“dense”: 是密集的意思，也比较好理解，即相同成绩的同学排名相同，其他依次加1即可。可以看到张三、王五、顾十这三位同学都是96分，并列排名第2，后面的加1，即比他们分数稍低的赵六95分排名第3，后面依次。</p><h2 id="6、不同method的排名对比"><a href="#6、不同method的排名对比" class="headerlink" title="6、不同method的排名对比"></a>6、不同method的排名对比</h2><p>最后不同method的排名对比：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行rank的默认排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-average'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#按语文成绩进行min排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-min'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'min'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#按语文成绩进行max排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-max'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'max'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#按语文成绩进行first排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-first'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'first'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#按语文成绩进行dense排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-dense'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'dense'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'4-语文'</span>,ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c082acec2ed9426aa5af7cee47d3ac30.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行rank的默认排名"></p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对数据集进行排序和排名的是常用最基础的数据分析手段，pandas提供了方便的排序和排名的方法，通过简单的语句和参数就可以实现常用的排序和排名。&lt;/p&gt;
&lt;p&gt;本文以student数据集的DataFrame为例来演示和介绍pandas数据分析之排序和排名(sort和rank)
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pandas数据结构(Series和DataFrame)</title>
    <link href="https://xiejava.gitee.io/posts/531458d5/"/>
    <id>https://xiejava.gitee.io/posts/531458d5/</id>
    <published>2022-01-23T13:07:57.000Z</published>
    <updated>2022-02-02T01:57:57.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>无可非议，pandas是Python最强大的数据分析和探索工具之一，因金融数据分析工具而开发，支持类似于SQL语句的模型，可以对数据进行增删改查等操作，支持时间序列分析，也能够灵活的处理缺失的数据。它含有使数据分析工作变得更快更简单的高级数据结构和操作工具。pandas是基于NumPy构建的，让以NumPy为中心的应用变得更加简单。</p><p>这里所说的让pandas变得更快更简单的高级数据结构就是Series和DataFrame。要熟练使用pandas，首先得要熟悉它的这两个主要的数据结构：<strong>Series</strong>和<strong>DateFrame</strong>。</p><p>本文将针对Series和DateFrame，介绍Series和DataFrame数据对象的创建及基于数据对象的基础上对数据进行选择、增加、删除等数据操作。</p><h1 id="一、Series"><a href="#一、Series" class="headerlink" title="一、Series"></a>一、Series</h1><p>Series是一种类似于一维数组对象，它是由一组的数据值value（各种NumPy数据类型）以及一组与之相关的数据标签index（即索引）组成，其中标签与数据值之间是一一对应的关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">obj = pd.Series([<span class="string">'陈一'</span>,<span class="string">'周二'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'钱七'</span>,<span class="string">'孙八'</span>,<span class="string">'何九'</span>,<span class="string">'顾十'</span>])</span><br><span class="line">obj</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    陈一</span><br><span class="line"><span class="number">1</span>    周二</span><br><span class="line"><span class="number">2</span>    张三</span><br><span class="line"><span class="number">3</span>    李四</span><br><span class="line"><span class="number">4</span>    王五</span><br><span class="line"><span class="number">5</span>    赵六</span><br><span class="line"><span class="number">6</span>    钱七</span><br><span class="line"><span class="number">7</span>    孙八</span><br><span class="line"><span class="number">8</span>    何九</span><br><span class="line"><span class="number">9</span>    顾十</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>Series的字符串表现形式为：索引在左边，值在右边。由于没有为数据指定索引，于是会自动创建一个0到N-1（N为数据的长度）的整数型索引。<br><img src="https://img-blog.csdnimg.cn/1a4a56b01582403abdfa33f45b1ba496.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Serires数据结构"></p><p>可以通过Series的values和index属性获取其数组表示形式和索引对象。<br><img src="https://img-blog.csdnimg.cn/7430b9ace9584288a9495cb835f19b9e.png#pic_center" alt="通过Series的values和index属性获取其数组表示形式和索引对象"></p><p><strong>可以将Series看成一个定长的有序字典，因为它是索引值到数据值的一个映射。</strong></p><h2 id="1、Series对象创建"><a href="#1、Series对象创建" class="headerlink" title="1、Series对象创建"></a>1、Series对象创建</h2><p>pandas 使用 Series()  函数来创建 Series 对象，通过这个对象可以调用相应的方法和属性，从而达到处理数据的目的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">obj=pd.Series( data, index, dtype, copy)</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>输入的数据，可以是列表、常量、ndarray 数组等。</td></tr><tr><td>index</td><td>索引值必须是惟一的，如果没有传递索引，则默认为 np.arrange(n)。</td></tr><tr><td>dtype</td><td>dtype表示数据类型，如果没有提供，则会自动判断得出。</td></tr><tr><td>copy</td><td>表示对 data 进行拷贝，默认为 False。</td></tr></tbody></table><p>data可以是列表、常量、ndarray数组等，如果数据被存放在一个Python字典dict中，也可以直接通过这个dict来创建Series，如果没有传入索引时会按照字典的键来构造索引；反之，当传递了索引时需要将索引标签与字典中的值一一对应。<br>前面的列子是通过列表来创建的Series，接下来看下通过ndarray和dic来创建Series。</p><h3 id="通过ndarray创建Series"><a href="#通过ndarray创建Series" class="headerlink" title="通过ndarray创建Series"></a>通过ndarray创建Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ndarray创建Series</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data=np.array([<span class="string">'陈一'</span>,<span class="string">'周二'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'钱七'</span>,<span class="string">'孙八'</span>,<span class="string">'何九'</span>,<span class="string">'顾十'</span>])</span><br><span class="line">obj= pd.Series(data)</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    陈一</span><br><span class="line"><span class="number">1</span>    周二</span><br><span class="line"><span class="number">2</span>    张三</span><br><span class="line"><span class="number">3</span>    李四</span><br><span class="line"><span class="number">4</span>    王五</span><br><span class="line"><span class="number">5</span>    赵六</span><br><span class="line"><span class="number">6</span>    钱七</span><br><span class="line"><span class="number">7</span>    孙八</span><br><span class="line"><span class="number">8</span>    何九</span><br><span class="line"><span class="number">9</span>    顾十</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="通过dict创建Series"><a href="#通过dict创建Series" class="headerlink" title="通过dict创建Series"></a>通过dict创建Series</h3><p>#通过dict创建Series,没有设置indx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">'1'</span> :<span class="string">'张三'</span>, <span class="string">'2'</span> :<span class="string">'李四'</span>, <span class="string">'3'</span> : <span class="string">'王五'</span>&#125;</span><br><span class="line">obj=pd.Series(data)</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>    张三</span><br><span class="line"><span class="number">2</span>    李四</span><br><span class="line"><span class="number">3</span>    王五</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>当传递的索引值无法找到与其对应的值时，使用 NaN（非数字）填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过dict创建Series,设置indx</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">'1'</span> :<span class="string">'张三'</span>, <span class="string">'2'</span> :<span class="string">'李四'</span>, <span class="string">'3'</span> : <span class="string">'王五'</span>&#125;</span><br><span class="line">obj=pd.Series(data,index=[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'4'</span>])</span><br><span class="line"><span class="comment">#索引4没有在dict的对应的key，所以使用NaN（非数字）填充</span></span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>     张三</span><br><span class="line"><span class="number">2</span>     李四</span><br><span class="line"><span class="number">4</span>    NaN</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h2 id="2、Series操作"><a href="#2、Series操作" class="headerlink" title="2、Series操作"></a>2、Series操作</h2><h3 id="Series数据访问"><a href="#Series数据访问" class="headerlink" title="Series数据访问"></a>Series数据访问</h3><p>Series提供了多种数据访问的方式，可以通过位置下标及索引来访问数据，可以访问单个数据也可以访问多个数据。</p><h4 id="通过位置下标及索引来访问数据"><a href="#通过位置下标及索引来访问数据" class="headerlink" title="通过位置下标及索引来访问数据"></a>通过位置下标及索引来访问数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data=np.array([<span class="string">'陈一'</span>,<span class="string">'周二'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>])</span><br><span class="line">obj= pd.Series(data,index=[<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>])</span><br><span class="line">print(<span class="string">'obj的Series数据'</span>)</span><br><span class="line">print(obj)</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#位置下标访问</span></span><br><span class="line">print(<span class="string">'位置下标访问:obj[0]'</span>)</span><br><span class="line">print(obj[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#切片访问</span></span><br><span class="line">print(<span class="string">'位置切片访问多个元素值:obj[1:3]'</span>)</span><br><span class="line">print(obj[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#索引访问</span></span><br><span class="line">print(<span class="string">'索引访问:obj[obj.index==\'三\']'</span>)</span><br><span class="line">print(obj[obj.index==<span class="string">'三'</span>])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#索引访问</span></span><br><span class="line">print(<span class="string">'索引访问:obj[\'一\']'</span>)</span><br><span class="line">print(obj[<span class="string">'一'</span>])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#索引列表访问</span></span><br><span class="line">print(<span class="string">'索引列表访问多个元素值:obj[[\'二\',\'三\']]'</span>)</span><br><span class="line">print(obj[[<span class="string">'二'</span>,<span class="string">'三'</span>]])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">obj的Series数据</span><br><span class="line">一    陈一</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">四    李四</span><br><span class="line">五    王五</span><br><span class="line">六    赵六</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">位置下标访问:obj[<span class="number">0</span>]</span><br><span class="line">陈一</span><br><span class="line"></span><br><span class="line">位置切片访问多个元素值:obj[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">索引访问:obj[obj.index==<span class="string">'三'</span>]</span><br><span class="line">三    张三</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">索引访问:obj[<span class="string">'一'</span>]</span><br><span class="line">陈一</span><br><span class="line"></span><br><span class="line">索引列表访问多个元素值:obj[[<span class="string">'二'</span>,<span class="string">'三'</span>]]</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h4 id="head-amp-tail-查看数据"><a href="#head-amp-tail-查看数据" class="headerlink" title="head()&amp;tail()查看数据"></a>head()&amp;tail()查看数据</h4><p>如果想要查看 Series 的某一部分数据，可以使用 head() 或者 tail() 方法。其中 head() 返回前 n 行数据，默认显示前 5 行数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data=np.array([<span class="string">'陈一'</span>,<span class="string">'周二'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>])</span><br><span class="line">obj= pd.Series(data,index=[<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>])</span><br><span class="line"><span class="comment">#输出前三行数据</span></span><br><span class="line">print(<span class="string">'输出前三行数据'</span>)</span><br><span class="line">print(obj.head(<span class="number">3</span>))</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#输出后两行数据</span></span><br><span class="line">print(<span class="string">'输出后两行数据'</span>)</span><br><span class="line">print(obj.tail(<span class="number">2</span>))</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输出前三行数据</span><br><span class="line">一    陈一</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">输出后两行数据</span><br><span class="line">五    王五</span><br><span class="line">六    赵六</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="Series数据增加"><a href="#Series数据增加" class="headerlink" title="Series数据增加"></a>Series数据增加</h3><h4 id="1-直接通过索引增加"><a href="#1-直接通过索引增加" class="headerlink" title="1.直接通过索引增加"></a>1.直接通过索引增加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过索引增加数据</span></span><br><span class="line">obj[<span class="string">'十一'</span>]=<span class="string">'肖十一'</span></span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line">一      陈一</span><br><span class="line">二      周二</span><br><span class="line">三      张三</span><br><span class="line">四      李四</span><br><span class="line">五      王五</span><br><span class="line">六      赵六</span><br><span class="line">十一    肖十一</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h4 id="2-通过append-增加"><a href="#2-通过append-增加" class="headerlink" title="2.通过append()增加"></a>2.通过append()增加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过append()增加多个数据</span></span><br><span class="line">obj2=pd.Series([<span class="string">'郭芙蓉'</span>,<span class="string">'杨过'</span>],index=[<span class="string">'十二'</span>,<span class="string">'十三'</span>])</span><br><span class="line">obj=obj.append(obj2)</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一      陈一</span><br><span class="line">二      周二</span><br><span class="line">三      张三</span><br><span class="line">四      李四</span><br><span class="line">五      王五</span><br><span class="line">六      赵六</span><br><span class="line">十一    肖十一</span><br><span class="line">十二    郭芙蓉</span><br><span class="line">十三     杨过</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="Series数据修改"><a href="#Series数据修改" class="headerlink" title="Series数据修改"></a>Series数据修改</h3><p>Series数据可以通过制定索引直接修改<br>如：修改索引为十一的数据，直接obj[‘十一’]=’肖XX’，就可以进行修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改Series数据</span></span><br><span class="line">obj[<span class="string">'十一'</span>]=<span class="string">'肖XX'</span></span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line">一      陈一</span><br><span class="line">二      周二</span><br><span class="line">三      张三</span><br><span class="line">四      李四</span><br><span class="line">五      王五</span><br><span class="line">六      赵六</span><br><span class="line">十一    肖XX</span><br><span class="line">十二    郭芙蓉</span><br><span class="line">十三     杨过</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="Series数据删除"><a href="#Series数据删除" class="headerlink" title="Series数据删除"></a>Series数据删除</h3><p>通过drop()删除，<code>注意如果没有带inplace=True，会返回一个新的Series对象。如果要修改本对象，注意要带上inplace=True</code>。</p><h4 id="1-删除单个数据"><a href="#1-删除单个数据" class="headerlink" title="1.删除单个数据"></a>1.删除单个数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">obj.drop(<span class="string">'十一'</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line">一      陈一</span><br><span class="line">二      周二</span><br><span class="line">三      张三</span><br><span class="line">四      李四</span><br><span class="line">五      王五</span><br><span class="line">六      赵六</span><br><span class="line">十二    郭芙蓉</span><br><span class="line">十三     杨过</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h4 id="2-删除多个数据"><a href="#2-删除多个数据" class="headerlink" title="2.删除多个数据"></a>2.删除多个数据</h4><p>参数为索引列表，即可以删除索引为列表中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj.drop([<span class="string">'十二'</span>,<span class="string">'十三'</span>],inplace=<span class="literal">True</span>)</span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line">一    陈一</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">四    李四</span><br><span class="line">五    王五</span><br><span class="line">六    赵六</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h1 id="二、DataFrame"><a href="#二、DataFrame" class="headerlink" title="二、DataFrame"></a>二、DataFrame</h1><p>DataFrame 是 Pandas 的重要数据结构之一，也是在使用 Pandas 进行数据分析过程中最常用的结构之一。DataFrame 一个表格型的数据结构，既有行标签（index），又有列标签（columns），它也被称异构数据表，所谓异构，指的是表格中每列的数据类型可以不同，比如可以是字符串、整型或者浮点型等。DataFrame 的每一行数据都可以看成一个 Series 结构，只不过，DataFrame 为这些行中每个数据值增加了一个列标签。因此 DataFrame 其实是从 Series 的基础上演变而来。<strong>可以把DataFrame看做是关系型数据库里或Excel里的一张表格来理解</strong>。<br><img src="https://img-blog.csdnimg.cn/5d6b34b82d554bc2bfe87d9ccd9eee92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="DataFrame数据结构"><br><strong>DataFrame 数据结构的特点：</strong><br>DataFrame 每一列的标签值允许使用不同的数据类型；<br>DataFrame 是表格型的数据结构，具有行和列；<br>DataFrame 中的每个数据值都可以被修改。<br>DataFrame 结构的行数、列数允许增加或者删除；<br>DataFrame 有两个方向的标签轴，分别是行标签和列标签；<br>DataFrame 可以对行和列执行算术运算。</p><h2 id="1、DataFrame对象的创建"><a href="#1、DataFrame对象的创建" class="headerlink" title="1、DataFrame对象的创建"></a>1、DataFrame对象的创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.DataFrame( data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>输入的数据，可以是 ndarray，series，list，dict，标量以及一个 DataFrame。</td></tr><tr><td>index</td><td>行标签，如果没有传递 index 值，则默认行标签是 np.arange(n)，n 代表 data 的元素个数。</td></tr><tr><td>columns</td><td>列标签，如果没有传递 columns 值，则默认列标签是 np.arange(n)。</td></tr><tr><td>dtype</td><td>dtype表示每一列的数据类型。</td></tr><tr><td>copy</td><td>默认为 False，表示复制数据 data。</td></tr></tbody></table><p>Pandas 提供了多种创建 DataFrame 对象的方式可以看data的参数说明，包括列表、ndarray、series、dict等。<br>平时在数据分析过程中用得最多的应该是从其他数据源文件如cvs、excel、数据库、WEBAPI等方式加载数据到DataFrame中。<br>如：从Excel中加载数据。更多的数据加载方式见：<a href="http://xiejava.ishareread.com/posts/4864590d/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/4864590d/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\staff.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/21aad8114af64eb8b845861d9567a6ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="staff数据集"></p><h2 id="2、DataFrame数据操作"><a href="#2、DataFrame数据操作" class="headerlink" title="2、DataFrame数据操作"></a>2、DataFrame数据操作</h2><p>DataFrame 可以使用行索引(index )来选取 DataFrame 中的数据并进行操作。也可以使用列索（columns ）引来完成数据的选取、添加和删除操作。</p><h3 id="1-行索引操作DataFrame"><a href="#1-行索引操作DataFrame" class="headerlink" title="1) 行索引操作DataFrame"></a>1) 行索引操作DataFrame</h3><h4 id="选取数据"><a href="#选取数据" class="headerlink" title="选取数据"></a>选取数据</h4><p>行标签选取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选取行标签为2的行</span></span><br><span class="line">df.loc[[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8611f4d65f5e4c54ba9e0bc364b025cd.png#pic_center" alt="选取行标签为2的行"><br>注意：如果是df.loc[2]，同样是选择行标签为2的行，但现实效果为<br><img src="https://img-blog.csdnimg.cn/32903861c623425a926448af4b661aca.png#pic_center" alt="选取行标签为2的行"><br>因为df.loc[2]返回是Series对象，而df.loc[[2]]返回的是DataFrame对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type(df.iloc[<span class="number">2</span>])</span><br><span class="line">pandas.core.series.Series</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type(df.loc[[<span class="number">2</span>]])</span><br><span class="line">pandas.core.frame.DataFrame</span><br></pre></td></tr></table></figure><p>切片选取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切片选取数据（左闭右开）</span></span><br><span class="line">df[<span class="number">2</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c913ea3b04ed47d99bcc056e155e7580.png#pic_center" alt="切片选取数据"></p><h4 id="增加行"><a href="#增加行" class="headerlink" title="增加行"></a>增加行</h4><p> 添加数据行，使用 append() 函数，可以将新的数据行添加到 DataFrame 中，该函数会在行末追加数据行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_1 = pd.DataFrame([[<span class="number">11</span>,<span class="string">'肖十一'</span>,<span class="string">'30'</span>,<span class="string">'女'</span>,<span class="string">'7000'</span>,<span class="string">'1'</span>],[<span class="number">12</span>,<span class="string">'郭芙蓉'</span>,<span class="string">'30'</span>,<span class="string">'女'</span>,<span class="string">'7400'</span>,<span class="string">'1'</span>]],index=[<span class="number">11</span>,<span class="number">12</span>],columns = [<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_age'</span>,<span class="string">'staff_gender'</span>,<span class="string">'staff_salary'</span>,<span class="string">'staff_depatment_id'</span>])</span><br><span class="line">df=df.append(df_1)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a54e2f6025bc4b4f9edfa5000b30c5a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt=" 添加数据行"></p><p>注意新增加的DataFrame如果没有指定行索引，将会默认从0开始，添加数据行后将会有行重复的行索引。如没有指定index=[11,12]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_1 = pd.DataFrame([[<span class="number">11</span>,<span class="string">'肖十一'</span>,<span class="string">'30'</span>,<span class="string">'女'</span>,<span class="string">'7000'</span>,<span class="string">'1'</span>],[<span class="number">12</span>,<span class="string">'郭芙蓉'</span>,<span class="string">'30'</span>,<span class="string">'女'</span>,<span class="string">'7400'</span>,<span class="string">'1'</span>]],columns = [<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_age'</span>,<span class="string">'staff_gender'</span>,<span class="string">'staff_salary'</span>,<span class="string">'staff_depatment_id'</span>])</span><br><span class="line">df=df.append(df_1)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a9e83a1037144f4c8631dfeca1507b70.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="添加数据行有重复行索引"></p><h4 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h4><p>可以使用行索引标签，从 DataFrame 中删除某一行数据。如果索引标签存在重复，那么它们将被一起删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=df.drop(<span class="number">0</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>可以看到到行索引为0的两条记录被一起删除了。<br><img src="https://img-blog.csdnimg.cn/a6d8cb6d9e904199ac88f01adcab63ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="删除"></p><h3 id="2-列索引操作DataFrame"><a href="#2-列索引操作DataFrame" class="headerlink" title="2) 列索引操作DataFrame"></a>2) 列索引操作DataFrame</h3><h4 id="列索引选取数据列"><a href="#列索引选取数据列" class="headerlink" title="列索引选取数据列"></a>列索引选取数据列</h4><p>通过指定列索引来选取数据列，如选择只显示staff_id,staff_name,staff_gender三列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2=df[[<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_gender'</span>]]</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/13a54eedc4d04347bfbe055c9171842a.png#pic_center" alt="列索引选取数据列"></p><h4 id="列索引添加数据列"><a href="#列索引添加数据列" class="headerlink" title="列索引添加数据列"></a>列索引添加数据列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df3=df[<span class="string">'staff_salary'</span>]+<span class="number">500</span></span><br><span class="line"><span class="comment">#在df的基础上增加append_cloume列，新增的append_cloume列为df['staff_salary']+500，即薪水加了500的列</span></span><br><span class="line">df[<span class="string">'append_cloume'</span>]=df3</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2f978dd2838f4bd0b0e7f7dff654ec46.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="列索引添加数据列"></p><h4 id="列索引删除数据列"><a href="#列索引删除数据列" class="headerlink" title="列索引删除数据列"></a>列索引删除数据列</h4><p>通过del 来删除指定的数据列，如删除staff_depatment_id列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df[<span class="string">'staff_depatment_id'</span>]</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b8de684aa6f8410b83b182ddfc29f294.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="列索引删除数据列"></p><p>本文介绍了pandas的两大核心数据结构Series和DataFrame，分别介绍了Series和DataFrame数据对象的创建及基于数据对象的基础上对数据进行选择、增加、删除等数据操作，可以加深对Series和DataFrame的理解，并可以将创建，增、删、改、查等应用于实际的数据处理应用中。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;无可非议，pandas是Python最强大的数据分析和探索工具之一，因金融数据分析工具而开发，支持类似于SQL语句的模型，可以对数据进行增删
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pandas数据加载(csv、excel、json、mysql、webAPI)</title>
    <link href="https://xiejava.gitee.io/posts/4864590d/"/>
    <id>https://xiejava.gitee.io/posts/4864590d/</id>
    <published>2022-01-22T09:35:55.000Z</published>
    <updated>2022-02-02T01:58:09.925Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/f5fc706f84454eb49d5457d751025441.png#pic_center" alt="pandas"><br>pandas 是基于NumPy 的一种工具，该工具是为解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。Pandas的名称来自于面板数据（panel data）和python数据分析（data analysis）。pandas提供了大量能使我们快速便捷地处理数据的函数和方法。它是使Python成为强大而高效的数据分析环境的重要因素之一。</p><p>数据的输入是数据分析的第一步，如果不能将数据快速方便的导入导出python，那么pandas不可能成为强大而高效的数据分析环境，本文重点介绍pandas的数据输入加载。pandas的数据输入可以划分为几个大类：读取文本文件和其他更高效的磁盘存储格式，加载数据库中的数据，利用Web API获取网络资源。<br><img src="https://img-blog.csdnimg.cn/27deba5956b842dda6f845149b98d426.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pandas数据处理"><br>pandas的IO工具支持非常多的数据输入输出方式。包括csv、json、Excel、数据库等。</p><table><thead><tr><th>Format Type</th><th>Data Description</th><th>Reader</th><th>Writer</th></tr></thead><tbody><tr><td>text</td><td>CSV</td><td>read_csv</td><td>to_csv</td></tr><tr><td>text</td><td>JSON</td><td>read_json</td><td>to_json</td></tr><tr><td>text</td><td>HTML</td><td>read_html</td><td>to_html</td></tr><tr><td>text</td><td>Local clipboard</td><td>read_clipboard</td><td>to_clipboard</td></tr><tr><td>binary</td><td>MS Excel</td><td>read_excel</td><td>to_excel</td></tr><tr><td>binary</td><td>OpenDocument</td><td>read_excel</td><td></td></tr><tr><td>binary</td><td>HDF5 Format</td><td>read_hdf</td><td>to_hdf</td></tr><tr><td>binary</td><td>Feather Format</td><td>read_feather</td><td>to_feather</td></tr><tr><td>binary</td><td>Parquet Format</td><td>read_parquet</td><td>to_parquet</td></tr><tr><td>binary</td><td>Msgpack</td><td>read_msgpack</td><td>to_msgpack</td></tr><tr><td>binary</td><td>Stata</td><td>read_stata</td><td>to_stata</td></tr><tr><td>binary</td><td>SAS</td><td>read_sas</td><td></td></tr><tr><td>binary</td><td>Python Pickle Format</td><td>read_pickle</td><td>to_pickle</td></tr><tr><td>SQL</td><td>SQL</td><td>read_sql</td><td>to_sql</td></tr><tr><td>SQL</td><td>Google Big Query</td><td>read_gbq</td><td>to_gbq</td></tr></tbody></table><p>本文通过几个实例，介绍几种常用的数据加载方式，包括从csv文件、excel文件、关系型数据库如mysql、API接口加载json数据，来初步体验一下pandas加载数据的便捷性。</p><p>见上表pandas 提供了多种数据源读取数据的方法：<br>read_csv() 用于读取文本文件<br>read_json() 用于读取 json 文件<br>read_sql_query() 读取 sql 语句查询的表记录</p><h1 id="一、读取CSV文件"><a href="#一、读取CSV文件" class="headerlink" title="一、读取CSV文件"></a>一、读取CSV文件</h1><p>CSV 又称逗号分隔值文件，是一种简单的文件格式，以特定的结构来排列表格数据。 CSV 文件能够以纯文本形式存储表格数据，比如电子表格、数据库文件，并具有数据交换的通用格式。CSV 文件会在 Excel 文件中被打开，其行和列都定义了标准的数据格式。<br>将 CSV 中的数据转换为 DataFrame 对象是非常便捷的。和一般文件读写不一样，它不需要你做打开文件、读取文件、关闭文件等操作。相反，只需要一行代码就可以完成上述所有步骤，并将数据存储在 DataFrame 中。<br>pandas通过read_csv()从 CSV 文件中读取数据，并创建 DataFrame 对象。<br>下面通过一个实例来说明。一个用于测试的员工数据集csv的数据如下，文件为staff.csv。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"staff_id"</span>,<span class="string">"staff_name"</span>,<span class="string">"staff_age"</span>,<span class="string">"staff_gender"</span>,<span class="string">"staff_salary"</span>,<span class="string">"staff_depatment_id"</span></span><br><span class="line"><span class="string">"1"</span>,<span class="string">"陈一"</span>,<span class="string">"30"</span>,<span class="string">"男"</span>,<span class="string">"7000"</span>,<span class="string">"1"</span></span><br><span class="line"><span class="string">"2"</span>,<span class="string">"周二"</span>,<span class="string">"31"</span>,<span class="string">"男"</span>,<span class="string">"12000"</span>,<span class="string">"2"</span></span><br><span class="line"><span class="string">"3"</span>,<span class="string">"张三"</span>,<span class="string">"30"</span>,<span class="string">"女"</span>,<span class="string">"13000"</span>,<span class="string">"3"</span></span><br><span class="line"><span class="string">"4"</span>,<span class="string">"李四"</span>,<span class="string">"29"</span>,<span class="string">"女"</span>,<span class="string">"15000"</span>,<span class="string">"1"</span></span><br><span class="line"><span class="string">"5"</span>,<span class="string">"王五"</span>,<span class="string">"29"</span>,<span class="string">"男"</span>,<span class="string">"9000"</span>,<span class="string">"2"</span></span><br><span class="line"><span class="string">"6"</span>,<span class="string">"赵六"</span>,<span class="string">"35"</span>,<span class="string">"男"</span>,<span class="string">"8600"</span>,<span class="string">"1"</span></span><br><span class="line"><span class="string">"7"</span>,<span class="string">"钱七"</span>,<span class="string">"36"</span>,<span class="string">"女"</span>,<span class="string">"9700"</span>,<span class="string">"3"</span></span><br><span class="line"><span class="string">"8"</span>,<span class="string">"孙八"</span>,<span class="string">"40"</span>,<span class="string">"女"</span>,<span class="string">"10000"</span>,<span class="string">"3"</span></span><br><span class="line"><span class="string">"9"</span>,<span class="string">"何九"</span>,<span class="string">"40"</span>,<span class="string">"男"</span>,<span class="string">"11000"</span>,<span class="string">"1"</span></span><br><span class="line"><span class="string">"10"</span>,<span class="string">"顾十"</span>,<span class="string">"37"</span>,<span class="string">"女"</span>,<span class="string">"15000"</span>,<span class="string">"2"</span></span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">'C:\\Users\\xiejava\\Desktop\\staff.csv'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/edaf91317adb42a7b479ebec9aa56bb7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="通过csv加载"></p><h1 id="二、读取EXCEL文件"><a href="#二、读取EXCEL文件" class="headerlink" title="二、读取EXCEL文件"></a>二、读取EXCEL文件</h1><p>Excel 是由微软公司开发的办公软件之一，它在日常工作中得到了广泛的应用。在数据量较少的情况下，Excel 对于数据的处理、分析、可视化有其独特的优势，因此可以显著提升您的工作效率。但是，当数据量非常大时，Excel 的劣势就暴露出来了，比如，操作重复、数据分析难等问题。Pandas 提供了操作 Excel 文件的函数，可以很方便地处理 Excel 表格。<br>pandas提供了 read_excel() 方法，从 Excel文件中读取数据，并创建 DataFrame 对象。<br>staff数据集excel文件staff.xlsx如下图：<br><img src="https://img-blog.csdnimg.cn/96c125c34da24204ae9799f5c444c574.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="staff.xlsx"><br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'C:\\Users\\xiejava\\Desktop\\staff.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/b46a651c81a74b119ad25e297d9c0d95.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="通过Excel加载数据"></p><h1 id="三、读取MySQL数据库表"><a href="#三、读取MySQL数据库表" class="headerlink" title="三、读取MySQL数据库表"></a>三、读取MySQL数据库表</h1><p>在许多应用中，数据很少取自文本文件，因为这种方式存储数据量有限且比较低效。最常见的是基于SQL的关系型数据库如MySQL、MS-SQL、PostgreSQL等。pandas将关系型数据库加载到DataFrame的过程很简单，通过read_sql_query()方法就可以快速的将数据加载。<br>同样是staff的数据集，在mysql中的表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`staff`</span> (</span><br><span class="line">  <span class="string">`staff_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`staff_name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`staff_age`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  <span class="string">`staff_gender`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`staff_salary`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'薪水'</span>,</span><br><span class="line">  <span class="string">`staff_depatment_id`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'部门ID'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>数据如下：<br><img src="https://img-blog.csdnimg.cn/ed23c05b550d4f0da81e2d7d84455447.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="staff数据集MySQL记录"><br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:yourpassword@localhost:3306/pandastest'</span>)</span><br><span class="line">sql_query_staff = <span class="string">'select * from staff;'</span></span><br><span class="line">df_staff = pd.read_sql_query(sql_query_staff, engine)</span><br><span class="line">df_staff</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/ecdf46a8e02f4a70a490d9cdf89ce6f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="加载mysql数据"></p><h1 id="四、读取Web-API的数据"><a href="#四、读取Web-API的数据" class="headerlink" title="四、读取Web API的数据"></a>四、读取Web API的数据</h1><p>除了本地文件和数据库外，许多网站和web应用都有一些通过JSON或其他格式提供数据的公共API。可以通过Python的requests包来访问这些API获得相应的数据，经过解析处理后加载到pandas的DataFrame中。<br>为了演示方便，本文通过Flask做了一个staff数据集的API，效果如下：<br><img src="https://img-blog.csdnimg.cn/2c962a4235794e95b2545605e44f7192.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="staff数据集API"><br>通过requests包来访问API，通过json包来解析json，然后加载到pandas的DataFrame中。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">url=<span class="string">'http://127.0.0.1:5000/getstaff'</span></span><br><span class="line">resp=requests.get(url)</span><br><span class="line">data=json.loads(resp.text)</span><br><span class="line">staff=pd.DataFrame(data)</span><br><span class="line">staff</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/6ff9136048d7484e961e822826fb805f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="加载WEBAPI数据"></p><p>至此，通过staff测试数据集介绍了pandas的常用多种类型数据源的加载，包括csv、excel、mysql、web API。可以看出pandas对于数据加载非常的方便高效。</p><p>全部数据集及源代码：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/f5fc706f84454eb49d5457d751025441.png#pic_center&quot; alt=&quot;pandas&quot;&gt;&lt;br&gt;pandas 是基于NumPy 的一种工具，该工具是为解决数据分析
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python实现读取Word表格计算汇总写入Excel</title>
    <link href="https://xiejava.gitee.io/posts/14434407/"/>
    <id>https://xiejava.gitee.io/posts/14434407/</id>
    <published>2022-01-20T13:09:47.000Z</published>
    <updated>2022-01-20T13:25:03.412Z</updated>
    
    <content type="html"><![CDATA[<p>快过年了，又到了公司年底评级的时候了。今年的评级和往常一下，每个人都要填写公司的民主评议表，给各个同事进行评价打分，然后部门收集起来根据收集上来的评价表进行汇总统计。想想要收集几十号人的评价表，并根据每个人的评价表又要填到Excel中进行汇总计算统计给出每个人的评价，就头大。虽然不是个什么难事，但是是个无脑的细致活。几十个人的评价也得要花大半天的时间来弄，而且搞多了还容易搞错。如是就想起干脆用Python写个小程序自动来处理这些脏活累活，评级年年都要评，每年都可以用。</p><p>要做的事情就是读放到某个文件夹中的word文档中的评价表格，根据表格内容进行处理，然后汇总所有的表格数据，根据计算规则，算出每个人的评分，在根据评分计算每个人的评价。汇总后写入Excel中。<br><img src="https://img-blog.csdnimg.cn/50851a68db00434c84007249f4e5781e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="处理Word解析、汇总、统计写入Excel"></p><p>不可否认用Python来实现这样的事情真的是太方便了，人生苦短我用Python。<br>我是用的python的docx包来处理word，用pandas来处理数据并写入excel</p><h1 id="一、首先导入包"><a href="#一、首先导入包" class="headerlink" title="一、首先导入包"></a>一、首先导入包</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install docx</span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>pandas写excel依赖openpyxl包所以也到导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><h1 id="二、读评价表所在的目录文件"><a href="#二、读评价表所在的目录文件" class="headerlink" title="二、读评价表所在的目录文件"></a>二、读评价表所在的目录文件</h1><p>通过python的os包，列出文件夹里面的文件，识别出.docx的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">files=os.listdir(filepah)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> file.find(<span class="string">'.docx'</span>)&gt;<span class="number">0</span>:</span><br><span class="line">        docfilepah=filepah+file</span><br></pre></td></tr></table></figure><h1 id="三、读word文件，处理word中的表格数据"><a href="#三、读word文件，处理word中的表格数据" class="headerlink" title="三、读word文件，处理word中的表格数据"></a>三、读word文件，处理word中的表格数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">data=[]</span><br><span class="line"><span class="comment">#读word的docx评议表文件，并读取word中的表格数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procdoc</span><span class="params">(docfilepath)</span>:</span></span><br><span class="line">    document=Document(docfilepath)</span><br><span class="line">    tables=document.tables</span><br><span class="line">    table=tables[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(table.rows)):</span><br><span class="line">        id=int(table.cell(i,<span class="number">0</span>).text)</span><br><span class="line">        name=table.cell(i,<span class="number">1</span>).text</span><br><span class="line">        excellent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i,<span class="number">2</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i,<span class="number">2</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            excellent=<span class="number">1</span></span><br><span class="line">        competent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">3</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">3</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            competent=<span class="number">1</span></span><br><span class="line">        basicacompetent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">4</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">4</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            basicacompetent=<span class="number">1</span></span><br><span class="line">        notcompetent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">5</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">5</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            notcompetent=<span class="number">1</span></span><br><span class="line">        dontunderstand =<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">6</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">6</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            dontunderstand=<span class="number">1</span></span><br><span class="line">        appraisedata=[id,name,excellent,competent,basicacompetent,notcompetent,dontunderstand]</span><br><span class="line">        data.append(appraisedata)</span><br></pre></td></tr></table></figure><h1 id="四、统计计算"><a href="#四、统计计算" class="headerlink" title="四、统计计算"></a>四、统计计算</h1><p>通过pandas直接对数据进行统计计算，避免了传统的循环计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data,columns=[<span class="string">'序号'</span>,<span class="string">'姓名'</span>,<span class="string">'优秀'</span>,<span class="string">'称职'</span>,<span class="string">'基本称职'</span>,<span class="string">'不称职'</span>,<span class="string">'不了解'</span>])</span><br><span class="line">df=df.groupby([<span class="string">'序号'</span>,<span class="string">'姓名'</span>]).sum() <span class="comment">#汇总每个人每一项的评分</span></span><br><span class="line">df[<span class="string">'票数'</span>] = df.apply(<span class="keyword">lambda</span> x: x.sum(), axis=<span class="number">1</span>) <span class="comment">#统计票数</span></span><br><span class="line">df[<span class="string">'计分'</span>] = (df[<span class="string">'优秀'</span>]*<span class="number">95</span>+df[<span class="string">'称职'</span>]*<span class="number">85</span>+df[<span class="string">'基本称职'</span>]*<span class="number">75</span>+df[<span class="string">'不称职'</span>]*<span class="number">65</span>+df[<span class="string">'不了解'</span>]*<span class="number">0</span>)/len(df)<span class="comment">#根据规则计分</span></span><br><span class="line">df[<span class="string">'评价'</span>]=df[<span class="string">'计分'</span>].map(getscore) <span class="comment">#根据规则评价评级</span></span><br></pre></td></tr></table></figure><p>计分方法：民主评议得分=Σ各等级票数*等级计分分数/总票数，其中“优秀”计95分，“称职”计85分，“基本称职”计75分，“不称职”计65分，“不了解”不计分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据评分规则计算评级</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getscore</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'优秀'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">80</span> <span class="keyword">and</span> x&lt;<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">75</span> <span class="keyword">and</span> x&lt;<span class="number">80</span>:</span><br><span class="line">        score=<span class="string">'基本称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&lt;<span class="number">75</span>:</span><br><span class="line">        score=<span class="string">'不称职'</span></span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><h1 id="五、将统计计算结果写入汇总Excel"><a href="#五、将统计计算结果写入汇总Excel" class="headerlink" title="五、将统计计算结果写入汇总Excel"></a>五、将统计计算结果写入汇总Excel</h1><p>通过pandas直接可以将dataframe写入到Excel文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将汇总计算好的数据写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write2excle</span><span class="params">(exclefile,dataframe)</span>:</span></span><br><span class="line">    writer = pd.ExcelWriter(exclefile)</span><br><span class="line">    dataframe.to_excel(writer)</span><br><span class="line">    writer.save()</span><br><span class="line">    print(<span class="string">'输出成功'</span>)</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><strong>Python不到八十行代码，实现读Word-&gt;处理表格数据-&gt;汇总计算数据-&gt;写Excel。</strong><br>完整的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"></span><br><span class="line">data=[]</span><br><span class="line"><span class="comment">#读word的docx评议表文件，并读取word中的表格数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procdoc</span><span class="params">(docfilepath)</span>:</span></span><br><span class="line">    document=Document(docfilepath)</span><br><span class="line">    tables=document.tables</span><br><span class="line">    table=tables[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(table.rows)):</span><br><span class="line">        id=int(table.cell(i,<span class="number">0</span>).text)</span><br><span class="line">        name=table.cell(i,<span class="number">1</span>).text</span><br><span class="line">        excellent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i,<span class="number">2</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i,<span class="number">2</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            excellent=<span class="number">1</span></span><br><span class="line">        competent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">3</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">3</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            competent=<span class="number">1</span></span><br><span class="line">        basicacompetent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">4</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">4</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            basicacompetent=<span class="number">1</span></span><br><span class="line">        notcompetent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">5</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">5</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            notcompetent=<span class="number">1</span></span><br><span class="line">        dontunderstand =<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">6</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">6</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            dontunderstand=<span class="number">1</span></span><br><span class="line">        appraisedata=[id,name,excellent,competent,basicacompetent,notcompetent,dontunderstand]</span><br><span class="line">        data.append(appraisedata)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取评议表的目录，并处理目录中的docx文件，根据评议表计算评分，写入汇总表。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filepah)</span>:</span></span><br><span class="line">    files=os.listdir(filepah)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.find(<span class="string">'.docx'</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            docfilepah=filepah+file</span><br><span class="line">            procdoc(docfilepah)</span><br><span class="line">    df = pd.DataFrame(data,columns=[<span class="string">'序号'</span>,<span class="string">'姓名'</span>,<span class="string">'优秀'</span>,<span class="string">'称职'</span>,<span class="string">'基本称职'</span>,<span class="string">'不称职'</span>,<span class="string">'不了解'</span>])</span><br><span class="line">    print(df)</span><br><span class="line">    df=df.groupby([<span class="string">'序号'</span>,<span class="string">'姓名'</span>]).sum()</span><br><span class="line">    df[<span class="string">'票数'</span>] = df.apply(<span class="keyword">lambda</span> x: x.sum(), axis=<span class="number">1</span>)</span><br><span class="line">    df[<span class="string">'计分'</span>] = (df[<span class="string">'优秀'</span>]*<span class="number">95</span>+df[<span class="string">'称职'</span>]*<span class="number">85</span>+df[<span class="string">'基本称职'</span>]*<span class="number">75</span>+df[<span class="string">'不称职'</span>]*<span class="number">65</span>+df[<span class="string">'不了解'</span>]*<span class="number">0</span>)/len(df)</span><br><span class="line">    df[<span class="string">'评价'</span>]=df[<span class="string">'计分'</span>].map(getscore)</span><br><span class="line">    print(df)</span><br><span class="line">    write2excle(<span class="string">'民主评议\\民主评议表汇总.xlsx'</span>,df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据评分规则计算评级</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getscore</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'优秀'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">80</span> <span class="keyword">and</span> x&lt;<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">75</span> <span class="keyword">and</span> x&lt;<span class="number">80</span>:</span><br><span class="line">        score=<span class="string">'基本称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&lt;<span class="number">75</span>:</span><br><span class="line">        score=<span class="string">'不称职'</span></span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"><span class="comment">#将汇总计算好的数据写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write2excle</span><span class="params">(exclefile,dataframe)</span>:</span></span><br><span class="line">    writer = pd.ExcelWriter(exclefile)</span><br><span class="line">    dataframe.to_excel(writer)</span><br><span class="line">    writer.save()</span><br><span class="line">    print(<span class="string">'输出成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    readfile(<span class="string">'民主评议\\'</span>)</span><br></pre></td></tr></table></figure><p>全部源代码：<a href="https://github.com/xiejava1018/pythonprocword" target="_blank" rel="noopener">https://github.com/xiejava1018/pythonprocword</a></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;快过年了，又到了公司年底评级的时候了。今年的评级和往常一下，每个人都要填写公司的民主评议表，给各个同事进行评价打分，然后部门收集起来根据收集上来的评价表进行汇总统计。想想要收集几十号人的评价表，并根据每个人的评价表又要填到Excel中进行汇总计算统计给出每个人的评价，就头大
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之恶意代码</title>
    <link href="https://xiejava.gitee.io/posts/72d6b06f/"/>
    <id>https://xiejava.gitee.io/posts/72d6b06f/</id>
    <published>2022-01-17T14:31:41.000Z</published>
    <updated>2022-01-17T15:36:30.426Z</updated>
    
    <content type="html"><![CDATA[<p>恶意代码是一种有害的计算机代码或 web 脚本，其设计目的是创建系统漏洞，并借以造成后门、安全隐患、信息和数据盗窃、以及其他对文件和计算机系统的潜在破坏。恶意代码不仅使企业和用户蒙受了巨大的经济损失，而且使国家的安全面临着严重威胁。1991年的海湾战争是美国第一次公开在实战中使用恶意代码攻击技术取得重大军事利益，从此恶意代码攻击成为信息战、网络战最重要的入侵手段之一。恶意代码问题无论从政治上、经济上、还是军事上，都成为信息安全面临的首要问题。让我们一起来认识一下恶意代码。</p><h1 id="一、什么是恶意代码"><a href="#一、什么是恶意代码" class="headerlink" title="一、什么是恶意代码"></a>一、什么是恶意代码</h1><p>恶意代码（Unwanted Code）是指故意编制或设置的、对网络或系统会产生威胁或潜在威胁的计算机代码。最常见的恶意代码有计算机病毒（简称病毒）、特洛伊木马（简称木马）、计算机蠕虫（简称蠕虫）、后门、逻辑炸弹等。</p><h1 id="二、恶意代码的分类"><a href="#二、恶意代码的分类" class="headerlink" title="二、恶意代码的分类"></a>二、恶意代码的分类</h1><h2 id="1、恶意代码分类"><a href="#1、恶意代码分类" class="headerlink" title="1、恶意代码分类"></a>1、恶意代码分类</h2><p>恶意代码的分类标准主要是代码的<strong>独立性</strong>和<strong>自我复制性</strong>，独立的恶意代码是指具备一个完整程序所应该具有的全部功能功能，能够独立传播、运行的恶意代码，这样的恶意代码不需要寄宿在另一个程序中。非独立恶意代码只是一段代码，必须嵌入某个完整的程序中，作为该程序的一个组成部分进行传播和运行。对于非独立恶意代码，自我复制过程就是将自身嵌入宿主程序的过程，这个过程也称为感染宿主程序的过程。对于独立恶意代码，自我复制过程就是将自身传播给其他系统的过程。不具有自我复制能力的恶意代码必须借助其他媒介进行传播。</p><p>分类：</p><table><thead><tr><th>类别</th><th>实例</th></tr></thead><tbody><tr><td>具有自我复制能力的依附性恶意代码</td><td>主要代表是病毒</td></tr><tr><td>具有自我复制能力的独立性恶意代码</td><td>主要代表是蠕虫</td></tr><tr><td>不具有自我复制能力的依附性恶意代码</td><td>主要代表是后门</td></tr><tr><td>不具有自我复制能力的独立性恶意代码</td><td>主要代表是木马</td></tr></tbody></table><h2 id="2、不同恶意代码的区别"><a href="#2、不同恶意代码的区别" class="headerlink" title="2、不同恶意代码的区别"></a>2、不同恶意代码的区别</h2><p>病毒侧重于破坏系统和程序的能力</p><p>木马侧重于窃取敏感信息的能力</p><p>蠕虫侧重于网络中的自我复制能力和自我传染能力</p><table><thead><tr><th></th><th>病毒</th><th>木马</th><th>蠕虫</th></tr></thead><tbody><tr><td><strong>存在形式</strong></td><td>寄生</td><td>独立文件</td><td>独立文件</td></tr><tr><td><strong>传染途径</strong></td><td>通过宿主程序运行</td><td>植入目标主机</td><td>系统漏洞</td></tr><tr><td><strong>传染速度</strong></td><td>慢</td><td>最慢</td><td>快</td></tr><tr><td><strong>攻击目标</strong></td><td>本地文件</td><td>文件、网络主机</td><td>存在漏洞的网络程序</td></tr><tr><td><strong>触发机制</strong></td><td>攻击者指定条件</td><td>自启动</td><td>自动攻击有漏洞的程序</td></tr><tr><td><strong>防范方法</strong></td><td>从宿主文件中清除</td><td>清除启动项和木马服务程序</td><td>更新安全补丁</td></tr><tr><td><strong>对抗主体</strong></td><td>用户，反病毒软件</td><td>用户、管理员、反病毒软件</td><td>应用程序供应商、用户和管理员</td></tr></tbody></table><h1 id="三、恶意代码基本技术"><a href="#三、恶意代码基本技术" class="headerlink" title="三、恶意代码基本技术"></a>三、恶意代码基本技术</h1><h2 id="1、隐蔽技术"><a href="#1、隐蔽技术" class="headerlink" title="1、隐蔽技术"></a>1、隐蔽技术</h2><h3 id="（1）本地隐藏"><a href="#（1）本地隐藏" class="headerlink" title="（1）本地隐藏"></a>（1）本地隐藏</h3><p> 防止本地系统管理人员觉察而采取的隐蔽手段。</p><ul><li><strong>文件隐蔽</strong>：将恶意代码的文件命名为与系统的合法程序文件名相似的名称，或者干脆取而代之，或者将恶意代码文件附加到合法程序文件中。</li><li><strong>进程隐蔽</strong>：附着或替换系统进程，使恶意代码以合法服务的身份运行，从而隐蔽恶意代码。还可以通过修改进程列表程序，修改命令行参数使恶意代码进程的信息无法查询。也可以借助RootKit 技术实现进程隐蔽。</li><li><strong>网络连接隐蔽</strong>：借用现有服务的端口实现网络连接隐蔽，如使用80端口，攻击者在自己的数据包设置特殊标识，通过标识识别连接信息，未标识的WWW 服务网络包仍转交给原服务程序处理。</li><li><strong>编译器隐蔽</strong>：由编译器在对程序代码进行编译时植入恶意代码，从而实现恶意代码在用户程序中的隐藏和原始分发攻击。恶意代码的植入者是编译器开发人员。</li><li><strong>RootKit隐蔽</strong>：利用适当的Rootkit工具，可以很好的隐蔽自身或指定的文件、进程和网络连接等，很难被管理员发现。<h3 id="（2）网络隐藏"><a href="#（2）网络隐藏" class="headerlink" title="（2）网络隐藏"></a>（2）网络隐藏</h3>网络隐藏主要是指通信内容和传输通道的隐藏。</li><li><strong>通信内容隐蔽</strong>：使用加密算法对所传输的内容进行加密能够隐蔽通信内容。</li><li><strong>传输通道隐藏</strong>：利用隐蔽通道技术，实现对传输通道的隐蔽。（隐蔽通道（Covert Channel）是一个不受安全机制控制的、利用共享资源作为通信通路的信息流。包括有：存储隐蔽通道和时间隐蔽通道。）</li></ul><h2 id="2、生存技术"><a href="#2、生存技术" class="headerlink" title="2、生存技术"></a>2、生存技术</h2><p>恶意代码的生存技术主要包括四种类型：</p><ul><li><strong>反跟踪技术</strong>：通过提高恶意代码分析难度，减少被发现的可能性</li><li><strong>加密技术</strong>：利用加密技术，提高恶意代码自身保护能力<br>模糊变换技术：利用模糊变换技术，恶意代码可以躲避基于特征码的恶意代码检测系统，提高生存能力</li><li><strong>自动生产技术</strong>：利用自动生成技术，在已有的恶意代码的基础上自动生成特征码不断变化的新的恶意代码，从而躲避基于特征码的恶意代码检测。</li></ul><h2 id="3、攻击技术"><a href="#3、攻击技术" class="headerlink" title="3、攻击技术"></a>3、攻击技术</h2><ul><li><strong>进程注入技术</strong>：恶意代码程序将自身嵌入到操作系统和网络系统的服务程序中，不但实现了自身的隐藏，而且还能随着服务的加载而启动。</li><li><strong>三线程技术</strong>：恶意代码进程同时开启三个线程，其中一个为主线程，负责远程控制的工作。另外两个辅助线程分别是监视和守护线程。一旦发现主线程被删除，则立即设法恢复。</li><li><strong>端口复用技术</strong>：重复利用系统或网络服务打开的端口（如80端口），可以欺骗防火墙，具有很强的欺骗性。</li><li><strong>超级管理技术</strong>：恶意代码采用超级管理技术对反恶意代码软件系统进行攻击，使其无法正常运行。</li><li><strong>端口反向连接技术</strong>：指使恶意代码的服务端（被控制端）主动连接客户端（控制端）的技术。</li><li><strong>缓冲区溢出技术</strong>：恶意代码利用系统和网络服务的安全漏洞植入并且执行攻击代码，造成缓冲区溢出，从而获得被攻击主机的控制权。</li></ul><h1 id="三、恶意代码传播方式及防范手段"><a href="#三、恶意代码传播方式及防范手段" class="headerlink" title="三、恶意代码传播方式及防范手段"></a>三、恶意代码传播方式及防范手段</h1><h2 id="1、传播方式"><a href="#1、传播方式" class="headerlink" title="1、传播方式"></a>1、传播方式</h2><p>传播途径</p><ul><li><strong>利用操作系统和应用软件的漏洞进行传播</strong></li><li><strong>通过网站传播</strong><br>在网页上挂载恶意代码<br>如：主机流览该网页时，恶意代码会自动下载到主机执行。<br>将恶意代码与正常应用软件捆绑<br>如：主机下载正常软件运行时，恶意代码也随之自动运行。</li><li><strong>利用移动媒介传播</strong><br>如：主机访问U盘和硬盘时，恶意代码可以自动执行。</li><li><strong>利用用户之间的信任关系传播</strong><br>如：冒充用户发送虚假链接、图片、邮件等。</li></ul><p>总的来说，恶意代码的传播是因为用户的软件出现了漏洞、操作不慎或者是两者的结合造成。</p><p>（1）病毒。病毒具备有自我复制能力，一般嵌入主机的程序中。当被感染文件执行操作，如，用户打开一个可执行文件时，病毒就会自我繁殖。病毒一般都具有破坏性。<br>（2）木马。这种程序从表面上看没有危害，但实际上却隐含着恶意的意图和破坏的作用。一些木马程序会通过覆盖系统中已经存在的文件的方式存在于系统之中；另外有的还会以软件的形式出现，因为它一般是以一个正常的应用程序身份在系统中运行的，所以这种程序通常不容易被发现。<br>（3）蠕虫。蠕虫是一种可以自我复制的完全独立的程序，它的传播不需要借助被感染主机中的程序和用户的操作，而是通过系统存在的漏洞和设置的不安全性来进行入侵，如通过共享的设置来侵入。蠕虫可以自动创建与它的功能完全相同的副本，并能在无人干涉的情况下自动运行，大量地复制占用计算机的空间，使计算机的运行缓慢甚至瘫痪。</p><h2 id="2、攻击机制"><a href="#2、攻击机制" class="headerlink" title="2、攻击机制"></a>2、攻击机制</h2><p>恶意代码的行为表现各异，破坏程度千差万别，但基本作用机制大体相同，其整个作用过程分为6个部分。<br><strong>（1）侵入系统</strong>。侵入系统是而已代码实现其恶意目的的必要条件。恶意代码入侵的途径很多，包括前面传播方式的各种途径。如：从互联网下载的程序本身就可能含有而已代码；接收已感染恶意代码的电子邮件；从光盘或U盘往系统上安装软件；黑客或者攻击者故意将恶意代码植入系统等。<br><strong>（2）维持或提升权限</strong>。恶意代码的传播与破坏必须盗用用户或者进程的合法权限才能完成。<br><strong>（3）隐蔽策略</strong>。为了不让系统发现恶意代码已经侵入系统，恶意代码可能会改名、删除源文件或者修改系统的安全策略来隐藏自己。<br><strong>（4）潜伏</strong>。恶意代码侵入系统后，等待一定的条件，并具有足够的权限时，就发作并进行破坏活动。<br><strong>（5）破坏</strong>。恶意代码本质具有破坏性，其目的是造成信息丢失，泄密，破坏系统完整性等。<br><strong>（6）重复（1）至（5）对新的目标实施攻击过程。</strong><br><img src="https://img-blog.csdnimg.cn/746efa50ae124e18af6b275d10e8196a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="恶意代码的攻击模型"></p><h2 id="3、防范手段"><a href="#3、防范手段" class="headerlink" title="3、防范手段"></a>3、防范手段</h2><p>通用恶意代码检测技术包括静态和动态检测技术：</p><ul><li><p><strong>基于特征的扫描技术</strong><br>建立恶意代码的特征文件，在扫描时根据特征进行匹配查找</p></li><li><p><strong>校验和法</strong><br>对需要监控的文件生成校验，周期性的生成新校验和并与原始值比较</p></li><li><p><strong>沙箱技术</strong><br>根据程序需要的资源和拥有的权限建立运行沙箱，可以安全地检测和分析程序行为</p></li><li><p><strong>基于蜜罐的检测技术</strong><br>将主机伪装为运行着脆弱的服务或系统，同时安装强大的监测系统。</p></li></ul><p>其中基于特征的扫描技术和校验和法是静态检测技术，沙箱技术和基于蜜罐的检测技术属于动态检测技术。</p><h2 id="四、常见恶意代码"><a href="#四、常见恶意代码" class="headerlink" title="四、常见恶意代码"></a>四、常见恶意代码</h2><p><img src="https://img-blog.csdnimg.cn/a67e601851d74a45ac57f45552261bd1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="常见的恶意代码"></p><p>参考文献：<br>《网络攻防技术与实战 深入理解信息安全防护体系》 郭帆<br>《恶意代码及其防御》知乎 Drifter<br>《恶意代码》MBA智库百科</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;恶意代码是一种有害的计算机代码或 web 脚本，其设计目的是创建系统漏洞，并借以造成后门、安全隐患、信息和数据盗窃、以及其他对文件和计算机系统的潜在破坏。恶意代码不仅使企业和用户蒙受了巨大的经济损失，而且使国家的安全面临着严重威胁。1991年的海湾战争是美国第一次公开在实战
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之暴露面、攻击面、脆弱性</title>
    <link href="https://xiejava.gitee.io/posts/e23ff2e/"/>
    <id>https://xiejava.gitee.io/posts/e23ff2e/</id>
    <published>2022-01-10T02:53:54.000Z</published>
    <updated>2022-01-10T02:55:56.032Z</updated>
    
    <content type="html"><![CDATA[<p><strong>暴露面</strong><br>暴露在攻击者视线范围内，可以被利用进行入侵的系统、设备、信息等，都属于暴露面。虽然大多数企业都认识到暴露面的风险所在，并想方设法来减少暴露面；但不幸的是，并非所有暴露面都是显而易见的，大量的暴露面都潜藏在不容易被发现的暗处，很容易因为资产排查不彻底、人员疏漏等问题被忽略。互联网暴露面资产直接面向外部攻击者的威胁。相对于企业内部资产，所面临的安全风险更高。</p><p><strong>攻击面</strong><br>攻击面：是一个给定的计算机或网络系统，可以被黑客访问和利用的漏洞总和。<br>攻击面包含：<br>操作系统、中间件、应用程序、承载网络中存在的软件漏洞；<br>系统和软件中的错误配置与安全控制缺失；<br>违反安全制度和合规要求的网络配置；<br>过度宽松的访问控制规则；</p><p>减少攻击面的基本策略是减少运行中的软件总量，减少非信任用户可使用的入口点，以及消除用户很少使用的服务。改进信息安全的方法之一就是减少系统与软件的攻击表面。因为关闭不必要的功能，可以避免它们带来的安全风险。减少未授权操作者可调用的代码有助避免安全事故。虽然减少攻击表面有助于防止安全事故，但它不能减少一旦攻击者发现漏洞后可能造成的损害程度。</p><p>攻击面从外部攻击视角来审视企业网络资产可能存在的攻击面及脆弱性，如开放端口是否做映射、网络边界是否做隔离、人员行为是否被明确约束等。</p><p><strong>脆弱性</strong><br>脆弱性也可称为弱点或漏洞，是资产或资产组中存在的可能被威胁利用造成损害的薄弱环节。脆弱性一旦被威胁成功利用就可能对资产造成损害。脆弱性可能存在于物理环境、组织、过程、人员、管理、配置、硬件、软件和信息等各个方面。脆弱性是网络系统中可能被利用并造成危害的弱点。</p><p><strong>三无七边系统</strong><br>三无：指具有系统特征且存在”无人管理、无人使用、无人防护”情况的业务/网站/系统/平台。<br>七边：指测试系统、试验平台、退网未离网系统、工程已上线加载业务但未正式交维系统、与合作伙伴共同运营的业务或系统、责任交接不清的系统、处于衰退期的系统。<br>三无七边系统是往往是最容易被外部攻破和利用的，所以需要加以重视。但是”三无七边”往往是最不容易发现和忽视的。<br>“三无七边”系统网络安全管控工作应贯穿规划、设计、建设、入网运行、维护及下线退网整个生命周期。</p><p>暴露面不一定存在漏洞也不一定是攻击面，但是因为暴露在攻击者视线范围内，直面外部攻击者的威胁，安全风险高。<br>攻击面我的理解是既可以被黑客访问又存在漏洞，也就是既是暴露面又有脆弱性，安全风险非常高。<br>攻击面是从外部攻击的视角来审视可能存在的风险，暴露面和脆弱性从内部管理的视角来审视安全风险。<br>三无七边系统往往是安全管理人员所忽视的有可能存在暴露面和攻击面而又没有在安全管控范围内的系统，安全风险非常非常高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;暴露面&lt;/strong&gt;&lt;br&gt;暴露在攻击者视线范围内，可以被利用进行入侵的系统、设备、信息等，都属于暴露面。虽然大多数企业都认识到暴露面的风险所在，并想方设法来减少暴露面；但不幸的是，并非所有暴露面都是显而易见的，大量的暴露面都潜藏在不容易被发现的暗处，很
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>不想学鼓的产品经理不是一个好的程序员</title>
    <link href="https://xiejava.gitee.io/posts/60aaa7f1/"/>
    <id>https://xiejava.gitee.io/posts/60aaa7f1/</id>
    <published>2021-12-29T06:09:36.000Z</published>
    <updated>2021-12-30T01:42:43.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211229/%E6%9E%B6%E5%AD%90%E9%BC%93.jpg" alt="架子鼓"></p><center>架子鼓</center><p>一直以来都想学一门乐器。苦于没有任何才艺，不管是学校搞活动还是公司的团拜活动都是躲得远远的。从小就很羡慕那种多才多艺的人，不管什么时候都能成为众人的焦点，在要表演的时候可以自信的拿得出手表现一番。也非常羡慕那种自娱自乐的享受自我放松的自由演奏，感觉会乐器的人总是那么的快乐和陶醉。</p><p>公司搬到岳麓山大学科技城就在中南大学后湖国际艺术园。一天晚上和同事散步经过一家现代音乐体验店，里面传来乐队演奏的声音，于是驻足前往。里面一群快乐的人，正在激情洋溢的排练着享受着。我们都被触动了，这种自由、快乐、充满激情的感觉真好！想着一天到晚围绕着产品、项目、代码、缺陷，被工作和生活的压力摧残着的我们什么时候才会有这样的状态啊？所以合计了一下，我们也来报个班来学乐器。我一直想学架子鼓，所以决定报个学架子鼓的班。</p><p>试听课，老师是一位胖胖的90后小女孩，问了我一个灵魂拷问的问题。你这年纪不小了为什么想起要来学架子鼓？我想了半天，说我就是喜欢敲鼓啊，一直一来就喜欢节奏感比较强的声音，听音乐也是喜欢听节奏感强的歌曲，听到重低音的鼓声敲在心里“咚”、“咚”、“咚”的感觉很踏实。而且敲鼓沉浸在音乐里敲起来帅气。不管怎么样，虽然不会，但是从心里还是喜欢。</p><p>喜欢是喜欢，但是没有目标的学习始终都是在耍流氓，浪费自己的时间、精力还学不好。既然是喜欢，既然开始学了，就一定要学好。我们现在是报的一个课程12节课的班，我的目标是通过这一个课程的学习，了解架子鼓的基本演奏技巧，学会一首歌曲的演奏。就《大风吹》吧，谁叫这歌这段时间这么火呢。计划是每周二、四上课，每天拿出1个小时用来练习。<strong>学鼓，虽然我不是天赋最好的，但我争取做那个最认真的</strong>！</p><p>今天根据老师的建议在网上买了练习用的哑鼓垫、军鼓架、鼓棒、节拍器。后面动次打次练起来！</p><p>以后我的标签又多了一个–<strong>鼓手</strong>！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211229/%E6%9E%B6%E5%AD%90%E9%BC%93.jpg&quot; alt=&quot;架子鼓&quot;&gt;&lt;/p&gt;
&lt;center&gt;架子鼓&lt;/cente
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>穷忙与假努力</title>
    <link href="https://xiejava.gitee.io/posts/dae0a359/"/>
    <id>https://xiejava.gitee.io/posts/dae0a359/</id>
    <published>2021-12-28T09:23:09.000Z</published>
    <updated>2021-12-29T00:47:45.271Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211228/%E7%A9%B7%E5%BF%99%E4%B8%8E%E5%81%87%E5%8A%AA%E5%8A%9B.png" alt="穷忙与假努力"></p><center>穷忙与假努力</center><p>时间过得真快，只有几天2021年即将过去。每次到了年底回想起来总是感觉时间过得真快，忙忙碌碌又过了一年，可自己各方面取得的成绩乏善可陈。自己并不是很懒惰的人，看上去每天都很忙，却没有忙出效果，反而是随着年龄的增大越来越焦虑。越焦虑就暗自下决心以后要更加努力，当努力没有达到效果时就更加的焦虑。陷入了越努力-&gt;越失望-&gt;越焦虑的怪圈。</p><p><strong>没有目标、没有效果的忙就是穷忙，看上去努力却实际没有效果的努力是假努力</strong>，穷忙和假努力往往是一同出现的，假努力造成了穷忙，穷忙成就了假努力。<strong>相对于不努力，有时候“假努力”会更加可怕</strong>！因为它像安慰剂一样，让你感觉是在努力而不自知，会让你陷入深深的自我怀疑，对自己失望，最后越来越糟，失去对学习、工作、生活的兴趣。</p><p>到底什么样的表现是“假努力”呢？有老师针对孩子们在学习上的表现列举了一些“假努力”表现，给了我很大的启发。</p><p>“假努力”表现一：上课只顾抄笔记，老师讲的都不听。<br>有很多同学在上课的时候表现得特别忙，看上去特别努力的在学习，老师黑板上写的，还是口头上说的，他们都会事无巨细地写下来。然而，对于老师们讲的是什么？本节课的重难点又是什么？他们全然无所谓，只顾着把这堂课发生的所有一切都记录下来。这样的“假努力”注定会让课堂的效率低下，让自己的努力完全沦为无用的“假努力”。</p><p>“假努力”表现二：花很多时间做笔记，课后却从来不去理解。<br>有第一种“假努力”的同学，往往都存在着“假努力”的第二种表现，那就是笔记写得非常非常多，但是至于笔者写的内容和知识点，他们都从来不看，更不会花时间去理解和搞懂笔记上的内容。这样花大力气写下的笔记，当然最终沦为无用功。</p><p>“假努力”表现三：只顾刷题，从来都不花时间总结。<br>还有一部分“假努力”的同学，每天花大量的时间刷题，而且他们往往还有一个显著的特征，那就是只管做题多少，从来不过问题目对错！那些错题，反复出现问题的题目，他们从来都是不管不顾，只觉得刷了足够的题目，自己的成绩自然而然会上升！然而，殊不知他们把大量的时间花在了已经会的题目上，那些不会、易错的题目还是永远会错。</p><p>“假努力”表现四：每天熬夜学习，白天学习效率低下。<br>不知道各位老师和同学有没有发现，几乎每一个中学班级里，总会出现这么一两个“夜晚学习狂魔”，他么总喜欢晚上搞学习，并且熬非常的时间，导致第二天整个人的精神状态都不好，白天的学习效率极其低下！最后陷入一个“白天该学的时候状态差，晚上不该学的时候拼命学”的死循环当中。</p><p> “假努力”表现五：没有目标和计划的去学习。<br>这种“假努力”的表现有一个典型的例子，比如某个同学们英语很差，想通过自己的努力学好英语，然后就从英语单词开始入手，每天背课本上的单词，而且无论什么时候都是从单词表的第一个单词去背起！这样无计划、无目标的努力，只会耗费巨大的时间和精力在重复学习之上！进而导致学习成绩的速度异常的缓慢！</p><p>从这些表现上来看，其实我们成年人在平时学习、工作中同样存在这些类似的问题。个人认为<strong>造成穷忙和假努力最大的问题是没有目标和计划</strong>。东一榔头、西一棒子，不知道自己到底要学什么，要学到一个什么样的程度。就像小时候课本里的小猴子去掰玉米，看什么捡什么，最后捡了芝麻丢了西瓜。<strong>另外一个就是要有系统化、体系化的思维去学习</strong>。只有系统化、体系化的去学习某个东西，建立该领域的知识体系结构体系才能在有体系结构的基础上进行积累，才能学得好，学得牢。现在公众号、抖音、知乎上碎片化的知识很多，哪怕你是天天上知乎去关注学习这些碎片化的知识而没有建立一个知识体系去有意识的去理解吸收的话，那就类似于花了很多时间去做笔记，去关注去了解，课后从来不去理解。给人感觉是看上去在很努力的学习，其实啥也没有学到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211228/%E7%A9%B7%E5%BF%99%E4%B8%8E%E5%81%87%E5%8A%AA%E5%8A%9B.png&quot; alt=&quot;穷
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>新场地，新征程！</title>
    <link href="https://xiejava.gitee.io/posts/8528ed97/"/>
    <id>https://xiejava.gitee.io/posts/8528ed97/</id>
    <published>2021-12-10T03:23:39.000Z</published>
    <updated>2021-12-10T03:27:41.802Z</updated>
    
    <content type="html"><![CDATA[<p>服务数字经济，护航美好生活！</p><p>2021年12月09日通服网安研发团队强势入驻岳麓上大学科技城国家网络安全产业园。</p><p>新场地，新征程，数网络安全研发，还看通服网安！</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%8F%AD%E7%89%8C.jpg" alt="通服网安揭牌"></p><center>通服网安</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%9B%A2%E9%98%9F%E5%90%88%E5%BD%B1.jpg" alt="通服网安研发团队"></p><center>通服网安研发团队</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E7%A0%94%E5%8F%91%E5%A4%A7%E6%A5%BC.jpg" alt="通服网安研发大楼"></p><center>通服网安研发大楼</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E7%A0%94%E5%8F%91%E5%A4%A7%E6%A5%BC%E4%BE%A7%E9%9D%A2.jpg" alt="通服网安研发大楼外景"></p><center>通服网安研发大楼外景</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E5%89%8D%E5%8F%B0.jpg" alt="通服网安前台"></p><center>通服网安前台</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%B1%95%E5%8E%85%E5%85%A5%E5%8F%A3.jpg" alt="展厅入口"></p><center>通服网安展厅入口</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%B1%95%E5%8E%85.jpg" alt="通服网安展厅"></p><center>通服网安展厅</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%80%81%E5%8A%BF%E6%84%9F%E7%9F%A5%E5%B1%95%E7%A4%BA%E5%A4%A7%E5%B1%8F.jpg" alt="通服网安研发楼展厅安全运营中心展示"></p><center>通服网安研发楼展厅安全运营中心展示</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%B2%A1%E6%9C%89%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%B0%B1%E6%B2%A1%E6%9C%89%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8.jpg" alt="没有网络安全就没有国家安全"></p><center>没有网络安全就没有国家安全</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务数字经济，护航美好生活！&lt;/p&gt;
&lt;p&gt;2021年12月09日通服网安研发团队强势入驻岳麓上大学科技城国家网络安全产业园。&lt;/p&gt;
&lt;p&gt;新场地，新征程，数网络安全研发，还看通服网安！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/x
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="工作" scheme="https://xiejava.gitee.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习实现恶意URL检测实战一</title>
    <link href="https://xiejava.gitee.io/posts/6b6a91de/"/>
    <id>https://xiejava.gitee.io/posts/6b6a91de/</id>
    <published>2021-12-09T00:58:04.000Z</published>
    <updated>2021-12-09T01:09:12.581Z</updated>
    
    <content type="html"><![CDATA[<p>恶意URL检测的方法很多，这里介绍通过机器学习分析URL文本分词词频来检测恶意URL。训练的数据集为开源数据集，通过机器学习训练检测模型，然后做了部分工程化的应用，将模型持久化，在应用的时候加载进来直接应用，不用重新进行训练。通过接口调用实现恶意URL检测预测判断。</p><p>恶意URL检测，对应与机器学习是个分类问题，这里分别用逻辑回归和SVM支持向量机分类模型进行模型实现。</p><p>具体实现过程包括<strong>数据载入</strong>–&gt;<strong>数据处理（分词、向量化处理）</strong>–&gt;<strong>模型训练</strong>–&gt;<strong>模型保存</strong>–&gt;<strong>模型应用</strong></p><p><strong>项目组织结构如下：</strong><br><img src="https://img-blog.csdnimg.cn/cdcd148129c346f8a79ab6d91a120fe9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_11,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="项目组织结构"></p><h1 id="一、数据载入"><a href="#一、数据载入" class="headerlink" title="一、数据载入"></a>一、数据载入</h1><p>从数据集中载入数据，读取数据，将URL和标签进行识别和区分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从文件中获取数据集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataFromFile</span><span class="params">(filename=<span class="string">'data/data.csv'</span>)</span>:</span></span><br><span class="line">    input_url = filename</span><br><span class="line">    data_csv = pd.read_csv(input_url, <span class="string">','</span>, error_bad_lines=<span class="literal">False</span>)</span><br><span class="line">    data_df = pd.DataFrame(data_csv)</span><br><span class="line">    url_df = np.array(data_df)</span><br><span class="line">    random.shuffle(url_df)</span><br><span class="line">    y = [d[<span class="number">1</span>] <span class="keyword">for</span> d <span class="keyword">in</span> url_df]</span><br><span class="line">    inputurls = [d[<span class="number">0</span>] <span class="keyword">for</span> d <span class="keyword">in</span> url_df]</span><br><span class="line">    <span class="keyword">return</span> inputurls,y</span><br></pre></td></tr></table></figure><h1 id="二、数据处理（分词、向量化处理）"><a href="#二、数据处理（分词、向量化处理）" class="headerlink" title="二、数据处理（分词、向量化处理）"></a>二、数据处理（分词、向量化处理）</h1><p>数据处理实现对URL的分词及向量化处理<br>分词:分析URL根据,.-进行分词，由于com、cn等常用域名不是关键影响因素，所以分词的时候去掉了</p><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分词</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTokens</span><span class="params">(input)</span>:</span></span><br><span class="line">    web_url = input.lower()</span><br><span class="line">    urltoken = []</span><br><span class="line">    dot_slash = []</span><br><span class="line">    slash = str(web_url).split(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> slash:</span><br><span class="line">        r1 = str(i).split(<span class="string">'-'</span>)</span><br><span class="line">        token_slash = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(r1)):</span><br><span class="line">            r2 = str(r1[j]).split(<span class="string">'.'</span>)</span><br><span class="line">            token_slash = token_slash + r2</span><br><span class="line">        dot_slash = dot_slash + r1 + token_slash</span><br><span class="line">    urltoken = list(set(dot_slash))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'com'</span> <span class="keyword">in</span> urltoken:</span><br><span class="line">        urltoken.remove(<span class="string">'com'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'cn'</span> <span class="keyword">in</span> urltoken:</span><br><span class="line">        urltoken.remove(<span class="string">'cn'</span>)</span><br><span class="line">    <span class="keyword">return</span> urltoken</span><br></pre></td></tr></table></figure><h2 id="向量化处理"><a href="#向量化处理" class="headerlink" title="向量化处理"></a>向量化处理</h2><p>将分词以后的结果进行词频的向量化处理，形成可以用于模型训练的稀疏矩阵向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_urls,y=getDataFromFile(datapath)</span><br><span class="line">url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">x = url_vectorizer.fit_transform(all_urls)</span><br></pre></td></tr></table></figure><h1 id="三、模型训练"><a href="#三、模型训练" class="headerlink" title="三、模型训练"></a>三、模型训练</h1><p>将经过处理后的训练数据用模型进行训练，将数据集分为两部分一部分用于训练，一部分用于测试评估。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练,通过逻辑回归模型训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainLR</span><span class="params">(datapath)</span>:</span></span><br><span class="line">    all_urls,y=getDataFromFile(datapath)</span><br><span class="line">    url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">    x = url_vectorizer.fit_transform(all_urls)</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    l_regress = LogisticRegression()                  <span class="comment"># Logistic regression</span></span><br><span class="line">    l_regress.fit(x_train, y_train)</span><br><span class="line">    l_score = l_regress.score(x_test, y_test)</span><br><span class="line">    print(<span class="string">"score: &#123;0:.2f&#125; %"</span>.format(<span class="number">100</span> * l_score))</span><br><span class="line">    <span class="keyword">return</span> l_regress,url_vectorizer</span><br></pre></td></tr></table></figure><p>用逻辑回归模型训练的结果是 score: 98.50 %</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练，通过SVM支持向量机模型训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainSVM</span><span class="params">(datapath)</span>:</span></span><br><span class="line">    all_urls, y = getDataFromFile(datapath)</span><br><span class="line">    url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">    x = url_vectorizer.fit_transform(all_urls)</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    svmModel=svm.LinearSVC()</span><br><span class="line">    svmModel.fit(x_train, y_train)</span><br><span class="line">    svm_score=svmModel.score(x_test, y_test)</span><br><span class="line">    print(<span class="string">"score: &#123;0:.2f&#125; %"</span>.format(<span class="number">100</span> * svm_score))</span><br><span class="line">    <span class="keyword">return</span> svmModel,url_vectorizer</span><br></pre></td></tr></table></figure><p>用SVM模型训练的结果是 score: 99.64 %</p><p>可以看出SVM模型训练的结果比逻辑回归模型训练的效果要稍好。</p><h1 id="四、保存模型"><a href="#四、保存模型" class="headerlink" title="四、保存模型"></a>四、保存模型</h1><p>将训练好的模型进行持久化保存，通过pickle.dump()的方式把训练好的模型参数及特征保存至模型文件，以便于应用的时候不要再进行训练，直接应用训练好的模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#保存模型及特征</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveModel</span><span class="params">(model,vector)</span>:</span></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">    file1 = modelfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file1, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(model, f)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment">#保存特征</span></span><br><span class="line">    file2 = vectorfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file2, <span class="string">'wb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        pickle.dump(vector, f2)</span><br><span class="line">    f2.close()</span><br></pre></td></tr></table></figure><p>通过main方法执行训练模型及保存模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#model,vector=trainLR('data/data.csv')</span></span><br><span class="line">    model, vector = trainSVM(<span class="string">'data/data.csv'</span>)</span><br><span class="line">    saveModel(model,vector)</span><br></pre></td></tr></table></figure><h1 id="四、模型应用"><a href="#四、模型应用" class="headerlink" title="四、模型应用"></a>四、模型应用</h1><p>通过pickle.load载入已经训练好的模型和特征，并用Flask暴露一个接口调用模型的预测方法进行预测。</p><h2 id="载入已经训练好的模型"><a href="#载入已经训练好的模型" class="headerlink" title="载入已经训练好的模型"></a>载入已经训练好的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#载入已经训练好的模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadModel</span><span class="params">()</span>:</span></span><br><span class="line">    file1 = modelfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file1, <span class="string">'rb'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">        model = pickle.load(f1)</span><br><span class="line">    f1.close()</span><br><span class="line"></span><br><span class="line">    file2 = vectorfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file2, <span class="string">'rb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        vector = pickle.load(f2)</span><br><span class="line">    f2.close()</span><br><span class="line">    <span class="keyword">return</span> model,vector</span><br></pre></td></tr></table></figure><h2 id="通过接口进行调用"><a href="#通过接口进行调用" class="headerlink" title="通过接口进行调用"></a>通过接口进行调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过接口进行调用</span></span><br><span class="line"><span class="meta">@app.route('/&lt;path:path&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_predict</span><span class="params">(path)</span>:</span></span><br><span class="line">    X_predict = []</span><br><span class="line">    X_predict.append(path)</span><br><span class="line">    model, vector = loadModel()</span><br><span class="line">    x = vector.transform(X_predict)</span><br><span class="line">    y_predict = model.predict(x)</span><br><span class="line">    print(y_predict[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"url predict: "</span>+str(y_predict[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="五、应用效果"><a href="#五、应用效果" class="headerlink" title="五、应用效果"></a>五、应用效果</h1><p>将需要检测的URL，输入到<a href="http://127.0.0.1:5000/后面，就可以根据输入的URL进行检测给出模型预测的结果。" target="_blank" rel="noopener">http://127.0.0.1:5000/后面，就可以根据输入的URL进行检测给出模型预测的结果。</a><br><a href="http://127.0.0.1:5000/sohu.com/a/338823532_354899" target="_blank" rel="noopener">http://127.0.0.1:5000/sohu.com/a/338823532_354899</a><br><img src="https://img-blog.csdnimg.cn/7f17697af706490ba693272f6f3780ad.png#pic_center" alt="检测效果1"><br><a href="http://127.0.0.1:5000/sohu.com/a/%3Cscript%3E/test" target="_blank" rel="noopener">http://127.0.0.1:5000/sohu.com/a/%3Cscript%3E/test</a><br><img src="https://img-blog.csdnimg.cn/d6e2542df8944ce4803da80fe0f9f145.png#pic_center" alt="检测效果2"></p><p>完整代码及数据集见：<a href="https://github.com/xiejava1018/urldetection.git" target="_blank" rel="noopener">https://github.com/xiejava1018/urldetection.git</a></p><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;恶意URL检测的方法很多，这里介绍通过机器学习分析URL文本分词词频来检测恶意URL。训练的数据集为开源数据集，通过机器学习训练检测模型，然后做了部分工程化的应用，将模型持久化，在应用的时候加载进来直接应用，不用重新进行训练。通过接口调用实现恶意URL检测预测判断。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>解决Anaconda报The channel is not accessible源通道不可用问题</title>
    <link href="https://xiejava.gitee.io/posts/d101efba/"/>
    <id>https://xiejava.gitee.io/posts/d101efba/</id>
    <published>2021-11-26T07:53:22.000Z</published>
    <updated>2021-11-26T08:00:16.006Z</updated>
    
    <content type="html"><![CDATA[<p>最近在通过pycharm开发python程序，引用anaconda环境建立虚拟环境时报错，报UnavailableInvalidChannel: The channel is not accessible or is invalid.应该是镜像源访问通道无法访问或无效。现将解决办法记录如下：</p><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><p>操作系统：win10<br>安装有anaconda 4.10.3<br>pycharm2021.2</p><h1 id="报错现象："><a href="#报错现象：" class="headerlink" title="报错现象："></a>报错现象：</h1><p>在pycharm中新建python项目，引用anaconda建立虚拟环境时报错<br>报“UnavailableInvalidChannel: The channel is not accessible or is invalid.”<br><img src="https://img-blog.csdnimg.cn/0b93fd9f35054b69a17eea98aace4d1b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="建立虚拟环境报错"></p><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><h2 id="1、找到anaconda的源配置文件"><a href="#1、找到anaconda的源配置文件" class="headerlink" title="1、找到anaconda的源配置文件"></a>1、找到anaconda的源配置文件</h2><p>根据报错的建议提示：</p><blockquote><p>You will need to ajust your conda configuration to proceed.<br>Use ‘cona config –show channels’ to view your configuration’s current state,<br>and use ‘conda config –show-sources’ to view config file location.</p></blockquote><p>意思是建议你需要调整conda的配置来处理，可以通过<code>cona config --show channels</code>命令来查看你当前的配置状态，可以用<code>conda config --show-sources</code>看查看本地的配置文件。<br>根据这个建议，打开anaconda的命令行控制台。<br><img src="https://img-blog.csdnimg.cn/9fdcb7a4f8e64cb19e069fad4e1ece6a.png#pic_center" alt="Anaconda Powershell"></p><p>敲入“conda config –show-sources”命令，显示当前的通道为<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a>  报错就是说这个通道无法访问或无效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show channels</span><br><span class="line">channels:</span><br><span class="line">  - https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>通过“conda config –show-sources” 查看配置文件的路径。配置文件为用户目录下的<code>.condarc</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show-sources</span><br><span class="line">==&gt; C:\Users\xiejava\.condarc &lt;==</span><br><span class="line">channels:</span><br><span class="line">  - https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/90ca54b07ef6417395a01c140b6b4381.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、修改为清华的镜像源"><a href="#2、修改为清华的镜像源" class="headerlink" title="2、修改为清华的镜像源"></a>2、修改为清华的镜像源</h2><p>将找到的.condarc文件打开。<br>拷贝以下清华的镜像源到该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><p>然后再次运行<code>conda config --show-sources</code>，确认配置文件内容已经修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show-sources</span><br><span class="line">==&gt; C:\Users\xiejava\.condarc &lt;==</span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><h2 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h2><p>再打开pycharm引用Conda Enviroment新建新的虚拟环境。<br><img src="https://img-blog.csdnimg.cn/86f0c2ffd7434ed1a591bb89c47f68d8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="新建新的虚拟环境"><br>这时不报错可以正常创建Conda虚拟环境了。<br><img src="https://img-blog.csdnimg.cn/556082fa9af142e7adb3529de9da77b3.png#pic_center" alt="创建Conda Environment"><br>至此，修改成清华镜像源解决了Anaconda报The channel is not accessible源通道不可用的问题。</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在通过pycharm开发python程序，引用anaconda环境建立虚拟环境时报错，报UnavailableInvalidChannel: The channel is not accessible or is invalid.应该是镜像源访问通道无法访问或无效。现将
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python快速实现一个域名、IP信息聚合网站</title>
    <link href="https://xiejava.gitee.io/posts/fa820ec9/"/>
    <id>https://xiejava.gitee.io/posts/fa820ec9/</id>
    <published>2021-11-21T06:18:19.000Z</published>
    <updated>2021-12-09T01:09:00.549Z</updated>
    
    <content type="html"><![CDATA[<p>域名和IP地址信息是非常基础的情报信息，目前网上有很多网站都提供了域名信息的查询、IP地址及归属地的查询。本文通过Python Flask实现域名及IP情报信息的聚合网站。</p><p>因为域名和IP地址信息会有变化，为了减少接口压力，做了本地数据库的存储，新鲜度保存一周，每次查询先从本地数据库获取信息，如果本地库信息有并且没有超过一个星期就从本地库取，没有就从其他网站获取，并更新到本地库。</p><h1 id="一、获取域名WHOIS信息"><a href="#一、获取域名WHOIS信息" class="headerlink" title="一、获取域名WHOIS信息"></a>一、获取域名WHOIS信息</h1><p>网上提供域名WHOIS信息查询的网站有很多，这里以<a href="http://whois.chinafu.com" target="_blank" rel="noopener">http://whois.chinafu.com</a> 为例实现WHOIS信息的查询和解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getwhoisinfobychinafu</span><span class="params">(domain)</span>:</span></span><br><span class="line">    ret_result = &#123;&#125;</span><br><span class="line">    result=getWhoisInfoFromDB(domain)</span><br><span class="line">    <span class="keyword">if</span> len(result)==<span class="number">0</span>:</span><br><span class="line">        whois_service_url = <span class="string">'http://whois.chinafu.com/whois.php'</span></span><br><span class="line">        post_data=&#123;<span class="string">"domain"</span>:domain&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            post_result=requests.post(whois_service_url,post_data)</span><br><span class="line">            <span class="keyword">if</span> post_result.status_code == <span class="number">200</span>:</span><br><span class="line">                ret_str = post_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">                soup = BeautifulSoup(ret_str, <span class="string">'lxml'</span>)</span><br><span class="line">                items_tr =soup.find(name=<span class="string">'table'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'listtable'</span>&#125;).find_all(name=<span class="string">'tr'</span>)</span><br><span class="line">                <span class="keyword">for</span> item_tr <span class="keyword">in</span> items_tr:</span><br><span class="line">                    td_item=item_tr.find(name=<span class="string">'td'</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'colspan'</span> <span class="keyword">in</span> td_item.attrs:</span><br><span class="line">                        key_name=<span class="string">'详情'</span></span><br><span class="line">                        key_value=td_item.find(name=<span class="string">'div'</span>,id=<span class="string">'tab1'</span>).text</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        key_name=item_tr.find(name=<span class="string">'th'</span>).text</span><br><span class="line">                        key_value=item_tr.find(name=<span class="string">'td'</span>).text</span><br><span class="line">                    ret_result[key_name]=key_value</span><br><span class="line">                addchinafuWhoisInfo2DB(ret_result)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> r:</span><br><span class="line">            print(<span class="string">'未知错误 %s'</span> % (r))</span><br><span class="line">    <span class="comment">#ret_result = json.dumps(ret_result, ensure_ascii=False)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret_result=result[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> ret_result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWhoisInfoFromDB</span><span class="params">(domainname)</span>:</span></span><br><span class="line">    whoisInfos=db.session.execute(<span class="string">'select * from whoisinfo where domain_name="%s" and updated_time &gt; DATE_SUB(CURDATE(), INTERVAL 1 WEEK)'</span> % domainname).fetchall()</span><br><span class="line">    whoisInfo_dics=[]</span><br><span class="line">    <span class="keyword">for</span> whoisInfo <span class="keyword">in</span> whoisInfos:</span><br><span class="line">        chinafuwhoisinfo_dic=chinafuwhoisinfo2dic(whoisInfo)</span><br><span class="line">        whoisInfo_dics.append(chinafuwhoisinfo_dic)</span><br><span class="line">    <span class="keyword">return</span> whoisInfo_dics</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addchinafuWhoisInfo2DB</span><span class="params">(chinafuWhoisInfo_dic)</span>:</span></span><br><span class="line">    chinafuWhois=WhoisInfo()</span><br><span class="line">    chinafuWhois.domain_name=chinafuWhoisInfo_dic.get(<span class="string">'域名DomainName'</span>)</span><br><span class="line">    chinafuWhois.domain_status=chinafuWhoisInfo_dic.get(<span class="string">'域名状态Domain Status'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar=chinafuWhoisInfo_dic.get(<span class="string">'注册商Sponsoring Registrar'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.name_server=chinafuWhoisInfo_dic.get(<span class="string">'DNS 服务器Name Server'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_creation_date=chinafuWhoisInfo_dic.get(<span class="string">'注册日期Registration Date'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_updated_date = chinafuWhoisInfo_dic.get(<span class="string">'更新日期Update Date'</span>, <span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_expiry_date = chinafuWhoisInfo_dic.get(<span class="string">'到期日期Expiration Date'</span>, <span class="string">''</span>)</span><br><span class="line">    chinafuWhois.detail=chinafuWhoisInfo_dic.get(<span class="string">'详情'</span>, <span class="string">''</span>)[<span class="number">0</span>:<span class="number">10000</span>]</span><br><span class="line">    chinafuWhois.source = <span class="string">'中国福网'</span></span><br><span class="line">    db.session.execute(<span class="string">'delete from whoisinfo where domain_name="%s" and source="%s"'</span> % (chinafuWhoisInfo_dic.get(<span class="string">'域名DomainName'</span>), chinafuWhois.source))</span><br><span class="line">    db.session.add(chinafuWhois)</span><br><span class="line">    db.session.commit()</span><br></pre></td></tr></table></figure><p>这里为了减少直接从其他网站获取WHOIS信息的压力，做了本地数据库的存储，每次先从本地数据库取WHOIS的信息，如果本地库信息有并且没有超过一个星期就从本地库取，没有就从其他网站获取，并更新到本地库。这里getWhoisInfoFromDB实现了取新鲜度为1周的数据，addchinafuWhoisInfo2DB实现将获取的信息保存到本地数据库。</p><h1 id="二、根据域名解析出IP"><a href="#二、根据域名解析出IP" class="headerlink" title="二、根据域名解析出IP"></a>二、根据域名解析出IP</h1><p>根据域名解析出IP代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIPbyDomain</span><span class="params">(domain)</span>:</span></span><br><span class="line">    addr=<span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        myaddr = socket.getaddrinfo(domain, <span class="string">'http'</span>)</span><br><span class="line">        addr=myaddr[<span class="number">0</span>][<span class="number">4</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">return</span> addr</span><br></pre></td></tr></table></figure><h1 id="三、获取IP信息"><a href="#三、获取IP信息" class="headerlink" title="三、获取IP信息"></a>三、获取IP信息</h1><p>获取IP信息的API接口也有很多，有淘宝的 <a href="https://ip.taobao.com/outGetIpInfo" target="_blank" rel="noopener">https://ip.taobao.com/outGetIpInfo</a>  、IPINFO <a href="http://ipinfo.io/、IPAPI" target="_blank" rel="noopener">http://ipinfo.io/、IPAPI</a> <a href="http://ip-api.com/" target="_blank" rel="noopener">http://ip-api.com/</a>  以及GeoLite2离线库等。</p><h2 id="从淘宝IP获取IP信息"><a href="#从淘宝IP获取IP信息" class="headerlink" title="从淘宝IP获取IP信息"></a>从淘宝IP获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobytaobao</span><span class="params">(ip)</span>:</span></span><br><span class="line">    taobaoIp_url = <span class="string">'https://ip.taobao.com/outGetIpInfo'</span></span><br><span class="line">    post_data=&#123;<span class="string">"ip"</span>:ip,<span class="string">"accessKey"</span>:<span class="string">"alibaba-inc"</span>&#125;</span><br><span class="line">    ret_ipinfo= &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        return_data=requests.post(taobaoIp_url,post_data)</span><br><span class="line">        <span class="comment">#其中返回数据中code的值的含义为，0：成功，1：服务器异常，2：请求参数异常，3：服务器繁忙，4：个人qps超出</span></span><br><span class="line">        return_json=json.loads(return_data.text)</span><br><span class="line">        <span class="keyword">if</span> return_json[<span class="string">'code'</span>]==<span class="number">0</span>:</span><br><span class="line">            ret_ipinfo[<span class="string">'ip'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'ip'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'country'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'country'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'region'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'region'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'org'</span>]=<span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'city'</span>] = return_json[<span class="string">'data'</span>][<span class="string">'city'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'isp'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'isp'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'loc'</span>] = <span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'timezone'</span>] = <span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'source'</span>]=<span class="string">'淘宝IP'</span></span><br><span class="line">            addIPInfo2DB(ret_ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ret_ipinfo</span><br></pre></td></tr></table></figure><h2 id="从ipinfo-io获取IP信息"><a href="#从ipinfo-io获取IP信息" class="headerlink" title="从ipinfo.io获取IP信息"></a>从ipinfo.io获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobyipinfo</span><span class="params">(ip)</span>:</span></span><br><span class="line">    api_url=<span class="string">'http://ipinfo.io/'</span>+ip</span><br><span class="line">    ipinfo = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req_return = requests.get(api_url)</span><br><span class="line">        <span class="keyword">if</span> req_return.status_code == <span class="number">200</span>:</span><br><span class="line">            ipinfo = json.loads(req_return.text)</span><br><span class="line">            ipinfo[<span class="string">'source'</span>]=<span class="string">'ipinfo.io'</span></span><br><span class="line">            addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h2 id="从ip-api-com获取IP信息"><a href="#从ip-api-com获取IP信息" class="headerlink" title="从ip-api.com获取IP信息"></a>从ip-api.com获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobyipapi</span><span class="params">(ip)</span>:</span></span><br><span class="line">    api_url=<span class="string">'http://ip-api.com/json/'</span>+ip</span><br><span class="line">    ipinfo=&#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req_return=requests.get(api_url)</span><br><span class="line">        <span class="keyword">if</span> req_return.status_code==<span class="number">200</span>:</span><br><span class="line">            ipinfo=json.loads(req_return.text)</span><br><span class="line">            ipinfo[<span class="string">'ip'</span>] = ip</span><br><span class="line">            ipinfo[<span class="string">'source'</span>] = <span class="string">'ip-api.com'</span></span><br><span class="line">            ipinfo[<span class="string">'loc'</span>] = str(ipinfo[<span class="string">'lat'</span>])+<span class="string">','</span>+str(ipinfo[<span class="string">'lon'</span>])</span><br><span class="line">            addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h2 id="从GeoLite离线库获取IP信息"><a href="#从GeoLite离线库获取IP信息" class="headerlink" title="从GeoLite离线库获取IP信息"></a>从GeoLite离线库获取IP信息</h2><p>如何获取GeoLite离线库及如何读取，详见：<a href="http://xiejava.ishareread.com/posts/2c5697c0/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/2c5697c0/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobygeoip2</span><span class="params">(ip)</span>:</span></span><br><span class="line">    ipinfo=&#123;&#125;</span><br><span class="line">    dbdir=Config.geoLiteDBdir</span><br><span class="line">    <span class="keyword">with</span> geoip2.database.Reader(dbdir) <span class="keyword">as</span> reader:</span><br><span class="line">        response = reader.city(ip)</span><br><span class="line">        ipinfo[<span class="string">'ip'</span>] =ip</span><br><span class="line">        ipinfo[<span class="string">'country'</span>] = response.country.names[<span class="string">'zh-CN'</span>]</span><br><span class="line">        ipinfo[<span class="string">'region'</span>] =<span class="string">''</span></span><br><span class="line">        ipinfo[<span class="string">'city'</span>]=response.city.name</span><br><span class="line">        ipinfo[<span class="string">'org'</span>] =<span class="string">''</span></span><br><span class="line">        ipinfo[<span class="string">'loc'</span>] = str(response.location.latitude)+<span class="string">','</span>+str(response.location.longitude)</span><br><span class="line">        ipinfo[<span class="string">'timezone'</span>] = response.location.time_zone</span><br><span class="line">        ipinfo[<span class="string">'source'</span>] = <span class="string">'GeoIP'</span></span><br><span class="line">        addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h1 id="四、搭建一个FLASK-Web应用来查询聚合的域名、IP情报信息"><a href="#四、搭建一个FLASK-Web应用来查询聚合的域名、IP情报信息" class="headerlink" title="四、搭建一个FLASK Web应用来查询聚合的域名、IP情报信息"></a>四、搭建一个FLASK Web应用来查询聚合的域名、IP情报信息</h1><h2 id="1、FLASK-Web应用的工程组织"><a href="#1、FLASK-Web应用的工程组织" class="headerlink" title="1、FLASK Web应用的工程组织"></a>1、FLASK Web应用的工程组织</h2><p><img src="https://img-blog.csdnimg.cn/ad27fb1ae7c84bd297b751bfca86f975.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="工程组织"></p><h2 id="2、配置数据及读取配置数据"><a href="#2、配置数据及读取配置数据" class="headerlink" title="2、配置数据及读取配置数据"></a>2、配置数据及读取配置数据</h2><h3 id="1）配置数据"><a href="#1）配置数据" class="headerlink" title="1）配置数据"></a>1）配置数据</h3><p>配置数据分别放在.env及.flaskenv中，其中<code>.env</code>放的是工程中用到的数据库链接等比较私密的配置信息。<code>.flaskenv</code>放的是Flask运行环境的信息<br>.env的配置信息参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEV_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db_dev?charset=utf8'</span></span><br><span class="line">TEST_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db_test?charset=utf8'</span></span><br><span class="line">PROD_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db?charset=utf8'</span></span><br><span class="line"></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br><span class="line">SECRET_KEY=your secret key</span><br></pre></td></tr></table></figure><p>.falskenv配置信息参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLASK_ENV=development</span><br></pre></td></tr></table></figure><h3 id="2）实现读取配置数据"><a href="#2）实现读取配置数据" class="headerlink" title="2）实现读取配置数据"></a>2）实现读取配置数据</h3><p>通过config.py实现配置数据的读取及管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line">basedir=os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">flaskenv_path=os.path.join(basedir,<span class="string">'.flaskenv'</span>)</span><br><span class="line">env_path=os.path.join(basedir,<span class="string">'.env'</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(flaskenv_path):</span><br><span class="line">    load_dotenv(flaskenv_path)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(env_path):</span><br><span class="line">    load_dotenv(env_path)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">    geoLiteDBdir=os.path.join(basedir,<span class="string">'GeoLite2\GeoLite2-City.mmdb'</span>)</span><br><span class="line">    flaskenv = os.getenv(<span class="string">'FLASK_ENV'</span>,<span class="string">'development'</span>)</span><br><span class="line">    SECRET_KEY=os.getenv(<span class="string">'SECRET_KEY'</span>,<span class="string">'123!@#'</span>)</span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS=os.getenv(<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>)</span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'DEV_DATABASE_URI'</span>)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_app</span><span class="params">(app)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    DEBUG=<span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'DEV_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    TESTING=<span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'TEST_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'PROD_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line">config=&#123;</span><br><span class="line">    <span class="string">'development'</span>:DevelopmentConfig,</span><br><span class="line">    <span class="string">'testing'</span>:TestingConfig,</span><br><span class="line">    <span class="string">'production'</span>:ProductionConfig,</span><br><span class="line">    <span class="string">'default'</span>:DevelopmentConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、界面及路由"><a href="#3、界面及路由" class="headerlink" title="3、界面及路由"></a>3、界面及路由</h2><p>界面很简单就一个域名/IP的输入框，输入域名或IP后去查询相应的域名信息或IP信息显示到界面上。<br><img src="https://img-blog.csdnimg.cn/d906b3973e654d3cb6c0a68fbc121da1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="index界面"></p><p>界面用jinjia2的模板<br>index.html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "bootstrap/base.html" %&#125;</span><br><span class="line">&#123;% block title %&#125;InfoCol&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    &#123;% block navbar %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".navbar-collapse"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>InfoCol<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header "</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"center-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-block"</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">                &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">                &#123;&#123; form.name.label &#125;&#125;&#123;&#123; form.name() &#125;&#125;</span><br><span class="line">                &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% if whois_info %&#125;</span><br><span class="line">                  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>&#123;&#123; name &#125;&#125;的Whois信息<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    &#123;% for item in whois_info %&#125;</span><br><span class="line">                        &#123;% if item!='详情' %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 80%"</span>&gt;</span>&#123;&#123; whois_info[item] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">href</span>=<span class="string">"#collapseExample"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"collapseExample"</span>&gt;</span></span><br><span class="line">                               &#123;&#123; item &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 80%"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse"</span> <span class="attr">id</span>=<span class="string">"collapseExample"</span>&gt;</span></span><br><span class="line">                                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">                                    &#123;&#123; whois_info[item] &#125;&#125;</span><br><span class="line">                                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% endif %&#125;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% if ipinfos|length&gt;0 %&#125;</span><br><span class="line">                  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>IP<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>国家/地区<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>省份<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>机构<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>ISP<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>经纬度<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>来源<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                      &#123;% for ipinfo in ipinfos %&#125;</span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['ip'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['country'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['region'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['city'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['org'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['isp'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['loc'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                              &#123;% if ipinfo['source']=='ipinfo.io' %&#125;</span><br><span class="line">                                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ipinfo.io/&#123;&#123; ipinfo['ip'] &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; ipinfo['source'] &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                              &#123;% elif ipinfo['source']=='ip-api.com'%&#125;</span><br><span class="line">                                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ip-api.com/json/&#123;&#123; ipinfo['ip'] &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; ipinfo['source'] &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                              &#123;% else %&#125;</span><br><span class="line">                                  &#123;&#123; ipinfo['source'] &#125;&#125;</span><br><span class="line">                              &#123;% endif %&#125;</span><br><span class="line">                          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                      &#123;% endfor %&#125;</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>路由配置处理中实现了获取表单中的信息，并判断是域名还是IP如果是域名者获取whois信息，并根据域名获取IP信息。如果输入的是IP则获取IP信息，并反馈到页面上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@index_bp.route('/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    ipinfos = []</span><br><span class="line">    whois_info = <span class="string">''</span></span><br><span class="line">    form = InputForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        name = form.name.data</span><br><span class="line">        <span class="keyword">if</span> checkip(name):</span><br><span class="line">            ipinfos = getipinfo(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            whois_info = getwhoisinfo(name)</span><br><span class="line">            whois_ip = getIPbyDomain(name)</span><br><span class="line">            <span class="keyword">if</span> checkip(whois_ip):</span><br><span class="line">                ipinfos = getipinfo(whois_ip)</span><br><span class="line">        form.name.data = <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,form=form, name=name, ipinfos=ipinfos, whois_info=whois_info)</span><br></pre></td></tr></table></figure><h2 id="4、最终实现效果"><a href="#4、最终实现效果" class="headerlink" title="4、最终实现效果"></a>4、最终实现效果</h2><p><img src="https://img-blog.csdnimg.cn/6649c43ceaad485e9d3170b4a03695d4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="界面查询效果"></p><p><strong>至此通过Python快速实现了一个简单的域名、IP信息聚合网站</strong></p><hr><p>全部源代码：<a href="https://github.com/xiejava1018/infocollect" target="_blank" rel="noopener">https://github.com/xiejava1018/infocollect</a></p><p>演示地址：<a href="http://test.ishareread.com/" target="_blank" rel="noopener">http://test.ishareread.com/</a></p><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;域名和IP地址信息是非常基础的情报信息，目前网上有很多网站都提供了域名信息的查询、IP地址及归属地的查询。本文通过Python Flask实现域名及IP情报信息的聚合网站。&lt;/p&gt;
&lt;p&gt;因为域名和IP地址信息会有变化，为了减少接口压力，做了本地数据库的存储，新鲜度保存一周
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫获取电子书资源实战</title>
    <link href="https://xiejava.gitee.io/posts/eab21fe5/"/>
    <id>https://xiejava.gitee.io/posts/eab21fe5/</id>
    <published>2021-11-20T07:41:01.000Z</published>
    <updated>2021-11-20T15:02:40.108Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Python，相对java来说python简单易学、语法简单，工具丰富，开箱即用，适用面广做全栈开发那是极好的，对于小型应用的开发，虽然运行效率慢点，但开发效率极高。大大提高了咱们的生产力。为什么python能够在这几年火起来，自然有他的道理，当然也受益于这几年大数据和AI的火。</p><p>据说网络上80%的爬虫都是用python写的，不得不说python写爬虫真的是so easy。基本上一个不太复杂的网站可以通过python用100多行代码就能实现你所需要的爬取。<br>现在就以一个电子书的网站为例来实现python爬虫获取电子书资源。爬取整站的电子书资源，按目录保存到本地，并形成索引文件方便查找。</p><p>爬取的目标网站：苦瓜书盘</p><p>步骤：<strong>爬取-&gt;分析、解析-&gt;保存</strong></p><p>对于一个不需要登录验证的资源分享类的网站，爬取最大的工作量应该是在对目标页面的分析、解析、识别，这里用的到是Python的BeautifulSoup库。</p><p>一、获取目录</p><p>二、获取书籍列表页</p><p>三、获取书籍详情页</p><p>四、分析书籍详情页的资源地址</p><p>五、下载并保存</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>引入相应的包，设置 headerd, 和资源保存路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> Book <span class="keyword">import</span> Book</span><br><span class="line"></span><br><span class="line">savepath=<span class="string">"J://kgbook//books//"</span> <span class="comment">#保存地址</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">main_url=<span class="string">'https://kgbook.com/'</span></span><br><span class="line">bookcount=<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="一、获取目录"><a href="#一、获取目录" class="headerlink" title="一、获取目录"></a>一、获取目录</h1><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E7%9B%AE%E5%BD%95.png" alt="获取目录"><br>通过浏览器的调试工具可以看到目录在id=catagory的div标签下，下面还有ul和li标签，那我们可以迭代li可以获得目录及目录页的地址。<br>可以通过soup.find_all(attrs={‘id’: ‘category’})[0].ul 获取 到ul标签，然后获取ul的li标签，进行迭代获取。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">获取目录</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcategory</span><span class="params">()</span>:</span></span><br><span class="line">    req_result=requests.get(main_url,headers=headers)</span><br><span class="line">    <span class="keyword">if</span> req_result.status_code==<span class="number">200</span>:</span><br><span class="line">        htmlstr=req_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        soup = BeautifulSoup(htmlstr, <span class="string">'lxml'</span>)</span><br><span class="line">        categorys=soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'category'</span>&#125;)[<span class="number">0</span>].ul</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> categorys.find_all(name=<span class="string">'li'</span>):</span><br><span class="line">            print(<span class="string">'开始抓取'</span>+li.a.attrs[<span class="string">'href'</span>]+<span class="string">"--"</span>+li.string)</span><br><span class="line">            getcategroydetail(main_url+li.a.attrs[<span class="string">'href'</span>],li.string)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="二、获取书籍列表页"><a href="#二、获取书籍列表页" class="headerlink" title="二、获取书籍列表页"></a>二、获取书籍列表页</h1><p>在书籍列表页，我们要获取两个信息，分别是书籍列表的信息及翻页下一页书籍列表的URL地址。<br>通过浏览器的调试工具分别对列表的信息及翻页下一页的html进行分析。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E4%B9%A6%E7%B1%8D%E5%88%97%E8%A1%A8.png" alt="获取书籍列表页"><br>列表中的书籍详情页信息在class=”channel-item”的div标签下，通过class=”list-title”的h3标签循环迭代<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%BF%BB%E9%A1%B5.png" alt="翻页"><br>下一页，我们可以直接通过next_pag=soup.find(name=’a’,text=re.compile(‘下一页’))来获取。<br>然后我们可以通过递归来不断的调用获取下一页书籍列表页的代码，知道没有下一页为止。就可以把怎个目录都可以爬取完。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">获取书籍列表</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbookslist</span><span class="params">(bookurlstr,categroy_path)</span>:</span></span><br><span class="line">    book_result=requests.get(bookurlstr,headers=headers)</span><br><span class="line">    bookhtmlstr=book_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(bookhtmlstr, <span class="string">'lxml'</span>)</span><br><span class="line">    booklists=soup.select(<span class="string">'.channel-item'</span>)</span><br><span class="line">    <span class="keyword">for</span> bookinfo_div <span class="keyword">in</span> booklists:</span><br><span class="line">        booktitle_div=bookinfo_div.select(<span class="string">'.list-title'</span>)[<span class="number">0</span>]</span><br><span class="line">        bookurl=booktitle_div.a.attrs[<span class="string">'href'</span>]</span><br><span class="line">        getbookdetail(bookurl,categroy_path)</span><br><span class="line">    next_pag=soup.find(name=<span class="string">'a'</span>,text=re.compile(<span class="string">'下一页'</span>))</span><br><span class="line">    <span class="keyword">if</span> next_pag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        next_url=next_pag.attrs[<span class="string">'href'</span>]</span><br><span class="line">        print(<span class="string">'爬取下一页：'</span>+next_url)</span><br><span class="line">        getbookslist(next_url,categroy_path)</span><br></pre></td></tr></table></figure><h1 id="三、获取书籍详情页"><a href="#三、获取书籍详情页" class="headerlink" title="三、获取书籍详情页"></a>三、获取书籍详情页</h1><p>我们要在书籍详情页需要获得书籍详情信息包括书名、作者等信息<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E4%B9%A6%E7%B1%8D%E8%AF%A6%E6%83%85.png" alt="书籍详情"><br>关于书名和作者可以分别通过提取class=”news_title”的h1标签和id=”news_details”的div下的ul下的li再通过正则表达式对作者信息进行提取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">booktitle=bookdetailsoup.select(<span class="string">'.news_title'</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">bookauthor=bookdetailsoup.select(<span class="string">'#news_details'</span>)[<span class="number">0</span>].ul.li.find(text=re.compile(<span class="string">'作者：(.*?)'</span>)).strip()</span><br><span class="line">bookauthor=bookauthor.replace(<span class="string">'作者：'</span>,<span class="string">''</span>)</span><br><span class="line">booktitleinfo=<span class="string">"《"</span>+booktitle+<span class="string">'》-'</span>+bookauthor</span><br></pre></td></tr></table></figure><h1 id="四、分析书籍详情页的资源地址"><a href="#四、分析书籍详情页的资源地址" class="headerlink" title="四、分析书籍详情页的资源地址"></a>四、分析书籍详情页的资源地址</h1><p>在书籍详情页，我们还要分析书籍详情页的资源地址<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E4%B9%A6%E7%B1%8D%E8%B5%84%E6%BA%90%E5%9C%B0%E5%9D%80.png" alt="资源地址"><br>电子书的资源下载地址可以通过提取a标签的信息来获取。通过正则表达式分别匹配azw3、mobi、epub分别提取不同的电子书资源。<br>book_url_item=bookdetailsoup.find(name=’a’,text=re.compile(booktype,re.I))<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">根据书籍资源类型下载资源</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbookfortype</span><span class="params">(bookurl,categroy_path,bookdetailsoup,booktype)</span>:</span></span><br><span class="line">    booktitle=bookdetailsoup.select(<span class="string">'.news_title'</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">    bookauthor=bookdetailsoup.select(<span class="string">'#news_details'</span>)[<span class="number">0</span>].ul.li.find(text=re.compile(<span class="string">'作者：(.*?)'</span>)).strip()</span><br><span class="line">    bookauthor=bookauthor.replace(<span class="string">'作者：'</span>,<span class="string">''</span>)</span><br><span class="line">    booktitleinfo=<span class="string">"《"</span>+booktitle+<span class="string">'》-'</span>+bookauthor</span><br><span class="line">    print(<span class="string">'书籍详情：---'</span>+booktitleinfo)</span><br><span class="line">    book_url_item=bookdetailsoup.find(name=<span class="string">'a'</span>,text=re.compile(booktype,re.I))</span><br><span class="line">    <span class="keyword">if</span> book_url_item <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        downloadurl=book_url_item.attrs[<span class="string">'href'</span>]</span><br><span class="line">        print(<span class="string">'下载地址：'</span>+downloadurl)</span><br><span class="line">        <span class="keyword">if</span> checkIfNoExistBookByUrl(downloadurl):</span><br><span class="line">            r = requests.get(downloadurl)</span><br><span class="line">            <span class="keyword">if</span> r.status_code==<span class="number">200</span>:</span><br><span class="line">                savepath=createdir(categroy_path,booktitleinfo)</span><br><span class="line">                filename=booktitle+<span class="string">"."</span>+booktype</span><br><span class="line">                savebook(r.content,savepath,filename)</span><br><span class="line">                p,f=os.path.split(categroy_path)</span><br><span class="line">                bookcategory=f</span><br><span class="line">                book=Book(bookcategory,booktitle,bookauthor,bookurl,downloadurl,savepath,<span class="string">"苦瓜书盘"</span>,booktype)</span><br><span class="line">                print(book.toString())</span><br><span class="line">                savebooktojson(book)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'下载失败：status_code='</span>+str(r.status_code))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没有'</span>+booktype+<span class="string">'格式的书'</span>)</span><br></pre></td></tr></table></figure><p>五、下载并保存<br>有了资源的下载资源后下载就变得很简单了，主要用python的os库，对文件进行操作，包括建目录及保存资源文件。也可以通过连接数据库将爬取的数据保存到数据库。<br>定义书籍类Book用于组织和保存数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,bookcategory,bookname,bookauthor,bookurl,bookdownloadurl,booksavepath,booksource,booktype)</span>:</span></span><br><span class="line">        self.bookcategory=bookcategory</span><br><span class="line">        self.bookname=bookname</span><br><span class="line">        self.bookauthor=bookauthor</span><br><span class="line">        self.bookurl=bookurl</span><br><span class="line">        self.bookdownloadurl=bookdownloadurl</span><br><span class="line">        self.booksavepath=booksavepath</span><br><span class="line">        self.booksource=booksource</span><br><span class="line">        self.booktype=booktype</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toString</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"bookcategory"</span>:self.bookcategory,<span class="string">"bookname"</span>:self.bookname,<span class="string">"bookauthor"</span>:self.bookauthor,<span class="string">"bookurl"</span>:self.bookurl,<span class="string">"bookdownloadurl"</span>:self.bookdownloadurl,<span class="string">"booksavepath"</span>:self.booksavepath,<span class="string">"booksource"</span>:self.booksource,<span class="string">"booktype"</span>:self.booktype&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">将获取的信息保存至文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savebooktojson</span><span class="params">(book)</span>:</span></span><br><span class="line">    bookdata=&#123;</span><br><span class="line">        <span class="string">'booksource'</span>:book.booksource,</span><br><span class="line">        <span class="string">'booktype'</span>:book.booktype,</span><br><span class="line">        <span class="string">'bookcategory'</span>:book.bookcategory,</span><br><span class="line">        <span class="string">'bookname'</span>:book.bookname,</span><br><span class="line">        <span class="string">'bookauthor'</span>:book.bookauthor,</span><br><span class="line">        <span class="string">'bookurl'</span>:book.bookurl,</span><br><span class="line">        <span class="string">'bookdownloadurl'</span>:book.bookdownloadurl,</span><br><span class="line">        <span class="string">'booksavepath'</span>:book.booksavepath</span><br><span class="line">    &#125;</span><br><span class="line">    bookjson=json.dumps(bookdata,ensure_ascii=<span class="literal">False</span>) <span class="comment">#ensure_ascii=False 就不会用 ASCII 编码，中文就可以正常显示了</span></span><br><span class="line">    print(bookjson)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'a'</span>,encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(bookjson+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">根据目录创建文件夹</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createdir</span><span class="params">(savepath,dir)</span>:</span></span><br><span class="line">    path=os.path.join(savepath,dir)</span><br><span class="line">    isExists=os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> isExists:</span><br><span class="line">        print(<span class="string">'已经存在'</span>+dir)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'创建目录'</span>+dir)</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">下载书籍资源</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savebook</span><span class="params">(content,savepath,savefilename)</span>:</span></span><br><span class="line">    savefile=os.path.join(savepath,savefilename)</span><br><span class="line">    <span class="keyword">with</span> open(savefile, <span class="string">"wb"</span>) <span class="keyword">as</span> code:</span><br><span class="line">       code.write(content)</span><br></pre></td></tr></table></figure><hr><p>运行效果如下：</p><p>1、爬取过程<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%88%AC%E5%8F%96%E8%BF%87%E7%A8%8B.png" alt="爬取过程"><br>2、爬取记录的json信息<br>data.json的信息如下：<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%88%AC%E5%8F%96%E8%AE%B0%E5%BD%95%E7%9A%84json%E4%BF%A1%E6%81%AF.png" alt="爬取记录"><br>3、爬取获取的资源<br>按目录都已经整理好了，够你看的了。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E7%9A%84%E8%B5%84%E6%BA%90.png" alt="获取的资源"></p><p>​<br>Python爬虫获取电子书资源实战的全部代码，包括爬取-&gt;分析、解析-&gt;保存至本地及数据库。<a href="https://download.csdn.net/download/fullbug/10468606" target="_blank" rel="noopener">下载</a></p><p>​<strong>github:</strong> <a href="https://github.com/xiejava1018/getbooks" target="_blank" rel="noopener">https://github.com/xiejava1018/getbooks</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习Python，相对java来说python简单易学、语法简单，工具丰富，开箱即用，适用面广做全栈开发那是极好的，对于小型应用的开发，虽然运行效率慢点，但开发效率极高。大大提高了咱们的生产力。为什么python能够在这几年火起来，自然有他的道理，当然也受益于这几年大
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>你有了一个目标，于是你有了一堆技能，而不是反过来！</title>
    <link href="https://xiejava.gitee.io/posts/e6daf5ca/"/>
    <id>https://xiejava.gitee.io/posts/e6daf5ca/</id>
    <published>2021-11-17T01:21:04.000Z</published>
    <updated>2021-11-17T01:47:50.973Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211116/%E7%9B%AE%E6%A0%87.png" alt="目标"></p><p><strong>你有了一个目标，于是你有了一堆技能。而不是反过来！</strong><br>这应该是这段时间我领悟最深刻的一句话，是从白帽汇-赵武的微信文章中看到的。<br>我的体会是，<strong>没有一个清晰的为之努力奋斗的目标而去学东西，很难获得效果</strong>。</p><p>老实说，我并不是个懒惰的人，知道要不断的去学习、看书，来努力提升自己，但是几年下来自己的个人成长确是非常的有限，原因就是目标不明确。尤其是随着年龄的增大，面对越来越大的压力，越来越焦虑。焦虑是因为面对残酷的社会竞争压力以及对自身能力的不自信。所以很多东西都想学，机器学习、网络安全、英语、写作等等。没有明确的目标和整体的规划，只知道要学，桌上摆了很多书，今天看几页这本书，明天翻几页那本书，看上去天天在看书，实际上一本书都没有看进去。看英语的时候在想应该多花点时间看看专业书，看专业书的时候在想英语也很重要，要不看会英语。实际就是有限的时间精力和无限的需要学习的知识之间的矛盾。还有一个突出的问题就是没有明确的目标就会没有成就感，尤其是专业领域，看了很多书，不能学以致用，看了就忘，感觉就是学了个寂寞。</p><p>学习，目标非常重要，没有明确目标的学习到头来都是浪费时间。学习效果好、状态好的往往是带着明确的目标去学的。记得我才参加工作的时候做网页开发那时候啥都不懂，我的目标就是想成为一名真正的程序员。那时候BBS和聊天室很火，就想自己能够写一个BBS和聊天室，于是自己学Java、 jsp、HTML、javascript、数据库等。那时候上外网还比较奢侈，自己写了一个聊天室放到公司内网，公司几十百把号人玩得不亦乐乎。大家玩聊天室的时候还不断的给我提建议提需求，我白天上班，晚上改我的聊天室代码。看着自己的成果被别人用心里挺开心的。那段时间感觉自己成长很快，学到了很多东西。很快成为了公司主力程序员。还有个例子就是有段时间想学英语，给自己定的目标就是看完全套的《书虫》，有了目标后每天坚持看几十页，花了几个月的时间把全套的149本书虫给看完了。自己感觉还是非常的好，英语阅读能力有了一定的提升。但是这个目标实现了以后，没有重新给自己制定新的目标，所以自己的英语水平一直没有达到自己理想的状态。应该规划好终极目标、长期目标、阶段性目标，通过实现一个个小目标最终达到自己理想的终极目标。</p><p>懂得了很多大道理依旧无法过好这一生，其实就是没有一个明确的人生目标，没有一个让自己为之奋斗的目标，目标感强的人往往都会比较成功。可以说项目管理也好，个人管理也好，归根到底都是目标管理。为了实现目标、投入时间、金钱、精力等各种已有的资源，用各种手段，思考各种方法来达到目标。</p><p><strong>定方向、定目标非常重要！</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211116/%E7%9B%AE%E6%A0%87.png&quot; alt=&quot;目标&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你有了一个目标，于是你有了一堆技能
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下配置Supervisor自启动的两种方法</title>
    <link href="https://xiejava.gitee.io/posts/4ba25d97/"/>
    <id>https://xiejava.gitee.io/posts/4ba25d97/</id>
    <published>2021-11-11T06:18:19.000Z</published>
    <updated>2021-11-11T06:43:48.184Z</updated>
    
    <content type="html"><![CDATA[<p>很多网友留言问如何配置Supervisor 自启动，现将如何在CentOS7下配置Supervisor自启动的两种方法整理如下：</p><h1 id="一、方法一"><a href="#一、方法一" class="headerlink" title="一、方法一"></a>一、方法一</h1><p><strong>直接将启动命令加入到/etc/rc.d/rc.local中（简单但不推荐）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>在现有的内容后面加入supervisor的启动命令<br>supervisord -c /etc/supervisord.conf<br><img src="https://img-blog.csdnimg.cn/b7074ff6ccf146de9015d83373ef7830.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="/etc/rc.d/rc.local"><br>注意：一定要执行 chmod +x /etc/rc.d/rc.local</p><blockquote><p>chmod +x /etc/rc.d/rc.local</p></blockquote><p>给文件加入可执行权限<br>根据官方的提示，该方式是不被建议的，强烈建议创建自己的systemd services或udev规则来启动自已的应用，也就是方法二。</p><h1 id="二、方法二"><a href="#二、方法二" class="headerlink" title="二、方法二"></a>二、方法二</h1><p><strong>通过创建systemd services来实现自启动 （推荐）</strong><br>进入到/usr/lib/systemd/system/目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd /usr/lib/systemd/system/</span></span><br></pre></td></tr></table></figure><p>找到supervisord及supervisorctl命令的路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># which supervisord</span></span><br><span class="line">/usr/local/bin/supervisord</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># which supervisorctl</span></span><br><span class="line">/usr/local/bin/supervisorctl</span><br></pre></td></tr></table></figure><h2 id="创建文件supervisord-service"><a href="#创建文件supervisord-service" class="headerlink" title="创建文件supervisord.service"></a>创建文件supervisord.service</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi supervisord.service</span><br></pre></td></tr></table></figure><p>复制以下代码。注意：supervisord及supervisorctl命令的路径根据实际情况进行修改</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#supervisord.service</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Supervisor daemon</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf</span><br><span class="line">ExecStop=/usr/local/bin/supervisorctl shutdown</span><br><span class="line">ExecReload=/usr/local/bin/supervisorctl reload</span><br><span class="line">KillMode=<span class="keyword">process</span></span><br><span class="line">Restart=on<span class="literal">-failure</span></span><br><span class="line">RestartSec=<span class="number">42</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure><h2 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># systemctl enable supervisord</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/supervisord.service to /usr/lib/systemd/system/supervisord.service</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl start supervisord</span></span><br></pre></td></tr></table></figure><h2 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl status supervisord</span></span><br><span class="line">● supervisord.service - Supervisor daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/supervisord.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu <span class="number">2021</span><span class="literal">-11</span><span class="literal">-11</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">36</span> CST; <span class="number">12</span>s ago</span><br><span class="line">  <span class="keyword">Process</span>: <span class="number">3822</span> ExecStart=/usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">3850</span> (supervisord)</span><br><span class="line">   CGroup: /system.slice/supervisord.service</span><br><span class="line">           ├─<span class="number">3850</span> /usr/local/bin/python3.<span class="number">8</span> /usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf</span><br><span class="line">           ├─<span class="number">3916</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br><span class="line">           ├─<span class="number">3918</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br><span class="line">           └─<span class="number">3919</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br></pre></td></tr></table></figure><h2 id="验证一下是否为开机启动"><a href="#验证一下是否为开机启动" class="headerlink" title="验证一下是否为开机启动"></a>验证一下是否为开机启动</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># systemctl is-enabled supervisord</span></span><br><span class="line">enabled</span><br></pre></td></tr></table></figure><p>reboot重启服务器后，可以发现supervisor随服务器启动后自动启动了。</p><p><strong>至此，本文介绍了CentOS7下配置Supervisor自启动的两种方法，推荐使用第二中方式。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多网友留言问如何配置Supervisor 自启动，现将如何在CentOS7下配置Supervisor自启动的两种方法整理如下：&lt;/p&gt;
&lt;h1 id=&quot;一、方法一&quot;&gt;&lt;a href=&quot;#一、方法一&quot; class=&quot;headerlink&quot; title=&quot;一、方法一&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维" scheme="https://xiejava.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
