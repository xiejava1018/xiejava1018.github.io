<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieJava&#39;s blog</title>
  
  <subtitle>记录最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiejava.gitee.io/"/>
  <updated>2021-11-17T01:41:09.635Z</updated>
  <id>https://xiejava.gitee.io/</id>
  
  <author>
    <name>XieJava</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021-11-17-你有了一个目标，于是你有了一堆技能，而不是反过来！</title>
    <link href="https://xiejava.gitee.io/posts/e6daf5ca/"/>
    <id>https://xiejava.gitee.io/posts/e6daf5ca/</id>
    <published>2021-11-17T01:21:04.000Z</published>
    <updated>2021-11-17T01:41:09.635Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211116/%E7%9B%AE%E6%A0%87.png" alt="目标"></p><p><strong>你有了一个目标，于是你有了一堆技能。而不是反过来！</strong><br>这应该是这段时间我领悟最深刻的一句话，是从白帽汇-赵武的微信文章中看到的。<br>我的体会是，<strong>没有一个清晰的为之努力奋斗的目标而去学东西，很难获得效果</strong>。</p><p>老实说，我并不是个懒惰的人，知道要不断的去学习、看书，来努力提升自己，但是几年下来自己的个人成长确是非常的有限，原因就是目标不明确。尤其是随着年龄的增大，面对越来越大的压力，越来越焦虑。焦虑是因为面对残酷的社会竞争压力以及对自身能力的不自信。所以很多东西都想学，机器学习、网络安全、英语、写作等等。没有明确的目标和整体的规划，只知道要学，桌上摆了很多书，今天看几页这本书，明天翻几页那本书，看上去天天在看书，实际上一本书都没有看进去。看英语的时候在想应该多花点时间看看专业书，看专业书的时候在想英语也很重要，要不看会英语。实际就是有限的时间精力和无限的需要学习的知识之间的矛盾。还有一个突出的问题就是没有明确的目标就会没有成就感，尤其是专业领域，看了很多书，不能学以致用，看了就忘，感觉就是学了个寂寞。</p><p>学习，目标非常重要，没有明确目标的学习到头来都是浪费时间。学习效果好、状态好的往往是带着明确的目标去学的。记得我才参加工作的时候做网页开发那时候啥都不懂，我的目标就是想成为一名真正的程序员。那时候BBS和聊天室很火，就想自己能够写一个BBS和聊天室，于是自己学Java、 jsp、HTML、javascript、数据库等。那时候上外网还比较奢侈，自己写了一个聊天室放到公司内网，公司几十百把号人玩得不亦乐乎。大家玩聊天室的时候还不断的给我提建议提需求，我白天上班，晚上改我的聊天室代码。看着自己的成果被别人用心里挺开心的。那段时间感觉自己成长很快，学到了很多东西。很快成为了公司主力程序员。还有个例子就是有段时间想学英语，给自己定的目标就是看完全套的《书虫》，有了目标后每天坚持看几十页，花了几个月的时间把全套的149本书虫给看完了。自己感觉还是非常的好，英语阅读能力有了一定的提升。但是这个目标实现了以后，没有重新给自己制定新的目标，所以自己的英语水平一直没有达到自己理想的状态。应该规划好终极目标、长期目标、阶段性目标，通过实现一个个小目标最终达到自己理想的终极目标。</p><p>懂得了很多大道理依旧无法过好这一生，其实就是没有一个明确的人生目标，没有一个让自己为之奋斗的目标，目标感强的人往往都会比较成功。可以说项目管理也好，个人管理也好，归根到底都是目标管理。为了实现目标、投入时间、金钱、精力等各种已有的资源，用各种手段，思考各种方法来达到目标。</p><p><strong>定方向、定目标非常重要！</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211116/%E7%9B%AE%E6%A0%87.png&quot; alt=&quot;目标&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你有了一个目标，于是你有了一堆技能
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下配置Supervisor自启动的两种方法</title>
    <link href="https://xiejava.gitee.io/posts/4ba25d97/"/>
    <id>https://xiejava.gitee.io/posts/4ba25d97/</id>
    <published>2021-11-11T06:18:19.000Z</published>
    <updated>2021-11-11T06:43:48.184Z</updated>
    
    <content type="html"><![CDATA[<p>很多网友留言问如何配置Supervisor 自启动，现将如何在CentOS7下配置Supervisor自启动的两种方法整理如下：</p><h1 id="一、方法一"><a href="#一、方法一" class="headerlink" title="一、方法一"></a>一、方法一</h1><p><strong>直接将启动命令加入到/etc/rc.d/rc.local中（简单但不推荐）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>在现有的内容后面加入supervisor的启动命令<br>supervisord -c /etc/supervisord.conf<br><img src="https://img-blog.csdnimg.cn/b7074ff6ccf146de9015d83373ef7830.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="/etc/rc.d/rc.local"><br>注意：一定要执行 chmod +x /etc/rc.d/rc.local</p><blockquote><p>chmod +x /etc/rc.d/rc.local</p></blockquote><p>给文件加入可执行权限<br>根据官方的提示，该方式是不被建议的，强烈建议创建自己的systemd services或udev规则来启动自已的应用，也就是方法二。</p><h1 id="二、方法二"><a href="#二、方法二" class="headerlink" title="二、方法二"></a>二、方法二</h1><p><strong>通过创建systemd services来实现自启动 （推荐）</strong><br>进入到/usr/lib/systemd/system/目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd /usr/lib/systemd/system/</span></span><br></pre></td></tr></table></figure><p>找到supervisord及supervisorctl命令的路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># which supervisord</span></span><br><span class="line">/usr/local/bin/supervisord</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># which supervisorctl</span></span><br><span class="line">/usr/local/bin/supervisorctl</span><br></pre></td></tr></table></figure><h2 id="创建文件supervisord-service"><a href="#创建文件supervisord-service" class="headerlink" title="创建文件supervisord.service"></a>创建文件supervisord.service</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi supervisord.service</span><br></pre></td></tr></table></figure><p>复制以下代码。注意：supervisord及supervisorctl命令的路径根据实际情况进行修改</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#supervisord.service</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Supervisor daemon</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf</span><br><span class="line">ExecStop=/usr/local/bin/supervisorctl shutdown</span><br><span class="line">ExecReload=/usr/local/bin/supervisorctl reload</span><br><span class="line">KillMode=<span class="keyword">process</span></span><br><span class="line">Restart=on<span class="literal">-failure</span></span><br><span class="line">RestartSec=<span class="number">42</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure><h2 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># systemctl enable supervisord</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/supervisord.service to /usr/lib/systemd/system/supervisord.service</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl start supervisord</span></span><br></pre></td></tr></table></figure><h2 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl status supervisord</span></span><br><span class="line">● supervisord.service - Supervisor daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/supervisord.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu <span class="number">2021</span><span class="literal">-11</span><span class="literal">-11</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">36</span> CST; <span class="number">12</span>s ago</span><br><span class="line">  <span class="keyword">Process</span>: <span class="number">3822</span> ExecStart=/usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">3850</span> (supervisord)</span><br><span class="line">   CGroup: /system.slice/supervisord.service</span><br><span class="line">           ├─<span class="number">3850</span> /usr/local/bin/python3.<span class="number">8</span> /usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf</span><br><span class="line">           ├─<span class="number">3916</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br><span class="line">           ├─<span class="number">3918</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br><span class="line">           └─<span class="number">3919</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br></pre></td></tr></table></figure><h2 id="验证一下是否为开机启动"><a href="#验证一下是否为开机启动" class="headerlink" title="验证一下是否为开机启动"></a>验证一下是否为开机启动</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># systemctl is-enabled supervisord</span></span><br><span class="line">enabled</span><br></pre></td></tr></table></figure><p>reboot重启服务器后，可以发现supervisor随服务器启动后自动启动了。</p><p><strong>至此，本文介绍了CentOS7下配置Supervisor自启动的两种方法，推荐使用第二中方式。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多网友留言问如何配置Supervisor 自启动，现将如何在CentOS7下配置Supervisor自启动的两种方法整理如下：&lt;/p&gt;
&lt;h1 id=&quot;一、方法一&quot;&gt;&lt;a href=&quot;#一、方法一&quot; class=&quot;headerlink&quot; title=&quot;一、方法一&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维" scheme="https://xiejava.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python通过GeoIP获取IP信息（国家、城市、经纬度等）</title>
    <link href="https://xiejava.gitee.io/posts/2c5697c0/"/>
    <id>https://xiejava.gitee.io/posts/2c5697c0/</id>
    <published>2021-11-10T02:24:01.000Z</published>
    <updated>2021-11-10T02:30:26.276Z</updated>
    
    <content type="html"><![CDATA[<p>IP地址信息是非常重要的情报信息，通过IP可以定位到该IP所在的国家、城市、经纬度等。<br>获取IP信息的方式有很多，很多服务商都提供了相应的地址库或API接口服务。<br>如国内的ipip.net，国外的ip-api.com、maxmind.com等。<br>很多公司都是使用Maxmind网站的IP信息库，里面包含着IP的详细信息，有付费的也有免费的，收费与免费的区别就是精准度和覆盖率。</p><p>本文介绍下载及定时更新Maxmind的离线库用python通过GeoIP来获取IP信息 </p><h1 id="一、下载GeoLite2离线地址库"><a href="#一、下载GeoLite2离线地址库" class="headerlink" title="一、下载GeoLite2离线地址库"></a>一、下载GeoLite2离线地址库</h1><h2 id="1、注册及申请License-Key"><a href="#1、注册及申请License-Key" class="headerlink" title="1、注册及申请License Key"></a>1、注册及申请License Key</h2><p>下载地址库之前先要在Maxmind网站注册同意相应的协议并登陆。</p><h3 id="1）注册"><a href="#1）注册" class="headerlink" title="1）注册"></a>1）注册</h3><p>访问 <a href="https://dev.maxmind.com/geoip/geolite2-free-geolocation-data" target="_blank" rel="noopener">https://dev.maxmind.com/geoip/geolite2-free-geolocation-data</a><br><img src="https://img-blog.csdnimg.cn/e4fcf9f4aa7a49888805da7ac7be650b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmiand注册导航"><br>点击”Sign Up for GeoLite2” 根据输入框进行注册<br><img src="https://img-blog.csdnimg.cn/1a9dbfe1d10747caaf22179dac0fb077.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmiand注册表单"><br>注意邮箱一定要正确，注册后会发邮件进行确认及修改密码。<br>根据注册的用户名和修改后的密码登陆就可以直接下载离线包了。<br><img src="https://img-blog.csdnimg.cn/358c4741c75544e1a3d3761fdd337274.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmind账号信息"><br>点击”Download Databases”进入到下载页面，可以看到提供了CSV及mmdb两种格式的离线库包，最近的更新时间为2021年11月02日。<br><img src="https://img-blog.csdnimg.cn/9196090e03384dc99cfd3d6b5c37627d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="MaxmiandGeoLite2地址库下载"><br>由于IP地址信息是经常有变化的，Maxmind提供了geoipupdate工具来更新离线地址包。该工具使用需要申请账号和License Key</p><h3 id="2）申请License-Key"><a href="#2）申请License-Key" class="headerlink" title="2）申请License Key"></a>2）申请License Key</h3><p>还是通过刚注册的引导页面，点击“Generate a License Key”<br><img src="https://img-blog.csdnimg.cn/1386d73167524690bca90a8118bff1f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmind生成License导航页"><br>进如到页面后，点击“Generate new license key”<br><img src="https://img-blog.csdnimg.cn/aa44150be07a4bdcbbf0d7fe48c1d0ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Generate new license key"><br><img src="https://img-blog.csdnimg.cn/a1865478abf74092b903b3c060f8b3ac.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="License Key生成确定页"><br>点击确定以后就会生成账号及License key<br><img src="https://img-blog.csdnimg.cn/4eef17f7d1224c279c78b5730d1e2e43.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="License key生成"></p><h2 id="2、下载并配置geoipupdate"><a href="#2、下载并配置geoipupdate" class="headerlink" title="2、下载并配置geoipupdate"></a>2、下载并配置geoipupdate</h2><p><a href="https://github.com/maxmind/geoipupdate" target="_blank" rel="noopener">https://github.com/maxmind/geoipupdate</a><br>这里有详细的安安装及配置说明</p><p>发行版本下载地址 <a href="https://github.com/maxmind/geoipupdate/releases" target="_blank" rel="noopener">https://github.com/maxmind/geoipupdate/releases</a><br><img src="https://img-blog.csdnimg.cn/44213d6d1dc74e1b871e3327958fe2f9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>可以看到提供了各种平台的版本的下载链接，这里我们下载安装的是linux版本，点击下载“geoipupdate_4.8.0_linux_amd64.tar.gz”<br>在home目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/maxmind/geoipupdate/releases/download/v4.<span class="number">8.0</span>/geoipupdate_4.<span class="number">8.0</span>_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>下载至home目录</p><p>tar -zxvf geoipupdate_4.8.0_linux_amd64.tar.gz 进行解压<br>cd geoipupdate_4.8.0_linux_amd64  目录执行ls -alh查看目录内容，发现有两个关键文件，一个是getipupdate命令执行文件，一个是GeoIP.conf配置文件<br><img src="https://img-blog.csdnimg.cn/e20bf57c217b483f938271233b52c40c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="geoipupdate目录"></p><p>将执行命令拷贝到命令文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp geoipupdate /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><p>geoipupdate命令读配置文件默认为/usr/local/etc/GeoIP.conf将配置文件拷贝到/usr/local/etc/下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp GeoIP.conf /usr/<span class="built_in">local</span>/etc/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/etc/GeoIP.conf</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa5ec95685da4abd9cb3edfa24ea4375.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改GeoIP.conf"><br>如上图修改离线库文件目录及账号、LicenseKey，AccountID和LicenseKey就是开始在Maxmind网站上申请的。</p><h2 id="3、运行geoipupdate命令并加入定时任务"><a href="#3、运行geoipupdate命令并加入定时任务" class="headerlink" title="3、运行geoipupdate命令并加入定时任务"></a>3、运行geoipupdate命令并加入定时任务</h2><p>执行geoipupdate命令，在目录下面产生了GeoLite2-City.mmdb、GeoLite2-Country.mmdb两个离线库文件。<br><img src="https://img-blog.csdnimg.cn/9d1249f69cf84d9c90b690ca3efaa35c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="GeoLite2离线库文件"><br>创建Linux定时任务，每周自动更新一下离线库文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab <span class="literal">-e</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> * * <span class="number">0</span> /usr/local/bin/geoipupdate</span><br></pre></td></tr></table></figure><h1 id="二、通过Python调用GeoIP获取IP信息"><a href="#二、通过Python调用GeoIP获取IP信息" class="headerlink" title="二、通过Python调用GeoIP获取IP信息"></a>二、通过Python调用GeoIP获取IP信息</h1><p>默认已经安装好了Flask环境，并激活了python虚拟环境。激活python虚拟环境安装Flask教程见<a href="http://xiejava.ishareread.com/posts/7f405b25/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/7f405b25/</a></p><h2 id="1、安装geoip2"><a href="#1、安装geoip2" class="headerlink" title="1、安装geoip2"></a>1、安装geoip2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install geoip2</span><br></pre></td></tr></table></figure><h2 id="2、编写hello-py调用geoip2"><a href="#2、编写hello-py调用geoip2" class="headerlink" title="2、编写hello.py调用geoip2"></a>2、编写hello.py调用geoip2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hello.py</span><br></pre></td></tr></table></figure><p>复制以下代码到hello.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> geoip2.database</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">reader=geoip2.database.Reader(<span class="string">'/home/geoipupdate_4.8.0_linux_amd64/GeoLite2-City.mmdb'</span>)</span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/getip/&lt;ip&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getip</span><span class="params">(ip)</span>:</span></span><br><span class="line">    ipinfo=reader.city(ip)</span><br><span class="line">    ipinfo_json=&#123;<span class="string">'country'</span>:ipinfo.country.name,<span class="string">'city'</span>:ipinfo.city.name,<span class="string">'location'</span>:[ipinfo.location.longitude,ipinfo.location.latitude]&#125;</span><br><span class="line">    <span class="keyword">return</span> ipinfo_json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="3、运行hello-py"><a href="#3、运行hello-py" class="headerlink" title="3、运行hello.py"></a>3、运行hello.py</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># python hello.py</span></span><br><span class="line"> * Serving Flask app <span class="string">'hello'</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on all addresses.</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line"> * Running on http://<span class="number">192.168</span>.<span class="number">1.18</span>:<span class="number">8080</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>注意：如果linux开启了防火墙请关闭防火墙，或放开192.168.1.18</p><h2 id="4、验证"><a href="#4、验证" class="headerlink" title="4、验证"></a>4、验证</h2><p>通过浏览器访问 <a href="http://192.168.1.18:8080/getip/128.101.101.101" target="_blank" rel="noopener">http://192.168.1.18:8080/getip/128.101.101.101</a><br><img src="https://img-blog.csdnimg.cn/4cf63aac6b78465d836a6df9ccb5b4a9.png#pic_center" alt="验证IP信息"><br>可以看到返回IP的国家、城市、经纬度等信息。</p><p><strong>至此，本文介绍了如何注册并下载GeoIP离线数据包，并通过官方提供的geoipupdate进行定期更新数据。还介绍了如何通过Python调用GeoIP获取IP信息。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IP地址信息是非常重要的情报信息，通过IP可以定位到该IP所在的国家、城市、经纬度等。&lt;br&gt;获取IP信息的方式有很多，很多服务商都提供了相应的地址库或API接口服务。&lt;br&gt;如国内的ipip.net，国外的ip-api.com、maxmind.com等。&lt;br&gt;很多公司都
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境搭建</title>
    <link href="https://xiejava.gitee.io/posts/7f405b25/"/>
    <id>https://xiejava.gitee.io/posts/7f405b25/</id>
    <published>2021-11-05T15:38:53.000Z</published>
    <updated>2021-11-05T15:50:13.719Z</updated>
    
    <content type="html"><![CDATA[<p>在生产环境中通常用uwsgi作为Flask的web服务网关，通过nginx反向代理进行负载均衡，通过supervior进行服务进行的管理。这一套搭下来还是有一些坑要踩，本文通过一个简单的Flask web应用记录了CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境搭建的全过程，以及一些注意事项，以免遗忘。</p><h1 id="一、Python3环境安装"><a href="#一、Python3环境安装" class="headerlink" title="一、Python3环境安装"></a>一、Python3环境安装</h1><p>CentOS7下Python3环境安装参考 <a href="http://xiejava.ishareread.com/posts/57cef505/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/57cef505/</a></p><p>查看python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># python -V</span></span><br><span class="line">Python 3.8.12</span><br></pre></td></tr></table></figure><h1 id="二、安装Flask"><a href="#二、安装Flask" class="headerlink" title="二、安装Flask"></a>二、安装Flask</h1><h2 id="1、创建Python虚拟环境"><a href="#1、创建Python虚拟环境" class="headerlink" title="1、创建Python虚拟环境"></a>1、创建Python虚拟环境</h2><p>在home目录下创建flask_web目录（目录根据具体实际环境创建，本教程是/home/flask_web）<br>通过venv创建虚拟环境<br>[root@localhost flask_web]# python -m venv /home/flask_web<br>创建成功后可以看到在目录下自动建了一些文件夹，包括python命令及依赖库等，激活以后是个独立的python虚拟运行环境。<br><img src="https://img-blog.csdnimg.cn/8ad5311fc3254fefa6739c76f067b8ad.png#pic_center" alt="python虚拟运行环境"></p><p>在目录下运行source bin/activate 激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost flask_web]<span class="comment"># source bin/activate</span></span><br><span class="line">(flask_web) [root@localhost flask_web]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="2、安装Flask"><a href="#2、安装Flask" class="headerlink" title="2、安装Flask"></a>2、安装Flask</h2><p>通过pip install flask安装flask</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># pip install flask</span></span><br></pre></td></tr></table></figure><p>安装的时候有可能报ModuleNotFoundError: No module named ‘_ctypes’的错误，原因是缺少libffi-devel包，具体可参考 <a href="https://blog.csdn.net/qq_36416904/article/details/79316972" target="_blank" rel="noopener">https://blog.csdn.net/qq_36416904/article/details/79316972</a><br><img src="https://img-blog.csdnimg.cn/3d4cc5ba51234b399e59ffb1e66aa0b3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="安装Flask报错"></p><p>运行yum install libffi-devel -y 并且要重新编译执行安装python<br>解决包依赖的问题<br>(flask_web) [root@localhost flask_web]# yum install libffi-devel -y<br>进入到python源码包目录 执行使用make&amp;make install 命令重新编译并安装python（这里比较坑）<br>然后再pip install flask 进行安装<br>安装完成后可以尝试运行flask run，提示没有Flask应用程序，说明flask已经安装成功并且可以运行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># flask run</span></span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line">Usage: flask run [OPTIONS]</span><br><span class="line">Try <span class="string">'flask run --help'</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">Error: Could not locate a Flask application. You did not provide the <span class="string">"FLASK_APP"</span> environment variable, and a <span class="string">"wsgi.py"</span> or <span class="string">"app.py"</span> module was not found <span class="keyword">in</span> the current directory.</span><br></pre></td></tr></table></figure><p>3、建立测试应用<br>vi hello.py创建一个hello.py的文件，copy下面的内容到文件中:wq保存退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>通过python hello.py运行测试程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># python hello.py</span></span><br><span class="line"> * Serving Flask app <span class="string">'hello'</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>新开一个shell窗口执行curl <a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a> 可以看到有Hello World返回说明应用在flask框架下运行没有问题。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># curl http://127.0.0.1:5000/</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="三、安装及配置uwsgi"><a href="#三、安装及配置uwsgi" class="headerlink" title="三、安装及配置uwsgi"></a>三、安装及配置uwsgi</h1><p>uWSGI是一个Web Server，并且独占uwsgi协议，但是同时支持WSGI协议、HTTP协议等，它的功能是把HTTP协议转化成语言支持的网络协议供python使用。有点类似于Java的web服务容器中间件tomcat</p><h2 id="1、安装uwsgi"><a href="#1、安装uwsgi" class="headerlink" title="1、安装uwsgi"></a>1、安装uwsgi</h2><p>通过pip命令安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># pip install uwsgi</span></span><br></pre></td></tr></table></figure><p>如果顺利的话会显示Successfully installed uwsgi-2.0.20，表示安装成功了。</p><h2 id="2、配置uwsgi"><a href="#2、配置uwsgi" class="headerlink" title="2、配置uwsgi"></a>2、配置uwsgi</h2><p>新建一个uwsgi.ini配置文件，并将配置信息复制到配置文件<br>vi uwsgi.ini </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment">#http=127.0.0.1:3366  #如果是http,通过proxy_pass http链接</span></span><br><span class="line">socket=127.0.0.1:3366 <span class="comment">#如果是socket，通过nginx配置uwsgi_pass socket链接</span></span><br><span class="line">wsgi-file=/home/flask_web/hello.py</span><br><span class="line">callable=app</span><br><span class="line">touch-reload=/home/flask_web/</span><br><span class="line"><span class="comment">#最大请求数，最多请求5000次就重启进程，以防止内存泄漏</span></span><br><span class="line">max-requests=5000</span><br><span class="line"><span class="comment">#请求超时时间，超过60秒关闭请求</span></span><br><span class="line">harakiri=60</span><br><span class="line"><span class="comment">#进程的数量</span></span><br><span class="line">processes=1</span><br><span class="line"><span class="comment">#线程数</span></span><br><span class="line">threads = 2</span><br><span class="line"><span class="comment">#记录pid的文件</span></span><br><span class="line">pidfile=/home/flask_web/uwsgi.pid</span><br><span class="line">buffer-size = 32768</span><br><span class="line"><span class="comment">#日志最大50M</span></span><br><span class="line"><span class="built_in">log</span>-maxsize=50000000</span><br><span class="line"><span class="comment">#配置虚拟环境路径，如果是在虚拟环境下启动，这个一定要配，不配会有些包找不到，应用会报错。可以在uwsgi.log文件中看报错信息</span></span><br><span class="line">virtualenv =/home/flask_web</span><br><span class="line"><span class="comment">#uwsgi日志文件，如果是通过supervisor托管，daemonize配置需要屏蔽</span></span><br><span class="line"><span class="comment">#daemonize=/home/flask_web/uwsgi.log</span></span><br><span class="line"><span class="comment">#项目更新后，自动加载</span></span><br><span class="line">python-autoreload=1</span><br><span class="line"><span class="comment">#状态检测地址</span></span><br><span class="line">stats = 127.0.0.1:9191</span><br></pre></td></tr></table></figure><h2 id="3、运行uwsgi"><a href="#3、运行uwsgi" class="headerlink" title="3、运行uwsgi"></a>3、运行uwsgi</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># uwsgi --ini /home/flask_web/uwsgi.ini</span></span><br></pre></td></tr></table></figure><p>启动以后通过访问curl <a href="http://127.0.0.1:3366" target="_blank" rel="noopener">http://127.0.0.1:3366</a> 有Hello World!的返回信息表示uwsgi已经成功启动，并且应用程序正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost flask_web]<span class="comment"># curl http://127.0.0.1:3366</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="四、配置Nginx反向代理"><a href="#四、配置Nginx反向代理" class="headerlink" title="四、配置Nginx反向代理"></a>四、配置Nginx反向代理</h1><p>ps -ef|grep nginx 找到nginx的配置文件<br><img src="https://img-blog.csdnimg.cn/70323a6952c9414daad6f80370ea9f94.png#pic_center" alt="nginx配置文件"><br>如果uwsgi配置的是socket连接<br>[uwsgi]<br>socket=127.0.0.1:3366 #如果是socket，通过nginx配置uwsgi_pass socket链接<br>nginx的server配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 808;</span><br><span class="line">     server_name localhost;</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">          include uwsgi_params;</span><br><span class="line">          uwsgi_pass 127.0.0.1:3366;</span><br><span class="line">      &#125;</span><br><span class="line">      access_log /home/flask_web/access.log;</span><br><span class="line">      error_log /home/flask_web/error.log;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果uwsgi配置的是http<br>[uwsgi]<br>http=127.0.0.1:3366  #如果是http,通过proxy_pass http链接<br>nginx的server配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen 808;</span><br><span class="line">      server_name localhost;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:3366;</span><br><span class="line">       &#125;</span><br><span class="line">       access_log /home/flask_web/access.log;</span><br><span class="line">       error_log /home/flask_web/error.log;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>重新加载nginx配置后，通过浏览器访问可以正常显示访问结果</p><h1 id="五、通过Supervisor进行进程托管"><a href="#五、通过Supervisor进行进程托管" class="headerlink" title="五、通过Supervisor进行进程托管"></a>五、通过Supervisor进行进程托管</h1><p>生产环境中，可以通过supervisor来进行uwsgi和nginx进程的托管，界面化的方式管理uwsgi和nginx，包括进程的监控、启停等。</p><h2 id="1、安装supervisor"><a href="#1、安装supervisor" class="headerlink" title="1、安装supervisor"></a>1、安装supervisor</h2><p>通过pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>离线安装请参考：<a href="http://xiejava.ishareread.com/posts/d670c9b8/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/d670c9b8/</a></p><h2 id="2、配置supervisor"><a href="#2、配置supervisor" class="headerlink" title="2、配置supervisor"></a>2、配置supervisor</h2><p>找到supervisord的安装目录在/usr/local/bin下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># which supervisord</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/supervisord</span><br></pre></td></tr></table></figure><p>cd到/usr/local/bin目录下<br>通过echo_supervisord_conf &gt; supervisord.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># echo_supervisord_conf &gt; supervisord.conf</span></span><br></pre></td></tr></table></figure><p>可以看到生成了一个supervisord.conf的配置文件。<br>将生成的supervisord.conf配置文件放到/etc/目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv supervisord.conf /etc/</span><br></pre></td></tr></table></figure><p>修改supervisord.conf的配置文件，主要是将子配置文件路径开启并指定配置文件路径，按照惯例将配置文件放到/etc目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisord.d/*.ini</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/049f24f7b6c54c0a892b5075f3921edc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="supervisord.conf配置文件"></p><p>我们在/etc目录下建个supervisord.d目录用来保存supervisor托管进程的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/</span></span><br><span class="line">[root@localhost etc]<span class="comment"># mkdir supervisord.d</span></span><br></pre></td></tr></table></figure><p>建立并配置子配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># cd supervisord.d/</span></span><br><span class="line">[root@localhost supervisord.d]<span class="comment"># vi uwsgi.ini</span></span><br></pre></td></tr></table></figure><p>复制以下内容至uwsgi.ini文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[program:uwsgi]</span><br><span class="line"><span class="built_in">command</span> =uwsgi --ini /home/flask_web/uwsgi.ini</span><br><span class="line">directory=/home/flask_web</span><br><span class="line">startsecs=10</span><br><span class="line">startretries=5</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/home/flask_web/uwsgi_sup_log.log</span><br><span class="line">stdout_logfile_maxbytes=10MB</span><br><span class="line">user=root</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3、启动supervisor"><a href="#3、启动supervisor" class="headerlink" title="3、启动supervisor"></a>3、启动supervisor</h2><p>在启动supervisor拉起uwsgi前两个注意事项</p><p>1) uwsgi的配置文件中daemonize一定要屏蔽掉，否则守护进程一直会重启，导致端口每次都被占用，Supervisor托管不了。<br><img src="https://img-blog.csdnimg.cn/8eef8e8552e047e79a9c3443074cd2cb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="uwsgi.ini"><br>2) 在启动之前先将已经启动的uwsgi进程停掉，否则通过supervisor拉起uwsgi进程时端口冲突<br><img src="https://img-blog.csdnimg.cn/60fda7586d9a430f8cc5febda83cdad9.png#pic_center" alt="kill uwsgi进程"></p><p>启动supervisord进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure><p>修改配置文件后重新加载可以通过 supervisorctl reload 命令重新加载<br>查看supervisor托管状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost supervisord.d]<span class="comment"># supervisorctl status</span></span><br><span class="line">uwsgi                            STARTING</span><br></pre></td></tr></table></figure><p>可以看到uwsgi被supervisor托管并已经启动。如果需要通过supervisor的web控制界面进行进程的管理。需要修改/etc/supervisord.conf的配置文件将访问的IP地址限制放开，设置用户名、口令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=*:9001        ; ip_address:port specifier, *:port <span class="keyword">for</span> all iface</span><br><span class="line">username=user              ; default is no username (open server)</span><br><span class="line">password=user@123               ; default is no password (open server)</span><br></pre></td></tr></table></figure><p>重新启动supervisor，重启时会报需要验证的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost supervisord.d]<span class="comment"># supervisorctl shutdown</span></span><br><span class="line">Server requires authentication</span><br><span class="line">error: &lt;class <span class="string">'xmlrpc.client.ProtocolError'</span>&gt;, &lt;ProtocolError <span class="keyword">for</span> 127.0.0.1/RPC2: 401 Unauthorized&gt;: file: /usr/<span class="built_in">local</span>/lib/python3.8/site-packages/supervisor/xmlrpc.py line: 542</span><br></pre></td></tr></table></figure><p>可以直接kill -9杀掉supervisor的进程再启动，也可以通过supervisorctl 输入用户名、口令通过shutdown然后再重启。<br>启动命令：supervisord -c /etc/supervisord.conf</p><p>这时就可以通过supervisor的web控制界面进行进程的管理了。<br><img src="https://img-blog.csdnimg.cn/fdda8d39fb0343d0b7a7a570c2b1256f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Supervisor"><br><strong>至此，CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境全部搭建好了。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在生产环境中通常用uwsgi作为Flask的web服务网关，通过nginx反向代理进行负载均衡，通过supervior进行服务进行的管理。这一套搭下来还是有一些坑要踩，本文通过一个简单的Flask web应用记录了CentOS7下python3+Flask+uWSGI+Ng
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下安装python3.8</title>
    <link href="https://xiejava.gitee.io/posts/57cef505/"/>
    <id>https://xiejava.gitee.io/posts/57cef505/</id>
    <published>2021-11-04T09:21:57.000Z</published>
    <updated>2021-11-04T10:24:15.092Z</updated>
    
    <content type="html"><![CDATA[<p>环境的搭建是进行开发的第一步，python因为存在python2和python3两个版本，让在建立python环境时造成不便，并且由于在Linux环境下不像Window环境安装那么友好，存在一些小坑。本教程记录了CentOS7下安装python3.8的过程和注意事项。</p><h1 id="一、查看系统版本"><a href="#一、查看系统版本" class="headerlink" title="一、查看系统版本"></a>一、查看系统版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux localhost.localdomain 3.10.0-327.el7.x86_64 <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>查看python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># python -V</span></span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure><p>系统默认安装了Python 2.7.5</p><h1 id="二、安装依赖"><a href="#二、安装依赖" class="headerlink" title="二、安装依赖"></a>二、安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure><p>如果有提示一路选择Y就可以</p><h1 id="三、下载python源码包"><a href="#三、下载python源码包" class="headerlink" title="三、下载python源码包"></a>三、下载python源码包</h1><p>python官网<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a> 目前python最新版本是python3.10<br><img src="https://img-blog.csdnimg.cn/5967484e1d49472ab817580815275fef.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="下载Python源码包"></p><p>下载稳定版本3.8版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tgz</span><br></pre></td></tr></table></figure><h1 id="四、解压安装python源码包"><a href="#四、解压安装python源码包" class="headerlink" title="四、解压安装python源码包"></a>四、解压安装python源码包</h1><h2 id="1、解压"><a href="#1、解压" class="headerlink" title="1、解压"></a>1、解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.8.12.tgz</span><br></pre></td></tr></table></figure><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>进入解压后的目录进行编译和安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.8.12/</span><br><span class="line">[root@localhost Python-3.8.12]<span class="comment">#</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ./configure</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># make&amp;&amp;make install</span></span><br></pre></td></tr></table></figure><p>执行完后显示安装成功<br><img src="https://img-blog.csdnimg.cn/9e8bcddbd7644d0b9bc702a13b3984e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pyhont安装成功"></p><h2 id="3、建立命令软链接"><a href="#3、建立命令软链接" class="headerlink" title="3、建立命令软链接"></a>3、建立命令软链接</h2><p>虽然python3.8.12安装成功了，但默认输入python还是显示是2.7版本的。如果要用python3.8.12需要输入python3即可，有时候不太方便。可以通过修改软链接的方式将默认的python指向python3.8.12。<br>先看一下默认的python及新安装的python3都安装在哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which python</span></span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which python3</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/python3</span><br></pre></td></tr></table></figure><p>可以看到默认的python路径为/usr/bin/python，python3的路径为/usr/local/bin/python3<br>将python3的软链接加到python上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># mv /usr/bin/python /usr/bin/python.bak</span></span><br><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ln -s /usr/local/bin/python3 /usr/bin/python</span></span><br></pre></td></tr></table></figure><p>通过python -V命令查看python版号，这时python的版本已经是3.8.12了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># python -V</span></span><br><span class="line">Python 3.8.12</span><br></pre></td></tr></table></figure><p>pip命令也可以修改，python3.8.12默认的pip是pip3，CentOS7的python2.7默认没有安装pip.<br>输入pip命令的时候提示命令没有找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># pip</span></span><br><span class="line">bash: pip: <span class="built_in">command</span> not found...</span><br></pre></td></tr></table></figure><p>这时也可以通过建立软链接的方式将pip命令链接到pip3上。首先看pip3命令在哪?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which pip3</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip3</span><br></pre></td></tr></table></figure><p>然后建立pip到pip3的软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ln -s /usr/local/bin/pip3 /usr/bin/pip</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># pip -V</span></span><br><span class="line">pip 21.1.1 from /usr/<span class="built_in">local</span>/lib/python3.8/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure><h1 id="五、配置yum"><a href="#五、配置yum" class="headerlink" title="五、配置yum"></a>五、配置yum</h1><p>安装python3改完软链接以后发现yum命令报错了，yum是依赖python2.7的，你把python改成了3.8了，所以报错了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># yum</span></span><br><span class="line">  File <span class="string">"/usr/bin/yum"</span>, line 30</span><br><span class="line">    except KeyboardInterrupt, e:</span><br><span class="line">                            ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>可以修改yum里对python2的依赖即可。虽然安装了python3但是系统里python2依旧还在系统里，可以通过python2来指定用python2.7的命令，首先来看下python2的命令在哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># which python2</span></span><br><span class="line">/usr/bin/python2</span><br></pre></td></tr></table></figure><p>可以cd到/usr/bin目录下 通过ls -alh|grep python查看python命令的详细情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># ls -alh|grep python</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37df1186dcbf4820b7de6676120aa5ee.png#pic_center" alt="python命令软链接"><br>可以看到python软连接是执行的python3命令，python2是执行的python2.7的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure><p>修改对python的依赖，修改成python2或python2.7都可以。<br><img src="https://img-blog.csdnimg.cn/04054660445f497b886cb78119616722.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改依赖"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6777b0e3d68b4842a700a05af5eb6411.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改依赖"></p><p>修改完这两个文件后，再敲yum命令就不会报错了。</p><p><strong>至此CentOS7环境下python3.8.12已经成功安装！</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境的搭建是进行开发的第一步，python因为存在python2和python3两个版本，让在建立python环境时造成不便，并且由于在Linux环境下不像Window环境安装那么友好，存在一些小坑。本教程记录了CentOS7下安装python3.8的过程和注意事项。&lt;/p
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>认识SOAR-安全事件编排自动化响应</title>
    <link href="https://xiejava.gitee.io/posts/63a3c769/"/>
    <id>https://xiejava.gitee.io/posts/63a3c769/</id>
    <published>2021-11-01T13:54:04.000Z</published>
    <updated>2021-11-01T14:01:41.675Z</updated>
    
    <content type="html"><![CDATA[<p>SOAR是最近几年安全市场上最火热的词汇之一。SOAR究竟是什么，发展历程是什么，能够起什么作用，带着这些问题我们来认识一下SOAR。</p><h1 id="一、SOAR是什么"><a href="#一、SOAR是什么" class="headerlink" title="一、SOAR是什么"></a>一、SOAR是什么</h1><p>SOAR 一词来自分析机构 Gartner，SOAR-Security Orchestration, Automation and Response 安全编排和自动化响应。在Gartner的报告里，SOAR平台的核心组件为，编排与自动化、工作流引擎、案例与工单管理、威胁情报管理。而SOAR体系则是三个概念的交叉重叠：<strong>SOAR=SOA+SIRP+TIP</strong><br>1）精密编排的联动安全解决方案(SOA)；<br>2）事件应急响应平台(SIRP)；<br>3）威胁情报平台(TIP)。<br><img src="https://img-blog.csdnimg.cn/f1aefcc3e390408abb7effccbe41f083.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR"></p><h1 id="二、SOAR的发展历程"><a href="#二、SOAR的发展历程" class="headerlink" title="二、SOAR的发展历程"></a>二、SOAR的发展历程</h1><p>2015年，可以定义为SOAR的1.0时代。Gartner将SOAR(当时被认为是“安全运维分析和报告”)描述成为安全运维团队提供机器可读的安全数据报告和分析管理功能的产品。2017年，SOAR进入2.0时代。Gartner提出了“安全编排、自动化及响应”(SOAR)这个术语，用以描述脱胎于事件响应、安全自动化、场景管理和其他安全工具的一系列新兴平台。Gartner观察到三种以前截然不同的技术：安全编排和自动化(SOA)、安全事件响应平台(SIRPs)和威胁情报平台(TIPs)，正在逐步融合到一起。<br>根据Gartner2019年最新定义，SOAR是指能使企业组织从SIEM等监控系统中收集报警信息，或通过与其它技术的集成和自动化协调，提供包括安全事件响应和威胁情报等功能。SOAR技术市场最终目标是将安全编排和自动化(SOA)、安全事件响应(SIR)和威胁情报平台(TIP)功能融合到单个解决方案中。<br><img src="https://img-blog.csdnimg.cn/84eb9177ec554c0d8f5f74163cda15b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR的演进"></p><p>根据Gartner预测，到2022年，有30%大型企业组织（安全团队超过5人）将在安全和运维的工作中使用SOAR，这一比例远超当下5%。当下SOAR技术的早期拥护者是那些已经拥有成熟安全运维中心，并且能够理解SOAR带来好处的那些成熟的安全组织。</p><h1 id="三、SOAR主要解决什么问题"><a href="#三、SOAR主要解决什么问题" class="headerlink" title="三、SOAR主要解决什么问题"></a>三、SOAR主要解决什么问题</h1><p>随着网络安全攻防对抗的日趋激烈，网络安全单纯指望防范和阻止的策略已经失效，必须更加注重检测与响应。企业和组织要在网络已经遭受攻击的假定前提下构建集阻止、检测、响应和预防于一体的全新安全防护体系。在国际上，检测和响应类产品受到了极大的关注。放眼国内，更多的注意力集中到了新型检测产品，尤其是未知威胁检测领域。借助这些产品和技术，用户获得了更低的 MTTD（平均检测时间），能够更快更准确地检测出攻击和入侵。但是，这些产品和技术大都没有帮助用户降低 MTTR（平均响应时间）。事实上，对于用户而言，更快地检测出问题仅仅是第一步，如何快速地对问题进行响应更加重要。而在提升安全响应效率的时候，不能仅仅从单点（譬如单纯从端点或者网络）去考虑，还需要从全网整体安全运维的角度去考虑，要将分散的检测与响应机制整合起来。而这，正是 SOAR 要解决的问题。<br>Gartner指出，SOAR可供公司企业收集不同来源的安全威胁数据和警报，运用人机结合的方法进行事件分析与分类，根据标准流程辅助定义、排序和驱动标准化事件响应行为。SOAR主要为安全团队提供定制化的流程和控制，弥合并加速有效网络威胁的调查与缓解。安全运营团队的大量日常事务性工作也可以借助SOAR加以自动化。而且，案例战术手册还可以帮助分析师在单一平台上响应和缓解威胁，节约事件响应的每一分每一秒宝贵时间。<br>Gartner 用 OODA 模型，来描绘一个典型的安全运营流程。OODA 即 Observe(观察)、Orient(定位)、Decide(决策)、Act(行动)。</p><ul><li>观察：观察事件并确定发生了什么，即通过各种检测、分析工具，比如 SIEM 类工具，找到威胁线索，如告警。</li><li>定位：确定观察的方向，并添加上下文来确定观察的含义，即对产生的告警的内容做调查、丰富化。比如查找外网域名的威胁情报，查找此 IP 的历史行为协助研判等等。</li><li>决策：根据业务的风险容忍度和能力决定适当的响应行动，即判定是否需要对此告警采取行动，比如是否需要封禁，是否影响业务，是否需要进一步观察。</li><li>行动：根据决定采取行动，并应用到观察过程中，然后重复，即执行确定的安全策略，并验证。每一步都对下一步提供了指导，周而复始，构成了一个良性促进的进化循环，不断优化企业的安全运营流程以应对不断变化的安全威胁。<br><img src="https://img-blog.csdnimg.cn/b37a4e16ee454bbe95aaf53e5235c9bd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="OODA 模型"></li></ul><p>OODA 环看起来逻辑清晰，易于操作。但事实上， OODA 环里的丰富化、调查取证、验证、执行安全策略变更等等，都是耗时耗力的工作。加上安全设备一直以来的误报问题产生的噪音，以及安全人员工作负荷重，资深从业人员短缺等原因，难以真正有效的推进 OODA 循环。更不用提在 HW 时段高强度的工作压力下，如何能够有条不紊的保持一贯的处置流程来处理每一个安全线索。SOAR 正是在这个背景下被提出，并被寄予厚望。SOAR 的核心，就是将安全流程或预案，即 OODA 循环的每一个实例，比如蠕虫爆发处理流程、挖矿病毒告警处理流程、疑似钓鱼邮件处理流程等等，数字化管理起来形成 Playbook。用自动化完成其中所有可能自动化的动作，无法自动的仍然交由人来处理，通过可视化编排工具将人、技术和流程有机的结合起来，形成标准统一的、可重复的、更高效的安全运营流程。</p><h1 id="四、SOAR的核心功能"><a href="#四、SOAR的核心功能" class="headerlink" title="四、SOAR的核心功能"></a>四、SOAR的核心功能</h1><p>从SOAR安全编排自动化响应的字面定义来看SOAR应该具备三大核心能力，编排、自动化、响应</p><h2 id="编排"><a href="#编排" class="headerlink" title="编排"></a>编排</h2><p>SOAR中的关键词是编排，这是在使用自动化和响应之前必须构建的关键组件。SOAR的编排体现的是一种协调和决策的能力，针对复杂性的安全事件，通过编排将分析过程中各种复杂性分析流程和处理平台进行组合。分析涉及多种数据或平台，如SIEM分析平台、漏洞管理平台、情报数据、资产数据等。处置响应的编排也涉及到很多平台或设备，如EDR管理平台、运维管理平台、工单管理平台、WAF设备、防火墙等。仅仅以技术为中心的安全保障已不再能满足现状，将人员和流程的编排才能保证安全流程真正高效的运行。SOAR的终极目标就是实现技术、流程、人员的无缝编排。</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>SOAR的自动化体现在三个方面，面对需要处理的安全事件能够根据策略自动选择编排的剧本、自动执行剧本的操作流程、根据决策结果自动联动设备进行防护阻断等行动策略。它允许剧本（常称为Playbooks）在安全流程的部分或全部内容上执行多个任务，将线性剧本串联起来。虽然线性剧本可能更容易创建，但只适用于处理决策需求较少的工作流。编排和自动化比线性剧本的最大优势就是其灵活性，为支持全自动化和半自动化的决策，需要更加灵活的工作流和执行剧本。SOAR能够识别这些决策模式，并基于以往事件中的执行操作，自动推荐新事件的剧本、执行剧本操作流程，自动化分析决策，根据决策结果自动下发防护阻断的行动策略。</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>安全事件响应包括告警管理、工单管理、案件管理等功能。告警管理的核心不仅是对告警安全事件的收集、展示和响应，更强调告警分诊和告警调查。只有通过告警分诊和告警调查才能提升告警的质量，减少告警的数量。工单管理适用于中大型的安全运维团队协同化、流程化地进行告警处置与响应，并且确保响应过程可记录、可度量、可考核。案件管理是现代安全事件响应管理的核心能力。案件管理帮助用户对一组相关的告警进行流程化、持续化的调查分析与响应处置，并不断积累该案件相关的痕迹物证 (IOC) 和攻击者的战技过程指标信息 (TTP)。多个案件并行执行，从而持续化地对一系列安全事件进行追踪处置。<br><img src="https://img-blog.csdnimg.cn/c305603e5c6f4bff9d10fa706c7a4e8c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR事件响应"></p><p>事件响应是SOC操作中非常复杂的部分，理想状态下，它将是一个有效的动态过程，涉及数十种相互关联的技术、IT、业务流程和整个组织的人员，将是持续性适应风险和信任评估（Continuous Adaptive Risk and Trust Assessment, CARTA）策略用于在持续监测和可视性方面时，SOC团队可使用SOAR技术执行连续活动，利用SOAR技术通过智能化编排与响应最大程度的将已有安全技术进行整合，提高整个安全事件的解决能力和效率。基于编排和自动化前期对事件的分析，SOAR所提供的响应技术是完善整个事件生命周期，提高解决安全威胁效率的关键一环。本质上，SOAR的最终目标是促进安全团队对事件有全面的、端到端的理解，完成更好、更明智响应。</p><h1 id="五、SOAR的价值"><a href="#五、SOAR的价值" class="headerlink" title="五、SOAR的价值"></a>五、SOAR的价值</h1><p><strong>1、缩短响应时间</strong><br>通过自动化技术，尽可能多的自动完成一个安全事件处置流程中相关步骤，从而缩短响应时间即 MTTR。<br><strong>2、释放人力</strong><br>让安全专家从繁重的重复劳动中释放出来，将时间放在更有价值的安全分析、威胁猎捕、流程建立等工作上。<br><strong>3、安全运营流程标准化</strong><br>将公司的安全运营流程数字化管理起来，每一次安全事件的对应处置过程都在统一标准，统一步骤下执行，有迹可循。避免人员能力的差距导致的处置实际效果不可控。<br><strong>4、避免能力断层</strong><br>将安全专家的经验固化成处置预案Playbook，让不同的人都可以遵循同样的方法来完成特定安全事件的处置流程，避免因为个人的离职导致某个领域的安全能力缺失。<br><strong>5、运营流程指标可度量</strong><br>因为运营流程都通过 Playbook 数字化管理且每一次的执行过程都记录在案，因此流程的 KPI 如 MTTD、MTTR、TTQ、TTI 等全部可评估、可度量、可追踪。<br><strong>6、安全运营决策支撑</strong><br>通过对公司的所有运营流程数字化管理、数字化执行、数字化KPI评估后，管理者可以有效的评估什么流程基本无用，什么流程执行效率不高，什么流程发挥了最大的作用，甚至什么安全设备在所有流程中被使用的价值最大。从而为以后的安全投资决策，安全团队建设决策提供有价值的数值化支撑。</p><h1 id="六、SOAR与其他安全产品的关系"><a href="#六、SOAR与其他安全产品的关系" class="headerlink" title="六、SOAR与其他安全产品的关系"></a>六、SOAR与其他安全产品的关系</h1><p><img src="https://img-blog.csdnimg.cn/bd575be2bac3412984d257a2470c4d40.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR与其他安全产品的关系"></p><p>SOAR定位于安全运营操作平台，它收集不同来源的安全威胁数据和警报，事件来源于其他的态势感知平台、SIEM、日志分析系统或安全人员人工录入需要处理的事件。通过调用安全设备的能力如：情报平台、资产管理平台、漏洞扫描平台、EDR管理平台、运维管理平台、工单管理平台、WAF设备、防火墙来实现对安全事件的分析、溯源、取证、处置、通知等。一端接安全事件源，一端对接安全设备能力。通过SOAR本身的编排能力将人员、设备、资源、流程协同起来。每个企业部署流程和技术并不相同，SOAR在实际落地应用过程中并不能“即插即用”，需要对接事件源、对接各类联动处置设备，根据企业具体的实际情况定制剧本流程。对接的实际安全设备能力数量以及剧本的积累，是SOAR平台能够很好的支持运营的关键。</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SOAR是最近几年安全市场上最火热的词汇之一。SOAR究竟是什么，发展历程是什么，能够起什么作用，带着这些问题我们来认识一下SOAR。&lt;/p&gt;
&lt;h1 id=&quot;一、SOAR是什么&quot;&gt;&lt;a href=&quot;#一、SOAR是什么&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>大脑不是用来思考的，如何让孩子更好的学习？</title>
    <link href="https://xiejava.gitee.io/posts/8394d1a3/"/>
    <id>https://xiejava.gitee.io/posts/8394d1a3/</id>
    <published>2021-08-22T02:23:31.000Z</published>
    <updated>2021-08-22T03:25:56.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E8%AF%BB%E4%B9%A6.png" alt="读书"></p><p>在这个知识爆炸、学习竞争压力巨大的时代，让父母最焦虑的事情之一，莫过于家里有个厌学的孩子了。为了让孩子好好学习，家长们操碎了心。为了孩子报各种培训辅导班、自己亲自上阵陪同辅导、高价请一对一的家教辅导，就差自己代替孩子去学习了。而孩子依旧是，一写作业就磨蹭、一考试就不会、一上学就无精打彩，一放学就满血复活。为什么学生不喜欢上学？如何让孩子喜欢并更好的学习呢？让我们跟着这本《为什么学生不喜欢上学?》一起来探索学习的秘密。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E6%88%91%E7%9A%84%E5%BF%83%E9%87%8C%E5%8F%AA%E6%9C%89%E5%AD%A6%E4%B9%A0.jpg" alt="我的心里只有学习"><br>《为什么学生不喜欢上学?》是一本关于认知心理学的普及读物，也是一本教育心理学的入门书籍。作为美国弗吉尼亚大学心理学教授威林厄姆的重要著作，是一本深受学生和教师欢迎的教育心理学著作。他用认知心理学的原理，详细分析了学生学习的过程和教师在课堂教学中必须注意的一些问题。</p><p>作者丹尼尔·T·威林厄姆，哈佛大学心理学博士，美国弗吉尼亚大学心理学教授。主要研究以大脑为基础的学习和记忆及认知心理学的基础教育应用。《美国教育家》杂志《向认知科学家提问》专栏作者。</p><p>这本书有着容易被人忽视和低估的名字，实际上它是一本认知心理学和教育心理学的科普著作，长期在美国亚马逊图书榜畅销不衰。在豆瓣评分高达9.3分！</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E7%94%9F%E4%B8%8D%E5%96%9C%E6%AC%A2%E4%B8%8A%E5%AD%A6.png" alt="为什么学生不喜欢上学"><br>书中主要提出并回答了这些问题：</p><ul><li>为什么学生不喜欢上学？</li><li>为什么学生能记住电视里的所有细节，却记不住我们教他的知识？</li><li>为什么让学生理解抽象概念这么难？</li><li>题海战术有用吗？</li><li>科学家是怎样思考的？如何让学生像专家一样思考？</li><li>如何因材施教？</li></ul><p>这本书刷新了很多人对学习的认知，不仅仅适合学生，同样适合处于终生学习时代的你和我。如果你的小学老师能早一点看到，你也就不会讨厌学习了。当然，现在的你看了也同样不晚。不论是教育孩子还是自己，了解了认知学的原理，按照符合科学原理的方法去做，都会让大家的学习更有效率。特别是，本书有许多震撼人心、不符合我们直觉的认知让我们重新去思考如何去更好的学习。</p><h3 id="学生为什么不爱学习？"><a href="#学生为什么不爱学习？" class="headerlink" title="学生为什么不爱学习？"></a><strong>学生为什么不爱学习？</strong></h3><p>从认知心理学的角度来看，人是充满好奇心的，愿意探索了解一切；也喜欢思考，因为思考就是解决问题，而解决问题能带来愉悦感。比如当你苦苦思索，终于解出了一道难题或者想通了一件事情，你的大脑可能奖励它自己少量的多巴胺，让你恨不得手舞足蹈，瞬间自信心爆棚，觉得自己是世界上最棒的人。这种快乐，跟吃个甜点是完全不一样。学习应该是件很快乐的事情。</p><p>既然解决问题也能带来快乐，那为什么还有这么多人不愿意思考，不愿意学习呢？</p><p><strong>因为：大脑不是用来思考的！！！</strong></p><p>看到这里估计大家会一脸闷逼，大脑不是用来思考的，哪是用来干啥的呢？是的，大脑能做很多事情，但思考并不是它最拿手的，人类不常思考是因为我们的大脑<strong>不是用来思考，而是用来避免思考的</strong>。思考很费力，而且它还是缓慢、靠不住的。幸运的是尽管我们并不擅长思考，但我们其实喜欢思考，我们生来就有着好奇心，也寻找可以进行思考的机会。但正是因为思考很难，需要条件合适，这份好奇心才能存活，否则我们很快就会放弃思考的念头。<strong>好奇心是与生俱来的，但它很脆弱</strong>。思考的愉悦感来自解决问题的过程，在一个要解决的问题上毫无进展是不会有愉悦感的，实际上，还会让你沮丧。同样只是知道问题的答案也不会有多大的愉悦感。如何保持好奇心，激发思考的兴趣呢？答案是思考问题的难易程度。太容易的问题不会带来愉悦感，同样太难的问题不但不会带来愉悦感还会带来挫折感让人渐渐的避免思考。</p><p><strong>所以：要确保提供给学生的问题是可以解决的。尊重学生的认知局限和个体间的认知差异，难易适中。</strong></p><p>根据资料，认知心理学把人类对于外部世界的认识分成了三个区域：舒适区、学习区、恐慌区。其中，“舒适区”是对自己来说没有学习难度的知识，接触这类知识感觉很舒适，但可学到的东西很少，进展缓慢；“学习区”有一定挑战，接触时会感到不适，但又不至于太难受，保持在这个区间学习，可以得到快速成长；“恐慌区”是超出自己能力范围太多的知识，接触会感到忧虑、恐惧，不堪负重以至放弃学习。学习具有适当挑战的东西，一段时间后，“学习区”会慢慢变为“舒适区”， 而一部分的“恐慌区” 又会变成“学习区”。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E8%88%92%E9%80%82%E5%8C%BA.jpg" alt="舒适区、学习区、恐慌区"></p><p>在舒适区学习，会因为太容易而觉得枯燥，无法坚持；在恐慌区学习，会因为太难好奇心受挫，很快就放弃。所以学习任务要难易适中。要确保在学习过程中碰到的问题可以被解决。</p><h3 id="在学习的过程中死记硬背是否合理？"><a href="#在学习的过程中死记硬背是否合理？" class="headerlink" title="在学习的过程中死记硬背是否合理？"></a><strong>在学习的过程中死记硬背是否合理？</strong></h3><p>一般大家都会死记硬背的学习方法嗤之以鼻，认为是读死书。然而你错了！有些东西该背的还得背，该记的还得记。事实性知识要先于技能，也就是说如9*9乘法表，元素周期表、历史年代表、一些常识等等，必须得用心记下，这些都是学习的基石。</p><p>毫无疑问，让学生记住枯燥的事实是完全不够的，需要进行关联和分析。但是同样，如果没有事实性知识想要凭空让学生拥有分析能力或者归纳能力是不可能的。</p><p><strong>因为：</strong><br><strong>第一，背景知识对阅读理解来说必不可少</strong>。它帮我们在单个的要点之间建立起联系。</p><p><strong>第二，背景知识对于我们的认知是必要的</strong>。一个人看起来在进行逻辑思考，但其实大部分是在进行记忆检索。它使我们能够将独立的元素合成一个单元，进而增加工作记忆的空间。</p><p><strong>第三，事实性知识可以增强记忆</strong>。如果你对一方面了解的越多，你就越能更好的理解这方面的新知识。</p><p>长期记忆中的事实性记忆使得获取更多的事实性知识更容易，它说明持有的信息量取决于已有的信息量。</p><p><strong>所以：</strong><br>我们必须让学生学习背景知识。学生必须学会反复出现的概念–统一所有学科的思想。</p><p><strong>知识体系在先，批判性思维在后</strong>。批判性思考并不能够脱离背景知识而单独实践以至完善的。<br>具有浅显知识都比没有知识强。了解的深固然好，但是我们不可能细致地了解每一件事情，泛泛的知识显然比不懂要强。</p><p><strong>加强阅读</strong>。大量的数据证实，读“闲书”的人一生都因此受益。</p><p><strong>偶然获得知识</strong>。学习事实性知识可以随时随地的学习如读闲书、翻杂志、看记录片、新闻或者和朋友聊天都可以获得相应的知识。</p><p><strong>尽早开始</strong>。家庭环境的培养，如父母使用的语言、书籍资源是否可得、家长是否平时看书。等等还有其他一些因素决定了孩子在上学前拥有的知识。</p><h3 id="题海战术到底有没有用？"><a href="#题海战术到底有没有用？" class="headerlink" title="题海战术到底有没有用？"></a><strong>题海战术到底有没有用？</strong></h3><p>题海战术也是比较有争议的学习方法，现在有一种观点认为，题海战术只对提高考试成绩有帮助，扼杀了学生内在的学习动力，是现行教育下的畸形产物，它带来的弊远大于利。但同时也有教育专家跳出来说，学生必须反复地练习才能学会知识和技能。两者孰是孰非？</p><p>在认知学看来，练习是最有效的窍门之一，它减少了大脑活动需要的空间。没有充分的练习，你不可能精通任何脑力活。</p><p>为什么要练习？因为通过练习能获得最基本的能力，以期精益求精。如果你作为足球运动员在带球的同时还要思考踢球的角度和速度，你不太可能成为一个优秀的足球运动员。你必须得日复一日的练习。像这样的低层次过程必须不假思索，才能给更高层次的过程，比如战术策略提供足够的空间。类似的，你如果不熟记数据要诀也学不好代数。练习的目的是获得能力和提高能力。</p><p><strong>因为：</strong></p><p><strong>练习是为了日后更好的学</strong>习。通过大量的练习会让一些步骤变得自动化，学习者才能将思考能力提高到下一个层次。让思考过程变得省力，这样才能学得更多。</p><p><strong>练习使记忆更长久</strong>。努力学习显然不能防止遗忘，但持续地练习可以防止遗忘。</p><p><strong>练习促进知识的迁移</strong>。重复做很多某一类型的题目使你更容易辨识一个新问题的内在结构，即使你以前没有见过这一题目。</p><p>但是，不是每件事情都需要无限度地练习的。</p><p><strong>所以：</strong></p><p>如果练习可以让思考过程变得省力，我们就要去识别哪些过程需要自动化，总的来说需要自动化的过程往往是自动化后效益能达到最大值的技能的基础。</p><p><strong>分散练习时间</strong>。没有必要把关于一个概念的所有练习集中在很短的一段时间里完成。分散练习后记忆会更持久。持续不断地练习同一项技能是很无聊的事，最好能有点变化。分散练习的另一个好处是学习者有更多的时间思考如何将学到的东西加以应用。</p><p><strong>在进阶环境中练习</strong>。自动化需要很多练习，聪明的办法是既分散练习的时间，又分散练习的环境。尽量多的设计有创意的方法来练习最关键的技巧，同时让学习者在更高阶的环境中学到基本技能。</p><h3 id="有些孩子天生就不是学习的料？"><a href="#有些孩子天生就不是学习的料？" class="headerlink" title="有些孩子天生就不是学习的料？"></a><strong>有些孩子天生就不是学习的料？</strong></h3><p>有些人认为，学习能力是受基因影响，如果你的基因优秀，你就聪明；基因不好，就不聪明。你聪明就可以学得很好。另外一种看法就是认为智能是可以塑造的。如果考试考砸了或不理解某个知识点，不是因为笨，而是因为他们还不够努力。哪一种看法是正确的呢？</p><p>答案是：两者都有正确的部分。我们的基因遗传确实对智能有影响，但是通常是通过环境影响的。毫无疑问智能是可以改变的！</p><p>孩子智能上的差异可以通过持久的努力来改变。</p><p><strong>因为：</strong></p><p><strong>对于智能，态度很重要</strong><br>有充分证据证明，相信智能可以通过努力提高的学生比相信智能是改变不了得事情的学生学得更好，得到的分数更高。<br>孩子必须知道他的能力决定他所作事情时的成功率，他需要发展对于自己能力的自信，而且还要理解，对于不同类型的任务他拥有不同级别的能力。</p><p><strong>所以：</strong></p><p>要确保孩子相信自己能够进步，要让他们相信为此所作的努力是值得的。</p><p><strong>赞扬努力，而非能力</strong>。赞扬过程而不是能力，赞扬孩子面对困难时坚持不懈的精神或对作业负责的态度。</p><p>告诉他们<strong>一份耕耘一份收获</strong>。所有的所谓“天才”都是持续努力的结果。</p><p><strong>坦然的接受失败</strong>。如果你想提高智能，你需要挑战自己，这表示接受了略高过自己能力的任务，你很有可能第一次就会失败，但失败没有什么大不了的。人生中的一次又一次的失败是成功的原因。<br>学习技能不是天生的。所有的学习者都要学会自觉、时间分配、足智多谋（如遇到难题时该如何做）。</p><p>终身学习，做保持好奇心和探索欲的父母和老师，我们需要更多的智慧。而教育就是将智慧薪火相传的过程，尊重孩子的认知规律，谨慎积极的保持努力和践行。教育使人更聪明，聪明的人可以使教育更美好。</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E8%AF%BB%E4%B9%A6.png&quot; alt=&quot;读书&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这个知识爆炸、学习竞争压力巨大的时代，让父母最焦
      
    
    </summary>
    
    
      <category term="读书" scheme="https://xiejava.gitee.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读后感" scheme="https://xiejava.gitee.io/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="学习考试" scheme="https://xiejava.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>都2021了，我为什么还在用博客这种古老的方式在记录</title>
    <link href="https://xiejava.gitee.io/posts/7626e526/"/>
    <id>https://xiejava.gitee.io/posts/7626e526/</id>
    <published>2021-08-20T13:53:09.000Z</published>
    <updated>2021-08-20T13:55:36.246Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/81616d1642d7445796c58b74e0b30bf9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70#pic_center" alt="BLOG"></p><p>都2021了，在这个移动互联网异常发达，自媒体泛滥的时代，博客这个古老的在互联网时代记录自己的工具似乎是不合时宜要被大众所遗忘被历史所淘汰。而我却还在用博客这种古老的方式生活在移动互联网时代记录工作，学习，生活。</p><p><strong>一、为什么要记录</strong><br>正如我的博客标题，记录最好的自己。最朴实的想法就是想记录自己的所学、所见、所闻、所思、所想。记录使人进步。吴军老师的《全球科技通史》中提到，促进人类文明发展的是两条主线，一条是能源，一条是信息。文字的发明，信息的记录，让人类的文明得以延续和发展。是一代一代人通过信息的记载和积累促进科技的发展，让信息不管是从记录方式还是传播速度都得到了跨越式的发展，进入到了现在信息爆炸的时代。书中提到，为什么在近代早期西方的科学技术进步的速度要明显的快于中国，一个重要的原因就西方对于科学技术的研究及传播方式。西方的研究方式是通过不断的实验大量的记录进行定量研究，后人可以基于前人记录的信息研究成果进行研究和传播，大大加快的科学技术的进步。而那时候中国可能还是定性方式的研究，口口相传的传播方式，导致原来很多技术到现在都失传了。</p><p>对于个人来说，我想应该也是一样的，要想更快进步和发展，将自己生活、学习、工作过程中的所学、所见、所闻、所思、所想记录下来定期的回顾和思考应该会有所促进吧。而且随着时间的推移回头看看自己以前记录的东西应该也是一种乐趣。或许，有人看到我所记录的东西以此为鉴少走一点弯路。</p><p>不在乎文笔，不限于内容，仅仅只是记录，希望记录能够成就最好的自己。</p><p><strong>二、为什么是博客这种方式</strong><br>记录信息的手段很多，尤其是自媒体时代，微博、微信、头条、抖音、小红书啥的，平台很多。为什么还要用博客这种古老的方式呢？如果自是记录给自己看映象笔记、网易云笔记都是很好的，私密性太强，不够开放。微博、微信社交属性太强关注的都是些熟人。头条、抖音、小红书，功利性太强，为了收益去强迫自己去写也不是自己的初衷。想来想去还只有博客这种古老的方式比较合适，安安静静的自己想记录什么就记录什么。也不用去担心什么流量，不用去关注什么人关注了你。以前几个大的通用的博客平台都不提供服务了如新浪博客、网易博客等，而CSDN、cnblog主要是技术类的博客，想记录点乱七八糟的事情似乎也不太适合。所以只好自己来搭建博客咯。</p><p>自己搭建的博客<a href="http://xiejava.ishareread.com" target="_blank" rel="noopener">http://xiejava.ishareread.com</a> 已经快两年了。记录的东西不是太多，说明见识不多，思考太少。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/81616d1642d7445796c58b74e0b30bf9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>安全运维与安全运营</title>
    <link href="https://xiejava.gitee.io/posts/76373188/"/>
    <id>https://xiejava.gitee.io/posts/76373188/</id>
    <published>2021-08-20T03:18:22.000Z</published>
    <updated>2021-08-20T03:21:08.582Z</updated>
    
    <content type="html"><![CDATA[<p>安全运维与安全运营是安全人员经常听到的两个名词。到底什么是安全运维，什么是安全运营，两者之间有什么区别和联系呢？</p><p>我们先来看一下运维与运营的概念区别。<br><strong>运维</strong>一般来说指的是运行维护，通过一定的技术和管理手段保障平台或系统的正常运行。本质上是对平台、系统或产品所涉及的网络、服务器、服务的生命周期各个阶段的运营与维护，在成本、稳定性、效率上达成一致可接受的状态。</p><p><strong>运营</strong>从字面上理解更多的是指经营。通过对平台、系统或产品的经营达到预期的业务目标。对运营过程的计划、组织、实施和控制，是与产品生产和服务创造密切相关的各项管理工作的总称。从另一个角度来讲，运营管理也可以指为对生产和提供公司主要的产品和服务的系统进行设计、运行、评价和改进的管理工作。</p><p>总体来说<strong>运营应该是覆盖运维的，运维是支持运营的</strong>。那么安全运维和安全运营，应该也是同样的道理。</p><p>网上有人进行了概括：</p><p><strong>安全运维</strong>简单来说，就是从安全的角度对日常IT信息系统进行运行维护，传统运维工作主要是为了保障信息系统的正常运行，安全运维则是通过安全分析，检测和解决已经产生和即将产生的安全问题，从而建立从防护到监测到解决的闭环安全机制管理系统，实现运维的目的——保障企业整体IT系统运行正常。</p><p><strong>安全运营</strong>应该来说概念更广，狭义的安全运营是为以资产为核心，以安全事件管理为关键流程，依托于安全运营平台（SOC），建立一套实时的资产风险模型，进行事件分析、风险分析、预警管理和应急响应处理的集中安全管理体系。广义安全运营是一个技术、流程和人有机结合的复杂的系统工程，通过对已有的安全产品、工具、服务产出的数据进行有效的分析，持续输出价值，解决安全风险，从而实现安全的最终目标。</p><p>个人认为<strong>运维更多的强调流程，运营更多的强调体系。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安全运维与安全运营是安全人员经常听到的两个名词。到底什么是安全运维，什么是安全运营，两者之间有什么区别和联系呢？&lt;/p&gt;
&lt;p&gt;我们先来看一下运维与运营的概念区别。&lt;br&gt;&lt;strong&gt;运维&lt;/strong&gt;一般来说指的是运行维护，通过一定的技术和管理手段保障平台或系统的
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络信息安全管理之资产、脆弱性、威胁、风险</title>
    <link href="https://xiejava.gitee.io/posts/57a81e07/"/>
    <id>https://xiejava.gitee.io/posts/57a81e07/</id>
    <published>2021-08-19T07:16:23.000Z</published>
    <updated>2021-08-19T08:20:56.067Z</updated>
    
    <content type="html"><![CDATA[<p>​<br><strong>网络信息安全管理</strong>是指对网络资产采取合适的安全措施，以确保网络资产的可用性、完整性、可控制性和抗抵赖性，不致因网络设备、网络通信协议、网络服务、网络管理受到人为和自然因素的危害，而导致网络中断、信息泄露或破坏。网络信息管理对象主要包括网络设备、网络通信协议、网络操作系统、网络服务、安全网络管理等在内的所有支持网络系统运行的软、硬件总和。网络信息安全管理的目标就是通过适当的安全防范措施，保障网络的运行安全和信息安全，满足网上业务开展的安全要求。</p><p><strong>网络信息安全管理要素</strong>由网络管理对象、网络威胁、网络脆弱性、网络风险、网络保护措施组成。由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。网络安全管理实际上就是风险控制，其基本过程是通过网络管理对象的威胁和脆弱性进行分析，确定网络管理对象的价值、网络管理对象威胁发生的可能性、网络管理对象的脆弱程度，从而确定网络管理对象的风险等级，然后据此选取合适的安全保护措施，降低网络管理对象的风险。</p><p><strong>安全风险管理的三要素</strong>分别是<strong>资产</strong>、<strong>威胁</strong>和<strong>脆弱性</strong>，脆弱性的存在将会导致风险，而威胁主体利用脆弱性产生风险。网络攻击主要利用了系统的脆弱性。由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。</p><p><img src="https://img-blog.csdnimg.cn/20201204163036136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络信息安全管理要素"></p><p>网络信息安全管理对象是企业、机构直接赋予了价值而需要保护的资产。它的存在形式包括有形的和无形的，如网络设备硬件、软件文档是有形的，而服务质量、网络带宽是无形的。</p><p>常见的网络信息安全管理对象信息安全资产分类如下：</p><table><thead><tr><th>分类</th><th>示例</th></tr></thead><tbody><tr><td>数据</td><td>保存在信息媒介上的各种数据资料，包括源代码、数据库数据、系统文档、运行管理规程、计划报告、用户手册、各类纸质的文档等</td></tr><tr><td>软件</td><td>系统软件：操作系统、数据库管理系统、语句包、开发系统<br>应用软件：办公软件、数据库软件、各类工具软件等<br>源程序：各种共享源代码、自行或合作开发的各种代码等</td></tr><tr><td>硬件</td><td>网络设备：路由器、网关、交换机等<br>计算机设备：大型机、小型机、服务器、工作站、台式计算机、便携计算机等<br>存储设备：磁带机、磁盘阵列、磁带、光盘、软盘、移动硬盘等<br>传输线路：光纤、双绞线等<br>保障设备：UPS、变电设备、空调、保险柜、文件柜、门禁、消防设施等<br>安全设备：防火墙、入侵检测系统、身份鉴别等<br>其他：打印机、复印机、扫描仪、传真机等</td></tr><tr><td>服务</td><td>信息服务：对外依赖该系统开展的各类服务<br>网络服务：各种网络设备、设施提供的网络连接服务<br>办公服务：为提高效率而开发的管理信息系统，包括各种内部配置管理、文件流转管理等服务</td></tr><tr><td>人员</td><td>掌握重要信息和核心业务的人员，如主机维护主管、网络维护主管及应用项目经理等</td></tr><tr><td>其他</td><td>企业形象、客户关系等</td></tr></tbody></table><p><strong>脆弱性</strong>：脆弱性也可称为弱点或漏洞，是资产或资产组中存在的可能被威胁利用造成损害的薄弱环节。脆弱性一旦被威胁成功利用就可能对资产造成损害。脆弱性可能存在于物理环境、组织、过程、人员、管理、配置、硬件、软件和信息等各个方面。</p><p>脆弱性是与资产紧密相连的，是其固有的属性，客观存在是绝对的，但存在脆弱性不一定就绝对造成安全事件。如果没有被相应的威胁利用，单纯的脆弱性本身不会对资产造成伤害。</p><table><tr><th>类型</th><th>识别对象</th><th>脆弱性子类</th></tr><tr ><td rowspan=6>技术脆弱性</td><td>物理环境</td><td>机房场地、机房防火、机房供配电、机房防静电、机房接地与防雷、电磁防护、通讯线路的保护、机房区域防护、机房设备管理等</td><tr><td>网络结构</td><td>网络结构设计、网络传输加密、网络设备安全漏洞、边界保护、外部访问控制策略、内部访问控制策略、网络设备安全配置等</td></tr><tr><td>服务器/系统软件</td><td>补丁安装、物理保护、用户帐号、口令策略、资源共享、事件审计、访问控制、新系统配置（初始化）、注册表加固、网络安全、系统软件安全漏洞、软件安全功能管理等</td></tr><tr><td>数据库</td><td>补丁安装、鉴别机制、口令机制、访问控制、网络和服务设置、备份恢复机制、审计机制等</td></tr><tr><td>应用系统</td><td>审计机制、审计存储、访问控制策略、数据完整性、通讯、鉴别机制、密码保护等</td></tr><tr><td>应用中间件</td><td>协议安全、交易完整性、数据完整性等</td></tr><tr><td rowspan=2>管理脆弱性</td><td>技术管理</td><td>物理和环境安全、通讯和操作管理、访问控制、系统开发与维护、业务连续性等</td></tr><tr><td>组织管理</td><td>安全策略、组织安全、信息资产分类与控制、人员安全、符合性等</td></tr></table>威胁：对资产或组织可能导致负面结果的一个事件的潜在源。威胁利用管理对象自身的脆弱性，采用一定的途径和方式，对评估对象造成损害或损失，从而形成风险。<p>威胁源分三类：自然威胁、人为威胁和环境威胁。</p><table><thead><tr><th>种类</th><th>描述</th><th>威胁子类</th></tr></thead><tbody><tr><td>软硬件故障</td><td>对业务实施或系统运行产生影响的设备硬件故障、通讯链路中断、系统本身或软件缺陷等问题</td><td>设备硬件故障、传输设备故障、存储媒体故障、 系统软件故障、应用软件故障、数据库软件故障、开发环境故障等</td></tr><tr><td>物理环境影响</td><td>对信息系统正常运行造成影响的物理环境问题和自然灾害</td><td>断电、静电、灰尘、潮湿、温度、洪灾、火灾、地震、暴风雨、潮汐、污染、空调设备故障、鼠蚁虫害、电磁干扰等</td></tr><tr><td>操作失误</td><td>应该执行而没有执行相应的操作，或无意执行了错误的操作</td><td>维护错误、操作失误、提供错误的指南或操作信息等</td></tr><tr><td>管理不到位</td><td>安全管理无法落实或不到位，从而破坏信息系统正常有序运行</td><td>管理制度和策略不完善、管理规程缺失、职责不明确、监督控管机制不健全等</td></tr><tr><td>恶意代码</td><td>故意在计算机系统上执行恶意任务的程序代码</td><td>病毒、特洛伊木马、蠕虫、陷门、间谍软件、窃听软件、携带恶意软件的垃圾邮件、流氓安全软件、即时消息垃圾邮件等</td></tr><tr><td>越权或滥用</td><td>通过采用一些措施，超越自己的权限访问了本来无权访问的资源，或者滥用自己的权限，做出破坏信息系统的行为</td><td>非授权访问网络资源、非授权访问系统资源、滥用权限非正常修改系统配置或数据、滥用权限泄露秘密信息、非授权使用存储介质等</td></tr><tr><td>网络攻击</td><td>利用工具和技术通过网络对信息系统进行攻击和入侵</td><td>网络探测和信息采集、漏洞探测、嗅探（账号、口令、权限等）、用户身份伪造和欺骗、用户或业务数据的窃取和破坏、系统运行的控制和破坏、拒绝服务攻击、僵尸网络、隐蔽式下载、名誉劫持、网络黑客的入侵等</td></tr><tr><td>物理攻击</td><td>通过物理的接触造成对软件、硬件、数据的破坏</td><td>物理接触、物理破坏、盗窃、勒索、罢工、内部员工蓄意破坏等</td></tr><tr><td>泄密</td><td>信息泄露给不应了解的他人</td><td>内部信息泄露、外部信息泄露等</td></tr><tr><td>篡改</td><td>非法修改信息，破坏信息的完整性使系统的安全性降低或信息不可用</td><td>篡改网络配置信息、篡改系统配置信息、篡改安全配置信息、篡改用户身份信息或业务数据信息等</td></tr><tr><td>抵赖</td><td>不承认收到的信息和所作的操作和交易</td><td>原发抵赖、接受抵赖、第三方抵赖等</td></tr></tbody></table><p>在这里可以看出威胁与攻击的区别和关系。攻击是威胁的一种类型，攻击是人为的蓄意的有计划采取的恶意破坏的行动。一般来说攻击比较容易检测到。</p><p><strong>网络信息安全风险</strong>是指特定的威胁利用网络管理对象所存在的脆弱性，导致网络管理对象的价值受到损害或丢失的可能性。简单的说，网络安全风险就是网络威胁发生的概率和所造成影响的乘积。</p><p><img src="https://img-blog.csdnimg.cn/20201204163838552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络安全风险分析"></p><p>本文整理自《信息安全工程师教程第2版》</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&lt;br&gt;&lt;strong&gt;网络信息安全管理&lt;/strong&gt;是指对网络资产采取合适的安全措施，以确保网络资产的可用性、完整性、可控制性和抗抵赖性，不致因网络设备、网络通信协议、网络服务、网络管理受到人为和自然因素的危害，而导致网络中断、信息泄露或破坏。网络信息管理对象主要包
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>初识威胁情报</title>
    <link href="https://xiejava.gitee.io/posts/3866c7c1/"/>
    <id>https://xiejava.gitee.io/posts/3866c7c1/</id>
    <published>2021-06-25T01:45:58.000Z</published>
    <updated>2021-06-25T01:48:13.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识威胁情报"><a href="#初识威胁情报" class="headerlink" title="初识威胁情报"></a>初识威胁情报</h1><p>随着网络空间的广度和深度不断拓展，当今网络攻击的多样化、复杂化、专业化，安全对抗日趋激烈，传统的安全思维模式和安全技术已经无法有效满足政企客户安全防护的需要，新的安全理念、新的安全技术不断涌现。业界普遍认同：仅仅防御是不够的，更加需要持续地检测与响应。而要做到更有效的检测与更快速的响应，安全情报必不可少。有效的威胁情报可以提高安全产品的对恶意攻击识别能力，提高溯源效率，并及时采取应对措施，减少甚至消除攻击的危害。</p><p>本文收集了互联网上的威胁情报的相关知识信息，试图从威胁情报的定义、分类、应用三个方面对威胁情报进行初步的认识。</p><h2 id="一、什么是威胁情报"><a href="#一、什么是威胁情报" class="headerlink" title="一、什么是威胁情报"></a>一、什么是威胁情报</h2><p>安全情报包含漏洞、资产、威胁、风险、运行和事件等多维度安全知识在内的知识集合。<strong>安全情报</strong>是一个宽泛的概念，主要包括了<strong>威胁情报</strong>、<strong>漏洞情报</strong>、<strong>事件情报</strong>以及<strong>基础数据情报</strong>。</p><p>根据Gartner对威胁情报的定义，<strong>威胁情报</strong>是一种基于证据的知识，包括了情境、机制、指标、影响和操作建议。威胁情报描述了现存的、或者是即将出现针对资产的威胁或危险，并可以用于通知主体针对相关威胁或危险采取某种响应。简单来说威胁情报是可以针对相关威胁采取行动的知识，可以帮助企业和组织快速了解到敌对方对自己的威胁信息，从而帮助他们提前做好威胁防范、更快速地进行攻击检测与响应、更高效地进行事后攻击溯源。</p><p>从严格意义上来讲，威胁情报和漏洞情报是不同的两种安全情报，不应该将它们混淆。从防御者的角度来看，获取<strong>漏洞情报是为了知己</strong>，而获取<strong>威胁情报是为了知彼</strong>。</p><h2 id="二、威胁情报分类"><a href="#二、威胁情报分类" class="headerlink" title="二、威胁情报分类"></a>二、威胁情报分类</h2><p>根据使用方法不同，威胁情报可分为三类</p><p><strong>战略情报</strong><br>包括安全调查报告、趋势分析、行业状况等战略层面的情报，可供企业CISO或安全负责人制定安全规划和投资策略，将有限的资源投入到最需要的地方。</p><p><strong>技术情报</strong><br>包括各种威胁的丰富化情报，以及相关信息。通过攻击事件相关的IP和域名的详细信息，以及攻击者相关的攻击事件及样本，安全分析师可以对重要安全事件做准确的分析，包括报警确认、攻击影响范围、攻击链以及攻击目的、技战方法等，并进行相应的安全预测和防范。</p><p><strong>战术情报</strong><br>包括各种面向安全设备或系统的，易于执行的高可信度威胁IOC (Indicator of Compromise)。安全运营团队利用高质量的威胁IOC可帮忙安全系统自动检测未知威胁，及早产生预警和通知，快速响应恶意攻击，提高企业安全防护能力。</p><p>根据数据本身威胁情报可以分为<strong>HASH值</strong>、<strong>IP地址</strong>、<strong>域名</strong>、<strong>网络或主机特征</strong>、<strong>TTPs</strong>（Tactics、Techniques &amp; Procedures，工具、技术、过程）等<br><img src="https://img-blog.csdnimg.cn/20210625092504657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_2,color_FFFFFF,t_70#pic_center" alt="威胁情报"></p><p><strong>HASH值</strong>：一般指样本、文件的HASH值，比如MD5和SHA系列。由于HASH函数的雪崩效应，文件任何微弱地改变，都会导致产生一个完全不同也不相关的哈希值。这使得在很多情况下，它变得不值得跟踪，所以它带来的防御效果也是最低的。</p><p><strong>​​IP地址</strong>：常见的指标之一，通过IP的访问控制可以抵御很多常见的攻击，但是又因为IP数量太大，任何攻击者均可以尝试更改IP地址，以绕过访问控制。</p><p><strong>​​域名</strong>：有些攻击类型或攻击手法也或者出于隐藏的目的，攻击者会通过域名连接外部服务器进行间接通信，由于域名需要购买、注册、与服务器绑定等操作使得它的成本相对IP是比较高的，对域名的把控产生的防御效果也是较好的。但是对于高级APT攻击或大规模的团伙攻击，往往会准备大量备用域名，所以它的限制作用也是有限。</p><p>​​<strong>网络或主机特征</strong>：这里指的特征可以是很多方面，比如攻击者浏览器的User-Agent、登录的用户名、访问的频率等，这些特征就是一种对攻击者的描述，这些情报数据可以很好的将攻击流量从其他的流量中提取出来，就会产生一种较好的防御效果。</p><p><strong>​​攻击工具</strong>：这里是指获取或检测到了攻击者使用的工具，这种基于工具的情报数据能够使得一批攻击失效，攻击者不得不进行免杀或重写工具，这就达到了增加攻击成本的目的。</p><p><strong>​​TTPs</strong>：Tactics、Techniques &amp; Procedures的缩写，指攻击者所使用的攻击策略、手法等，掌握了些信息就能明白攻击者所利用的具体漏洞，就能够针对性的布防，使得攻击者不得不寻找新的漏洞，所以这也是价值最高的情报数据。</p><p>从应用领域分类可以分为，<strong>机读情报（MRTI）</strong>、<strong>人读情报（PRTI）</strong>、<strong>画像情报</strong>和<strong>知识情报</strong>四类</p><p><strong>机读情报</strong>：可供机器理解和使用的情报，侧重于高频次、高准确性、强实效的应用场景。<br><strong>人读情报</strong>：信息量更大，需要更多的上下文、背景信息支持人工分析研判和应急响应。<br><strong>画像情报</strong>：针对单一的威胁、资产、漏洞、事件进行分析，形成相应的知识集，概念上类似于用户画像。<br><strong>知识情报</strong>：基于先验知识的规则模型和算法。这些模型和算法与平台之间高度匹配，可以快速导入平台，结合平台获得的各类数据、信息和情报，实现对某类特定类别的威胁、风险或特定事件的感知、分析、决策和处置。消费对象和应用场景集中于态势感知、SOC/SIEM类分析平台。</p><p>其中机读情报应用最广，基本已经被各大安全厂商在设备中集成，多以IoC或者Yara的形式存储。人读情报的格式比较宽泛，包括安全公告、漏洞预警、病毒/APT分析文章都属于这个类别。画像情报则是介于机读和人读情报中的一种，通常用结构化的标签和非结构化的备注来描述，针对单一的威胁、资产、漏洞、事件进行分析形成的知识集，也可以加入场景标注。而知识情报的提法主要是针对态势感知、SOC、SIEM类平台产品的，平台内置的先验规则如关联规则和知识图谱都属于这一类。</p><p>从情报市场来源来分可分为<strong>开源情报（OSINT）</strong>、<strong>商用情报</strong></p><p><strong>开源情报</strong>：Open Source Threat Intelligence 开源情报，免费从公开信息来源进行数据采集和分析后形成的情报。<br><strong>商用情报</strong>：Commercial Threat Intelligence 商业情报，在威胁情报领域，根据用户需求提供的付费情报。一般来说付费的准确度要稍高。</p><h2 id="三、威胁情报有什么用"><a href="#三、威胁情报有什么用" class="headerlink" title="三、威胁情报有什么用"></a>三、威胁情报有什么用</h2><p><strong>溯源分析</strong><br>威胁情报记录了外部攻击的大量信息，可以让安全分析师了解攻击方的情报，解决攻防战中信息不对称的困境。特别是在分析告警、进行溯源分析时，往往会在威胁情报系统中查询相关攻击 IP、Domain 等的具体信息，看看有没有攻击线索和方式，可以用作告警确认和进一步处理的依据。</p><p><strong>检测告警</strong><br>数字化时代的黑客的攻击也逐渐自动化、智能化，每天企业都会受到大量的外部攻击，依靠人去一个个分辨是不现实的，企业往往部署了可以对外部流量或外部日志进行自动化分辨的安全设备和系统，比如 FW 、 IDPS 、 SIEM 或大数据安全分析平台。如果将最新的威胁情报传输到这些 安全设备和系统中，就可以极大的提高这些设备系统对新型攻击的检测能力。<br>情报厂商往往将这些有价值的情报以IOC 的形式发布出来，用户可以将这些 IOC 导入到部署的安全设备系统中，从而可以快速实现对新型威胁攻击的识别、告警和处理。</p><p><strong>安全预防</strong><br>防守不是最好的策略，在如今企业每日都面对各式各样的网络攻击，单纯的被动防守已经无法阻挡黑客的攻击。如果能预知攻击并提前预防就可以减小不少攻击的损失。<br>通过漏洞情报可以在攻击到来之前获悉攻击的信息，事先做好准备，修复相关漏洞，加强安全防护，避免威胁攻击带来的危害。</p><p><strong>安全规划</strong><br>安全工作是一个系统性的工程，需要方方面面的知识和信息。为了做好安全规则，需要了解威胁攻击的总体现状和未来发展趋势，同时还要提供相关信息用以说明管理层提供相关投资。高级威胁情报信息可以帮助安全团队领导了解威胁攻击的状况以及预测，方便企业制定好相应安全规划和投资。</p><p><strong><em>实用的情报才是最好的情报</em></strong><br>情报的“ART”原则，符合“ART”原则的才是对企业有用的情报。<br><strong>Accuracy（准确性）</strong>：情报是否足够详细和可靠<br>威胁情报的作用是为安全团队提供相关信息并指导决策，如果情报不准确，不但没有产生价值，反而会对组织的安全决策会造成负面影响。<br><strong>Relevance（相关性）</strong>：情报是否可适用于你的业务或行业<br>不是所有的信息都是适用的，相关性较弱的情报会导致分析人员的繁重任务，并且会导致其他有效情报的时效性失效。<br><strong>Timeliness（时效性）</strong>：在你利用些情报前，情报是否已经失效<br>威胁情报是信息的集合，凡是信息，都具有时效性。往往情报的有效时间会很短，攻击者会为了隐藏自己的踪迹不断的更换一些特征信息，比如说IP地址、手法等等。</p><p>威胁情报要发挥价值，核心在于情报信息的共享。只有建立起一套威胁情报共享的机制，让有价值的威胁情报流动起来，才能真正加速安全防御的效率、效能，取得切实的防御效果。<br>威胁情报的生态系统包括两个方面：威胁情报的生产和威胁情报的消费。<br>威胁情报的生产就是通过对原始数据/样本的采集、交换、分析、追踪，产生和共享有价值的威胁情报信息的过程。<br>威胁情报的消费是指将企业和客户网络中的安全数据与威胁情报进行比对、验证，以及企业和客户方的安全分析师利用威胁情报进行分析的过程。<br>威胁情报的生产和消费构成了一个情报生态系统的闭环。只有生产没有消费，威胁情报的价值无法实现；而只有消费没有生产，威胁情报就成了无源之水。</p><p>对于政企客户而言，威胁情报的应用/消费是实现情报价值的关键。各类安全设备都应该能够消费威胁情报，但最关键的是安全管理平台/SOC对威胁情报的应用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初识威胁情报&quot;&gt;&lt;a href=&quot;#初识威胁情报&quot; class=&quot;headerlink&quot; title=&quot;初识威胁情报&quot;&gt;&lt;/a&gt;初识威胁情报&lt;/h1&gt;&lt;p&gt;随着网络空间的广度和深度不断拓展，当今网络攻击的多样化、复杂化、专业化，安全对抗日趋激烈，传统的安全思维模式
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何理解企业安全能力框架(IPDRR)</title>
    <link href="https://xiejava.gitee.io/posts/6b94b28d/"/>
    <id>https://xiejava.gitee.io/posts/6b94b28d/</id>
    <published>2021-06-17T08:49:08.000Z</published>
    <updated>2021-06-17T09:11:33.543Z</updated>
    
    <content type="html"><![CDATA[<p>企业安全能力框架(IPDRR)是美国国家标准与技术研究所（National Institute of Standards and Technology）的网络安全框架（简称NISTCSF )。第一个版本于2014年发布，旨在为寻求加强网咯安全防御的组织提供指导。企业可以根据自身需求加强网络安全防御。<br><img src="https://img-blog.csdnimg.cn/20210617155234944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="企业网络安全系统框架"><br>企业网络安全系统框架（参考IPDRR）</p><p>随着社会数字化转型的深入，网络攻击事件日益增多、破坏力逐步增强。安全方法论也正逐步从”针对威胁的安全防御”向“面向业务的安全治理”（IPDRR）等演进。</p><p>IPDRR能力框架模型包括风险识别（Identify）、安全防御（Protect）、安全检测（Detect）、安全响应（Response）和安全恢复（Recovery）五大能力，从以防护为核心的模型，转向以检测和业务连续性管理的模型，变被动为主动，最终达成自适应的安全能力。</p><p>IPDRR模型体现了安全保障系统化的思想，管理与技术结合来有效保障系统核心业务的安全。通过持续的安全检测来实现IPDRR的闭环安全，为用户提供完善的安全能力框架和支撑体系。</p><p>具体来说IPDRR主要包含了五个部分：<br><strong>识别（Identify）</strong>：识别网络资产及风险，是指对系统、资产、数据和网络所面临的安全风险的认识及确认<br><strong>保护（Protect）</strong>：保护网络，是指制定和实施合适的安全措施，确保能够提供关键基础设施服务。<br><strong>检测（Detect）</strong>：发现攻击，在攻击产生时即时监测，同时监控业务和保护措施是否正常运行，制定和实施恰当的行动以发现网络安全事件<br><strong>响应（Respond）</strong>：响应和处理事件，指对已经发现的网络安全事件采取合适的行动。具体程序依据事件的影响程度来进行抉择，主要包括：事件调查、评估损害、收集证据、报告事件和恢复系统<br><strong>恢复（Recover）</strong>：恢复系统和修复漏洞，将系统恢复至正常状态，同时找到事件的根本原因，并进行预防和修复</p><p>可以参考大家对实体财物是怎么保护的就很容易理解了。举个例子，大家如何对自己的私有财产是怎么保护的呢？<br>第一步识别（Identify）肯定是识别出有哪些资产分别都有什么风险吧，比如家里的现金、金银珠宝、贵重电器、房产证、82年的拉菲、92年的茅台等等对于我们来说都是属于我们要保护的资产，这些都有被小偷偷走，被破坏等风险。所以我们需要采取一定的措施将这些资产给保护起来。<br>比如现金、金银珠宝、房产证等放在保险柜里，82年的拉菲、92年的茅台等搞个酒窖上好锁，家里的房子装好防护门、防盗窗等，这些就是第二步保护（Protect），对需要保护的资产做好基本的防护。做到了这些够不够呢？显然是不够的，这只是做好被动防御，我们还要做好主动防御，也就是第三步检测（Detect），这时候我们可以装一些监控设备摄像头、传感器等等，看时时刻刻监控我们所要保护的资产看有没有什么情况，还可以雇佣一批保安7*24小时巡逻实时监测。响应（Respond）也就是发现了什么风吹草动，就采取响应的措施，比如如果是有人破门而入就及时的告警，制止，报警。恢复（Recover）就是对易发生的损失进行恢复，如有人破门而入把门给搞坏了，就得把门重新修好或换一个新的级别更高更安全的门。</p><p>企业的网络安全也是一样的。首先要识别自己企业的网络安全资产如重要系统、服务器等都部署在哪里，有没有漏洞，基线配置有没有合规。然后需要做好基本的防护，比如在出入口部署防火墙、主机装EDR、Web服务器要在WAF的保护下、做好访问控制、部署IPS设备等等。有了基础的防护设备以后要做好检测响应比如部署NTA做好流量检测分析、部署SIEM或日志分析系统将这些基础防护设备的告警精心接入做好安全告警的检测分析。通过检测设备发现网络安全事件以后要采取响应的响应措施，比如发现漏洞要进行补洞加固等、发现攻击封堵IP等，可以通过SOAR安全编排与自动化响应平台对人、工具、流程进行协同提高对于安全事件的响应能力。最后是恢复，也就是对已经造成的破坏进行恢复至正常状态，对于失陷的主机进行离网、杀毒、重装、恢复等。</p><p>本文试图对市面上常见的安全产品进行分类来映射到IPDRR的五大能力<br><strong>识别（Identify）</strong>提供识别能力的产品包括资产管理平台、资产测绘平台、基线管理平台、漏洞扫描工具等。<br><strong>保护（Protect）</strong>提供保护能力的产品包括主机防御类EDR、VPN、4A、防火墙、IPS、WAF、抗DOS等<br><strong>检测（Detect）</strong> 提供威胁检测能力的产品包括IDS、NTA、蜜罐、恶意代码检测、用户异常行为检测等。<br><strong>响应（Respond）</strong>：提供响应能力的产品包括SIEM、安全审计、态势感知、SOAR等<br><strong>恢复（Recover）</strong>：提供恢复能力的产品包括NG-SOC，NG-SOC理论上应该是覆盖了IPDRR所有的能力。<br><img src="https://img-blog.csdnimg.cn/20210617155308964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="IPDRR产品能力映射"></p><p>当然企业安全能力不能够仅仅的依靠工具，是人、策略、流程、工具综合能力的体现。企业可以根据自身需求参考IPDRR能力框架模型加强网络安全能力建设，哪里欠缺补哪里，通过管理与技术结合来有效保障系统核心业务的安全。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;企业安全能力框架(IPDRR)是美国国家标准与技术研究所（National Institute of Standards and Technology）的网络安全框架（简称NISTCSF )。第一个版本于2014年发布，旨在为寻求加强网咯安全防御的组织提供指导。企业可以根据
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>再见2020,2021我来了！</title>
    <link href="https://xiejava.gitee.io/posts/e5fab05b/"/>
    <id>https://xiejava.gitee.io/posts/e5fab05b/</id>
    <published>2020-12-31T16:13:00.000Z</published>
    <updated>2020-12-31T16:51:20.019Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2021年1月1日，按照惯例应该是回忆过去展望未来的一天。</p><h2 id="回忆过去："><a href="#回忆过去：" class="headerlink" title="回忆过去："></a>回忆过去：</h2><p>在过去的一年里，曾今在2020年立下的flag是否都实现了呢？</p><p><strong>2020的flag：</strong></p><ul><li>看完10本英文原著。</li><li>爱分享网站运营PV要达5W,UV达5千</li><li>每周至少发一篇微信公众号文章</li><li>开通自己的博客</li><li>每周至少跑步3次</li></ul><p>2020年完成得最好的是看完了10本英文原著，因为2020过春节到第一季度受疫情影响，老老实实待在家里。在5月份就看完了10本英文原著。但是后来却没有坚持下来。看英文原著的热情慢慢的消退下来。一是看了这么多本原著似乎英文还是那么的菜打击了自己的信心，二是看英文原著比较耗时间4、5月份开始正常上班后时间就显得比较紧张了。后来7月份的时候准备考通信工程师的考试，时间更加紧张。所以继续看英文原著的事情就放下来了。英文很重要，学习英文2020年还是要继续坚持。</p><p> 爱分享网站因为各种原因在7月份的时候基本上已经停了，但是服务器还在续费。其实在5,6月份以前网站的访问量等各方面指标都一直在上升，因为疫情大家可能待在家里看书的需求量大增，网站的访问量一直都在持续的上升。如果网站不停基本上运营的flag还是可以达到的。现在的环境对于个人网站来说很艰难了。网站还会继续下去主要内容会以自己的博客为主了。</p><p>因为网站基本停了，一直在想网站生存的方向。微信公众号的文章也比较少更新了。还是自己肚子里的货太少了，写了一段时间以后发现没啥东西写了，坚持不下去了。真佩服那些现在还在每天更新的微信公众号。</p><p>经过多方比较决定用hexo来搭建自己的博客。写博客已经被认为是很古老的方式了，一直以来都很羡慕那些一直坚持下来的优质博主。想通过博客的方式记录自己的学习、生活、工作。2020年共写了24篇博客，产量不是很高，说明思考和积累还是不够。</p><p>跑步锻炼，在夏天天气好的时候还是坚持得不错，每周基本上坚持了一次。天气渐渐冷了起来以后懒筋发作很少出去跑步了。看着自己日益发胖的体重，要深刻的检讨一下。</p><p>2020年全年阅读量有所减少在豆瓣上标记只读了29本书。因为2020年中旬的时候决定考通信工程师和信息安全工程师，所以其他书看得比较少了。经过几个月的努力，顺利通过了通信工程师和信息安全工程师的考试。虽然2020年年初立的flag很多都没有完成，完成了的效果也不是特别好，但是过了通信工程师和信息安全工程师心里稍微有点宽慰。毕竟2020年努力过。</p><h2 id="展望未来："><a href="#展望未来：" class="headerlink" title="展望未来："></a>展望未来：</h2><p>不管怎么样，2020年已经成为过去式了。崭新的2021已经来到，先立下2021年的flag。</p><p><strong>2021年flag:</strong></p><ul><li>考CISP</li><li>考一建</li><li>发两篇论文</li><li>至少写30篇博客文章</li><li>完成12本英文原著</li><li>完成50本书籍的阅读量</li></ul><p>2021加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是2021年1月1日，按照惯例应该是回忆过去展望未来的一天。&lt;/p&gt;
&lt;h2 id=&quot;回忆过去：&quot;&gt;&lt;a href=&quot;#回忆过去：&quot; class=&quot;headerlink&quot; title=&quot;回忆过去：&quot;&gt;&lt;/a&gt;回忆过去：&lt;/h2&gt;&lt;p&gt;在过去的一年里，曾今在2020年立下
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>工作这么多年了，我为什么还在考证</title>
    <link href="https://xiejava.gitee.io/posts/9fed4f95/"/>
    <id>https://xiejava.gitee.io/posts/9fed4f95/</id>
    <published>2020-12-21T06:31:02.000Z</published>
    <updated>2020-12-31T16:41:10.880Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201218163950384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="学习学习"></p><p>工作这么多年了，我为什么还在考证？</p><p>因为以前一直没有考过啊！</p><p>毕业以来参加工作后，一直以来认为考证没有啥用处。一方面，因为找工作太过顺利，那会儿找工作也没有看到别人拿什么证去找工作，也没有看到那家公司的招聘广告上写需要什么什么证书。另一方面，由于才从学校出来对于学习考试有种天然的排斥。想想这么多年以来一直都是在学习考试。好不容易毕业了那还不好好放松一下。现在回想起来真是too young,too simple。</p><p>工作这么多年，都是在从事研发相关的工作。一开始写代码，要学的东西挺多的，从毕业时候的ASP到Java。能够完成工作任务，能够做出东西来才是硬道理。后来做项目经理，产品经理也是没有经过系统的培训和学习，在项目中磨练在项目中成长。在公司也带了几个重点大项目，项目也交付得令公司和客户比较满意。想想这研发和项目管理就那么回事。貌似所有的公司都是一样，不管你用什么办法，能够搞定项目的就是好的项目经理。至于有没有证没人关注。甚至公司过CMMI5的时候，我带的项目被抽为参审项目，我还没有系统的学过项目管理。虽然CMMI5已经过了，但是总感觉过得挺虚的。基本上就是在咨询公司的指导下，要你干什么就干什么，要你准备什么就准备什么。至于为啥是这样完全是懵逼。</p><p>人过中年，似乎不管到哪里都充满着危机感。以前自以为自己技术很牛逼，项目管理方面也是相当的OK。随着时间的推移这种自信心慢慢的越来越消退。大家都说搞IT的就是吃青春饭。就像随着年龄的增长，身体越来虚一样，心里也是越来越虚。心里虚了以后就想自己应该多学习提高自己。但是一段时间发现要学的东西实在是太多了，技术的、管理的。东一下西一下的，也没有什么效果。后来自己总结了一下，没有目标的学习都是假装在学习，只不过是安慰自己罢了。一定要给自己定个目标要学哪个方向，而检验学习效果的办法非常简单粗暴–考证。以考促学。能够考证通过不能说明你学得有多么的精深，至少也说明你达到了基本的平均水平。没有考试就没有压力，一本书拖拖拉拉看了一年还在看。而考试时间临近的压力对于深度拖延症患者也是一个很好的治愈方式。</p><p>就这样，我给自己制定的第一个学习目标就是系统的学习项目管理的理论体系，所以报了软考的信息系统项目管理师。经过半年多的学习顺利的拿到了信息系统项目管理师的证。学习的时候还是有一些感触，原来自己在平时的项目管理工作中还是有理论支撑的，人家在书中就已经写了。一些平时没有注意考虑到的点书上也有总结。回想起自己带的项目过CMMI5和过ISO认证等，以及公司的项目管理体系和质量管理体系结合书中的知识点，至少把我零散的一些项目管理知识和经验给系统化、体系化的联系起来了，让我对项目管理有了更深切的理解。尤其是在后来信息系统项目管理师考试写论文的时候，就能够可以很好的理论联系实践。</p><p>嗯，工作这么多年，我终于可以持证上岗了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201218163950384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="学习考试" scheme="https://xiejava.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>网络信息安全管理要素和安全风险评估</title>
    <link href="https://xiejava.gitee.io/posts/8a1fa561/"/>
    <id>https://xiejava.gitee.io/posts/8a1fa561/</id>
    <published>2020-12-04T08:41:52.000Z</published>
    <updated>2020-12-31T16:44:57.278Z</updated>
    
    <content type="html"><![CDATA[<p>网络信息安全管理要素由网络管理对象、网络威胁、网络脆弱性、网络风险、网络保护措施组成。<br><img src="https://img-blog.csdnimg.cn/20201204163036136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络信息安全管理要素"><br>由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。</p><p>网络安全管理实际上就是风险控制，其基本过程是通过网络管理对象的威胁和脆弱性进行分析，确定网络管理对象的价值、网络管理对象威胁发生的可能性、网络管理对象的脆弱程度，从而确定网络管理对象的风险等级，然后据此选取合适的安全保护措施，降低网络管理对象的风险。</p><p>所有的安全管理、安全服务、安全技术等都是围绕网络信息安全管理要素来的。</p><p>网络安全风险评估是评价网络信息系统遭受潜在的安全威胁所产生的影响。</p><p>网络安全风险，是指由于网络系统所存在的脆弱性，因人为或自然的威胁导致安全事件发生所造成的可能性。网络风险评估就是评估威胁者利用网络资产的脆弱性，造成网络资产损失的严重程度。</p><p>网络安全风险评估过程，主要包括网络安全风险评估准备、资产识别、威胁识别、脆弱性识别、已有的安全措施分析、网络安全风险分析、网络安全风险处置与管理等。<br><img src="https://img-blog.csdnimg.cn/20201204163226746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络安全风险评估过程"><br><strong>资产识别</strong>包含“网络资产鉴定”和“网络资产价值估算”。前者给出评估所考虑的具体对象，确认网络资产种类和清单，是整个评估工作的基础。常见的网络资产主要分为网络设备、主机、服务器、应用、数据和文档资产等六个方面。</p><p>“网络资产价值估算”是某一具体资产在网络系统中的重要程度确认。</p><p>威胁是指可能对评估对象造成损害的外部原因。威胁利用评估对象自身的脆弱性，采用一定的途径和方式，对评估对象造成损害或损失，从而形成风险，<strong>威胁识别</strong>是对网络资产有可能受到的安全危害进行分析，一般从威胁来源、威胁途径、威胁意图等几个方面来分析。</p><p>脆弱性是指评估对象存在一个或多个脆弱的管理、技术、业务方面的漏洞，这些漏洞可能会被威胁所利用。<strong>脆弱性识别</strong>是指通过各种测试方法，获得网络资产中所存在的缺陷清单，这些缺陷会导致对信息资产的非授权访问、泄密、失控、破坏或不可用、绕过已有的安全机制，缺陷的存在将会危及网络资产的安全。</p><table><thead><tr><th>任务</th><th>输出文档</th><th>文档内容</th></tr></thead><tbody><tr><td>风险评估准备</td><td>会议记录并确认需要评估的系统、评估计划和评估程序</td><td>评估系统、评估计划和内容安排，双方负责人及需要明确的协调工作</td></tr><tr><td>访谈</td><td>针对业务系统进行技术安全和管理安全评估的访谈表</td><td>业务系统描述、运营情况和用户群体，并了解业务管理流程</td></tr><tr><td>文档审查（资产识别）</td><td>资产审查记录和业务系统审查记录</td><td>资产管理台账、网络拓扑图、业务运营管理制度和责任人</td></tr><tr><td>威胁识别</td><td>技术安全测评的网络、主机、应用测评结果记录，工具测试完成后的电子输出记录</td><td>漏洞扫描、渗透性测试、性能测试、入侵检测和协议分析等内容的技术测试结果</td></tr><tr><td>脆弱性识别</td><td>根据威胁识别结果，技术安全测评的网络、主机、应用测评</td><td>检查检查内容的记录，并根据威胁对业务系统脆弱性进行识别</td></tr><tr><td>风险处置</td><td>风险处置措施记录</td><td>对已识别的风险进行评估和处置，并评估是否存在残余风险</td></tr><tr><td>风险管理</td><td>对可接受的残余风险进行风险管理并出具风险评估报告</td><td>风险评估过程中发现的问题、问题的证据和证据源、每项检查活动中测评委托单位配合人员的书面认可</td></tr></tbody></table><p>网络安全风险分析是指在资产评估、威胁评估、脆弱性评估、安全管理评估、安全影响评估的基础上，综合利用定性和定量的分析方法，选择适当的风险计算方法或工具确定风险的大小与风险等级，即对网络系统安全管理范围内的每一个网络资产因遭受泄露、修改、不可用和破坏所带来的任何影响做出一个风险测量的列表，以便识别与选择适当和正确的安全控制方式。通过分析所评估的数据，进行风险值计算。</p><p><img src="https://img-blog.csdnimg.cn/20201204163838552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络安全风险分析"><br>网络安全风险分析的主要步骤如下：<br>一、对资产进行识别，并对资产的价值进行赋值。<br>二、对威胁进行识别，描述威胁的属性，并对威胁出现的频率赋值。<br>三、对脆弱性进行识别，并对具体资产的脆弱性的严重程度赋值。<br>四、根据威胁及威胁利用脆弱性的难易程度判断安全事件发生的可能性<br>五、根据脆弱性的严重程度及安全事件所作用的资产价值计算安全事件的损失。<br>六、根据安全事件发生的可能性及安全事件出现后的损失，计算安全事件一旦发生对组织的影响，即网络安全风险值。其中，安全事件损失是指确定已经鉴定的资产受到损害所带来的影响。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络信息安全管理要素由网络管理对象、网络威胁、网络脆弱性、网络风险、网络保护措施组成。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201204163036136.png?x-oss-process=image/watermark,
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>pyinstaller打包exe后不能运行报Failed to execute script XXXX问题分析与处理</title>
    <link href="https://xiejava.gitee.io/posts/19a32f6f/"/>
    <id>https://xiejava.gitee.io/posts/19a32f6f/</id>
    <published>2020-11-03T09:16:00.000Z</published>
    <updated>2020-12-02T01:00:49.781Z</updated>
    
    <content type="html"><![CDATA[<p>最近用python的tkinter写了个小工具，发现用pyinstaller打包成exe后运行出错。报Failed to execute script XXXX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w worksubmit.py</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201101171716408.png#pic_center" alt="报错"><br>为了搞清楚报错的原因，想看到程序具体执行的情况。可以通过不带-w的参数打包在控制台看程序执行情况。<br><code>pyinstaller -F worksubmit.py</code> 可以通过不带-w的参数打包，这时打包的exe运行是带控制台的命令行<br><img src="https://img-blog.csdnimg.cn/20201101172133371.png#pic_center" alt="运行情况"><br>可以清楚的看到</p><blockquote><p>ModuleNotFoundError:No module named ‘xlrd’</p></blockquote><p>这时就要解决打包时xlrd模块没有打进去的问题，找到xlrd模块的位置，并将该模块打到运行程序包里。<br>先找到程序依赖的xlrd模块的位置，在PyCharm中通过”File”-&gt;”Setting”,在项目设置里查看Project interpreter，可以看到xlrd的目录位置。<br><img src="https://img-blog.csdnimg.cn/20201101172227853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70#pic_center" alt="找包路径"></p><p>用pyinstall打包的时候通过加-p的参数将依赖的模块打进去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -p J:\study\python\testsubmit\venv\Lib\site-packages worksubmit.py</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201101172053955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样就可以顺利将依赖的模块打进去，再执行exe文件不再报错了。</p><p><strong>总结一下，碰到打包成exe后运行有问题，可以通过不带-w的参数打包，这时打包的exe运行是带控制台的命令行。基本上所有的运行问题都可以通过控制台的命令定位和排查。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近用python的tkinter写了个小工具，发现用pyinstaller打包成exe后运行出错。报Failed to execute script XXXX&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>等级保护与分级保护的关系和区别</title>
    <link href="https://xiejava.gitee.io/posts/dc4d08f1/"/>
    <id>https://xiejava.gitee.io/posts/dc4d08f1/</id>
    <published>2020-10-24T08:35:36.000Z</published>
    <updated>2020-12-31T16:44:23.913Z</updated>
    
    <content type="html"><![CDATA[<p>等级保护与分级保护既有联系又有区别：</p><p>国家安全信息等级保护，重点保护的对象是非涉密的涉及国计民生的重要信息系统和通信基础信息系统；涉密信息系统分级保护是国家信息安全等级保护的重要组成部分，是等级保护在涉密领域的具体体现。</p><p>国家安全信息等级保护重点保护的对象是涉及国计民生的重要信息系统和通信基础信息系统，而不论它是否涉密。涉密信息系统分级保护保护的对象是所有涉及国家秘密的信息系统，重点是党政机关、军队和军工单位，由各级保密工作部门根据涉密信息系统的保护等级实施监督管理，确保系统和信息安全，确保国家秘密不被泄漏。</p><p>国家信息安全等级保护是国家从整体上、根本上解决国家信息安全问题的办法,进一步确定了信息安全发展的主线和中心任务,提出了总体要求。对信息系统实行等级保护是国家法定制度和基本国策，是开展信息安全保护工作的有效办法，是信息安全保护工作的发展方向。而涉密信息系统分级保护则是国家信息安全等级保护在涉及国家秘密信息的信息系统中的特殊保护措施与方法。</p><p><strong>等级保护与分级保护本质的区别是等级保护适用的对象为非涉密信息系统，分级保护适用的对象为涉密信息系统。</strong></p><p>具体区别如下：</p><table><thead><tr><th>项目</th><th>等级保护</th><th>分级保护</th></tr></thead><tbody><tr><td>管理体系</td><td>公安机关</td><td>国家保密部门</td></tr><tr><td>标准体系</td><td>国家标准（GB、GB/T）</td><td>国家保密标准（BMB，强制执行）</td></tr><tr><td>适用对象</td><td>非涉密信息系统</td><td>涉密信息系统</td></tr><tr><td>定级依据</td><td>等级保护定级是依据重要业务系统与承载业务运行的网络、设备、系统及单位属性、遭到破坏后所影响的主、客体关系等。</td><td>分级保护定级是依据信息的重要性，以信息最高密级确定受保护的级别。</td></tr><tr><td>级别划分</td><td>第一级：自主保护级<br>第二级：指导保护级<br>第三极：监督保护级<br>第四级：强制保护级<br>第五级：专控保护级</td><td>秘密级<br>机密级<br>绝密级</td></tr><tr><td>工作内容</td><td>信息系统等级保护工作包括：<br>系统定级、系统备案、安全建设整改、等级测评和监督检查五个环节。</td><td>涉密信息系统分级保护工作包括:<br>系统定级、方案设计、工程实施、系统测评、系统审批、日常管理、测评与检查和系统废止八个环节。</td></tr><tr><td>测评频率</td><td>第三级信息系统：应每年至少进行一次等级测评；<br>第四级信息系统：应每年至少进行一次等级测评；<br>第五级信息系统：应当根据特殊安全要求进行等级测评。</td><td>秘密级、机密级信息系统：应每两年至少进行一次安全保密测评或保密检查；<br>绝密级信息系统：应每年至少进行一次安全保密测评或保密检查。</td></tr><tr><td>评测机构</td><td>国家信息安全等级保护工作协调小组办公室授权的信息安全等级保护测评机构</td><td>由国家保密工作部门授权的系统测评机构</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;等级保护与分级保护既有联系又有区别：&lt;/p&gt;
&lt;p&gt;国家安全信息等级保护，重点保护的对象是非涉密的涉及国计民生的重要信息系统和通信基础信息系统；涉密信息系统分级保护是国家信息安全等级保护的重要组成部分，是等级保护在涉密领域的具体体现。&lt;/p&gt;
&lt;p&gt;国家安全信息等级保护重点
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor离线安装及使用</title>
    <link href="https://xiejava.gitee.io/posts/d670c9b8/"/>
    <id>https://xiejava.gitee.io/posts/d670c9b8/</id>
    <published>2020-05-18T03:35:36.000Z</published>
    <updated>2020-05-18T03:39:02.356Z</updated>
    
    <content type="html"><![CDATA[<p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警</p><p>supervisor的安装有多种方式<br>配置好yum源后，可以直接安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install supervisor</span><br></pre></td></tr></table></figure><p>Debian/Ubuntu可通过apt安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure><p>pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>easy_install安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easy_install</span><br></pre></td></tr></table></figure><p>这几种安装方式都需要在线联网。但大部分的生产环境都是离线环境，是封闭的网络没有办法在线安装。</p><p>这里整理了Supervisor的离线安装包和安装脚本，可以进行离线安装并能指定安装目录。</p><h1 id="一、整理Supervisor安装需要的工具和依赖包"><a href="#一、整理Supervisor安装需要的工具和依赖包" class="headerlink" title="一、整理Supervisor安装需要的工具和依赖包"></a>一、整理Supervisor安装需要的工具和依赖包</h1><p>包括有：<br>setuptools<br>elementtree<br>meld3<br>supervisor</p><h1 id="二、编写离线安装脚本"><a href="#二、编写离线安装脚本" class="headerlink" title="二、编写离线安装脚本"></a>二、编写离线安装脚本</h1><p>整体思路：依次解压并安装Supervisor所需要的工具和依赖包，将Supervisor的配置文件的默认安装目录路径替换成制定的目录路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi install_supervisor.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="keyword">function</span> Install_Supervisor()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#Install supervisord</span></span><br><span class="line">    tar -zxvf setuptools-24.0.2.tar.gz 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line">    <span class="built_in">cd</span> setuptools-24.0.2/</span><br><span class="line">    python setup.py install &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cd</span> ..</span><br><span class="line">    easy_install elementtree-1.2.7-20070827-preview.zip &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    easy_install meld3-0.6.5.tar.gz 2&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    easy_install supervisor-3.3.0.tar.gz &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    mkdir -p <span class="variable">$&#123;INSTALL_DIR&#125;</span>/etc/</span><br><span class="line">    mkdir -p <span class="variable">$&#123;INSTALL_DIR&#125;</span>/tmp/</span><br><span class="line">    mkdir -p <span class="variable">$&#123;INSTALL_DIR&#125;</span>/logs/</span><br><span class="line">    cp etc/supervisord.conf <span class="variable">$&#123;INSTALL_DIR&#125;</span>/etc/</span><br><span class="line">    sed -i <span class="string">"s#__install_dir__#<span class="variable">$&#123;INSTALL_DIR&#125;</span>#g"</span> <span class="variable">$&#123;INSTALL_DIR&#125;</span>/etc/supervisord.conf</span><br><span class="line">    sed -i <span class="string">"s#__user__#<span class="variable">$&#123;USER&#125;</span>#g"</span> <span class="variable">$&#123;INSTALL_DIR&#125;</span>/etc/supervisord.conf</span><br><span class="line">    ln -s /usr/bin/supervisorctl <span class="variable">$&#123;INSTALL_DIR&#125;</span>/commandctl</span><br><span class="line">    cp run_supervisor.sh <span class="variable">$&#123;INSTALL_DIR&#125;</span>/</span><br><span class="line">    sed -i <span class="string">"s#__install_dir__#<span class="variable">$&#123;INSTALL_DIR&#125;</span>#g"</span> <span class="variable">$&#123;INSTALL_DIR&#125;</span>/run_supervisor.sh</span><br><span class="line">    chmod +x <span class="variable">$&#123;INSTALL_DIR&#125;</span>/run_supervisor.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">USER=<span class="string">'root'</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">   INSTALL_DIR=<span class="string">'/app/supervisor'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   INSTALL_DIR=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">Install_Supervisor</span><br></pre></td></tr></table></figure><p>安装脚本中默认的安装路径是/app/supervisor，可以根据实际情况进行调整。</p><p>另外整理了一个run_supervisor.sh的脚本，在安装以后根据安装目录来生成这个启动脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">cd</span> __install_dir__</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"tmp"</span> ];<span class="keyword">then</span></span><br><span class="line">  mkdir tmp</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"tmp文件夹已经存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"logs"</span> ];<span class="keyword">then</span></span><br><span class="line">  mkdir logs</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"logs文件夹已经存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">/usr/bin/supervisord -c __install_dir__/etc/supervisord.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"supervisord 已执行。"</span></span><br></pre></td></tr></table></figure><h1 id="三、将所有的安装包脚本等打成离线安装包"><a href="#三、将所有的安装包脚本等打成离线安装包" class="headerlink" title="三、将所有的安装包脚本等打成离线安装包"></a>三、将所有的安装包脚本等打成离线安装包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf  supervisor_install_pack.tar.gz  supervisor</span><br></pre></td></tr></table></figure><p>已打好的离线安装包下载 <a href="https://545c.com/file/21165215-443895501" target="_blank" rel="noopener">https://545c.com/file/21165215-443895501</a><br><a href="https://545c.com/file/21165215-443895501" target="_blank" rel="noopener">城通网盘下载</a>   <a href="https://545c.com/file/21165215-443895501" target="_blank" rel="noopener">https://545c.com/file/21165215-443895501</a><br><a href="https://download.csdn.net/download/fullbug/12434225" target="_blank" rel="noopener">CSDN下载</a> <a href="https://download.csdn.net/download/fullbug/12434225" target="_blank" rel="noopener">https://download.csdn.net/download/fullbug/12434225</a></p><h1 id="四、离线安装包使用"><a href="#四、离线安装包使用" class="headerlink" title="四、离线安装包使用"></a>四、离线安装包使用</h1><p>下载离线安包，解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf supervisor_install_pack.tar.gz</span><br></pre></td></tr></table></figure><p>解压后看到supervisor的目录，在supervisor的目录中找到install_supervisor.sh的脚本<br><img src="https://img-blog.csdnimg.cn/20200518111602385.png" alt="supervisor离线包安装目录"><br>执行install_supervisor.sh的脚本，默认安装/app/supervisor下，可以带参数指定安装目录。也可以修改install_supervisor.sh脚本自定义默认的安装路径。<br>执行完安装脚本，就可以在/app/supervisor目录下看到有相应的启动脚本、配置文件目录、日志目录及临时文件目录。<br><img src="https://img-blog.csdnimg.cn/20200518111653544.png" alt="supervisor运行目录"><br>执行run_supervisor.sh就可以启动supervisor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run_supervisor.sh</span><br></pre></td></tr></table></figure><h1 id="五、验证和使用supervisor"><a href="#五、验证和使用supervisor" class="headerlink" title="五、验证和使用supervisor"></a>五、验证和使用supervisor</h1><p>ps -ef|grep supervisor  查看supervisor是否已经启动<br><img src="https://img-blog.csdnimg.cn/20200518111736457.png" alt="查看supervisor是否已经启动"><br>通过web界面的9001看web界面控制台<a href="http://127.0.0.1:9001" target="_blank" rel="noopener">http://127.0.0.1:9001</a><br><img src="https://img-blog.csdnimg.cn/20200518111807123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="web界面控制台"></p><ul><li>supervisord<br>运行 Supervisor 时会启动一个进程 supervisord，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。<br>supervisord -v 查看supervisor版本号</li><li>supervisorctl<br>是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。<br>supervisor是所有进程的父进程，管理着启动的子进展，supervisor以子进程的PID来管理子进程，当子进程异常退出时supervisor可以收到相应的信号量。</li></ul><p><strong>supervisor常用管理命令</strong><br>supervisorctl restart &lt; application name&gt; ;重启指定应用<br>supervisorctl stop &lt; application name&gt; ;停止指定应用<br>supervisorctl start &lt; application name&gt; ;启动指定应用<br>supervisorctl restart all ;重启所有应用<br>supervisorctl stop all ;停止所有应用<br>supervisorctl start all ;启动所有应用</p><h1 id="六、配置文件说明"><a href="#六、配置文件说明" class="headerlink" title="六、配置文件说明"></a>六、配置文件说明</h1><h2 id="supervisor-conf配置文件"><a href="#supervisor-conf配置文件" class="headerlink" title="supervisor.conf配置文件"></a>supervisor.conf配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ;socket文件的mode，默认是0700</span><br><span class="line">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span><br><span class="line"> </span><br><span class="line">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span><br><span class="line">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user              ;登录管理后台的用户名</span><br><span class="line">;password=123               ;登录管理后台的密码</span><br><span class="line"> </span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ;日志文件，默认是 <span class="variable">$CWD</span>/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class="line">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ;pid 文件</span><br><span class="line">nodaemon=<span class="literal">false</span>               ;是否在前台启动，默认是<span class="literal">false</span>，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024。注意托管ES进程，这里要进行调整至65535</span><br><span class="line">minprocs=200                 ;可以打开的进程数的最小值，默认 200。注意托管ES进程，这里要进行调整至4096</span><br><span class="line"> </span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class="line"> </span><br><span class="line">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class="line">[program:xx]</span><br><span class="line"><span class="built_in">command</span>=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</span><br><span class="line">autostart=<span class="literal">true</span>       ; 在supervisord启动的时候也自动启动</span><br><span class="line">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class="line">autorestart=<span class="literal">true</span>     ; 程序退出后自动重启,可选值：[unexpected,<span class="literal">true</span>,<span class="literal">false</span>]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class="line">startretries=3       ; 启动失败自动重试次数，默认是3</span><br><span class="line">user=tomcat          ; 用哪个用户启动进程，默认是root</span><br><span class="line">priority=999         ; 进程启动优先级，默认999，值小的优先启动</span><br><span class="line">redirect_stderr=<span class="literal">true</span> ; 把stderr重定向到stdout，默认<span class="literal">false</span></span><br><span class="line">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</span><br><span class="line">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class="line">stopasgroup=<span class="literal">false</span>     ;默认为<span class="literal">false</span>,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class="line">killasgroup=<span class="literal">false</span>     ;默认为<span class="literal">false</span>，向进程组发送<span class="built_in">kill</span>信号，包括子进程</span><br><span class="line"> </span><br><span class="line">;包含其它配置文件</span><br><span class="line">[include]</span><br><span class="line">files = supervisord.d/*.ini    ;默认放在安装目录的supervisord.d目录下，可以指定一个或多个以.ini结束的配置文件。</span><br></pre></td></tr></table></figure><h2 id="子进程配置文件"><a href="#子进程配置文件" class="headerlink" title="子进程配置文件"></a>子进程配置文件</h2><p>需要给托管的子进程配置相应的配置文件，每个进程的配置文件都可以单独分拆也可以把相关的脚本放一起。目录及文件后缀可以在<br>supervisor.conf配置文件中进行自定义。见supervisor.conf的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = supervisord.d/*.ini  <span class="comment">#目录路径及文件后缀名都可以自定义。</span></span><br></pre></td></tr></table></figure><p>logstash.ini 样例说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#项目名</span></span><br><span class="line">[program:logstash-test]</span><br><span class="line"><span class="comment">#脚本目录</span></span><br><span class="line">directory=/app/elk/logstash-7.6.0</span><br><span class="line"><span class="comment">#脚本执行命令</span></span><br><span class="line"><span class="built_in">command</span>=/app/elk/logstash-7.6.0/bin/logstash -f /app/elk/logstash-7.6.0/bin/<span class="built_in">test</span>-pipeline.conf</span><br><span class="line"><span class="comment">#进程数</span></span><br><span class="line">numprocs=1</span><br><span class="line"><span class="comment">#supervisor启动的时候是否随着同时启动，默认True</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line"><span class="comment">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span></span><br><span class="line">autorestart=<span class="literal">false</span></span><br><span class="line"><span class="comment">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span></span><br><span class="line">startsecs=1</span><br><span class="line"><span class="comment">#脚本运行的用户身份 </span></span><br><span class="line">user = root</span><br><span class="line"><span class="comment">#把stderr重定向到stdout，默认 false</span></span><br><span class="line">redirect_stderr = <span class="literal">true</span></span><br><span class="line"><span class="comment">#stdout日志文件大小，默认 50MB</span></span><br><span class="line">stdout_logfile_maxbytes = 10M</span><br><span class="line"><span class="comment">#stdout日志文件备份数</span></span><br><span class="line">stdout_logfile_backups = 10</span><br><span class="line"><span class="comment">#日志输出 </span></span><br><span class="line">stderr_logfile=/app/elk/logstash-7.6.0/logs/logstash_test_error.log</span><br><span class="line">stdout_logfile=/app/elk/logstash-7.6.0/logs/logstash_test_out.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维" scheme="https://xiejava.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>logstash简明实用教程</title>
    <link href="https://xiejava.gitee.io/posts/a59d6c21/"/>
    <id>https://xiejava.gitee.io/posts/a59d6c21/</id>
    <published>2020-04-14T08:35:26.000Z</published>
    <updated>2020-04-14T08:52:46.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、logstash是什么"><a href="#一、logstash是什么" class="headerlink" title="一、logstash是什么"></a>一、logstash是什么</h1><p>Logstash 是开源的服务器端<strong>数据处理管道</strong>，能够同时从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中。<br>官方介绍：Logstash is an open source data collection engine with real-time pipelining capabilities。简单来说logstash就是一根具备实时数据传输能力的管道，负责将数据信息从管道的输入端传输到管道的输出端；与此同时这根管道还可以让你根据自己的需求在中间加上滤网，Logstash提供里很多功能强大的滤网以满足你的各种应用场景。<br>Logstash 能够动态地采集、转换和传输数据，不受格式或复杂度的影响。利用 Grok 从非结构化数据中派生出结构，从 IP 地址解码出地理坐标，匿名化或排除敏感字段，并简化整体处理过程。</p><p>Logstash常用于日志关系系统中做日志采集设备；<br><img src="https://img-blog.csdnimg.cn/20200414152706269.png" alt="logstash"><br>系统结构<br><img src="https://img-blog.csdnimg.cn/20200414153844982.png" alt="logstash系统结构"><br>Logstash的事件（logstash将数据流中等每一条数据称之为一个event）处理流水线有三个主要角色完成：<strong>inputs –&gt; filters –&gt; outputs</strong>：</p><p><strong>输入（inpust）</strong>：必须，负责产生事件（Inputs generate events），常用：File、syslog、redis、beats（如：Filebeats）<br>Logstash 支持 各种输入选择 ，可以在同一时间从众多常用来源捕捉事件。能够以连续的流式传输方式，轻松地从日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据。</p><p><strong>过滤器（filters）</strong>：可选，负责数据处理与转换（filters modify them），常用：grok、mutate、drop、clone、geoip<br>过滤器能实时解析和转换数据<br>数据从源传输到存储库的过程中，Logstash 过滤器能够解析各个事件，识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松、更快速地分析和实现商业价值。</p><ul><li>利用 Grok 从非结构化数据中派生出结构 </li><li>从 IP 地址破译出地理坐标 </li><li>将 PII 数据匿名化，完全排除敏感字段</li><li>简化整体处理，不受数据源、格式或架构的影响</li></ul><p><strong>输出（outpus）</strong>：必须，负责数据输出（outputs ship them elsewhere），常用：elasticsearch、file、graphite、statsd<br>Logstash 提供众多输出选择，可以将数据发送到指定的地方，并且能够灵活地解锁众多下游用例</p><p>其中inputs和outputs支持codecs（coder&amp;decoder）在1.3.0 版之前，logstash 只支持纯文本形式输入，然后以过滤器处理它。但现在，我们可以在输入 期处理不同类型的数据，所以完整的数据流程应该是：input | decode | filter | encode | output；codec 的引入，使得 logstash 可以更好更方便的与其他有自定义数据格式的运维产品共存，比如：graphite、fluent、netflow、collectd，以及使用 msgpack、</p><h1 id="二、为什么是logstash"><a href="#二、为什么是logstash" class="headerlink" title="二、为什么是logstash"></a>二、为什么是logstash</h1><p><strong>Logstash和Flume对比</strong><br>1、Logstash比较偏重于字段的预处理，在异常情况下可能会出现数据丢失，只是在运维日志场景下，一般认为这个可能不重要；而Flume偏重数据的传输，几乎没有数据的预处理，仅仅是数据的产生，封装成event然后传输；传输的时候flume比logstash多考虑了一些可靠性。因为数据会持久化在channel中，数据只有存储在下一个存储位置（可能是最终的存储位置，如HDFS；也可能是下一个Flume节点的channel），数据才会从当前的channel中删除。这个过程是通过事务来控制的，这样就保证了数据的可靠性。<br>2、Logstash有几十个插件，配置比较灵活，flume强调用户自定义开发；<br>3、Logstash的input和filter还有output之间都存在buffer，进行缓冲；Flume直接使用channel做持久化<br>4、Logstash性能以及资源消耗比较严重，且不支持缓存；<br><img src="https://img-blog.csdnimg.cn/20200414154043951.png" alt="Logstash和Flume对比"><br>详见参考：<a href="https://blog.csdn.net/songfeihu0810232/article/details/94406608" target="_blank" rel="noopener">https://blog.csdn.net/songfeihu0810232/article/details/94406608</a></p><h1 id="三、logstash安装与配置"><a href="#三、logstash安装与配置" class="headerlink" title="三、logstash安装与配置"></a>三、logstash安装与配置</h1><h2 id="1、logstash安装"><a href="#1、logstash安装" class="headerlink" title="1、logstash安装"></a>1、logstash安装</h2><p>环境要求：jdk1.8或以上<br>下载logstash软件包  logstash官方下载地址<a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a><br>下载后直接解压就可以用<br>如：tar zxvf logstash-7.6.0.tar.gz<br>解压后目录如下：<br><img src="https://img-blog.csdnimg.cn/20200414154300993.png" alt="logstash目录"><br>目录结构说明见官方文档：<a href="https://www.elastic.co/guide/en/logstash/7.1/dir-layout.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.1/dir-layout.html</a><br>解压以后可以对logstash进行简单的测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -e <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br></pre></td></tr></table></figure><p>这条命令表示通过命令的方式指定logstash的输入输出分别是标准的输入输出，什么是标准的输入输出呢？就是控制台的输入输出。<br>等待启动成功，直接输入“hello world”<br>将会在控制台会有相应的输出<br>出现这些信息就表示logstash安装成功并且可以使用了。<br><img src="https://img-blog.csdnimg.cn/20200414154431921.png" alt="logstash测试"></p><h2 id="2、在线安装logstash插件"><a href="#2、在线安装logstash插件" class="headerlink" title="2、在线安装logstash插件"></a>2、在线安装logstash插件</h2><p>虽然logstash默认安装了大部分的插件，但是有些插件没有默认安装，如logstash-output-syslog、logstash-output-jdbc</p><h3 id="2-1-安装Gem并更新"><a href="#2-1-安装Gem并更新" class="headerlink" title="2.1. 安装Gem并更新"></a>2.1. 安装Gem并更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y gem</span></span><br><span class="line"><span class="comment"># gem -v</span></span><br><span class="line">2.0.14.1</span><br><span class="line"><span class="comment"># gem update --system</span></span><br><span class="line"><span class="comment"># gem -v</span></span><br><span class="line">3.1.2</span><br></pre></td></tr></table></figure><h3 id="2-2-检查并修改镜像源"><a href="#2-2-检查并修改镜像源" class="headerlink" title="2.2 检查并修改镜像源"></a>2.2 检查并修改镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem sources -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"> </span><br><span class="line">https://rubygems.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span></span><br><span class="line">https://gems.ruby-china.com/ added to sources</span><br><span class="line">https://rubygems.org/ removed from sources</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat ~/.gemrc </span></span><br><span class="line">---</span><br><span class="line">:backtrace: <span class="literal">false</span></span><br><span class="line">:bulk_threshold: 1000</span><br><span class="line">:sources:</span><br><span class="line">- https://gems.ruby-china.com/</span><br><span class="line">:update_sources: <span class="literal">true</span></span><br><span class="line">:verbose: <span class="literal">true</span></span><br><span class="line">:concurrent_downloads: 8</span><br></pre></td></tr></table></figure><blockquote><p>请注意：国内的镜像站从<a href="https://gems.ruby-china.org" target="_blank" rel="noopener">https://gems.ruby-china.org</a> 换成了 <a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a><br>！！！现在很多网上的资料就都是写的<a href="https://gems.ruby-china.org，导致很多人换了镜像源也装不上。" target="_blank" rel="noopener">https://gems.ruby-china.org，导致很多人换了镜像源也装不上。</a></p></blockquote><h3 id="2-3-修改-logstash的-gem-镜像源"><a href="#2-3-修改-logstash的-gem-镜像源" class="headerlink" title="2.3. 修改 logstash的 gem 镜像源"></a>2.3. 修改 logstash的 gem 镜像源</h3><p>cd到logstach的安装目录，可以看到Gemfile文件 <code>vi Gemfile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a Logstash generated Gemfile.</span></span><br><span class="line"><span class="comment"># If you modify this file manually all comments and formatting will be lost.</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">source</span> <span class="string">"https://rubygems.org"</span></span><br><span class="line">gem <span class="string">"logstash-core"</span>, :path =&gt; <span class="string">"./logstash-core"</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>更改默认的 <a href="https://rubygems.org" target="_blank" rel="noopener">https://rubygems.org</a> 为<a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a></p><h3 id="2-4、安装插件"><a href="#2-4、安装插件" class="headerlink" title="2.4、安装插件"></a>2.4、安装插件</h3><p><img src="https://img-blog.csdnimg.cn/20200414155435362.png" alt="安装插件"></p><h2 id="3、离线安装logstash插件"><a href="#3、离线安装logstash插件" class="headerlink" title="3、离线安装logstash插件"></a>3、离线安装logstash插件</h2><p>在实际应用过程中有些生产环境是封闭的网络环境，没法连接外网。这时候就需要离线安装插件。<br>说离线安装实际就是在一个有网络的环境下将插件装好，然后再装到离线环境中。<br>这里有两种方式,<br>一种就是在有网络的环境下将插件装好，将整个logsash包离线拷到生产环境。<br>另一种方式就是在有网络的环境下将插件装好后，将logstash的需要离线安装的插件打个离线包，然后再在生产环境进行离线安装。<br>离线插件包打包安装具体操作如下：</p><h3 id="3-1-通过logstash-plugin-prepare-offline-pack-命令将插件打成zip包"><a href="#3-1-通过logstash-plugin-prepare-offline-pack-命令将插件打成zip包" class="headerlink" title="3.1 通过logstash-plugin prepare-offline-pack 命令将插件打成zip包"></a>3.1 通过logstash-plugin prepare-offline-pack 命令将插件打成zip包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./logstash-plugin prepare-offline-pack --output logstash-output-syslog.zip logstash-output-syslog</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200414155806703.png" alt="打包"><br>打包命令执行成功以后，可以看到在logstash的bin目录下有打成的离线插件zip包<br><img src="https://img-blog.csdnimg.cn/20200414155831404.png" alt="打包后生成的离线包"></p><h3 id="3-2-通过logstash-plugin-install-进行离线安装"><a href="#3-2-通过logstash-plugin-install-进行离线安装" class="headerlink" title="3.2 通过logstash-plugin install 进行离线安装"></a>3.2 通过logstash-plugin install 进行离线安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash-plugin install file:///home/logstash/logstash-7.6.2/tools/logstash-output-syslog.zip</span><br></pre></td></tr></table></figure><p>安装后成功会有如下提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installing file: /home/logstash/logstash-7.6.2/tools/logstash-output-syslog.zip</span><br><span class="line">Install successful</span><br></pre></td></tr></table></figure><h3 id="3-2-通过logstash-plugin-list命令检查插件是否安装成功"><a href="#3-2-通过logstash-plugin-list命令检查插件是否安装成功" class="headerlink" title="3.2 通过logstash-plugin list命令检查插件是否安装成功"></a>3.2 通过logstash-plugin list命令检查插件是否安装成功</h3><p><img src="https://img-blog.csdnimg.cn/20200414155929438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash-plugin list"></p><h2 id="4、logstash简单配置说明"><a href="#4、logstash简单配置说明" class="headerlink" title="4、logstash简单配置说明"></a>4、logstash简单配置说明</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>Logstash 设计了自己的 DSL ——包括有区域，注释，数据类型(布尔值，字符串，数值，数组，哈希)，条件判断，字段引用等。</p><h3 id="区段-section"><a href="#区段-section" class="headerlink" title="区段(section)"></a>区段(section)</h3><p>Logstash 用 {} 来定义区域。区域内可以包括插件区域定义，你可以在一个区域内定义多个插件。插件区域内则可以定义键值对设置。示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123;&#125;</span><br><span class="line">    syslog &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Logstash 支持少量的数据值类型：</p><ul><li>bool<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>string<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host =&gt; <span class="string">"hostname"</span></span><br></pre></td></tr></table></figure></li><li>number<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port =&gt; <span class="number">514</span></span><br></pre></td></tr></table></figure></li><li>array<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match =&gt; [<span class="string">"datetime"</span>, <span class="string">"UNIX"</span>, <span class="string">"ISO8601"</span>]</span><br></pre></td></tr></table></figure></li><li>hash<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options =&gt; &#123;</span><br><span class="line">    key1 =&gt; <span class="string">"value1"</span>,</span><br><span class="line">    key2 =&gt; <span class="string">"value2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段引用-field-reference"><a href="#字段引用-field-reference" class="headerlink" title="字段引用(field reference)"></a>字段引用(field reference)</h3>如果想在 Logstash 配置中使用字段的值，只需要把字段的名字写在中括号 [] 里就行了，这就叫字段引用。<br>对于 嵌套字段(也就是多维哈希表，或者叫哈希的哈希)，每层的字段名都写在 [] 里就可以了。比如，你可以从 geoip 里这样获取 longitude 值：<br>[geoip][location][0]<br>logstash 的数组也支持倒序下标，即 [geoip][location][-1] 可以获取数组最后一个元素的值。<br>Logstash 还支持变量内插，在字符串里使用字段引用的方法是这样：<br>“the longitude is %{[geoip][location][0]}”</li></ul><h3 id="条件判断-condition"><a href="#条件判断-condition" class="headerlink" title="条件判断(condition)"></a>条件判断(condition)</h3><p>表达式支持下面这些操作符：<br>equality, etc: ==, !=, &lt;, &gt;, &lt;=, &gt;=<br>regexp: =<del>, !</del><br>inclusion: in, not in<br>boolean: and, or, nand, xor<br>unary: !()<br>通常来说，你都会在表达式里用到字段引用。比如：<br>if “_grokparsefailure” not in [tags] {<br>} else if [status] !~ /^2\d\d/ and [url] == “/noc.gif” {<br>} else {<br>}</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>Logstash 提供了一个 shell 脚本叫 logstash 方便快速运行。它支持一下参数：<br>-e<br>意即执行。我们在 “Hello World” 的时候已经用过这个参数了。事实上可以不写任何具体配置，直接运行 <code>bin/logstash -e</code> ‘’ 达到相同效果。这个参数的默认值是下面这样：<br>input {<br>    stdin { }<br>}<br>output {<br>    stdout { }<br>}<br>–config 或 -f<br>意即文件。真实运用中，我们会写很长的配置，甚至可能超过 shell 所能支持的 1024 个字符长度。所以我们必把配置固化到文件里，然后通过 <code>bin/logstash -f agent.conf</code> 这样的形式来运行。<br>此外，logstash 还提供一个方便我们规划和书写配置的小功能。你可以直接用 <code>bin/logstash -f /etc/logstash.d/</code> 来运行。logstash 会自动读取 /etc/logstash.d/ 目录下所有的文本文件，然后在自己内存里拼接成一个完整的大配置文件，再去执行。<br>–configtest 或 -t<br>意即测试。用来测试 Logstash 读取到的配置文件语法是否能正常解析。Logstash 配置语法是用 grammar.treetop 定义的。尤其是使用了上一条提到的读取目录方式的读者，尤其要提前测试。<br>–log 或 -l<br>意即日志。Logstash 默认输出日志到标准错误。生产环境下你可以通过 bin/logstash -l logs/logstash.log 命令来统一存储日志。<br>–filterworkers 或 -w<br>意即工作线程。Logstash 会运行多个线程。你可以用 <code>bin/logstash -w 5</code> 这样的方式强制 Logstash 为过滤插件运行 5 个线程。</p><h1 id="四、logstash使用的几种典型的应用场景"><a href="#四、logstash使用的几种典型的应用场景" class="headerlink" title="四、logstash使用的几种典型的应用场景"></a>四、logstash使用的几种典型的应用场景</h1><h2 id="1、通过logstash将syslog日志原始日志转发"><a href="#1、通过logstash将syslog日志原始日志转发" class="headerlink" title="1、通过logstash将syslog日志原始日志转发"></a>1、通过logstash将syslog日志原始日志转发</h2><p><img src="https://img-blog.csdnimg.cn/20200414161106796.png" alt="syslog日志原始日志转发"><br>在logstash的bin目录下新建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="built_in">test</span>-pipeline.conf</span><br></pre></td></tr></table></figure><p>编辑input和output</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin&#123;</span><br><span class="line">      type =&gt; <span class="string">"test-log"</span></span><br><span class="line">    &#125;</span><br><span class="line">    syslog&#123;</span><br><span class="line">        type =&gt; <span class="string">"test-log"</span></span><br><span class="line">        port =&gt; <span class="number">514</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output</span><br><span class="line">&#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">      codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">    syslog&#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.2.185"</span></span><br><span class="line">        port =&gt; <span class="number">514</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就相当于把日志转发到了192.168.2.185这台机器的514端口<br>编辑好配置文件以后执行<br><code>./logstash -f test-pipeline.conf --config.test_and_exit</code>     对配置文件进行检查，如果配置文件写得有问题，将会有错误提示。<br>配置文件检查没有问题后就可以启动logstash执行了<code>./logstash -f test-pipeline.conf  --config.reload.automatic</code><br>用udpsender工具往这台机器上发送日志信息，可以看到日志转发到192.168.2.185这台机器上了。<br><img src="https://img-blog.csdnimg.cn/20200414161139252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="updsend发送日志"><br>在控制台可以看到192.168.2.185，接收到了192.168.2.173转发过来的日志<br><img src="https://img-blog.csdnimg.cn/20200414161229147.png" alt="控制台日志"></p><h2 id="2、通过rsyslog、logstash采集nginx等中间件的日志送到ES"><a href="#2、通过rsyslog、logstash采集nginx等中间件的日志送到ES" class="headerlink" title="2、通过rsyslog、logstash采集nginx等中间件的日志送到ES"></a>2、通过rsyslog、logstash采集nginx等中间件的日志送到ES</h2><p>logstash可以与rsyslog、filebeat等无缝结合采集nginx等中间件日志，送给数据存储。<br><img src="https://img-blog.csdnimg.cn/20200414161255484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="通过rsyslog、logstash采集nginx等中间件的日志送到ES"><br>具体参见：<a href="https://xiejava.gitee.io/posts/f3e97829/">https://xiejava.gitee.io/posts/f3e97829/</a></p><h2 id="3、通过logstash将日志入kafka再入mysql或ES"><a href="#3、通过logstash将日志入kafka再入mysql或ES" class="headerlink" title="3、通过logstash将日志入kafka再入mysql或ES"></a>3、通过logstash将日志入kafka再入mysql或ES</h2><p>数据先放到kafka队列里缓存削峰，然后从kafka队列里读取数据到mysql或其他存储系统中进行保存。<img src="https://img-blog.csdnimg.cn/20200414161405732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash将日志入kafka再入mysql或ES"><br>具体参见：<a href="https://xiejava.gitee.io/posts/54e4fd14/">https://xiejava.gitee.io/posts/54e4fd14/</a></p><h2 id="4、通过logstash进行日志补全后再转发或入库"><a href="#4、通过logstash进行日志补全后再转发或入库" class="headerlink" title="4、通过logstash进行日志补全后再转发或入库"></a>4、通过logstash进行日志补全后再转发或入库</h2><p>采集原始日志以后，需要对原始日志进行调整合补齐，比如最常见的是根据IP来补齐IP的经纬度等信息。<br><img src="https://img-blog.csdnimg.cn/2020041416162510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash进行日志补全"><br>这里就可以用logstash的geotip，也可以用其他的外部API接口，为了更具代表性的说明，这里调用的是第三方的http接口（<a href="http://ip-api.com/json/），这个接口也是可以自己定义的。" target="_blank" rel="noopener">http://ip-api.com/json/），这个接口也是可以自己定义的。</a><br>参考配置文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123; &#125;</span><br><span class="line">    syslog &#123;</span><br><span class="line">      port =&gt; <span class="string">"514"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok&#123;</span><br><span class="line">         <span class="comment">#匹配获取IP</span></span><br><span class="line">         match =&gt; &#123;<span class="string">"message"</span> =&gt; <span class="string">"%&#123;IPV4:ip&#125;"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    http &#123;</span><br><span class="line">        <span class="comment">#调用外部接口获取IP的详细信息</span></span><br><span class="line">        url =&gt; <span class="string">"http://ip-api.com/json/%&#123;ip&#125;"</span></span><br><span class="line">        verb =&gt; <span class="string">"GET"</span></span><br><span class="line">        add_field =&gt; &#123;</span><br><span class="line">          <span class="string">"new_field"</span> =&gt; <span class="string">"new_static_value"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        replace =&gt; &#123;     </span><br><span class="line">            <span class="comment">#这里对原始日志数据进行补全，如加了新的字段及从接口中获取的信息</span></span><br><span class="line">            <span class="string">"message"</span> =&gt; <span class="string">"%&#123;message&#125;|%&#123;ip&#125;: My new message|%&#123;new_field&#125;|%&#123;[body][as]&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; &#125;</span><br><span class="line">    syslog &#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.2.173"</span></span><br><span class="line">        port =&gt; <span class="string">"7514"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过http接口调用API取得数据，然后通过mutate重新组合补全信息，这里通过调用获取IP地址信息的API获取IP的信息，然后补全到原始日志中。<br><img src="https://img-blog.csdnimg.cn/20200414161738867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看出logstash是一个非常灵活好用的数据采集框架工具，可以通过简单的配置满足绝大多数数据采集场景的需求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、logstash是什么&quot;&gt;&lt;a href=&quot;#一、logstash是什么&quot; class=&quot;headerlink&quot; title=&quot;一、logstash是什么&quot;&gt;&lt;/a&gt;一、logstash是什么&lt;/h1&gt;&lt;p&gt;Logstash 是开源的服务器端&lt;strong&gt;数
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="大数据" scheme="https://xiejava.gitee.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="ELK" scheme="https://xiejava.gitee.io/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>英语学渣的我是如何撸完一本英文原著的</title>
    <link href="https://xiejava.gitee.io/posts/1e6a75de/"/>
    <id>https://xiejava.gitee.io/posts/1e6a75de/</id>
    <published>2020-04-07T09:56:06.000Z</published>
    <updated>2021-08-22T03:09:43.674Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200407/blogimage/englishimage.png" alt="英语原著"><br>2020年初立的flag就有要看完十本英文原著。看英文原著对于英语学渣的我来说几乎是很难想像的事情。说英语烂那只有自己知道，读书的时候从来就没有学好过，工作这么多年更是忘得一干二净了。与英语相爱相杀若干年，经历了无数次从开始到放弃……</p><p>非常羡慕别人能够很顺畅的看懂英文原著，能够丢开字幕看懂英语大片，能够飚一口的英文。有人说学好了英文就给自己多开了一扇了解世界的窗户，比别人多一半的人生经历。英语对于生活在全球化信息时代的我们来说有多么的重要，不用多说，道理啥的咱都知道，可是经历了这么多年还是学不会啊。买了N多的英语学习资料，下了N多的视频教程，查找了各种学习英语的方法。单词书永远都是翻了前面几页，英语学习资料屯了一堆从来没有开封过，市面上吹捧的各种英语学习方法感觉都很不错，尝试了很多种还是在尝试……</p><p>虽然有过无数次失败的经历，但也越来越认识到英语的重要性，也看到越来越多的人将英语学得很溜，让我清醒的认识到英语很重要，英语很难学，英语是一定是可以学好的，但是妄想速成是不可能的。如何才能最终习得英语的技能呢？</p><p>前新东方英语老师李笑来在他的《财富自由之路》中指出在智力上、知识上、经验上，复利效应对每个人来说都是存在的。知识和能力的习得与积累是有复利效应的。所以，大多数的人应该要相信自己能够通过知识和能力的积累和复利获得成功和成长。经过多年教训，所有什么打着21天搞定单词，一个月看懂原著啥的口号都是骗人的。在英语技能的习得上，我笃信只有坚持积累和复利才能最终成功。我坚信经过自己的努力和坚持，我在英语习得上投入的精力和时间超过成本线以后，我的英语水平将会有突破性的提高。</p><p>在英语学习的过程中有过<a href="https://xiejava.gitee.io/posts/48451ead/">《坚持了330天，我终于放弃了背单词》</a>的经历，让我认识到只有“用”英语，才能够真正的掌握英语。目前我最朴素的需求就是想能够看懂英文文档，能够流畅的阅读英文书籍。而目前所处的语言环境”说”英语的需求不是很迫切。对于我来说能够流利阅读英语已经足够了。既然开始“用”英语，那就从大量开始阅读英语原版书开始吧！英语这么菜，我为什么敢挑战英文原版书呢？因为我看到了李笑来老师提到掌握一门外语的最少必要知识。<br>1、认识字母<br>2、认识音标<br>3、会查字典<br>4、懂点基本语法<br>5、会用百度或google等搜索引擎。<br>如果掌握了这些最小必要的知识，你就已经“入门”了，接下了就只剩下所谓“执行”了，也就是要用起来。<br>我想，这些最小必要的知识我基本都已经具备了。在正式准备看英语原著之前，我看完了全套149本《书虫》（见<a href="https://xiejava.gitee.io/posts/40bbedc5/">《看完全套149本《书虫》是种什么样的体验》</a>）。对于英语的阅读相对来说没有那么怵了。<br>虽然我看完了全套149本《书虫》，但是《书虫》毕竟只是入门级的英语简写读物，与英语原版的原著还是有很大的距离的。</p><p>作为英语原著初读者来说，真正看完一本书，完成从0到1的过程，比深刻理解一本书更重要。而对于初读者来说如何撸完一本英文原著还是比较有挑战的。</p><p><strong>首先要找到一本自己非常感兴趣并且适合自己难度的书籍。自己不感兴趣或者难度太难了，就会容易放弃。</strong><br>对于挑选原版书的阅读材料来说，我也是花的一些功夫。网上有人建议刚开始接触英语原著建议是比较浅的原著如儿童读物《夏洛的网》、《格林童话》、《小王子》之类的。对于我这种成年人来说这类读物实在是提不起我的兴趣。还有人推荐《哈利波特》系列，我不是哈迷所以也没有选择《哈利波特》系列。我选择的是《奇迹男孩》。《奇迹男孩》的电影在2018年上映的时候我就想看，但是一直没有时间去看。正好买了这本英文原著来看看。《奇迹男孩》英文原著豆瓣评分9.1分，属于儿童成长类的书籍，老少皆宜，300来页长短适中不是那种大部头。因为是面向青少年的书籍所以单词不难，而且是近几年出的新书畅销书，比较口语化没有太多的长句子，非常通俗。事实证明《奇迹男孩》非常适合像我这样的英语原著初读者。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200407/blogimage/wonder.png" alt="奇迹男孩"></p><p><strong>选择了阅读目标的原版书籍后，就要开始读并坚持下来</strong><br>作为英语原著初读者，即使是最通俗的原版书，单词也会是一个拦路虎。单词没有办法，那就是勤查字典。《奇迹男孩》是面向青少年的书籍，单词不难，但对我来说也是充斥着各种生词。不过还好每页大概是在6、7个左右。如果按照伍君仪的《把你的词汇用起来》中的透析法，隔一个生词查一个，只查一半的生词，剩下的靠猜，那每页只要查2-3个单词左右，这个查词量已经很小了。因为这本书对我来说生词量6、7个不算多，而且作为原著初读者，猜单词的意思往往猜不准，所以我就索性看到不懂的单词每个都会查字典。为了尽快的撸完这本书，我也是给自己定了个目标，每天看30页。看少了不记得前后的情节，看多了怕自己看不下去。别看只有区区的30页，看中文也就半个小时的事情，但是看英文又要查字典，平均要花掉2-3个小时才能看完。所以对于英语原著初读者来说30页是个比较适中的量，后续如果熟练的可以慢慢的增加。这本《奇迹男孩》300多页，大概花了我一周半的时间。</p><p><strong>对于英语原版书是看电子版的还是纸质版的，建议还是先看纸质版的</strong><br>作为英语原著初读者，我自己认为还是先看纸质版。看电子版的有个好处就是可以随时查字典，尤其是用kindle看，开启生词提示，并且长按生词就会调出字典查词，非常方便。正是因为太方便了，会让我们产生依赖，有时很容易的单词还会忍不住去查一下字典。而且有时候要往回看情节翻起来也不太方便。虽然有进度显示但是没有纸质书那么直观。纸质书看起来更加有感觉，可以前后翻，有时不记得前面的情节了可以方便的随时翻看，每天看了多少页插个书签就是。看着书签慢慢的插到了最后心里还是满满的成就感。</p><p>对于英语原著初读者来说，撸完一本英文原著，完成从0到1的过程。这种小小的成就感，更加坚定了学习英语的信心。相信经过自己的努力和坚持，看完数十本英文原著以后，英语水平将会有突破性的提高。</p><p>学习外语没有其他任何捷径，唯有“结硬寨,打呆仗;日拱一卒,功不唐捐!”</p><p>我读过的英文读本豆列： <a href="https://www.douban.com/doulist/118432400/" target="_blank" rel="noopener">https://www.douban.com/doulist/118432400/</a></p><p>爱分享读书豆瓣小组： <a href="https://www.douban.com/group/655112/" target="_blank" rel="noopener">https://www.douban.com/group/655112/</a></p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/20200407/blogimage/englishimage.png&quot; alt=&quot;英语原著&quot;&gt;&lt;br&gt;2020年初立的flag就有要看完十本英文原著。看英文原
      
    
    </summary>
    
    
      <category term="读书" scheme="https://xiejava.gitee.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英语" scheme="https://xiejava.gitee.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
</feed>
