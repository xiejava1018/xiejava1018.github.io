<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieJava&#39;s blog</title>
  
  <subtitle>记录最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiejava.gitee.io/"/>
  <updated>2022-01-20T13:25:03.412Z</updated>
  <id>https://xiejava.gitee.io/</id>
  
  <author>
    <name>XieJava</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python实现读取Word表格计算汇总写入Excel</title>
    <link href="https://xiejava.gitee.io/posts/14434407/"/>
    <id>https://xiejava.gitee.io/posts/14434407/</id>
    <published>2022-01-20T13:09:47.000Z</published>
    <updated>2022-01-20T13:25:03.412Z</updated>
    
    <content type="html"><![CDATA[<p>快过年了，又到了公司年底评级的时候了。今年的评级和往常一下，每个人都要填写公司的民主评议表，给各个同事进行评价打分，然后部门收集起来根据收集上来的评价表进行汇总统计。想想要收集几十号人的评价表，并根据每个人的评价表又要填到Excel中进行汇总计算统计给出每个人的评价，就头大。虽然不是个什么难事，但是是个无脑的细致活。几十个人的评价也得要花大半天的时间来弄，而且搞多了还容易搞错。如是就想起干脆用Python写个小程序自动来处理这些脏活累活，评级年年都要评，每年都可以用。</p><p>要做的事情就是读放到某个文件夹中的word文档中的评价表格，根据表格内容进行处理，然后汇总所有的表格数据，根据计算规则，算出每个人的评分，在根据评分计算每个人的评价。汇总后写入Excel中。<br><img src="https://img-blog.csdnimg.cn/50851a68db00434c84007249f4e5781e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="处理Word解析、汇总、统计写入Excel"></p><p>不可否认用Python来实现这样的事情真的是太方便了，人生苦短我用Python。<br>我是用的python的docx包来处理word，用pandas来处理数据并写入excel</p><h1 id="一、首先导入包"><a href="#一、首先导入包" class="headerlink" title="一、首先导入包"></a>一、首先导入包</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install docx</span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>pandas写excel依赖openpyxl包所以也到导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><h1 id="二、读评价表所在的目录文件"><a href="#二、读评价表所在的目录文件" class="headerlink" title="二、读评价表所在的目录文件"></a>二、读评价表所在的目录文件</h1><p>通过python的os包，列出文件夹里面的文件，识别出.docx的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">files=os.listdir(filepah)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> file.find(<span class="string">'.docx'</span>)&gt;<span class="number">0</span>:</span><br><span class="line">        docfilepah=filepah+file</span><br></pre></td></tr></table></figure><h1 id="三、读word文件，处理word中的表格数据"><a href="#三、读word文件，处理word中的表格数据" class="headerlink" title="三、读word文件，处理word中的表格数据"></a>三、读word文件，处理word中的表格数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">data=[]</span><br><span class="line"><span class="comment">#读word的docx评议表文件，并读取word中的表格数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procdoc</span><span class="params">(docfilepath)</span>:</span></span><br><span class="line">    document=Document(docfilepath)</span><br><span class="line">    tables=document.tables</span><br><span class="line">    table=tables[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(table.rows)):</span><br><span class="line">        id=int(table.cell(i,<span class="number">0</span>).text)</span><br><span class="line">        name=table.cell(i,<span class="number">1</span>).text</span><br><span class="line">        excellent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i,<span class="number">2</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i,<span class="number">2</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            excellent=<span class="number">1</span></span><br><span class="line">        competent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">3</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">3</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            competent=<span class="number">1</span></span><br><span class="line">        basicacompetent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">4</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">4</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            basicacompetent=<span class="number">1</span></span><br><span class="line">        notcompetent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">5</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">5</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            notcompetent=<span class="number">1</span></span><br><span class="line">        dontunderstand =<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">6</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">6</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            dontunderstand=<span class="number">1</span></span><br><span class="line">        appraisedata=[id,name,excellent,competent,basicacompetent,notcompetent,dontunderstand]</span><br><span class="line">        data.append(appraisedata)</span><br></pre></td></tr></table></figure><h1 id="四、统计计算"><a href="#四、统计计算" class="headerlink" title="四、统计计算"></a>四、统计计算</h1><p>通过pandas直接对数据进行统计计算，避免了传统的循环计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data,columns=[<span class="string">'序号'</span>,<span class="string">'姓名'</span>,<span class="string">'优秀'</span>,<span class="string">'称职'</span>,<span class="string">'基本称职'</span>,<span class="string">'不称职'</span>,<span class="string">'不了解'</span>])</span><br><span class="line">df=df.groupby([<span class="string">'序号'</span>,<span class="string">'姓名'</span>]).sum() <span class="comment">#汇总每个人每一项的评分</span></span><br><span class="line">df[<span class="string">'票数'</span>] = df.apply(<span class="keyword">lambda</span> x: x.sum(), axis=<span class="number">1</span>) <span class="comment">#统计票数</span></span><br><span class="line">df[<span class="string">'计分'</span>] = (df[<span class="string">'优秀'</span>]*<span class="number">95</span>+df[<span class="string">'称职'</span>]*<span class="number">85</span>+df[<span class="string">'基本称职'</span>]*<span class="number">75</span>+df[<span class="string">'不称职'</span>]*<span class="number">65</span>+df[<span class="string">'不了解'</span>]*<span class="number">0</span>)/len(df)<span class="comment">#根据规则计分</span></span><br><span class="line">df[<span class="string">'评价'</span>]=df[<span class="string">'计分'</span>].map(getscore) <span class="comment">#根据规则评价评级</span></span><br></pre></td></tr></table></figure><p>计分方法：民主评议得分=Σ各等级票数*等级计分分数/总票数，其中“优秀”计95分，“称职”计85分，“基本称职”计75分，“不称职”计65分，“不了解”不计分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据评分规则计算评级</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getscore</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'优秀'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">80</span> <span class="keyword">and</span> x&lt;<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">75</span> <span class="keyword">and</span> x&lt;<span class="number">80</span>:</span><br><span class="line">        score=<span class="string">'基本称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&lt;<span class="number">75</span>:</span><br><span class="line">        score=<span class="string">'不称职'</span></span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><h1 id="五、将统计计算结果写入汇总Excel"><a href="#五、将统计计算结果写入汇总Excel" class="headerlink" title="五、将统计计算结果写入汇总Excel"></a>五、将统计计算结果写入汇总Excel</h1><p>通过pandas直接可以将dataframe写入到Excel文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将汇总计算好的数据写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write2excle</span><span class="params">(exclefile,dataframe)</span>:</span></span><br><span class="line">    writer = pd.ExcelWriter(exclefile)</span><br><span class="line">    dataframe.to_excel(writer)</span><br><span class="line">    writer.save()</span><br><span class="line">    print(<span class="string">'输出成功'</span>)</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><strong>Python不到八十行代码，实现读Word-&gt;处理表格数据-&gt;汇总计算数据-&gt;写Excel。</strong><br>完整的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"></span><br><span class="line">data=[]</span><br><span class="line"><span class="comment">#读word的docx评议表文件，并读取word中的表格数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procdoc</span><span class="params">(docfilepath)</span>:</span></span><br><span class="line">    document=Document(docfilepath)</span><br><span class="line">    tables=document.tables</span><br><span class="line">    table=tables[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(table.rows)):</span><br><span class="line">        id=int(table.cell(i,<span class="number">0</span>).text)</span><br><span class="line">        name=table.cell(i,<span class="number">1</span>).text</span><br><span class="line">        excellent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i,<span class="number">2</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i,<span class="number">2</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            excellent=<span class="number">1</span></span><br><span class="line">        competent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">3</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">3</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            competent=<span class="number">1</span></span><br><span class="line">        basicacompetent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">4</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">4</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            basicacompetent=<span class="number">1</span></span><br><span class="line">        notcompetent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">5</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">5</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            notcompetent=<span class="number">1</span></span><br><span class="line">        dontunderstand =<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">6</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">6</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            dontunderstand=<span class="number">1</span></span><br><span class="line">        appraisedata=[id,name,excellent,competent,basicacompetent,notcompetent,dontunderstand]</span><br><span class="line">        data.append(appraisedata)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取评议表的目录，并处理目录中的docx文件，根据评议表计算评分，写入汇总表。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filepah)</span>:</span></span><br><span class="line">    files=os.listdir(filepah)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.find(<span class="string">'.docx'</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            docfilepah=filepah+file</span><br><span class="line">            procdoc(docfilepah)</span><br><span class="line">    df = pd.DataFrame(data,columns=[<span class="string">'序号'</span>,<span class="string">'姓名'</span>,<span class="string">'优秀'</span>,<span class="string">'称职'</span>,<span class="string">'基本称职'</span>,<span class="string">'不称职'</span>,<span class="string">'不了解'</span>])</span><br><span class="line">    print(df)</span><br><span class="line">    df=df.groupby([<span class="string">'序号'</span>,<span class="string">'姓名'</span>]).sum()</span><br><span class="line">    df[<span class="string">'票数'</span>] = df.apply(<span class="keyword">lambda</span> x: x.sum(), axis=<span class="number">1</span>)</span><br><span class="line">    df[<span class="string">'计分'</span>] = (df[<span class="string">'优秀'</span>]*<span class="number">95</span>+df[<span class="string">'称职'</span>]*<span class="number">85</span>+df[<span class="string">'基本称职'</span>]*<span class="number">75</span>+df[<span class="string">'不称职'</span>]*<span class="number">65</span>+df[<span class="string">'不了解'</span>]*<span class="number">0</span>)/len(df)</span><br><span class="line">    df[<span class="string">'评价'</span>]=df[<span class="string">'计分'</span>].map(getscore)</span><br><span class="line">    print(df)</span><br><span class="line">    write2excle(<span class="string">'民主评议\\民主评议表汇总.xlsx'</span>,df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据评分规则计算评级</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getscore</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'优秀'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">80</span> <span class="keyword">and</span> x&lt;<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">75</span> <span class="keyword">and</span> x&lt;<span class="number">80</span>:</span><br><span class="line">        score=<span class="string">'基本称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&lt;<span class="number">75</span>:</span><br><span class="line">        score=<span class="string">'不称职'</span></span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"><span class="comment">#将汇总计算好的数据写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write2excle</span><span class="params">(exclefile,dataframe)</span>:</span></span><br><span class="line">    writer = pd.ExcelWriter(exclefile)</span><br><span class="line">    dataframe.to_excel(writer)</span><br><span class="line">    writer.save()</span><br><span class="line">    print(<span class="string">'输出成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    readfile(<span class="string">'民主评议\\'</span>)</span><br></pre></td></tr></table></figure><p>全部源代码：<a href="https://github.com/xiejava1018/pythonprocword" target="_blank" rel="noopener">https://github.com/xiejava1018/pythonprocword</a></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;快过年了，又到了公司年底评级的时候了。今年的评级和往常一下，每个人都要填写公司的民主评议表，给各个同事进行评价打分，然后部门收集起来根据收集上来的评价表进行汇总统计。想想要收集几十号人的评价表，并根据每个人的评价表又要填到Excel中进行汇总计算统计给出每个人的评价，就头大
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之恶意代码</title>
    <link href="https://xiejava.gitee.io/posts/72d6b06f/"/>
    <id>https://xiejava.gitee.io/posts/72d6b06f/</id>
    <published>2022-01-17T14:31:41.000Z</published>
    <updated>2022-01-17T15:36:30.426Z</updated>
    
    <content type="html"><![CDATA[<p>恶意代码是一种有害的计算机代码或 web 脚本，其设计目的是创建系统漏洞，并借以造成后门、安全隐患、信息和数据盗窃、以及其他对文件和计算机系统的潜在破坏。恶意代码不仅使企业和用户蒙受了巨大的经济损失，而且使国家的安全面临着严重威胁。1991年的海湾战争是美国第一次公开在实战中使用恶意代码攻击技术取得重大军事利益，从此恶意代码攻击成为信息战、网络战最重要的入侵手段之一。恶意代码问题无论从政治上、经济上、还是军事上，都成为信息安全面临的首要问题。让我们一起来认识一下恶意代码。</p><h1 id="一、什么是恶意代码"><a href="#一、什么是恶意代码" class="headerlink" title="一、什么是恶意代码"></a>一、什么是恶意代码</h1><p>恶意代码（Unwanted Code）是指故意编制或设置的、对网络或系统会产生威胁或潜在威胁的计算机代码。最常见的恶意代码有计算机病毒（简称病毒）、特洛伊木马（简称木马）、计算机蠕虫（简称蠕虫）、后门、逻辑炸弹等。</p><h1 id="二、恶意代码的分类"><a href="#二、恶意代码的分类" class="headerlink" title="二、恶意代码的分类"></a>二、恶意代码的分类</h1><h2 id="1、恶意代码分类"><a href="#1、恶意代码分类" class="headerlink" title="1、恶意代码分类"></a>1、恶意代码分类</h2><p>恶意代码的分类标准主要是代码的<strong>独立性</strong>和<strong>自我复制性</strong>，独立的恶意代码是指具备一个完整程序所应该具有的全部功能功能，能够独立传播、运行的恶意代码，这样的恶意代码不需要寄宿在另一个程序中。非独立恶意代码只是一段代码，必须嵌入某个完整的程序中，作为该程序的一个组成部分进行传播和运行。对于非独立恶意代码，自我复制过程就是将自身嵌入宿主程序的过程，这个过程也称为感染宿主程序的过程。对于独立恶意代码，自我复制过程就是将自身传播给其他系统的过程。不具有自我复制能力的恶意代码必须借助其他媒介进行传播。</p><p>分类：</p><table><thead><tr><th>类别</th><th>实例</th></tr></thead><tbody><tr><td>具有自我复制能力的依附性恶意代码</td><td>主要代表是病毒</td></tr><tr><td>具有自我复制能力的独立性恶意代码</td><td>主要代表是蠕虫</td></tr><tr><td>不具有自我复制能力的依附性恶意代码</td><td>主要代表是后门</td></tr><tr><td>不具有自我复制能力的独立性恶意代码</td><td>主要代表是木马</td></tr></tbody></table><h2 id="2、不同恶意代码的区别"><a href="#2、不同恶意代码的区别" class="headerlink" title="2、不同恶意代码的区别"></a>2、不同恶意代码的区别</h2><p>病毒侧重于破坏系统和程序的能力</p><p>木马侧重于窃取敏感信息的能力</p><p>蠕虫侧重于网络中的自我复制能力和自我传染能力</p><table><thead><tr><th></th><th>病毒</th><th>木马</th><th>蠕虫</th></tr></thead><tbody><tr><td><strong>存在形式</strong></td><td>寄生</td><td>独立文件</td><td>独立文件</td></tr><tr><td><strong>传染途径</strong></td><td>通过宿主程序运行</td><td>植入目标主机</td><td>系统漏洞</td></tr><tr><td><strong>传染速度</strong></td><td>慢</td><td>最慢</td><td>快</td></tr><tr><td><strong>攻击目标</strong></td><td>本地文件</td><td>文件、网络主机</td><td>存在漏洞的网络程序</td></tr><tr><td><strong>触发机制</strong></td><td>攻击者指定条件</td><td>自启动</td><td>自动攻击有漏洞的程序</td></tr><tr><td><strong>防范方法</strong></td><td>从宿主文件中清除</td><td>清除启动项和木马服务程序</td><td>更新安全补丁</td></tr><tr><td><strong>对抗主体</strong></td><td>用户，反病毒软件</td><td>用户、管理员、反病毒软件</td><td>应用程序供应商、用户和管理员</td></tr></tbody></table><h1 id="三、恶意代码基本技术"><a href="#三、恶意代码基本技术" class="headerlink" title="三、恶意代码基本技术"></a>三、恶意代码基本技术</h1><h2 id="1、隐蔽技术"><a href="#1、隐蔽技术" class="headerlink" title="1、隐蔽技术"></a>1、隐蔽技术</h2><h3 id="（1）本地隐藏"><a href="#（1）本地隐藏" class="headerlink" title="（1）本地隐藏"></a>（1）本地隐藏</h3><p> 防止本地系统管理人员觉察而采取的隐蔽手段。</p><ul><li><strong>文件隐蔽</strong>：将恶意代码的文件命名为与系统的合法程序文件名相似的名称，或者干脆取而代之，或者将恶意代码文件附加到合法程序文件中。</li><li><strong>进程隐蔽</strong>：附着或替换系统进程，使恶意代码以合法服务的身份运行，从而隐蔽恶意代码。还可以通过修改进程列表程序，修改命令行参数使恶意代码进程的信息无法查询。也可以借助RootKit 技术实现进程隐蔽。</li><li><strong>网络连接隐蔽</strong>：借用现有服务的端口实现网络连接隐蔽，如使用80端口，攻击者在自己的数据包设置特殊标识，通过标识识别连接信息，未标识的WWW 服务网络包仍转交给原服务程序处理。</li><li><strong>编译器隐蔽</strong>：由编译器在对程序代码进行编译时植入恶意代码，从而实现恶意代码在用户程序中的隐藏和原始分发攻击。恶意代码的植入者是编译器开发人员。</li><li><strong>RootKit隐蔽</strong>：利用适当的Rootkit工具，可以很好的隐蔽自身或指定的文件、进程和网络连接等，很难被管理员发现。<h3 id="（2）网络隐藏"><a href="#（2）网络隐藏" class="headerlink" title="（2）网络隐藏"></a>（2）网络隐藏</h3>网络隐藏主要是指通信内容和传输通道的隐藏。</li><li><strong>通信内容隐蔽</strong>：使用加密算法对所传输的内容进行加密能够隐蔽通信内容。</li><li><strong>传输通道隐藏</strong>：利用隐蔽通道技术，实现对传输通道的隐蔽。（隐蔽通道（Covert Channel）是一个不受安全机制控制的、利用共享资源作为通信通路的信息流。包括有：存储隐蔽通道和时间隐蔽通道。）</li></ul><h2 id="2、生存技术"><a href="#2、生存技术" class="headerlink" title="2、生存技术"></a>2、生存技术</h2><p>恶意代码的生存技术主要包括四种类型：</p><ul><li><strong>反跟踪技术</strong>：通过提高恶意代码分析难度，减少被发现的可能性</li><li><strong>加密技术</strong>：利用加密技术，提高恶意代码自身保护能力<br>模糊变换技术：利用模糊变换技术，恶意代码可以躲避基于特征码的恶意代码检测系统，提高生存能力</li><li><strong>自动生产技术</strong>：利用自动生成技术，在已有的恶意代码的基础上自动生成特征码不断变化的新的恶意代码，从而躲避基于特征码的恶意代码检测。</li></ul><h2 id="3、攻击技术"><a href="#3、攻击技术" class="headerlink" title="3、攻击技术"></a>3、攻击技术</h2><ul><li><strong>进程注入技术</strong>：恶意代码程序将自身嵌入到操作系统和网络系统的服务程序中，不但实现了自身的隐藏，而且还能随着服务的加载而启动。</li><li><strong>三线程技术</strong>：恶意代码进程同时开启三个线程，其中一个为主线程，负责远程控制的工作。另外两个辅助线程分别是监视和守护线程。一旦发现主线程被删除，则立即设法恢复。</li><li><strong>端口复用技术</strong>：重复利用系统或网络服务打开的端口（如80端口），可以欺骗防火墙，具有很强的欺骗性。</li><li><strong>超级管理技术</strong>：恶意代码采用超级管理技术对反恶意代码软件系统进行攻击，使其无法正常运行。</li><li><strong>端口反向连接技术</strong>：指使恶意代码的服务端（被控制端）主动连接客户端（控制端）的技术。</li><li><strong>缓冲区溢出技术</strong>：恶意代码利用系统和网络服务的安全漏洞植入并且执行攻击代码，造成缓冲区溢出，从而获得被攻击主机的控制权。</li></ul><h1 id="三、恶意代码传播方式及防范手段"><a href="#三、恶意代码传播方式及防范手段" class="headerlink" title="三、恶意代码传播方式及防范手段"></a>三、恶意代码传播方式及防范手段</h1><h2 id="1、传播方式"><a href="#1、传播方式" class="headerlink" title="1、传播方式"></a>1、传播方式</h2><p>传播途径</p><ul><li><strong>利用操作系统和应用软件的漏洞进行传播</strong></li><li><strong>通过网站传播</strong><br>在网页上挂载恶意代码<br>如：主机流览该网页时，恶意代码会自动下载到主机执行。<br>将恶意代码与正常应用软件捆绑<br>如：主机下载正常软件运行时，恶意代码也随之自动运行。</li><li><strong>利用移动媒介传播</strong><br>如：主机访问U盘和硬盘时，恶意代码可以自动执行。</li><li><strong>利用用户之间的信任关系传播</strong><br>如：冒充用户发送虚假链接、图片、邮件等。</li></ul><p>总的来说，恶意代码的传播是因为用户的软件出现了漏洞、操作不慎或者是两者的结合造成。</p><p>（1）病毒。病毒具备有自我复制能力，一般嵌入主机的程序中。当被感染文件执行操作，如，用户打开一个可执行文件时，病毒就会自我繁殖。病毒一般都具有破坏性。<br>（2）木马。这种程序从表面上看没有危害，但实际上却隐含着恶意的意图和破坏的作用。一些木马程序会通过覆盖系统中已经存在的文件的方式存在于系统之中；另外有的还会以软件的形式出现，因为它一般是以一个正常的应用程序身份在系统中运行的，所以这种程序通常不容易被发现。<br>（3）蠕虫。蠕虫是一种可以自我复制的完全独立的程序，它的传播不需要借助被感染主机中的程序和用户的操作，而是通过系统存在的漏洞和设置的不安全性来进行入侵，如通过共享的设置来侵入。蠕虫可以自动创建与它的功能完全相同的副本，并能在无人干涉的情况下自动运行，大量地复制占用计算机的空间，使计算机的运行缓慢甚至瘫痪。</p><h2 id="2、攻击机制"><a href="#2、攻击机制" class="headerlink" title="2、攻击机制"></a>2、攻击机制</h2><p>恶意代码的行为表现各异，破坏程度千差万别，但基本作用机制大体相同，其整个作用过程分为6个部分。<br><strong>（1）侵入系统</strong>。侵入系统是而已代码实现其恶意目的的必要条件。恶意代码入侵的途径很多，包括前面传播方式的各种途径。如：从互联网下载的程序本身就可能含有而已代码；接收已感染恶意代码的电子邮件；从光盘或U盘往系统上安装软件；黑客或者攻击者故意将恶意代码植入系统等。<br><strong>（2）维持或提升权限</strong>。恶意代码的传播与破坏必须盗用用户或者进程的合法权限才能完成。<br><strong>（3）隐蔽策略</strong>。为了不让系统发现恶意代码已经侵入系统，恶意代码可能会改名、删除源文件或者修改系统的安全策略来隐藏自己。<br><strong>（4）潜伏</strong>。恶意代码侵入系统后，等待一定的条件，并具有足够的权限时，就发作并进行破坏活动。<br><strong>（5）破坏</strong>。恶意代码本质具有破坏性，其目的是造成信息丢失，泄密，破坏系统完整性等。<br><strong>（6）重复（1）至（5）对新的目标实施攻击过程。</strong><br><img src="https://img-blog.csdnimg.cn/746efa50ae124e18af6b275d10e8196a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="恶意代码的攻击模型"></p><h2 id="3、防范手段"><a href="#3、防范手段" class="headerlink" title="3、防范手段"></a>3、防范手段</h2><p>通用恶意代码检测技术包括静态和动态检测技术：</p><ul><li><p><strong>基于特征的扫描技术</strong><br>建立恶意代码的特征文件，在扫描时根据特征进行匹配查找</p></li><li><p><strong>校验和法</strong><br>对需要监控的文件生成校验，周期性的生成新校验和并与原始值比较</p></li><li><p><strong>沙箱技术</strong><br>根据程序需要的资源和拥有的权限建立运行沙箱，可以安全地检测和分析程序行为</p></li><li><p><strong>基于蜜罐的检测技术</strong><br>将主机伪装为运行着脆弱的服务或系统，同时安装强大的监测系统。</p></li></ul><p>其中基于特征的扫描技术和校验和法是静态检测技术，沙箱技术和基于蜜罐的检测技术属于动态检测技术。</p><h2 id="四、常见恶意代码"><a href="#四、常见恶意代码" class="headerlink" title="四、常见恶意代码"></a>四、常见恶意代码</h2><p><img src="https://img-blog.csdnimg.cn/a67e601851d74a45ac57f45552261bd1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="常见的恶意代码"></p><p>参考文献：<br>《网络攻防技术与实战 深入理解信息安全防护体系》 郭帆<br>《恶意代码及其防御》知乎 Drifter<br>《恶意代码》MBA智库百科</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;恶意代码是一种有害的计算机代码或 web 脚本，其设计目的是创建系统漏洞，并借以造成后门、安全隐患、信息和数据盗窃、以及其他对文件和计算机系统的潜在破坏。恶意代码不仅使企业和用户蒙受了巨大的经济损失，而且使国家的安全面临着严重威胁。1991年的海湾战争是美国第一次公开在实战
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之暴露面、攻击面、脆弱性</title>
    <link href="https://xiejava.gitee.io/posts/e23ff2e/"/>
    <id>https://xiejava.gitee.io/posts/e23ff2e/</id>
    <published>2022-01-10T02:53:54.000Z</published>
    <updated>2022-01-10T02:55:56.032Z</updated>
    
    <content type="html"><![CDATA[<p><strong>暴露面</strong><br>暴露在攻击者视线范围内，可以被利用进行入侵的系统、设备、信息等，都属于暴露面。虽然大多数企业都认识到暴露面的风险所在，并想方设法来减少暴露面；但不幸的是，并非所有暴露面都是显而易见的，大量的暴露面都潜藏在不容易被发现的暗处，很容易因为资产排查不彻底、人员疏漏等问题被忽略。互联网暴露面资产直接面向外部攻击者的威胁。相对于企业内部资产，所面临的安全风险更高。</p><p><strong>攻击面</strong><br>攻击面：是一个给定的计算机或网络系统，可以被黑客访问和利用的漏洞总和。<br>攻击面包含：<br>操作系统、中间件、应用程序、承载网络中存在的软件漏洞；<br>系统和软件中的错误配置与安全控制缺失；<br>违反安全制度和合规要求的网络配置；<br>过度宽松的访问控制规则；</p><p>减少攻击面的基本策略是减少运行中的软件总量，减少非信任用户可使用的入口点，以及消除用户很少使用的服务。改进信息安全的方法之一就是减少系统与软件的攻击表面。因为关闭不必要的功能，可以避免它们带来的安全风险。减少未授权操作者可调用的代码有助避免安全事故。虽然减少攻击表面有助于防止安全事故，但它不能减少一旦攻击者发现漏洞后可能造成的损害程度。</p><p>攻击面从外部攻击视角来审视企业网络资产可能存在的攻击面及脆弱性，如开放端口是否做映射、网络边界是否做隔离、人员行为是否被明确约束等。</p><p><strong>脆弱性</strong><br>脆弱性也可称为弱点或漏洞，是资产或资产组中存在的可能被威胁利用造成损害的薄弱环节。脆弱性一旦被威胁成功利用就可能对资产造成损害。脆弱性可能存在于物理环境、组织、过程、人员、管理、配置、硬件、软件和信息等各个方面。脆弱性是网络系统中可能被利用并造成危害的弱点。</p><p><strong>三无七边系统</strong><br>三无：指具有系统特征且存在”无人管理、无人使用、无人防护”情况的业务/网站/系统/平台。<br>七边：指测试系统、试验平台、退网未离网系统、工程已上线加载业务但未正式交维系统、与合作伙伴共同运营的业务或系统、责任交接不清的系统、处于衰退期的系统。<br>三无七边系统是往往是最容易被外部攻破和利用的，所以需要加以重视。但是”三无七边”往往是最不容易发现和忽视的。<br>“三无七边”系统网络安全管控工作应贯穿规划、设计、建设、入网运行、维护及下线退网整个生命周期。</p><p>暴露面不一定存在漏洞也不一定是攻击面，但是因为暴露在攻击者视线范围内，直面外部攻击者的威胁，安全风险高。<br>攻击面我的理解是既可以被黑客访问又存在漏洞，也就是既是暴露面又有脆弱性，安全风险非常高。<br>攻击面是从外部攻击的视角来审视可能存在的风险，暴露面和脆弱性从内部管理的视角来审视安全风险。<br>三无七边系统往往是安全管理人员所忽视的有可能存在暴露面和攻击面而又没有在安全管控范围内的系统，安全风险非常非常高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;暴露面&lt;/strong&gt;&lt;br&gt;暴露在攻击者视线范围内，可以被利用进行入侵的系统、设备、信息等，都属于暴露面。虽然大多数企业都认识到暴露面的风险所在，并想方设法来减少暴露面；但不幸的是，并非所有暴露面都是显而易见的，大量的暴露面都潜藏在不容易被发现的暗处，很
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>不想学鼓的产品经理不是一个好的程序员</title>
    <link href="https://xiejava.gitee.io/posts/60aaa7f1/"/>
    <id>https://xiejava.gitee.io/posts/60aaa7f1/</id>
    <published>2021-12-29T06:09:36.000Z</published>
    <updated>2021-12-30T01:42:43.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211229/%E6%9E%B6%E5%AD%90%E9%BC%93.jpg" alt="架子鼓"></p><center>架子鼓</center><p>一直以来都想学一门乐器。苦于没有任何才艺，不管是学校搞活动还是公司的团拜活动都是躲得远远的。从小就很羡慕那种多才多艺的人，不管什么时候都能成为众人的焦点，在要表演的时候可以自信的拿得出手表现一番。也非常羡慕那种自娱自乐的享受自我放松的自由演奏，感觉会乐器的人总是那么的快乐和陶醉。</p><p>公司搬到岳麓山大学科技城就在中南大学后湖国际艺术园。一天晚上和同事散步经过一家现代音乐体验店，里面传来乐队演奏的声音，于是驻足前往。里面一群快乐的人，正在激情洋溢的排练着享受着。我们都被触动了，这种自由、快乐、充满激情的感觉真好！想着一天到晚围绕着产品、项目、代码、缺陷，被工作和生活的压力摧残着的我们什么时候才会有这样的状态啊？所以合计了一下，我们也来报个班来学乐器。我一直想学架子鼓，所以决定报个学架子鼓的班。</p><p>试听课，老师是一位胖胖的90后小女孩，问了我一个灵魂拷问的问题。你这年纪不小了为什么想起要来学架子鼓？我想了半天，说我就是喜欢敲鼓啊，一直一来就喜欢节奏感比较强的声音，听音乐也是喜欢听节奏感强的歌曲，听到重低音的鼓声敲在心里“咚”、“咚”、“咚”的感觉很踏实。而且敲鼓沉浸在音乐里敲起来帅气。不管怎么样，虽然不会，但是从心里还是喜欢。</p><p>喜欢是喜欢，但是没有目标的学习始终都是在耍流氓，浪费自己的时间、精力还学不好。既然是喜欢，既然开始学了，就一定要学好。我们现在是报的一个课程12节课的班，我的目标是通过这一个课程的学习，了解架子鼓的基本演奏技巧，学会一首歌曲的演奏。就《大风吹》吧，谁叫这歌这段时间这么火呢。计划是每周二、四上课，每天拿出1个小时用来练习。<strong>学鼓，虽然我不是天赋最好的，但我争取做那个最认真的</strong>！</p><p>今天根据老师的建议在网上买了练习用的哑鼓垫、军鼓架、鼓棒、节拍器。后面动次打次练起来！</p><p>以后我的标签又多了一个–<strong>鼓手</strong>！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211229/%E6%9E%B6%E5%AD%90%E9%BC%93.jpg&quot; alt=&quot;架子鼓&quot;&gt;&lt;/p&gt;
&lt;center&gt;架子鼓&lt;/cente
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>穷忙与假努力</title>
    <link href="https://xiejava.gitee.io/posts/dae0a359/"/>
    <id>https://xiejava.gitee.io/posts/dae0a359/</id>
    <published>2021-12-28T09:23:09.000Z</published>
    <updated>2021-12-29T00:47:45.271Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211228/%E7%A9%B7%E5%BF%99%E4%B8%8E%E5%81%87%E5%8A%AA%E5%8A%9B.png" alt="穷忙与假努力"></p><center>穷忙与假努力</center><p>时间过得真快，只有几天2021年即将过去。每次到了年底回想起来总是感觉时间过得真快，忙忙碌碌又过了一年，可自己各方面取得的成绩乏善可陈。自己并不是很懒惰的人，看上去每天都很忙，却没有忙出效果，反而是随着年龄的增大越来越焦虑。越焦虑就暗自下决心以后要更加努力，当努力没有达到效果时就更加的焦虑。陷入了越努力-&gt;越失望-&gt;越焦虑的怪圈。</p><p><strong>没有目标、没有效果的忙就是穷忙，看上去努力却实际没有效果的努力是假努力</strong>，穷忙和假努力往往是一同出现的，假努力造成了穷忙，穷忙成就了假努力。<strong>相对于不努力，有时候“假努力”会更加可怕</strong>！因为它像安慰剂一样，让你感觉是在努力而不自知，会让你陷入深深的自我怀疑，对自己失望，最后越来越糟，失去对学习、工作、生活的兴趣。</p><p>到底什么样的表现是“假努力”呢？有老师针对孩子们在学习上的表现列举了一些“假努力”表现，给了我很大的启发。</p><p>“假努力”表现一：上课只顾抄笔记，老师讲的都不听。<br>有很多同学在上课的时候表现得特别忙，看上去特别努力的在学习，老师黑板上写的，还是口头上说的，他们都会事无巨细地写下来。然而，对于老师们讲的是什么？本节课的重难点又是什么？他们全然无所谓，只顾着把这堂课发生的所有一切都记录下来。这样的“假努力”注定会让课堂的效率低下，让自己的努力完全沦为无用的“假努力”。</p><p>“假努力”表现二：花很多时间做笔记，课后却从来不去理解。<br>有第一种“假努力”的同学，往往都存在着“假努力”的第二种表现，那就是笔记写得非常非常多，但是至于笔者写的内容和知识点，他们都从来不看，更不会花时间去理解和搞懂笔记上的内容。这样花大力气写下的笔记，当然最终沦为无用功。</p><p>“假努力”表现三：只顾刷题，从来都不花时间总结。<br>还有一部分“假努力”的同学，每天花大量的时间刷题，而且他们往往还有一个显著的特征，那就是只管做题多少，从来不过问题目对错！那些错题，反复出现问题的题目，他们从来都是不管不顾，只觉得刷了足够的题目，自己的成绩自然而然会上升！然而，殊不知他们把大量的时间花在了已经会的题目上，那些不会、易错的题目还是永远会错。</p><p>“假努力”表现四：每天熬夜学习，白天学习效率低下。<br>不知道各位老师和同学有没有发现，几乎每一个中学班级里，总会出现这么一两个“夜晚学习狂魔”，他么总喜欢晚上搞学习，并且熬非常的时间，导致第二天整个人的精神状态都不好，白天的学习效率极其低下！最后陷入一个“白天该学的时候状态差，晚上不该学的时候拼命学”的死循环当中。</p><p> “假努力”表现五：没有目标和计划的去学习。<br>这种“假努力”的表现有一个典型的例子，比如某个同学们英语很差，想通过自己的努力学好英语，然后就从英语单词开始入手，每天背课本上的单词，而且无论什么时候都是从单词表的第一个单词去背起！这样无计划、无目标的努力，只会耗费巨大的时间和精力在重复学习之上！进而导致学习成绩的速度异常的缓慢！</p><p>从这些表现上来看，其实我们成年人在平时学习、工作中同样存在这些类似的问题。个人认为<strong>造成穷忙和假努力最大的问题是没有目标和计划</strong>。东一榔头、西一棒子，不知道自己到底要学什么，要学到一个什么样的程度。就像小时候课本里的小猴子去掰玉米，看什么捡什么，最后捡了芝麻丢了西瓜。<strong>另外一个就是要有系统化、体系化的思维去学习</strong>。只有系统化、体系化的去学习某个东西，建立该领域的知识体系结构体系才能在有体系结构的基础上进行积累，才能学得好，学得牢。现在公众号、抖音、知乎上碎片化的知识很多，哪怕你是天天上知乎去关注学习这些碎片化的知识而没有建立一个知识体系去有意识的去理解吸收的话，那就类似于花了很多时间去做笔记，去关注去了解，课后从来不去理解。给人感觉是看上去在很努力的学习，其实啥也没有学到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211228/%E7%A9%B7%E5%BF%99%E4%B8%8E%E5%81%87%E5%8A%AA%E5%8A%9B.png&quot; alt=&quot;穷
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>新场地，新征程！</title>
    <link href="https://xiejava.gitee.io/posts/8528ed97/"/>
    <id>https://xiejava.gitee.io/posts/8528ed97/</id>
    <published>2021-12-10T03:23:39.000Z</published>
    <updated>2021-12-10T03:27:41.802Z</updated>
    
    <content type="html"><![CDATA[<p>服务数字经济，护航美好生活！</p><p>2021年12月09日通服网安研发团队强势入驻岳麓上大学科技城国家网络安全产业园。</p><p>新场地，新征程，数网络安全研发，还看通服网安！</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%8F%AD%E7%89%8C.jpg" alt="通服网安揭牌"></p><center>通服网安</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%9B%A2%E9%98%9F%E5%90%88%E5%BD%B1.jpg" alt="通服网安研发团队"></p><center>通服网安研发团队</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E7%A0%94%E5%8F%91%E5%A4%A7%E6%A5%BC.jpg" alt="通服网安研发大楼"></p><center>通服网安研发大楼</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E7%A0%94%E5%8F%91%E5%A4%A7%E6%A5%BC%E4%BE%A7%E9%9D%A2.jpg" alt="通服网安研发大楼外景"></p><center>通服网安研发大楼外景</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E5%89%8D%E5%8F%B0.jpg" alt="通服网安前台"></p><center>通服网安前台</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%B1%95%E5%8E%85%E5%85%A5%E5%8F%A3.jpg" alt="展厅入口"></p><center>通服网安展厅入口</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%B1%95%E5%8E%85.jpg" alt="通服网安展厅"></p><center>通服网安展厅</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%80%81%E5%8A%BF%E6%84%9F%E7%9F%A5%E5%B1%95%E7%A4%BA%E5%A4%A7%E5%B1%8F.jpg" alt="通服网安研发楼展厅安全运营中心展示"></p><center>通服网安研发楼展厅安全运营中心展示</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%B2%A1%E6%9C%89%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%B0%B1%E6%B2%A1%E6%9C%89%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8.jpg" alt="没有网络安全就没有国家安全"></p><center>没有网络安全就没有国家安全</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务数字经济，护航美好生活！&lt;/p&gt;
&lt;p&gt;2021年12月09日通服网安研发团队强势入驻岳麓上大学科技城国家网络安全产业园。&lt;/p&gt;
&lt;p&gt;新场地，新征程，数网络安全研发，还看通服网安！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/x
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="工作" scheme="https://xiejava.gitee.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习实现恶意URL检测实战一</title>
    <link href="https://xiejava.gitee.io/posts/6b6a91de/"/>
    <id>https://xiejava.gitee.io/posts/6b6a91de/</id>
    <published>2021-12-09T00:58:04.000Z</published>
    <updated>2021-12-09T01:09:12.581Z</updated>
    
    <content type="html"><![CDATA[<p>恶意URL检测的方法很多，这里介绍通过机器学习分析URL文本分词词频来检测恶意URL。训练的数据集为开源数据集，通过机器学习训练检测模型，然后做了部分工程化的应用，将模型持久化，在应用的时候加载进来直接应用，不用重新进行训练。通过接口调用实现恶意URL检测预测判断。</p><p>恶意URL检测，对应与机器学习是个分类问题，这里分别用逻辑回归和SVM支持向量机分类模型进行模型实现。</p><p>具体实现过程包括<strong>数据载入</strong>–&gt;<strong>数据处理（分词、向量化处理）</strong>–&gt;<strong>模型训练</strong>–&gt;<strong>模型保存</strong>–&gt;<strong>模型应用</strong></p><p><strong>项目组织结构如下：</strong><br><img src="https://img-blog.csdnimg.cn/cdcd148129c346f8a79ab6d91a120fe9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_11,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="项目组织结构"></p><h1 id="一、数据载入"><a href="#一、数据载入" class="headerlink" title="一、数据载入"></a>一、数据载入</h1><p>从数据集中载入数据，读取数据，将URL和标签进行识别和区分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从文件中获取数据集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataFromFile</span><span class="params">(filename=<span class="string">'data/data.csv'</span>)</span>:</span></span><br><span class="line">    input_url = filename</span><br><span class="line">    data_csv = pd.read_csv(input_url, <span class="string">','</span>, error_bad_lines=<span class="literal">False</span>)</span><br><span class="line">    data_df = pd.DataFrame(data_csv)</span><br><span class="line">    url_df = np.array(data_df)</span><br><span class="line">    random.shuffle(url_df)</span><br><span class="line">    y = [d[<span class="number">1</span>] <span class="keyword">for</span> d <span class="keyword">in</span> url_df]</span><br><span class="line">    inputurls = [d[<span class="number">0</span>] <span class="keyword">for</span> d <span class="keyword">in</span> url_df]</span><br><span class="line">    <span class="keyword">return</span> inputurls,y</span><br></pre></td></tr></table></figure><h1 id="二、数据处理（分词、向量化处理）"><a href="#二、数据处理（分词、向量化处理）" class="headerlink" title="二、数据处理（分词、向量化处理）"></a>二、数据处理（分词、向量化处理）</h1><p>数据处理实现对URL的分词及向量化处理<br>分词:分析URL根据,.-进行分词，由于com、cn等常用域名不是关键影响因素，所以分词的时候去掉了</p><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分词</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTokens</span><span class="params">(input)</span>:</span></span><br><span class="line">    web_url = input.lower()</span><br><span class="line">    urltoken = []</span><br><span class="line">    dot_slash = []</span><br><span class="line">    slash = str(web_url).split(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> slash:</span><br><span class="line">        r1 = str(i).split(<span class="string">'-'</span>)</span><br><span class="line">        token_slash = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(r1)):</span><br><span class="line">            r2 = str(r1[j]).split(<span class="string">'.'</span>)</span><br><span class="line">            token_slash = token_slash + r2</span><br><span class="line">        dot_slash = dot_slash + r1 + token_slash</span><br><span class="line">    urltoken = list(set(dot_slash))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'com'</span> <span class="keyword">in</span> urltoken:</span><br><span class="line">        urltoken.remove(<span class="string">'com'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'cn'</span> <span class="keyword">in</span> urltoken:</span><br><span class="line">        urltoken.remove(<span class="string">'cn'</span>)</span><br><span class="line">    <span class="keyword">return</span> urltoken</span><br></pre></td></tr></table></figure><h2 id="向量化处理"><a href="#向量化处理" class="headerlink" title="向量化处理"></a>向量化处理</h2><p>将分词以后的结果进行词频的向量化处理，形成可以用于模型训练的稀疏矩阵向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_urls,y=getDataFromFile(datapath)</span><br><span class="line">url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">x = url_vectorizer.fit_transform(all_urls)</span><br></pre></td></tr></table></figure><h1 id="三、模型训练"><a href="#三、模型训练" class="headerlink" title="三、模型训练"></a>三、模型训练</h1><p>将经过处理后的训练数据用模型进行训练，将数据集分为两部分一部分用于训练，一部分用于测试评估。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练,通过逻辑回归模型训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainLR</span><span class="params">(datapath)</span>:</span></span><br><span class="line">    all_urls,y=getDataFromFile(datapath)</span><br><span class="line">    url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">    x = url_vectorizer.fit_transform(all_urls)</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    l_regress = LogisticRegression()                  <span class="comment"># Logistic regression</span></span><br><span class="line">    l_regress.fit(x_train, y_train)</span><br><span class="line">    l_score = l_regress.score(x_test, y_test)</span><br><span class="line">    print(<span class="string">"score: &#123;0:.2f&#125; %"</span>.format(<span class="number">100</span> * l_score))</span><br><span class="line">    <span class="keyword">return</span> l_regress,url_vectorizer</span><br></pre></td></tr></table></figure><p>用逻辑回归模型训练的结果是 score: 98.50 %</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练，通过SVM支持向量机模型训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainSVM</span><span class="params">(datapath)</span>:</span></span><br><span class="line">    all_urls, y = getDataFromFile(datapath)</span><br><span class="line">    url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">    x = url_vectorizer.fit_transform(all_urls)</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    svmModel=svm.LinearSVC()</span><br><span class="line">    svmModel.fit(x_train, y_train)</span><br><span class="line">    svm_score=svmModel.score(x_test, y_test)</span><br><span class="line">    print(<span class="string">"score: &#123;0:.2f&#125; %"</span>.format(<span class="number">100</span> * svm_score))</span><br><span class="line">    <span class="keyword">return</span> svmModel,url_vectorizer</span><br></pre></td></tr></table></figure><p>用SVM模型训练的结果是 score: 99.64 %</p><p>可以看出SVM模型训练的结果比逻辑回归模型训练的效果要稍好。</p><h1 id="四、保存模型"><a href="#四、保存模型" class="headerlink" title="四、保存模型"></a>四、保存模型</h1><p>将训练好的模型进行持久化保存，通过pickle.dump()的方式把训练好的模型参数及特征保存至模型文件，以便于应用的时候不要再进行训练，直接应用训练好的模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#保存模型及特征</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveModel</span><span class="params">(model,vector)</span>:</span></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">    file1 = modelfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file1, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(model, f)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment">#保存特征</span></span><br><span class="line">    file2 = vectorfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file2, <span class="string">'wb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        pickle.dump(vector, f2)</span><br><span class="line">    f2.close()</span><br></pre></td></tr></table></figure><p>通过main方法执行训练模型及保存模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#model,vector=trainLR('data/data.csv')</span></span><br><span class="line">    model, vector = trainSVM(<span class="string">'data/data.csv'</span>)</span><br><span class="line">    saveModel(model,vector)</span><br></pre></td></tr></table></figure><h1 id="四、模型应用"><a href="#四、模型应用" class="headerlink" title="四、模型应用"></a>四、模型应用</h1><p>通过pickle.load载入已经训练好的模型和特征，并用Flask暴露一个接口调用模型的预测方法进行预测。</p><h2 id="载入已经训练好的模型"><a href="#载入已经训练好的模型" class="headerlink" title="载入已经训练好的模型"></a>载入已经训练好的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#载入已经训练好的模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadModel</span><span class="params">()</span>:</span></span><br><span class="line">    file1 = modelfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file1, <span class="string">'rb'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">        model = pickle.load(f1)</span><br><span class="line">    f1.close()</span><br><span class="line"></span><br><span class="line">    file2 = vectorfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file2, <span class="string">'rb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        vector = pickle.load(f2)</span><br><span class="line">    f2.close()</span><br><span class="line">    <span class="keyword">return</span> model,vector</span><br></pre></td></tr></table></figure><h2 id="通过接口进行调用"><a href="#通过接口进行调用" class="headerlink" title="通过接口进行调用"></a>通过接口进行调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过接口进行调用</span></span><br><span class="line"><span class="meta">@app.route('/&lt;path:path&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_predict</span><span class="params">(path)</span>:</span></span><br><span class="line">    X_predict = []</span><br><span class="line">    X_predict.append(path)</span><br><span class="line">    model, vector = loadModel()</span><br><span class="line">    x = vector.transform(X_predict)</span><br><span class="line">    y_predict = model.predict(x)</span><br><span class="line">    print(y_predict[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"url predict: "</span>+str(y_predict[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="五、应用效果"><a href="#五、应用效果" class="headerlink" title="五、应用效果"></a>五、应用效果</h1><p>将需要检测的URL，输入到<a href="http://127.0.0.1:5000/后面，就可以根据输入的URL进行检测给出模型预测的结果。" target="_blank" rel="noopener">http://127.0.0.1:5000/后面，就可以根据输入的URL进行检测给出模型预测的结果。</a><br><a href="http://127.0.0.1:5000/sohu.com/a/338823532_354899" target="_blank" rel="noopener">http://127.0.0.1:5000/sohu.com/a/338823532_354899</a><br><img src="https://img-blog.csdnimg.cn/7f17697af706490ba693272f6f3780ad.png#pic_center" alt="检测效果1"><br><a href="http://127.0.0.1:5000/sohu.com/a/%3Cscript%3E/test" target="_blank" rel="noopener">http://127.0.0.1:5000/sohu.com/a/%3Cscript%3E/test</a><br><img src="https://img-blog.csdnimg.cn/d6e2542df8944ce4803da80fe0f9f145.png#pic_center" alt="检测效果2"></p><p>完整代码及数据集见：<a href="https://github.com/xiejava1018/urldetection.git" target="_blank" rel="noopener">https://github.com/xiejava1018/urldetection.git</a></p><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;恶意URL检测的方法很多，这里介绍通过机器学习分析URL文本分词词频来检测恶意URL。训练的数据集为开源数据集，通过机器学习训练检测模型，然后做了部分工程化的应用，将模型持久化，在应用的时候加载进来直接应用，不用重新进行训练。通过接口调用实现恶意URL检测预测判断。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>解决Anaconda报The channel is not accessible源通道不可用问题</title>
    <link href="https://xiejava.gitee.io/posts/d101efba/"/>
    <id>https://xiejava.gitee.io/posts/d101efba/</id>
    <published>2021-11-26T07:53:22.000Z</published>
    <updated>2021-11-26T08:00:16.006Z</updated>
    
    <content type="html"><![CDATA[<p>最近在通过pycharm开发python程序，引用anaconda环境建立虚拟环境时报错，报UnavailableInvalidChannel: The channel is not accessible or is invalid.应该是镜像源访问通道无法访问或无效。现将解决办法记录如下：</p><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><p>操作系统：win10<br>安装有anaconda 4.10.3<br>pycharm2021.2</p><h1 id="报错现象："><a href="#报错现象：" class="headerlink" title="报错现象："></a>报错现象：</h1><p>在pycharm中新建python项目，引用anaconda建立虚拟环境时报错<br>报“UnavailableInvalidChannel: The channel is not accessible or is invalid.”<br><img src="https://img-blog.csdnimg.cn/0b93fd9f35054b69a17eea98aace4d1b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="建立虚拟环境报错"></p><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><h2 id="1、找到anaconda的源配置文件"><a href="#1、找到anaconda的源配置文件" class="headerlink" title="1、找到anaconda的源配置文件"></a>1、找到anaconda的源配置文件</h2><p>根据报错的建议提示：</p><blockquote><p>You will need to ajust your conda configuration to proceed.<br>Use ‘cona config –show channels’ to view your configuration’s current state,<br>and use ‘conda config –show-sources’ to view config file location.</p></blockquote><p>意思是建议你需要调整conda的配置来处理，可以通过<code>cona config --show channels</code>命令来查看你当前的配置状态，可以用<code>conda config --show-sources</code>看查看本地的配置文件。<br>根据这个建议，打开anaconda的命令行控制台。<br><img src="https://img-blog.csdnimg.cn/9fdcb7a4f8e64cb19e069fad4e1ece6a.png#pic_center" alt="Anaconda Powershell"></p><p>敲入“conda config –show-sources”命令，显示当前的通道为<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a>  报错就是说这个通道无法访问或无效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show channels</span><br><span class="line">channels:</span><br><span class="line">  - https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>通过“conda config –show-sources” 查看配置文件的路径。配置文件为用户目录下的<code>.condarc</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show-sources</span><br><span class="line">==&gt; C:\Users\xiejava\.condarc &lt;==</span><br><span class="line">channels:</span><br><span class="line">  - https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/90ca54b07ef6417395a01c140b6b4381.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、修改为清华的镜像源"><a href="#2、修改为清华的镜像源" class="headerlink" title="2、修改为清华的镜像源"></a>2、修改为清华的镜像源</h2><p>将找到的.condarc文件打开。<br>拷贝以下清华的镜像源到该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><p>然后再次运行<code>conda config --show-sources</code>，确认配置文件内容已经修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show-sources</span><br><span class="line">==&gt; C:\Users\xiejava\.condarc &lt;==</span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><h2 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h2><p>再打开pycharm引用Conda Enviroment新建新的虚拟环境。<br><img src="https://img-blog.csdnimg.cn/86f0c2ffd7434ed1a591bb89c47f68d8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="新建新的虚拟环境"><br>这时不报错可以正常创建Conda虚拟环境了。<br><img src="https://img-blog.csdnimg.cn/556082fa9af142e7adb3529de9da77b3.png#pic_center" alt="创建Conda Environment"><br>至此，修改成清华镜像源解决了Anaconda报The channel is not accessible源通道不可用的问题。</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在通过pycharm开发python程序，引用anaconda环境建立虚拟环境时报错，报UnavailableInvalidChannel: The channel is not accessible or is invalid.应该是镜像源访问通道无法访问或无效。现将
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python快速实现一个域名、IP信息聚合网站</title>
    <link href="https://xiejava.gitee.io/posts/fa820ec9/"/>
    <id>https://xiejava.gitee.io/posts/fa820ec9/</id>
    <published>2021-11-21T06:18:19.000Z</published>
    <updated>2021-12-09T01:09:00.549Z</updated>
    
    <content type="html"><![CDATA[<p>域名和IP地址信息是非常基础的情报信息，目前网上有很多网站都提供了域名信息的查询、IP地址及归属地的查询。本文通过Python Flask实现域名及IP情报信息的聚合网站。</p><p>因为域名和IP地址信息会有变化，为了减少接口压力，做了本地数据库的存储，新鲜度保存一周，每次查询先从本地数据库获取信息，如果本地库信息有并且没有超过一个星期就从本地库取，没有就从其他网站获取，并更新到本地库。</p><h1 id="一、获取域名WHOIS信息"><a href="#一、获取域名WHOIS信息" class="headerlink" title="一、获取域名WHOIS信息"></a>一、获取域名WHOIS信息</h1><p>网上提供域名WHOIS信息查询的网站有很多，这里以<a href="http://whois.chinafu.com" target="_blank" rel="noopener">http://whois.chinafu.com</a> 为例实现WHOIS信息的查询和解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getwhoisinfobychinafu</span><span class="params">(domain)</span>:</span></span><br><span class="line">    ret_result = &#123;&#125;</span><br><span class="line">    result=getWhoisInfoFromDB(domain)</span><br><span class="line">    <span class="keyword">if</span> len(result)==<span class="number">0</span>:</span><br><span class="line">        whois_service_url = <span class="string">'http://whois.chinafu.com/whois.php'</span></span><br><span class="line">        post_data=&#123;<span class="string">"domain"</span>:domain&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            post_result=requests.post(whois_service_url,post_data)</span><br><span class="line">            <span class="keyword">if</span> post_result.status_code == <span class="number">200</span>:</span><br><span class="line">                ret_str = post_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">                soup = BeautifulSoup(ret_str, <span class="string">'lxml'</span>)</span><br><span class="line">                items_tr =soup.find(name=<span class="string">'table'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'listtable'</span>&#125;).find_all(name=<span class="string">'tr'</span>)</span><br><span class="line">                <span class="keyword">for</span> item_tr <span class="keyword">in</span> items_tr:</span><br><span class="line">                    td_item=item_tr.find(name=<span class="string">'td'</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'colspan'</span> <span class="keyword">in</span> td_item.attrs:</span><br><span class="line">                        key_name=<span class="string">'详情'</span></span><br><span class="line">                        key_value=td_item.find(name=<span class="string">'div'</span>,id=<span class="string">'tab1'</span>).text</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        key_name=item_tr.find(name=<span class="string">'th'</span>).text</span><br><span class="line">                        key_value=item_tr.find(name=<span class="string">'td'</span>).text</span><br><span class="line">                    ret_result[key_name]=key_value</span><br><span class="line">                addchinafuWhoisInfo2DB(ret_result)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> r:</span><br><span class="line">            print(<span class="string">'未知错误 %s'</span> % (r))</span><br><span class="line">    <span class="comment">#ret_result = json.dumps(ret_result, ensure_ascii=False)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret_result=result[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> ret_result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWhoisInfoFromDB</span><span class="params">(domainname)</span>:</span></span><br><span class="line">    whoisInfos=db.session.execute(<span class="string">'select * from whoisinfo where domain_name="%s" and updated_time &gt; DATE_SUB(CURDATE(), INTERVAL 1 WEEK)'</span> % domainname).fetchall()</span><br><span class="line">    whoisInfo_dics=[]</span><br><span class="line">    <span class="keyword">for</span> whoisInfo <span class="keyword">in</span> whoisInfos:</span><br><span class="line">        chinafuwhoisinfo_dic=chinafuwhoisinfo2dic(whoisInfo)</span><br><span class="line">        whoisInfo_dics.append(chinafuwhoisinfo_dic)</span><br><span class="line">    <span class="keyword">return</span> whoisInfo_dics</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addchinafuWhoisInfo2DB</span><span class="params">(chinafuWhoisInfo_dic)</span>:</span></span><br><span class="line">    chinafuWhois=WhoisInfo()</span><br><span class="line">    chinafuWhois.domain_name=chinafuWhoisInfo_dic.get(<span class="string">'域名DomainName'</span>)</span><br><span class="line">    chinafuWhois.domain_status=chinafuWhoisInfo_dic.get(<span class="string">'域名状态Domain Status'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar=chinafuWhoisInfo_dic.get(<span class="string">'注册商Sponsoring Registrar'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.name_server=chinafuWhoisInfo_dic.get(<span class="string">'DNS 服务器Name Server'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_creation_date=chinafuWhoisInfo_dic.get(<span class="string">'注册日期Registration Date'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_updated_date = chinafuWhoisInfo_dic.get(<span class="string">'更新日期Update Date'</span>, <span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_expiry_date = chinafuWhoisInfo_dic.get(<span class="string">'到期日期Expiration Date'</span>, <span class="string">''</span>)</span><br><span class="line">    chinafuWhois.detail=chinafuWhoisInfo_dic.get(<span class="string">'详情'</span>, <span class="string">''</span>)[<span class="number">0</span>:<span class="number">10000</span>]</span><br><span class="line">    chinafuWhois.source = <span class="string">'中国福网'</span></span><br><span class="line">    db.session.execute(<span class="string">'delete from whoisinfo where domain_name="%s" and source="%s"'</span> % (chinafuWhoisInfo_dic.get(<span class="string">'域名DomainName'</span>), chinafuWhois.source))</span><br><span class="line">    db.session.add(chinafuWhois)</span><br><span class="line">    db.session.commit()</span><br></pre></td></tr></table></figure><p>这里为了减少直接从其他网站获取WHOIS信息的压力，做了本地数据库的存储，每次先从本地数据库取WHOIS的信息，如果本地库信息有并且没有超过一个星期就从本地库取，没有就从其他网站获取，并更新到本地库。这里getWhoisInfoFromDB实现了取新鲜度为1周的数据，addchinafuWhoisInfo2DB实现将获取的信息保存到本地数据库。</p><h1 id="二、根据域名解析出IP"><a href="#二、根据域名解析出IP" class="headerlink" title="二、根据域名解析出IP"></a>二、根据域名解析出IP</h1><p>根据域名解析出IP代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIPbyDomain</span><span class="params">(domain)</span>:</span></span><br><span class="line">    addr=<span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        myaddr = socket.getaddrinfo(domain, <span class="string">'http'</span>)</span><br><span class="line">        addr=myaddr[<span class="number">0</span>][<span class="number">4</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">return</span> addr</span><br></pre></td></tr></table></figure><h1 id="三、获取IP信息"><a href="#三、获取IP信息" class="headerlink" title="三、获取IP信息"></a>三、获取IP信息</h1><p>获取IP信息的API接口也有很多，有淘宝的 <a href="https://ip.taobao.com/outGetIpInfo" target="_blank" rel="noopener">https://ip.taobao.com/outGetIpInfo</a>  、IPINFO <a href="http://ipinfo.io/、IPAPI" target="_blank" rel="noopener">http://ipinfo.io/、IPAPI</a> <a href="http://ip-api.com/" target="_blank" rel="noopener">http://ip-api.com/</a>  以及GeoLite2离线库等。</p><h2 id="从淘宝IP获取IP信息"><a href="#从淘宝IP获取IP信息" class="headerlink" title="从淘宝IP获取IP信息"></a>从淘宝IP获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobytaobao</span><span class="params">(ip)</span>:</span></span><br><span class="line">    taobaoIp_url = <span class="string">'https://ip.taobao.com/outGetIpInfo'</span></span><br><span class="line">    post_data=&#123;<span class="string">"ip"</span>:ip,<span class="string">"accessKey"</span>:<span class="string">"alibaba-inc"</span>&#125;</span><br><span class="line">    ret_ipinfo= &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        return_data=requests.post(taobaoIp_url,post_data)</span><br><span class="line">        <span class="comment">#其中返回数据中code的值的含义为，0：成功，1：服务器异常，2：请求参数异常，3：服务器繁忙，4：个人qps超出</span></span><br><span class="line">        return_json=json.loads(return_data.text)</span><br><span class="line">        <span class="keyword">if</span> return_json[<span class="string">'code'</span>]==<span class="number">0</span>:</span><br><span class="line">            ret_ipinfo[<span class="string">'ip'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'ip'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'country'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'country'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'region'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'region'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'org'</span>]=<span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'city'</span>] = return_json[<span class="string">'data'</span>][<span class="string">'city'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'isp'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'isp'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'loc'</span>] = <span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'timezone'</span>] = <span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'source'</span>]=<span class="string">'淘宝IP'</span></span><br><span class="line">            addIPInfo2DB(ret_ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ret_ipinfo</span><br></pre></td></tr></table></figure><h2 id="从ipinfo-io获取IP信息"><a href="#从ipinfo-io获取IP信息" class="headerlink" title="从ipinfo.io获取IP信息"></a>从ipinfo.io获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobyipinfo</span><span class="params">(ip)</span>:</span></span><br><span class="line">    api_url=<span class="string">'http://ipinfo.io/'</span>+ip</span><br><span class="line">    ipinfo = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req_return = requests.get(api_url)</span><br><span class="line">        <span class="keyword">if</span> req_return.status_code == <span class="number">200</span>:</span><br><span class="line">            ipinfo = json.loads(req_return.text)</span><br><span class="line">            ipinfo[<span class="string">'source'</span>]=<span class="string">'ipinfo.io'</span></span><br><span class="line">            addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h2 id="从ip-api-com获取IP信息"><a href="#从ip-api-com获取IP信息" class="headerlink" title="从ip-api.com获取IP信息"></a>从ip-api.com获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobyipapi</span><span class="params">(ip)</span>:</span></span><br><span class="line">    api_url=<span class="string">'http://ip-api.com/json/'</span>+ip</span><br><span class="line">    ipinfo=&#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req_return=requests.get(api_url)</span><br><span class="line">        <span class="keyword">if</span> req_return.status_code==<span class="number">200</span>:</span><br><span class="line">            ipinfo=json.loads(req_return.text)</span><br><span class="line">            ipinfo[<span class="string">'ip'</span>] = ip</span><br><span class="line">            ipinfo[<span class="string">'source'</span>] = <span class="string">'ip-api.com'</span></span><br><span class="line">            ipinfo[<span class="string">'loc'</span>] = str(ipinfo[<span class="string">'lat'</span>])+<span class="string">','</span>+str(ipinfo[<span class="string">'lon'</span>])</span><br><span class="line">            addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h2 id="从GeoLite离线库获取IP信息"><a href="#从GeoLite离线库获取IP信息" class="headerlink" title="从GeoLite离线库获取IP信息"></a>从GeoLite离线库获取IP信息</h2><p>如何获取GeoLite离线库及如何读取，详见：<a href="http://xiejava.ishareread.com/posts/2c5697c0/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/2c5697c0/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobygeoip2</span><span class="params">(ip)</span>:</span></span><br><span class="line">    ipinfo=&#123;&#125;</span><br><span class="line">    dbdir=Config.geoLiteDBdir</span><br><span class="line">    <span class="keyword">with</span> geoip2.database.Reader(dbdir) <span class="keyword">as</span> reader:</span><br><span class="line">        response = reader.city(ip)</span><br><span class="line">        ipinfo[<span class="string">'ip'</span>] =ip</span><br><span class="line">        ipinfo[<span class="string">'country'</span>] = response.country.names[<span class="string">'zh-CN'</span>]</span><br><span class="line">        ipinfo[<span class="string">'region'</span>] =<span class="string">''</span></span><br><span class="line">        ipinfo[<span class="string">'city'</span>]=response.city.name</span><br><span class="line">        ipinfo[<span class="string">'org'</span>] =<span class="string">''</span></span><br><span class="line">        ipinfo[<span class="string">'loc'</span>] = str(response.location.latitude)+<span class="string">','</span>+str(response.location.longitude)</span><br><span class="line">        ipinfo[<span class="string">'timezone'</span>] = response.location.time_zone</span><br><span class="line">        ipinfo[<span class="string">'source'</span>] = <span class="string">'GeoIP'</span></span><br><span class="line">        addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h1 id="四、搭建一个FLASK-Web应用来查询聚合的域名、IP情报信息"><a href="#四、搭建一个FLASK-Web应用来查询聚合的域名、IP情报信息" class="headerlink" title="四、搭建一个FLASK Web应用来查询聚合的域名、IP情报信息"></a>四、搭建一个FLASK Web应用来查询聚合的域名、IP情报信息</h1><h2 id="1、FLASK-Web应用的工程组织"><a href="#1、FLASK-Web应用的工程组织" class="headerlink" title="1、FLASK Web应用的工程组织"></a>1、FLASK Web应用的工程组织</h2><p><img src="https://img-blog.csdnimg.cn/ad27fb1ae7c84bd297b751bfca86f975.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="工程组织"></p><h2 id="2、配置数据及读取配置数据"><a href="#2、配置数据及读取配置数据" class="headerlink" title="2、配置数据及读取配置数据"></a>2、配置数据及读取配置数据</h2><h3 id="1）配置数据"><a href="#1）配置数据" class="headerlink" title="1）配置数据"></a>1）配置数据</h3><p>配置数据分别放在.env及.flaskenv中，其中<code>.env</code>放的是工程中用到的数据库链接等比较私密的配置信息。<code>.flaskenv</code>放的是Flask运行环境的信息<br>.env的配置信息参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEV_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db_dev?charset=utf8'</span></span><br><span class="line">TEST_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db_test?charset=utf8'</span></span><br><span class="line">PROD_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db?charset=utf8'</span></span><br><span class="line"></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br><span class="line">SECRET_KEY=your secret key</span><br></pre></td></tr></table></figure><p>.falskenv配置信息参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLASK_ENV=development</span><br></pre></td></tr></table></figure><h3 id="2）实现读取配置数据"><a href="#2）实现读取配置数据" class="headerlink" title="2）实现读取配置数据"></a>2）实现读取配置数据</h3><p>通过config.py实现配置数据的读取及管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line">basedir=os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">flaskenv_path=os.path.join(basedir,<span class="string">'.flaskenv'</span>)</span><br><span class="line">env_path=os.path.join(basedir,<span class="string">'.env'</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(flaskenv_path):</span><br><span class="line">    load_dotenv(flaskenv_path)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(env_path):</span><br><span class="line">    load_dotenv(env_path)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">    geoLiteDBdir=os.path.join(basedir,<span class="string">'GeoLite2\GeoLite2-City.mmdb'</span>)</span><br><span class="line">    flaskenv = os.getenv(<span class="string">'FLASK_ENV'</span>,<span class="string">'development'</span>)</span><br><span class="line">    SECRET_KEY=os.getenv(<span class="string">'SECRET_KEY'</span>,<span class="string">'123!@#'</span>)</span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS=os.getenv(<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>)</span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'DEV_DATABASE_URI'</span>)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_app</span><span class="params">(app)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    DEBUG=<span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'DEV_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    TESTING=<span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'TEST_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'PROD_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line">config=&#123;</span><br><span class="line">    <span class="string">'development'</span>:DevelopmentConfig,</span><br><span class="line">    <span class="string">'testing'</span>:TestingConfig,</span><br><span class="line">    <span class="string">'production'</span>:ProductionConfig,</span><br><span class="line">    <span class="string">'default'</span>:DevelopmentConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、界面及路由"><a href="#3、界面及路由" class="headerlink" title="3、界面及路由"></a>3、界面及路由</h2><p>界面很简单就一个域名/IP的输入框，输入域名或IP后去查询相应的域名信息或IP信息显示到界面上。<br><img src="https://img-blog.csdnimg.cn/d906b3973e654d3cb6c0a68fbc121da1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="index界面"></p><p>界面用jinjia2的模板<br>index.html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "bootstrap/base.html" %&#125;</span><br><span class="line">&#123;% block title %&#125;InfoCol&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    &#123;% block navbar %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".navbar-collapse"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>InfoCol<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header "</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"center-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-block"</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">                &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">                &#123;&#123; form.name.label &#125;&#125;&#123;&#123; form.name() &#125;&#125;</span><br><span class="line">                &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% if whois_info %&#125;</span><br><span class="line">                  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>&#123;&#123; name &#125;&#125;的Whois信息<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    &#123;% for item in whois_info %&#125;</span><br><span class="line">                        &#123;% if item!='详情' %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 80%"</span>&gt;</span>&#123;&#123; whois_info[item] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">href</span>=<span class="string">"#collapseExample"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"collapseExample"</span>&gt;</span></span><br><span class="line">                               &#123;&#123; item &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 80%"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse"</span> <span class="attr">id</span>=<span class="string">"collapseExample"</span>&gt;</span></span><br><span class="line">                                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">                                    &#123;&#123; whois_info[item] &#125;&#125;</span><br><span class="line">                                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% endif %&#125;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% if ipinfos|length&gt;0 %&#125;</span><br><span class="line">                  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>IP<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>国家/地区<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>省份<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>机构<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>ISP<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>经纬度<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>来源<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                      &#123;% for ipinfo in ipinfos %&#125;</span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['ip'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['country'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['region'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['city'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['org'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['isp'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['loc'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                              &#123;% if ipinfo['source']=='ipinfo.io' %&#125;</span><br><span class="line">                                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ipinfo.io/&#123;&#123; ipinfo['ip'] &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; ipinfo['source'] &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                              &#123;% elif ipinfo['source']=='ip-api.com'%&#125;</span><br><span class="line">                                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ip-api.com/json/&#123;&#123; ipinfo['ip'] &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; ipinfo['source'] &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                              &#123;% else %&#125;</span><br><span class="line">                                  &#123;&#123; ipinfo['source'] &#125;&#125;</span><br><span class="line">                              &#123;% endif %&#125;</span><br><span class="line">                          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                      &#123;% endfor %&#125;</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>路由配置处理中实现了获取表单中的信息，并判断是域名还是IP如果是域名者获取whois信息，并根据域名获取IP信息。如果输入的是IP则获取IP信息，并反馈到页面上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@index_bp.route('/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    ipinfos = []</span><br><span class="line">    whois_info = <span class="string">''</span></span><br><span class="line">    form = InputForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        name = form.name.data</span><br><span class="line">        <span class="keyword">if</span> checkip(name):</span><br><span class="line">            ipinfos = getipinfo(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            whois_info = getwhoisinfo(name)</span><br><span class="line">            whois_ip = getIPbyDomain(name)</span><br><span class="line">            <span class="keyword">if</span> checkip(whois_ip):</span><br><span class="line">                ipinfos = getipinfo(whois_ip)</span><br><span class="line">        form.name.data = <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,form=form, name=name, ipinfos=ipinfos, whois_info=whois_info)</span><br></pre></td></tr></table></figure><h2 id="4、最终实现效果"><a href="#4、最终实现效果" class="headerlink" title="4、最终实现效果"></a>4、最终实现效果</h2><p><img src="https://img-blog.csdnimg.cn/6649c43ceaad485e9d3170b4a03695d4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="界面查询效果"></p><p><strong>至此通过Python快速实现了一个简单的域名、IP信息聚合网站</strong></p><hr><p>全部源代码：<a href="https://github.com/xiejava1018/infocollect" target="_blank" rel="noopener">https://github.com/xiejava1018/infocollect</a></p><p>演示地址：<a href="http://test.ishareread.com/" target="_blank" rel="noopener">http://test.ishareread.com/</a></p><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;域名和IP地址信息是非常基础的情报信息，目前网上有很多网站都提供了域名信息的查询、IP地址及归属地的查询。本文通过Python Flask实现域名及IP情报信息的聚合网站。&lt;/p&gt;
&lt;p&gt;因为域名和IP地址信息会有变化，为了减少接口压力，做了本地数据库的存储，新鲜度保存一周
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫获取电子书资源实战</title>
    <link href="https://xiejava.gitee.io/posts/eab21fe5/"/>
    <id>https://xiejava.gitee.io/posts/eab21fe5/</id>
    <published>2021-11-20T07:41:01.000Z</published>
    <updated>2021-11-20T15:02:40.108Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Python，相对java来说python简单易学、语法简单，工具丰富，开箱即用，适用面广做全栈开发那是极好的，对于小型应用的开发，虽然运行效率慢点，但开发效率极高。大大提高了咱们的生产力。为什么python能够在这几年火起来，自然有他的道理，当然也受益于这几年大数据和AI的火。</p><p>据说网络上80%的爬虫都是用python写的，不得不说python写爬虫真的是so easy。基本上一个不太复杂的网站可以通过python用100多行代码就能实现你所需要的爬取。<br>现在就以一个电子书的网站为例来实现python爬虫获取电子书资源。爬取整站的电子书资源，按目录保存到本地，并形成索引文件方便查找。</p><p>爬取的目标网站：苦瓜书盘</p><p>步骤：<strong>爬取-&gt;分析、解析-&gt;保存</strong></p><p>对于一个不需要登录验证的资源分享类的网站，爬取最大的工作量应该是在对目标页面的分析、解析、识别，这里用的到是Python的BeautifulSoup库。</p><p>一、获取目录</p><p>二、获取书籍列表页</p><p>三、获取书籍详情页</p><p>四、分析书籍详情页的资源地址</p><p>五、下载并保存</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>引入相应的包，设置 headerd, 和资源保存路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> Book <span class="keyword">import</span> Book</span><br><span class="line"></span><br><span class="line">savepath=<span class="string">"J://kgbook//books//"</span> <span class="comment">#保存地址</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">main_url=<span class="string">'https://kgbook.com/'</span></span><br><span class="line">bookcount=<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="一、获取目录"><a href="#一、获取目录" class="headerlink" title="一、获取目录"></a>一、获取目录</h1><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E7%9B%AE%E5%BD%95.png" alt="获取目录"><br>通过浏览器的调试工具可以看到目录在id=catagory的div标签下，下面还有ul和li标签，那我们可以迭代li可以获得目录及目录页的地址。<br>可以通过soup.find_all(attrs={‘id’: ‘category’})[0].ul 获取 到ul标签，然后获取ul的li标签，进行迭代获取。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">获取目录</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcategory</span><span class="params">()</span>:</span></span><br><span class="line">    req_result=requests.get(main_url,headers=headers)</span><br><span class="line">    <span class="keyword">if</span> req_result.status_code==<span class="number">200</span>:</span><br><span class="line">        htmlstr=req_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        soup = BeautifulSoup(htmlstr, <span class="string">'lxml'</span>)</span><br><span class="line">        categorys=soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'category'</span>&#125;)[<span class="number">0</span>].ul</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> categorys.find_all(name=<span class="string">'li'</span>):</span><br><span class="line">            print(<span class="string">'开始抓取'</span>+li.a.attrs[<span class="string">'href'</span>]+<span class="string">"--"</span>+li.string)</span><br><span class="line">            getcategroydetail(main_url+li.a.attrs[<span class="string">'href'</span>],li.string)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="二、获取书籍列表页"><a href="#二、获取书籍列表页" class="headerlink" title="二、获取书籍列表页"></a>二、获取书籍列表页</h1><p>在书籍列表页，我们要获取两个信息，分别是书籍列表的信息及翻页下一页书籍列表的URL地址。<br>通过浏览器的调试工具分别对列表的信息及翻页下一页的html进行分析。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E4%B9%A6%E7%B1%8D%E5%88%97%E8%A1%A8.png" alt="获取书籍列表页"><br>列表中的书籍详情页信息在class=”channel-item”的div标签下，通过class=”list-title”的h3标签循环迭代<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%BF%BB%E9%A1%B5.png" alt="翻页"><br>下一页，我们可以直接通过next_pag=soup.find(name=’a’,text=re.compile(‘下一页’))来获取。<br>然后我们可以通过递归来不断的调用获取下一页书籍列表页的代码，知道没有下一页为止。就可以把怎个目录都可以爬取完。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">获取书籍列表</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbookslist</span><span class="params">(bookurlstr,categroy_path)</span>:</span></span><br><span class="line">    book_result=requests.get(bookurlstr,headers=headers)</span><br><span class="line">    bookhtmlstr=book_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(bookhtmlstr, <span class="string">'lxml'</span>)</span><br><span class="line">    booklists=soup.select(<span class="string">'.channel-item'</span>)</span><br><span class="line">    <span class="keyword">for</span> bookinfo_div <span class="keyword">in</span> booklists:</span><br><span class="line">        booktitle_div=bookinfo_div.select(<span class="string">'.list-title'</span>)[<span class="number">0</span>]</span><br><span class="line">        bookurl=booktitle_div.a.attrs[<span class="string">'href'</span>]</span><br><span class="line">        getbookdetail(bookurl,categroy_path)</span><br><span class="line">    next_pag=soup.find(name=<span class="string">'a'</span>,text=re.compile(<span class="string">'下一页'</span>))</span><br><span class="line">    <span class="keyword">if</span> next_pag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        next_url=next_pag.attrs[<span class="string">'href'</span>]</span><br><span class="line">        print(<span class="string">'爬取下一页：'</span>+next_url)</span><br><span class="line">        getbookslist(next_url,categroy_path)</span><br></pre></td></tr></table></figure><h1 id="三、获取书籍详情页"><a href="#三、获取书籍详情页" class="headerlink" title="三、获取书籍详情页"></a>三、获取书籍详情页</h1><p>我们要在书籍详情页需要获得书籍详情信息包括书名、作者等信息<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E4%B9%A6%E7%B1%8D%E8%AF%A6%E6%83%85.png" alt="书籍详情"><br>关于书名和作者可以分别通过提取class=”news_title”的h1标签和id=”news_details”的div下的ul下的li再通过正则表达式对作者信息进行提取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">booktitle=bookdetailsoup.select(<span class="string">'.news_title'</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">bookauthor=bookdetailsoup.select(<span class="string">'#news_details'</span>)[<span class="number">0</span>].ul.li.find(text=re.compile(<span class="string">'作者：(.*?)'</span>)).strip()</span><br><span class="line">bookauthor=bookauthor.replace(<span class="string">'作者：'</span>,<span class="string">''</span>)</span><br><span class="line">booktitleinfo=<span class="string">"《"</span>+booktitle+<span class="string">'》-'</span>+bookauthor</span><br></pre></td></tr></table></figure><h1 id="四、分析书籍详情页的资源地址"><a href="#四、分析书籍详情页的资源地址" class="headerlink" title="四、分析书籍详情页的资源地址"></a>四、分析书籍详情页的资源地址</h1><p>在书籍详情页，我们还要分析书籍详情页的资源地址<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E4%B9%A6%E7%B1%8D%E8%B5%84%E6%BA%90%E5%9C%B0%E5%9D%80.png" alt="资源地址"><br>电子书的资源下载地址可以通过提取a标签的信息来获取。通过正则表达式分别匹配azw3、mobi、epub分别提取不同的电子书资源。<br>book_url_item=bookdetailsoup.find(name=’a’,text=re.compile(booktype,re.I))<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">根据书籍资源类型下载资源</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbookfortype</span><span class="params">(bookurl,categroy_path,bookdetailsoup,booktype)</span>:</span></span><br><span class="line">    booktitle=bookdetailsoup.select(<span class="string">'.news_title'</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">    bookauthor=bookdetailsoup.select(<span class="string">'#news_details'</span>)[<span class="number">0</span>].ul.li.find(text=re.compile(<span class="string">'作者：(.*?)'</span>)).strip()</span><br><span class="line">    bookauthor=bookauthor.replace(<span class="string">'作者：'</span>,<span class="string">''</span>)</span><br><span class="line">    booktitleinfo=<span class="string">"《"</span>+booktitle+<span class="string">'》-'</span>+bookauthor</span><br><span class="line">    print(<span class="string">'书籍详情：---'</span>+booktitleinfo)</span><br><span class="line">    book_url_item=bookdetailsoup.find(name=<span class="string">'a'</span>,text=re.compile(booktype,re.I))</span><br><span class="line">    <span class="keyword">if</span> book_url_item <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        downloadurl=book_url_item.attrs[<span class="string">'href'</span>]</span><br><span class="line">        print(<span class="string">'下载地址：'</span>+downloadurl)</span><br><span class="line">        <span class="keyword">if</span> checkIfNoExistBookByUrl(downloadurl):</span><br><span class="line">            r = requests.get(downloadurl)</span><br><span class="line">            <span class="keyword">if</span> r.status_code==<span class="number">200</span>:</span><br><span class="line">                savepath=createdir(categroy_path,booktitleinfo)</span><br><span class="line">                filename=booktitle+<span class="string">"."</span>+booktype</span><br><span class="line">                savebook(r.content,savepath,filename)</span><br><span class="line">                p,f=os.path.split(categroy_path)</span><br><span class="line">                bookcategory=f</span><br><span class="line">                book=Book(bookcategory,booktitle,bookauthor,bookurl,downloadurl,savepath,<span class="string">"苦瓜书盘"</span>,booktype)</span><br><span class="line">                print(book.toString())</span><br><span class="line">                savebooktojson(book)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'下载失败：status_code='</span>+str(r.status_code))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没有'</span>+booktype+<span class="string">'格式的书'</span>)</span><br></pre></td></tr></table></figure><p>五、下载并保存<br>有了资源的下载资源后下载就变得很简单了，主要用python的os库，对文件进行操作，包括建目录及保存资源文件。也可以通过连接数据库将爬取的数据保存到数据库。<br>定义书籍类Book用于组织和保存数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,bookcategory,bookname,bookauthor,bookurl,bookdownloadurl,booksavepath,booksource,booktype)</span>:</span></span><br><span class="line">        self.bookcategory=bookcategory</span><br><span class="line">        self.bookname=bookname</span><br><span class="line">        self.bookauthor=bookauthor</span><br><span class="line">        self.bookurl=bookurl</span><br><span class="line">        self.bookdownloadurl=bookdownloadurl</span><br><span class="line">        self.booksavepath=booksavepath</span><br><span class="line">        self.booksource=booksource</span><br><span class="line">        self.booktype=booktype</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toString</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"bookcategory"</span>:self.bookcategory,<span class="string">"bookname"</span>:self.bookname,<span class="string">"bookauthor"</span>:self.bookauthor,<span class="string">"bookurl"</span>:self.bookurl,<span class="string">"bookdownloadurl"</span>:self.bookdownloadurl,<span class="string">"booksavepath"</span>:self.booksavepath,<span class="string">"booksource"</span>:self.booksource,<span class="string">"booktype"</span>:self.booktype&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">将获取的信息保存至文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savebooktojson</span><span class="params">(book)</span>:</span></span><br><span class="line">    bookdata=&#123;</span><br><span class="line">        <span class="string">'booksource'</span>:book.booksource,</span><br><span class="line">        <span class="string">'booktype'</span>:book.booktype,</span><br><span class="line">        <span class="string">'bookcategory'</span>:book.bookcategory,</span><br><span class="line">        <span class="string">'bookname'</span>:book.bookname,</span><br><span class="line">        <span class="string">'bookauthor'</span>:book.bookauthor,</span><br><span class="line">        <span class="string">'bookurl'</span>:book.bookurl,</span><br><span class="line">        <span class="string">'bookdownloadurl'</span>:book.bookdownloadurl,</span><br><span class="line">        <span class="string">'booksavepath'</span>:book.booksavepath</span><br><span class="line">    &#125;</span><br><span class="line">    bookjson=json.dumps(bookdata,ensure_ascii=<span class="literal">False</span>) <span class="comment">#ensure_ascii=False 就不会用 ASCII 编码，中文就可以正常显示了</span></span><br><span class="line">    print(bookjson)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'a'</span>,encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(bookjson+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">根据目录创建文件夹</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createdir</span><span class="params">(savepath,dir)</span>:</span></span><br><span class="line">    path=os.path.join(savepath,dir)</span><br><span class="line">    isExists=os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> isExists:</span><br><span class="line">        print(<span class="string">'已经存在'</span>+dir)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'创建目录'</span>+dir)</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">下载书籍资源</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savebook</span><span class="params">(content,savepath,savefilename)</span>:</span></span><br><span class="line">    savefile=os.path.join(savepath,savefilename)</span><br><span class="line">    <span class="keyword">with</span> open(savefile, <span class="string">"wb"</span>) <span class="keyword">as</span> code:</span><br><span class="line">       code.write(content)</span><br></pre></td></tr></table></figure><hr><p>运行效果如下：</p><p>1、爬取过程<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%88%AC%E5%8F%96%E8%BF%87%E7%A8%8B.png" alt="爬取过程"><br>2、爬取记录的json信息<br>data.json的信息如下：<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%88%AC%E5%8F%96%E8%AE%B0%E5%BD%95%E7%9A%84json%E4%BF%A1%E6%81%AF.png" alt="爬取记录"><br>3、爬取获取的资源<br>按目录都已经整理好了，够你看的了。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E7%9A%84%E8%B5%84%E6%BA%90.png" alt="获取的资源"></p><p>​<br>Python爬虫获取电子书资源实战的全部代码，包括爬取-&gt;分析、解析-&gt;保存至本地及数据库。<a href="https://download.csdn.net/download/fullbug/10468606" target="_blank" rel="noopener">下载</a></p><p>​<strong>github:</strong> <a href="https://github.com/xiejava1018/getbooks" target="_blank" rel="noopener">https://github.com/xiejava1018/getbooks</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习Python，相对java来说python简单易学、语法简单，工具丰富，开箱即用，适用面广做全栈开发那是极好的，对于小型应用的开发，虽然运行效率慢点，但开发效率极高。大大提高了咱们的生产力。为什么python能够在这几年火起来，自然有他的道理，当然也受益于这几年大
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>你有了一个目标，于是你有了一堆技能，而不是反过来！</title>
    <link href="https://xiejava.gitee.io/posts/e6daf5ca/"/>
    <id>https://xiejava.gitee.io/posts/e6daf5ca/</id>
    <published>2021-11-17T01:21:04.000Z</published>
    <updated>2021-11-17T01:47:50.973Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211116/%E7%9B%AE%E6%A0%87.png" alt="目标"></p><p><strong>你有了一个目标，于是你有了一堆技能。而不是反过来！</strong><br>这应该是这段时间我领悟最深刻的一句话，是从白帽汇-赵武的微信文章中看到的。<br>我的体会是，<strong>没有一个清晰的为之努力奋斗的目标而去学东西，很难获得效果</strong>。</p><p>老实说，我并不是个懒惰的人，知道要不断的去学习、看书，来努力提升自己，但是几年下来自己的个人成长确是非常的有限，原因就是目标不明确。尤其是随着年龄的增大，面对越来越大的压力，越来越焦虑。焦虑是因为面对残酷的社会竞争压力以及对自身能力的不自信。所以很多东西都想学，机器学习、网络安全、英语、写作等等。没有明确的目标和整体的规划，只知道要学，桌上摆了很多书，今天看几页这本书，明天翻几页那本书，看上去天天在看书，实际上一本书都没有看进去。看英语的时候在想应该多花点时间看看专业书，看专业书的时候在想英语也很重要，要不看会英语。实际就是有限的时间精力和无限的需要学习的知识之间的矛盾。还有一个突出的问题就是没有明确的目标就会没有成就感，尤其是专业领域，看了很多书，不能学以致用，看了就忘，感觉就是学了个寂寞。</p><p>学习，目标非常重要，没有明确目标的学习到头来都是浪费时间。学习效果好、状态好的往往是带着明确的目标去学的。记得我才参加工作的时候做网页开发那时候啥都不懂，我的目标就是想成为一名真正的程序员。那时候BBS和聊天室很火，就想自己能够写一个BBS和聊天室，于是自己学Java、 jsp、HTML、javascript、数据库等。那时候上外网还比较奢侈，自己写了一个聊天室放到公司内网，公司几十百把号人玩得不亦乐乎。大家玩聊天室的时候还不断的给我提建议提需求，我白天上班，晚上改我的聊天室代码。看着自己的成果被别人用心里挺开心的。那段时间感觉自己成长很快，学到了很多东西。很快成为了公司主力程序员。还有个例子就是有段时间想学英语，给自己定的目标就是看完全套的《书虫》，有了目标后每天坚持看几十页，花了几个月的时间把全套的149本书虫给看完了。自己感觉还是非常的好，英语阅读能力有了一定的提升。但是这个目标实现了以后，没有重新给自己制定新的目标，所以自己的英语水平一直没有达到自己理想的状态。应该规划好终极目标、长期目标、阶段性目标，通过实现一个个小目标最终达到自己理想的终极目标。</p><p>懂得了很多大道理依旧无法过好这一生，其实就是没有一个明确的人生目标，没有一个让自己为之奋斗的目标，目标感强的人往往都会比较成功。可以说项目管理也好，个人管理也好，归根到底都是目标管理。为了实现目标、投入时间、金钱、精力等各种已有的资源，用各种手段，思考各种方法来达到目标。</p><p><strong>定方向、定目标非常重要！</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211116/%E7%9B%AE%E6%A0%87.png&quot; alt=&quot;目标&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你有了一个目标，于是你有了一堆技能
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下配置Supervisor自启动的两种方法</title>
    <link href="https://xiejava.gitee.io/posts/4ba25d97/"/>
    <id>https://xiejava.gitee.io/posts/4ba25d97/</id>
    <published>2021-11-11T06:18:19.000Z</published>
    <updated>2021-11-11T06:43:48.184Z</updated>
    
    <content type="html"><![CDATA[<p>很多网友留言问如何配置Supervisor 自启动，现将如何在CentOS7下配置Supervisor自启动的两种方法整理如下：</p><h1 id="一、方法一"><a href="#一、方法一" class="headerlink" title="一、方法一"></a>一、方法一</h1><p><strong>直接将启动命令加入到/etc/rc.d/rc.local中（简单但不推荐）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>在现有的内容后面加入supervisor的启动命令<br>supervisord -c /etc/supervisord.conf<br><img src="https://img-blog.csdnimg.cn/b7074ff6ccf146de9015d83373ef7830.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="/etc/rc.d/rc.local"><br>注意：一定要执行 chmod +x /etc/rc.d/rc.local</p><blockquote><p>chmod +x /etc/rc.d/rc.local</p></blockquote><p>给文件加入可执行权限<br>根据官方的提示，该方式是不被建议的，强烈建议创建自己的systemd services或udev规则来启动自已的应用，也就是方法二。</p><h1 id="二、方法二"><a href="#二、方法二" class="headerlink" title="二、方法二"></a>二、方法二</h1><p><strong>通过创建systemd services来实现自启动 （推荐）</strong><br>进入到/usr/lib/systemd/system/目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd /usr/lib/systemd/system/</span></span><br></pre></td></tr></table></figure><p>找到supervisord及supervisorctl命令的路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># which supervisord</span></span><br><span class="line">/usr/local/bin/supervisord</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># which supervisorctl</span></span><br><span class="line">/usr/local/bin/supervisorctl</span><br></pre></td></tr></table></figure><h2 id="创建文件supervisord-service"><a href="#创建文件supervisord-service" class="headerlink" title="创建文件supervisord.service"></a>创建文件supervisord.service</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi supervisord.service</span><br></pre></td></tr></table></figure><p>复制以下代码。注意：supervisord及supervisorctl命令的路径根据实际情况进行修改</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#supervisord.service</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Supervisor daemon</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf</span><br><span class="line">ExecStop=/usr/local/bin/supervisorctl shutdown</span><br><span class="line">ExecReload=/usr/local/bin/supervisorctl reload</span><br><span class="line">KillMode=<span class="keyword">process</span></span><br><span class="line">Restart=on<span class="literal">-failure</span></span><br><span class="line">RestartSec=<span class="number">42</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure><h2 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># systemctl enable supervisord</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/supervisord.service to /usr/lib/systemd/system/supervisord.service</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl start supervisord</span></span><br></pre></td></tr></table></figure><h2 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl status supervisord</span></span><br><span class="line">● supervisord.service - Supervisor daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/supervisord.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu <span class="number">2021</span><span class="literal">-11</span><span class="literal">-11</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">36</span> CST; <span class="number">12</span>s ago</span><br><span class="line">  <span class="keyword">Process</span>: <span class="number">3822</span> ExecStart=/usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">3850</span> (supervisord)</span><br><span class="line">   CGroup: /system.slice/supervisord.service</span><br><span class="line">           ├─<span class="number">3850</span> /usr/local/bin/python3.<span class="number">8</span> /usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf</span><br><span class="line">           ├─<span class="number">3916</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br><span class="line">           ├─<span class="number">3918</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br><span class="line">           └─<span class="number">3919</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br></pre></td></tr></table></figure><h2 id="验证一下是否为开机启动"><a href="#验证一下是否为开机启动" class="headerlink" title="验证一下是否为开机启动"></a>验证一下是否为开机启动</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># systemctl is-enabled supervisord</span></span><br><span class="line">enabled</span><br></pre></td></tr></table></figure><p>reboot重启服务器后，可以发现supervisor随服务器启动后自动启动了。</p><p><strong>至此，本文介绍了CentOS7下配置Supervisor自启动的两种方法，推荐使用第二中方式。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多网友留言问如何配置Supervisor 自启动，现将如何在CentOS7下配置Supervisor自启动的两种方法整理如下：&lt;/p&gt;
&lt;h1 id=&quot;一、方法一&quot;&gt;&lt;a href=&quot;#一、方法一&quot; class=&quot;headerlink&quot; title=&quot;一、方法一&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维" scheme="https://xiejava.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python通过GeoIP获取IP信息（国家、城市、经纬度等）</title>
    <link href="https://xiejava.gitee.io/posts/2c5697c0/"/>
    <id>https://xiejava.gitee.io/posts/2c5697c0/</id>
    <published>2021-11-10T02:24:01.000Z</published>
    <updated>2021-11-10T02:30:26.276Z</updated>
    
    <content type="html"><![CDATA[<p>IP地址信息是非常重要的情报信息，通过IP可以定位到该IP所在的国家、城市、经纬度等。<br>获取IP信息的方式有很多，很多服务商都提供了相应的地址库或API接口服务。<br>如国内的ipip.net，国外的ip-api.com、maxmind.com等。<br>很多公司都是使用Maxmind网站的IP信息库，里面包含着IP的详细信息，有付费的也有免费的，收费与免费的区别就是精准度和覆盖率。</p><p>本文介绍下载及定时更新Maxmind的离线库用python通过GeoIP来获取IP信息 </p><h1 id="一、下载GeoLite2离线地址库"><a href="#一、下载GeoLite2离线地址库" class="headerlink" title="一、下载GeoLite2离线地址库"></a>一、下载GeoLite2离线地址库</h1><h2 id="1、注册及申请License-Key"><a href="#1、注册及申请License-Key" class="headerlink" title="1、注册及申请License Key"></a>1、注册及申请License Key</h2><p>下载地址库之前先要在Maxmind网站注册同意相应的协议并登陆。</p><h3 id="1）注册"><a href="#1）注册" class="headerlink" title="1）注册"></a>1）注册</h3><p>访问 <a href="https://dev.maxmind.com/geoip/geolite2-free-geolocation-data" target="_blank" rel="noopener">https://dev.maxmind.com/geoip/geolite2-free-geolocation-data</a><br><img src="https://img-blog.csdnimg.cn/e4fcf9f4aa7a49888805da7ac7be650b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmiand注册导航"><br>点击”Sign Up for GeoLite2” 根据输入框进行注册<br><img src="https://img-blog.csdnimg.cn/1a9dbfe1d10747caaf22179dac0fb077.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmiand注册表单"><br>注意邮箱一定要正确，注册后会发邮件进行确认及修改密码。<br>根据注册的用户名和修改后的密码登陆就可以直接下载离线包了。<br><img src="https://img-blog.csdnimg.cn/358c4741c75544e1a3d3761fdd337274.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmind账号信息"><br>点击”Download Databases”进入到下载页面，可以看到提供了CSV及mmdb两种格式的离线库包，最近的更新时间为2021年11月02日。<br><img src="https://img-blog.csdnimg.cn/9196090e03384dc99cfd3d6b5c37627d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="MaxmiandGeoLite2地址库下载"><br>由于IP地址信息是经常有变化的，Maxmind提供了geoipupdate工具来更新离线地址包。该工具使用需要申请账号和License Key</p><h3 id="2）申请License-Key"><a href="#2）申请License-Key" class="headerlink" title="2）申请License Key"></a>2）申请License Key</h3><p>还是通过刚注册的引导页面，点击“Generate a License Key”<br><img src="https://img-blog.csdnimg.cn/1386d73167524690bca90a8118bff1f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmind生成License导航页"><br>进如到页面后，点击“Generate new license key”<br><img src="https://img-blog.csdnimg.cn/aa44150be07a4bdcbbf0d7fe48c1d0ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Generate new license key"><br><img src="https://img-blog.csdnimg.cn/a1865478abf74092b903b3c060f8b3ac.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="License Key生成确定页"><br>点击确定以后就会生成账号及License key<br><img src="https://img-blog.csdnimg.cn/4eef17f7d1224c279c78b5730d1e2e43.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="License key生成"></p><h2 id="2、下载并配置geoipupdate"><a href="#2、下载并配置geoipupdate" class="headerlink" title="2、下载并配置geoipupdate"></a>2、下载并配置geoipupdate</h2><p><a href="https://github.com/maxmind/geoipupdate" target="_blank" rel="noopener">https://github.com/maxmind/geoipupdate</a><br>这里有详细的安安装及配置说明</p><p>发行版本下载地址 <a href="https://github.com/maxmind/geoipupdate/releases" target="_blank" rel="noopener">https://github.com/maxmind/geoipupdate/releases</a><br><img src="https://img-blog.csdnimg.cn/44213d6d1dc74e1b871e3327958fe2f9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>可以看到提供了各种平台的版本的下载链接，这里我们下载安装的是linux版本，点击下载“geoipupdate_4.8.0_linux_amd64.tar.gz”<br>在home目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/maxmind/geoipupdate/releases/download/v4.<span class="number">8.0</span>/geoipupdate_4.<span class="number">8.0</span>_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>下载至home目录</p><p>tar -zxvf geoipupdate_4.8.0_linux_amd64.tar.gz 进行解压<br>cd geoipupdate_4.8.0_linux_amd64  目录执行ls -alh查看目录内容，发现有两个关键文件，一个是getipupdate命令执行文件，一个是GeoIP.conf配置文件<br><img src="https://img-blog.csdnimg.cn/e20bf57c217b483f938271233b52c40c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="geoipupdate目录"></p><p>将执行命令拷贝到命令文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp geoipupdate /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><p>geoipupdate命令读配置文件默认为/usr/local/etc/GeoIP.conf将配置文件拷贝到/usr/local/etc/下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp GeoIP.conf /usr/<span class="built_in">local</span>/etc/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/etc/GeoIP.conf</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa5ec95685da4abd9cb3edfa24ea4375.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改GeoIP.conf"><br>如上图修改离线库文件目录及账号、LicenseKey，AccountID和LicenseKey就是开始在Maxmind网站上申请的。</p><h2 id="3、运行geoipupdate命令并加入定时任务"><a href="#3、运行geoipupdate命令并加入定时任务" class="headerlink" title="3、运行geoipupdate命令并加入定时任务"></a>3、运行geoipupdate命令并加入定时任务</h2><p>执行geoipupdate命令，在目录下面产生了GeoLite2-City.mmdb、GeoLite2-Country.mmdb两个离线库文件。<br><img src="https://img-blog.csdnimg.cn/9d1249f69cf84d9c90b690ca3efaa35c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="GeoLite2离线库文件"><br>创建Linux定时任务，每周自动更新一下离线库文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab <span class="literal">-e</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> * * <span class="number">0</span> /usr/local/bin/geoipupdate</span><br></pre></td></tr></table></figure><h1 id="二、通过Python调用GeoIP获取IP信息"><a href="#二、通过Python调用GeoIP获取IP信息" class="headerlink" title="二、通过Python调用GeoIP获取IP信息"></a>二、通过Python调用GeoIP获取IP信息</h1><p>默认已经安装好了Flask环境，并激活了python虚拟环境。激活python虚拟环境安装Flask教程见<a href="http://xiejava.ishareread.com/posts/7f405b25/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/7f405b25/</a></p><h2 id="1、安装geoip2"><a href="#1、安装geoip2" class="headerlink" title="1、安装geoip2"></a>1、安装geoip2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install geoip2</span><br></pre></td></tr></table></figure><h2 id="2、编写hello-py调用geoip2"><a href="#2、编写hello-py调用geoip2" class="headerlink" title="2、编写hello.py调用geoip2"></a>2、编写hello.py调用geoip2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hello.py</span><br></pre></td></tr></table></figure><p>复制以下代码到hello.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> geoip2.database</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">reader=geoip2.database.Reader(<span class="string">'/home/geoipupdate_4.8.0_linux_amd64/GeoLite2-City.mmdb'</span>)</span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/getip/&lt;ip&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getip</span><span class="params">(ip)</span>:</span></span><br><span class="line">    ipinfo=reader.city(ip)</span><br><span class="line">    ipinfo_json=&#123;<span class="string">'country'</span>:ipinfo.country.name,<span class="string">'city'</span>:ipinfo.city.name,<span class="string">'location'</span>:[ipinfo.location.longitude,ipinfo.location.latitude]&#125;</span><br><span class="line">    <span class="keyword">return</span> ipinfo_json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="3、运行hello-py"><a href="#3、运行hello-py" class="headerlink" title="3、运行hello.py"></a>3、运行hello.py</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># python hello.py</span></span><br><span class="line"> * Serving Flask app <span class="string">'hello'</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on all addresses.</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line"> * Running on http://<span class="number">192.168</span>.<span class="number">1.18</span>:<span class="number">8080</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>注意：如果linux开启了防火墙请关闭防火墙，或放开192.168.1.18</p><h2 id="4、验证"><a href="#4、验证" class="headerlink" title="4、验证"></a>4、验证</h2><p>通过浏览器访问 <a href="http://192.168.1.18:8080/getip/128.101.101.101" target="_blank" rel="noopener">http://192.168.1.18:8080/getip/128.101.101.101</a><br><img src="https://img-blog.csdnimg.cn/4cf63aac6b78465d836a6df9ccb5b4a9.png#pic_center" alt="验证IP信息"><br>可以看到返回IP的国家、城市、经纬度等信息。</p><p><strong>至此，本文介绍了如何注册并下载GeoIP离线数据包，并通过官方提供的geoipupdate进行定期更新数据。还介绍了如何通过Python调用GeoIP获取IP信息。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IP地址信息是非常重要的情报信息，通过IP可以定位到该IP所在的国家、城市、经纬度等。&lt;br&gt;获取IP信息的方式有很多，很多服务商都提供了相应的地址库或API接口服务。&lt;br&gt;如国内的ipip.net，国外的ip-api.com、maxmind.com等。&lt;br&gt;很多公司都
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境搭建</title>
    <link href="https://xiejava.gitee.io/posts/7f405b25/"/>
    <id>https://xiejava.gitee.io/posts/7f405b25/</id>
    <published>2021-11-05T15:38:53.000Z</published>
    <updated>2021-11-05T15:50:13.719Z</updated>
    
    <content type="html"><![CDATA[<p>在生产环境中通常用uwsgi作为Flask的web服务网关，通过nginx反向代理进行负载均衡，通过supervior进行服务进行的管理。这一套搭下来还是有一些坑要踩，本文通过一个简单的Flask web应用记录了CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境搭建的全过程，以及一些注意事项，以免遗忘。</p><h1 id="一、Python3环境安装"><a href="#一、Python3环境安装" class="headerlink" title="一、Python3环境安装"></a>一、Python3环境安装</h1><p>CentOS7下Python3环境安装参考 <a href="http://xiejava.ishareread.com/posts/57cef505/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/57cef505/</a></p><p>查看python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># python -V</span></span><br><span class="line">Python 3.8.12</span><br></pre></td></tr></table></figure><h1 id="二、安装Flask"><a href="#二、安装Flask" class="headerlink" title="二、安装Flask"></a>二、安装Flask</h1><h2 id="1、创建Python虚拟环境"><a href="#1、创建Python虚拟环境" class="headerlink" title="1、创建Python虚拟环境"></a>1、创建Python虚拟环境</h2><p>在home目录下创建flask_web目录（目录根据具体实际环境创建，本教程是/home/flask_web）<br>通过venv创建虚拟环境<br>[root@localhost flask_web]# python -m venv /home/flask_web<br>创建成功后可以看到在目录下自动建了一些文件夹，包括python命令及依赖库等，激活以后是个独立的python虚拟运行环境。<br><img src="https://img-blog.csdnimg.cn/8ad5311fc3254fefa6739c76f067b8ad.png#pic_center" alt="python虚拟运行环境"></p><p>在目录下运行source bin/activate 激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost flask_web]<span class="comment"># source bin/activate</span></span><br><span class="line">(flask_web) [root@localhost flask_web]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="2、安装Flask"><a href="#2、安装Flask" class="headerlink" title="2、安装Flask"></a>2、安装Flask</h2><p>通过pip install flask安装flask</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># pip install flask</span></span><br></pre></td></tr></table></figure><p>安装的时候有可能报ModuleNotFoundError: No module named ‘_ctypes’的错误，原因是缺少libffi-devel包，具体可参考 <a href="https://blog.csdn.net/qq_36416904/article/details/79316972" target="_blank" rel="noopener">https://blog.csdn.net/qq_36416904/article/details/79316972</a><br><img src="https://img-blog.csdnimg.cn/3d4cc5ba51234b399e59ffb1e66aa0b3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="安装Flask报错"></p><p>运行yum install libffi-devel -y 并且要重新编译执行安装python<br>解决包依赖的问题<br>(flask_web) [root@localhost flask_web]# yum install libffi-devel -y<br>进入到python源码包目录 执行使用make&amp;make install 命令重新编译并安装python（这里比较坑）<br>然后再pip install flask 进行安装<br>安装完成后可以尝试运行flask run，提示没有Flask应用程序，说明flask已经安装成功并且可以运行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># flask run</span></span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line">Usage: flask run [OPTIONS]</span><br><span class="line">Try <span class="string">'flask run --help'</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">Error: Could not locate a Flask application. You did not provide the <span class="string">"FLASK_APP"</span> environment variable, and a <span class="string">"wsgi.py"</span> or <span class="string">"app.py"</span> module was not found <span class="keyword">in</span> the current directory.</span><br></pre></td></tr></table></figure><p>3、建立测试应用<br>vi hello.py创建一个hello.py的文件，copy下面的内容到文件中:wq保存退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>通过python hello.py运行测试程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># python hello.py</span></span><br><span class="line"> * Serving Flask app <span class="string">'hello'</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>新开一个shell窗口执行curl <a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a> 可以看到有Hello World返回说明应用在flask框架下运行没有问题。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># curl http://127.0.0.1:5000/</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="三、安装及配置uwsgi"><a href="#三、安装及配置uwsgi" class="headerlink" title="三、安装及配置uwsgi"></a>三、安装及配置uwsgi</h1><p>uWSGI是一个Web Server，并且独占uwsgi协议，但是同时支持WSGI协议、HTTP协议等，它的功能是把HTTP协议转化成语言支持的网络协议供python使用。有点类似于Java的web服务容器中间件tomcat</p><h2 id="1、安装uwsgi"><a href="#1、安装uwsgi" class="headerlink" title="1、安装uwsgi"></a>1、安装uwsgi</h2><p>通过pip命令安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># pip install uwsgi</span></span><br></pre></td></tr></table></figure><p>如果顺利的话会显示Successfully installed uwsgi-2.0.20，表示安装成功了。</p><h2 id="2、配置uwsgi"><a href="#2、配置uwsgi" class="headerlink" title="2、配置uwsgi"></a>2、配置uwsgi</h2><p>新建一个uwsgi.ini配置文件，并将配置信息复制到配置文件<br>vi uwsgi.ini </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment">#http=127.0.0.1:3366  #如果是http,通过proxy_pass http链接</span></span><br><span class="line">socket=127.0.0.1:3366 <span class="comment">#如果是socket，通过nginx配置uwsgi_pass socket链接</span></span><br><span class="line">wsgi-file=/home/flask_web/hello.py</span><br><span class="line">callable=app</span><br><span class="line">touch-reload=/home/flask_web/</span><br><span class="line"><span class="comment">#最大请求数，最多请求5000次就重启进程，以防止内存泄漏</span></span><br><span class="line">max-requests=5000</span><br><span class="line"><span class="comment">#请求超时时间，超过60秒关闭请求</span></span><br><span class="line">harakiri=60</span><br><span class="line"><span class="comment">#进程的数量</span></span><br><span class="line">processes=1</span><br><span class="line"><span class="comment">#线程数</span></span><br><span class="line">threads = 2</span><br><span class="line"><span class="comment">#记录pid的文件</span></span><br><span class="line">pidfile=/home/flask_web/uwsgi.pid</span><br><span class="line">buffer-size = 32768</span><br><span class="line"><span class="comment">#日志最大50M</span></span><br><span class="line"><span class="built_in">log</span>-maxsize=50000000</span><br><span class="line"><span class="comment">#配置虚拟环境路径，如果是在虚拟环境下启动，这个一定要配，不配会有些包找不到，应用会报错。可以在uwsgi.log文件中看报错信息</span></span><br><span class="line">virtualenv =/home/flask_web</span><br><span class="line"><span class="comment">#uwsgi日志文件，如果是通过supervisor托管，daemonize配置需要屏蔽</span></span><br><span class="line"><span class="comment">#daemonize=/home/flask_web/uwsgi.log</span></span><br><span class="line"><span class="comment">#项目更新后，自动加载</span></span><br><span class="line">python-autoreload=1</span><br><span class="line"><span class="comment">#状态检测地址</span></span><br><span class="line">stats = 127.0.0.1:9191</span><br></pre></td></tr></table></figure><h2 id="3、运行uwsgi"><a href="#3、运行uwsgi" class="headerlink" title="3、运行uwsgi"></a>3、运行uwsgi</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># uwsgi --ini /home/flask_web/uwsgi.ini</span></span><br></pre></td></tr></table></figure><p>启动以后通过访问curl <a href="http://127.0.0.1:3366" target="_blank" rel="noopener">http://127.0.0.1:3366</a> 有Hello World!的返回信息表示uwsgi已经成功启动，并且应用程序正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost flask_web]<span class="comment"># curl http://127.0.0.1:3366</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="四、配置Nginx反向代理"><a href="#四、配置Nginx反向代理" class="headerlink" title="四、配置Nginx反向代理"></a>四、配置Nginx反向代理</h1><p>ps -ef|grep nginx 找到nginx的配置文件<br><img src="https://img-blog.csdnimg.cn/70323a6952c9414daad6f80370ea9f94.png#pic_center" alt="nginx配置文件"><br>如果uwsgi配置的是socket连接<br>[uwsgi]<br>socket=127.0.0.1:3366 #如果是socket，通过nginx配置uwsgi_pass socket链接<br>nginx的server配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 808;</span><br><span class="line">     server_name localhost;</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">          include uwsgi_params;</span><br><span class="line">          uwsgi_pass 127.0.0.1:3366;</span><br><span class="line">      &#125;</span><br><span class="line">      access_log /home/flask_web/access.log;</span><br><span class="line">      error_log /home/flask_web/error.log;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果uwsgi配置的是http<br>[uwsgi]<br>http=127.0.0.1:3366  #如果是http,通过proxy_pass http链接<br>nginx的server配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen 808;</span><br><span class="line">      server_name localhost;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:3366;</span><br><span class="line">       &#125;</span><br><span class="line">       access_log /home/flask_web/access.log;</span><br><span class="line">       error_log /home/flask_web/error.log;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>重新加载nginx配置后，通过浏览器访问可以正常显示访问结果</p><h1 id="五、通过Supervisor进行进程托管"><a href="#五、通过Supervisor进行进程托管" class="headerlink" title="五、通过Supervisor进行进程托管"></a>五、通过Supervisor进行进程托管</h1><p>生产环境中，可以通过supervisor来进行uwsgi和nginx进程的托管，界面化的方式管理uwsgi和nginx，包括进程的监控、启停等。</p><h2 id="1、安装supervisor"><a href="#1、安装supervisor" class="headerlink" title="1、安装supervisor"></a>1、安装supervisor</h2><p>通过pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>离线安装请参考：<a href="http://xiejava.ishareread.com/posts/d670c9b8/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/d670c9b8/</a></p><h2 id="2、配置supervisor"><a href="#2、配置supervisor" class="headerlink" title="2、配置supervisor"></a>2、配置supervisor</h2><p>找到supervisord的安装目录在/usr/local/bin下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># which supervisord</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/supervisord</span><br></pre></td></tr></table></figure><p>cd到/usr/local/bin目录下<br>通过echo_supervisord_conf &gt; supervisord.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># echo_supervisord_conf &gt; supervisord.conf</span></span><br></pre></td></tr></table></figure><p>可以看到生成了一个supervisord.conf的配置文件。<br>将生成的supervisord.conf配置文件放到/etc/目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv supervisord.conf /etc/</span><br></pre></td></tr></table></figure><p>修改supervisord.conf的配置文件，主要是将子配置文件路径开启并指定配置文件路径，按照惯例将配置文件放到/etc目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisord.d/*.ini</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/049f24f7b6c54c0a892b5075f3921edc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="supervisord.conf配置文件"></p><p>我们在/etc目录下建个supervisord.d目录用来保存supervisor托管进程的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/</span></span><br><span class="line">[root@localhost etc]<span class="comment"># mkdir supervisord.d</span></span><br></pre></td></tr></table></figure><p>建立并配置子配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># cd supervisord.d/</span></span><br><span class="line">[root@localhost supervisord.d]<span class="comment"># vi uwsgi.ini</span></span><br></pre></td></tr></table></figure><p>复制以下内容至uwsgi.ini文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[program:uwsgi]</span><br><span class="line"><span class="built_in">command</span> =uwsgi --ini /home/flask_web/uwsgi.ini</span><br><span class="line">directory=/home/flask_web</span><br><span class="line">startsecs=10</span><br><span class="line">startretries=5</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/home/flask_web/uwsgi_sup_log.log</span><br><span class="line">stdout_logfile_maxbytes=10MB</span><br><span class="line">user=root</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3、启动supervisor"><a href="#3、启动supervisor" class="headerlink" title="3、启动supervisor"></a>3、启动supervisor</h2><p>在启动supervisor拉起uwsgi前两个注意事项</p><p>1) uwsgi的配置文件中daemonize一定要屏蔽掉，否则守护进程一直会重启，导致端口每次都被占用，Supervisor托管不了。<br><img src="https://img-blog.csdnimg.cn/8eef8e8552e047e79a9c3443074cd2cb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="uwsgi.ini"><br>2) 在启动之前先将已经启动的uwsgi进程停掉，否则通过supervisor拉起uwsgi进程时端口冲突<br><img src="https://img-blog.csdnimg.cn/60fda7586d9a430f8cc5febda83cdad9.png#pic_center" alt="kill uwsgi进程"></p><p>启动supervisord进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure><p>修改配置文件后重新加载可以通过 supervisorctl reload 命令重新加载<br>查看supervisor托管状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost supervisord.d]<span class="comment"># supervisorctl status</span></span><br><span class="line">uwsgi                            STARTING</span><br></pre></td></tr></table></figure><p>可以看到uwsgi被supervisor托管并已经启动。如果需要通过supervisor的web控制界面进行进程的管理。需要修改/etc/supervisord.conf的配置文件将访问的IP地址限制放开，设置用户名、口令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=*:9001        ; ip_address:port specifier, *:port <span class="keyword">for</span> all iface</span><br><span class="line">username=user              ; default is no username (open server)</span><br><span class="line">password=user@123               ; default is no password (open server)</span><br></pre></td></tr></table></figure><p>重新启动supervisor，重启时会报需要验证的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost supervisord.d]<span class="comment"># supervisorctl shutdown</span></span><br><span class="line">Server requires authentication</span><br><span class="line">error: &lt;class <span class="string">'xmlrpc.client.ProtocolError'</span>&gt;, &lt;ProtocolError <span class="keyword">for</span> 127.0.0.1/RPC2: 401 Unauthorized&gt;: file: /usr/<span class="built_in">local</span>/lib/python3.8/site-packages/supervisor/xmlrpc.py line: 542</span><br></pre></td></tr></table></figure><p>可以直接kill -9杀掉supervisor的进程再启动，也可以通过supervisorctl 输入用户名、口令通过shutdown然后再重启。<br>启动命令：supervisord -c /etc/supervisord.conf</p><p>这时就可以通过supervisor的web控制界面进行进程的管理了。<br><img src="https://img-blog.csdnimg.cn/fdda8d39fb0343d0b7a7a570c2b1256f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Supervisor"><br><strong>至此，CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境全部搭建好了。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在生产环境中通常用uwsgi作为Flask的web服务网关，通过nginx反向代理进行负载均衡，通过supervior进行服务进行的管理。这一套搭下来还是有一些坑要踩，本文通过一个简单的Flask web应用记录了CentOS7下python3+Flask+uWSGI+Ng
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下安装python3.8</title>
    <link href="https://xiejava.gitee.io/posts/57cef505/"/>
    <id>https://xiejava.gitee.io/posts/57cef505/</id>
    <published>2021-11-04T09:21:57.000Z</published>
    <updated>2021-11-04T10:24:15.092Z</updated>
    
    <content type="html"><![CDATA[<p>环境的搭建是进行开发的第一步，python因为存在python2和python3两个版本，让在建立python环境时造成不便，并且由于在Linux环境下不像Window环境安装那么友好，存在一些小坑。本教程记录了CentOS7下安装python3.8的过程和注意事项。</p><h1 id="一、查看系统版本"><a href="#一、查看系统版本" class="headerlink" title="一、查看系统版本"></a>一、查看系统版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux localhost.localdomain 3.10.0-327.el7.x86_64 <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>查看python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># python -V</span></span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure><p>系统默认安装了Python 2.7.5</p><h1 id="二、安装依赖"><a href="#二、安装依赖" class="headerlink" title="二、安装依赖"></a>二、安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure><p>如果有提示一路选择Y就可以</p><h1 id="三、下载python源码包"><a href="#三、下载python源码包" class="headerlink" title="三、下载python源码包"></a>三、下载python源码包</h1><p>python官网<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a> 目前python最新版本是python3.10<br><img src="https://img-blog.csdnimg.cn/5967484e1d49472ab817580815275fef.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="下载Python源码包"></p><p>下载稳定版本3.8版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tgz</span><br></pre></td></tr></table></figure><h1 id="四、解压安装python源码包"><a href="#四、解压安装python源码包" class="headerlink" title="四、解压安装python源码包"></a>四、解压安装python源码包</h1><h2 id="1、解压"><a href="#1、解压" class="headerlink" title="1、解压"></a>1、解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.8.12.tgz</span><br></pre></td></tr></table></figure><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>进入解压后的目录进行编译和安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.8.12/</span><br><span class="line">[root@localhost Python-3.8.12]<span class="comment">#</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ./configure</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># make&amp;&amp;make install</span></span><br></pre></td></tr></table></figure><p>执行完后显示安装成功<br><img src="https://img-blog.csdnimg.cn/9e8bcddbd7644d0b9bc702a13b3984e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pyhont安装成功"></p><h2 id="3、建立命令软链接"><a href="#3、建立命令软链接" class="headerlink" title="3、建立命令软链接"></a>3、建立命令软链接</h2><p>虽然python3.8.12安装成功了，但默认输入python还是显示是2.7版本的。如果要用python3.8.12需要输入python3即可，有时候不太方便。可以通过修改软链接的方式将默认的python指向python3.8.12。<br>先看一下默认的python及新安装的python3都安装在哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which python</span></span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which python3</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/python3</span><br></pre></td></tr></table></figure><p>可以看到默认的python路径为/usr/bin/python，python3的路径为/usr/local/bin/python3<br>将python3的软链接加到python上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># mv /usr/bin/python /usr/bin/python.bak</span></span><br><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ln -s /usr/local/bin/python3 /usr/bin/python</span></span><br></pre></td></tr></table></figure><p>通过python -V命令查看python版号，这时python的版本已经是3.8.12了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># python -V</span></span><br><span class="line">Python 3.8.12</span><br></pre></td></tr></table></figure><p>pip命令也可以修改，python3.8.12默认的pip是pip3，CentOS7的python2.7默认没有安装pip.<br>输入pip命令的时候提示命令没有找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># pip</span></span><br><span class="line">bash: pip: <span class="built_in">command</span> not found...</span><br></pre></td></tr></table></figure><p>这时也可以通过建立软链接的方式将pip命令链接到pip3上。首先看pip3命令在哪?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which pip3</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip3</span><br></pre></td></tr></table></figure><p>然后建立pip到pip3的软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ln -s /usr/local/bin/pip3 /usr/bin/pip</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># pip -V</span></span><br><span class="line">pip 21.1.1 from /usr/<span class="built_in">local</span>/lib/python3.8/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure><h1 id="五、配置yum"><a href="#五、配置yum" class="headerlink" title="五、配置yum"></a>五、配置yum</h1><p>安装python3改完软链接以后发现yum命令报错了，yum是依赖python2.7的，你把python改成了3.8了，所以报错了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># yum</span></span><br><span class="line">  File <span class="string">"/usr/bin/yum"</span>, line 30</span><br><span class="line">    except KeyboardInterrupt, e:</span><br><span class="line">                            ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>可以修改yum里对python2的依赖即可。虽然安装了python3但是系统里python2依旧还在系统里，可以通过python2来指定用python2.7的命令，首先来看下python2的命令在哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># which python2</span></span><br><span class="line">/usr/bin/python2</span><br></pre></td></tr></table></figure><p>可以cd到/usr/bin目录下 通过ls -alh|grep python查看python命令的详细情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># ls -alh|grep python</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37df1186dcbf4820b7de6676120aa5ee.png#pic_center" alt="python命令软链接"><br>可以看到python软连接是执行的python3命令，python2是执行的python2.7的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure><p>修改对python的依赖，修改成python2或python2.7都可以。<br><img src="https://img-blog.csdnimg.cn/04054660445f497b886cb78119616722.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改依赖"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6777b0e3d68b4842a700a05af5eb6411.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改依赖"></p><p>修改完这两个文件后，再敲yum命令就不会报错了。</p><p><strong>至此CentOS7环境下python3.8.12已经成功安装！</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境的搭建是进行开发的第一步，python因为存在python2和python3两个版本，让在建立python环境时造成不便，并且由于在Linux环境下不像Window环境安装那么友好，存在一些小坑。本教程记录了CentOS7下安装python3.8的过程和注意事项。&lt;/p
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>认识SOAR-安全事件编排自动化响应</title>
    <link href="https://xiejava.gitee.io/posts/63a3c769/"/>
    <id>https://xiejava.gitee.io/posts/63a3c769/</id>
    <published>2021-11-01T13:54:04.000Z</published>
    <updated>2021-11-01T14:01:41.675Z</updated>
    
    <content type="html"><![CDATA[<p>SOAR是最近几年安全市场上最火热的词汇之一。SOAR究竟是什么，发展历程是什么，能够起什么作用，带着这些问题我们来认识一下SOAR。</p><h1 id="一、SOAR是什么"><a href="#一、SOAR是什么" class="headerlink" title="一、SOAR是什么"></a>一、SOAR是什么</h1><p>SOAR 一词来自分析机构 Gartner，SOAR-Security Orchestration, Automation and Response 安全编排和自动化响应。在Gartner的报告里，SOAR平台的核心组件为，编排与自动化、工作流引擎、案例与工单管理、威胁情报管理。而SOAR体系则是三个概念的交叉重叠：<strong>SOAR=SOA+SIRP+TIP</strong><br>1）精密编排的联动安全解决方案(SOA)；<br>2）事件应急响应平台(SIRP)；<br>3）威胁情报平台(TIP)。<br><img src="https://img-blog.csdnimg.cn/f1aefcc3e390408abb7effccbe41f083.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR"></p><h1 id="二、SOAR的发展历程"><a href="#二、SOAR的发展历程" class="headerlink" title="二、SOAR的发展历程"></a>二、SOAR的发展历程</h1><p>2015年，可以定义为SOAR的1.0时代。Gartner将SOAR(当时被认为是“安全运维分析和报告”)描述成为安全运维团队提供机器可读的安全数据报告和分析管理功能的产品。2017年，SOAR进入2.0时代。Gartner提出了“安全编排、自动化及响应”(SOAR)这个术语，用以描述脱胎于事件响应、安全自动化、场景管理和其他安全工具的一系列新兴平台。Gartner观察到三种以前截然不同的技术：安全编排和自动化(SOA)、安全事件响应平台(SIRPs)和威胁情报平台(TIPs)，正在逐步融合到一起。<br>根据Gartner2019年最新定义，SOAR是指能使企业组织从SIEM等监控系统中收集报警信息，或通过与其它技术的集成和自动化协调，提供包括安全事件响应和威胁情报等功能。SOAR技术市场最终目标是将安全编排和自动化(SOA)、安全事件响应(SIR)和威胁情报平台(TIP)功能融合到单个解决方案中。<br><img src="https://img-blog.csdnimg.cn/84eb9177ec554c0d8f5f74163cda15b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR的演进"></p><p>根据Gartner预测，到2022年，有30%大型企业组织（安全团队超过5人）将在安全和运维的工作中使用SOAR，这一比例远超当下5%。当下SOAR技术的早期拥护者是那些已经拥有成熟安全运维中心，并且能够理解SOAR带来好处的那些成熟的安全组织。</p><h1 id="三、SOAR主要解决什么问题"><a href="#三、SOAR主要解决什么问题" class="headerlink" title="三、SOAR主要解决什么问题"></a>三、SOAR主要解决什么问题</h1><p>随着网络安全攻防对抗的日趋激烈，网络安全单纯指望防范和阻止的策略已经失效，必须更加注重检测与响应。企业和组织要在网络已经遭受攻击的假定前提下构建集阻止、检测、响应和预防于一体的全新安全防护体系。在国际上，检测和响应类产品受到了极大的关注。放眼国内，更多的注意力集中到了新型检测产品，尤其是未知威胁检测领域。借助这些产品和技术，用户获得了更低的 MTTD（平均检测时间），能够更快更准确地检测出攻击和入侵。但是，这些产品和技术大都没有帮助用户降低 MTTR（平均响应时间）。事实上，对于用户而言，更快地检测出问题仅仅是第一步，如何快速地对问题进行响应更加重要。而在提升安全响应效率的时候，不能仅仅从单点（譬如单纯从端点或者网络）去考虑，还需要从全网整体安全运维的角度去考虑，要将分散的检测与响应机制整合起来。而这，正是 SOAR 要解决的问题。<br>Gartner指出，SOAR可供公司企业收集不同来源的安全威胁数据和警报，运用人机结合的方法进行事件分析与分类，根据标准流程辅助定义、排序和驱动标准化事件响应行为。SOAR主要为安全团队提供定制化的流程和控制，弥合并加速有效网络威胁的调查与缓解。安全运营团队的大量日常事务性工作也可以借助SOAR加以自动化。而且，案例战术手册还可以帮助分析师在单一平台上响应和缓解威胁，节约事件响应的每一分每一秒宝贵时间。<br>Gartner 用 OODA 模型，来描绘一个典型的安全运营流程。OODA 即 Observe(观察)、Orient(定位)、Decide(决策)、Act(行动)。</p><ul><li>观察：观察事件并确定发生了什么，即通过各种检测、分析工具，比如 SIEM 类工具，找到威胁线索，如告警。</li><li>定位：确定观察的方向，并添加上下文来确定观察的含义，即对产生的告警的内容做调查、丰富化。比如查找外网域名的威胁情报，查找此 IP 的历史行为协助研判等等。</li><li>决策：根据业务的风险容忍度和能力决定适当的响应行动，即判定是否需要对此告警采取行动，比如是否需要封禁，是否影响业务，是否需要进一步观察。</li><li>行动：根据决定采取行动，并应用到观察过程中，然后重复，即执行确定的安全策略，并验证。每一步都对下一步提供了指导，周而复始，构成了一个良性促进的进化循环，不断优化企业的安全运营流程以应对不断变化的安全威胁。<br><img src="https://img-blog.csdnimg.cn/b37a4e16ee454bbe95aaf53e5235c9bd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="OODA 模型"></li></ul><p>OODA 环看起来逻辑清晰，易于操作。但事实上， OODA 环里的丰富化、调查取证、验证、执行安全策略变更等等，都是耗时耗力的工作。加上安全设备一直以来的误报问题产生的噪音，以及安全人员工作负荷重，资深从业人员短缺等原因，难以真正有效的推进 OODA 循环。更不用提在 HW 时段高强度的工作压力下，如何能够有条不紊的保持一贯的处置流程来处理每一个安全线索。SOAR 正是在这个背景下被提出，并被寄予厚望。SOAR 的核心，就是将安全流程或预案，即 OODA 循环的每一个实例，比如蠕虫爆发处理流程、挖矿病毒告警处理流程、疑似钓鱼邮件处理流程等等，数字化管理起来形成 Playbook。用自动化完成其中所有可能自动化的动作，无法自动的仍然交由人来处理，通过可视化编排工具将人、技术和流程有机的结合起来，形成标准统一的、可重复的、更高效的安全运营流程。</p><h1 id="四、SOAR的核心功能"><a href="#四、SOAR的核心功能" class="headerlink" title="四、SOAR的核心功能"></a>四、SOAR的核心功能</h1><p>从SOAR安全编排自动化响应的字面定义来看SOAR应该具备三大核心能力，编排、自动化、响应</p><h2 id="编排"><a href="#编排" class="headerlink" title="编排"></a>编排</h2><p>SOAR中的关键词是编排，这是在使用自动化和响应之前必须构建的关键组件。SOAR的编排体现的是一种协调和决策的能力，针对复杂性的安全事件，通过编排将分析过程中各种复杂性分析流程和处理平台进行组合。分析涉及多种数据或平台，如SIEM分析平台、漏洞管理平台、情报数据、资产数据等。处置响应的编排也涉及到很多平台或设备，如EDR管理平台、运维管理平台、工单管理平台、WAF设备、防火墙等。仅仅以技术为中心的安全保障已不再能满足现状，将人员和流程的编排才能保证安全流程真正高效的运行。SOAR的终极目标就是实现技术、流程、人员的无缝编排。</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>SOAR的自动化体现在三个方面，面对需要处理的安全事件能够根据策略自动选择编排的剧本、自动执行剧本的操作流程、根据决策结果自动联动设备进行防护阻断等行动策略。它允许剧本（常称为Playbooks）在安全流程的部分或全部内容上执行多个任务，将线性剧本串联起来。虽然线性剧本可能更容易创建，但只适用于处理决策需求较少的工作流。编排和自动化比线性剧本的最大优势就是其灵活性，为支持全自动化和半自动化的决策，需要更加灵活的工作流和执行剧本。SOAR能够识别这些决策模式，并基于以往事件中的执行操作，自动推荐新事件的剧本、执行剧本操作流程，自动化分析决策，根据决策结果自动下发防护阻断的行动策略。</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>安全事件响应包括告警管理、工单管理、案件管理等功能。告警管理的核心不仅是对告警安全事件的收集、展示和响应，更强调告警分诊和告警调查。只有通过告警分诊和告警调查才能提升告警的质量，减少告警的数量。工单管理适用于中大型的安全运维团队协同化、流程化地进行告警处置与响应，并且确保响应过程可记录、可度量、可考核。案件管理是现代安全事件响应管理的核心能力。案件管理帮助用户对一组相关的告警进行流程化、持续化的调查分析与响应处置，并不断积累该案件相关的痕迹物证 (IOC) 和攻击者的战技过程指标信息 (TTP)。多个案件并行执行，从而持续化地对一系列安全事件进行追踪处置。<br><img src="https://img-blog.csdnimg.cn/c305603e5c6f4bff9d10fa706c7a4e8c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR事件响应"></p><p>事件响应是SOC操作中非常复杂的部分，理想状态下，它将是一个有效的动态过程，涉及数十种相互关联的技术、IT、业务流程和整个组织的人员，将是持续性适应风险和信任评估（Continuous Adaptive Risk and Trust Assessment, CARTA）策略用于在持续监测和可视性方面时，SOC团队可使用SOAR技术执行连续活动，利用SOAR技术通过智能化编排与响应最大程度的将已有安全技术进行整合，提高整个安全事件的解决能力和效率。基于编排和自动化前期对事件的分析，SOAR所提供的响应技术是完善整个事件生命周期，提高解决安全威胁效率的关键一环。本质上，SOAR的最终目标是促进安全团队对事件有全面的、端到端的理解，完成更好、更明智响应。</p><h1 id="五、SOAR的价值"><a href="#五、SOAR的价值" class="headerlink" title="五、SOAR的价值"></a>五、SOAR的价值</h1><p><strong>1、缩短响应时间</strong><br>通过自动化技术，尽可能多的自动完成一个安全事件处置流程中相关步骤，从而缩短响应时间即 MTTR。<br><strong>2、释放人力</strong><br>让安全专家从繁重的重复劳动中释放出来，将时间放在更有价值的安全分析、威胁猎捕、流程建立等工作上。<br><strong>3、安全运营流程标准化</strong><br>将公司的安全运营流程数字化管理起来，每一次安全事件的对应处置过程都在统一标准，统一步骤下执行，有迹可循。避免人员能力的差距导致的处置实际效果不可控。<br><strong>4、避免能力断层</strong><br>将安全专家的经验固化成处置预案Playbook，让不同的人都可以遵循同样的方法来完成特定安全事件的处置流程，避免因为个人的离职导致某个领域的安全能力缺失。<br><strong>5、运营流程指标可度量</strong><br>因为运营流程都通过 Playbook 数字化管理且每一次的执行过程都记录在案，因此流程的 KPI 如 MTTD、MTTR、TTQ、TTI 等全部可评估、可度量、可追踪。<br><strong>6、安全运营决策支撑</strong><br>通过对公司的所有运营流程数字化管理、数字化执行、数字化KPI评估后，管理者可以有效的评估什么流程基本无用，什么流程执行效率不高，什么流程发挥了最大的作用，甚至什么安全设备在所有流程中被使用的价值最大。从而为以后的安全投资决策，安全团队建设决策提供有价值的数值化支撑。</p><h1 id="六、SOAR与其他安全产品的关系"><a href="#六、SOAR与其他安全产品的关系" class="headerlink" title="六、SOAR与其他安全产品的关系"></a>六、SOAR与其他安全产品的关系</h1><p><img src="https://img-blog.csdnimg.cn/bd575be2bac3412984d257a2470c4d40.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR与其他安全产品的关系"></p><p>SOAR定位于安全运营操作平台，它收集不同来源的安全威胁数据和警报，事件来源于其他的态势感知平台、SIEM、日志分析系统或安全人员人工录入需要处理的事件。通过调用安全设备的能力如：情报平台、资产管理平台、漏洞扫描平台、EDR管理平台、运维管理平台、工单管理平台、WAF设备、防火墙来实现对安全事件的分析、溯源、取证、处置、通知等。一端接安全事件源，一端对接安全设备能力。通过SOAR本身的编排能力将人员、设备、资源、流程协同起来。每个企业部署流程和技术并不相同，SOAR在实际落地应用过程中并不能“即插即用”，需要对接事件源、对接各类联动处置设备，根据企业具体的实际情况定制剧本流程。对接的实际安全设备能力数量以及剧本的积累，是SOAR平台能够很好的支持运营的关键。</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SOAR是最近几年安全市场上最火热的词汇之一。SOAR究竟是什么，发展历程是什么，能够起什么作用，带着这些问题我们来认识一下SOAR。&lt;/p&gt;
&lt;h1 id=&quot;一、SOAR是什么&quot;&gt;&lt;a href=&quot;#一、SOAR是什么&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>大脑不是用来思考的，如何让孩子更好的学习？</title>
    <link href="https://xiejava.gitee.io/posts/8394d1a3/"/>
    <id>https://xiejava.gitee.io/posts/8394d1a3/</id>
    <published>2021-08-22T02:23:31.000Z</published>
    <updated>2021-08-22T03:25:56.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E8%AF%BB%E4%B9%A6.png" alt="读书"></p><p>在这个知识爆炸、学习竞争压力巨大的时代，让父母最焦虑的事情之一，莫过于家里有个厌学的孩子了。为了让孩子好好学习，家长们操碎了心。为了孩子报各种培训辅导班、自己亲自上阵陪同辅导、高价请一对一的家教辅导，就差自己代替孩子去学习了。而孩子依旧是，一写作业就磨蹭、一考试就不会、一上学就无精打彩，一放学就满血复活。为什么学生不喜欢上学？如何让孩子喜欢并更好的学习呢？让我们跟着这本《为什么学生不喜欢上学?》一起来探索学习的秘密。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E6%88%91%E7%9A%84%E5%BF%83%E9%87%8C%E5%8F%AA%E6%9C%89%E5%AD%A6%E4%B9%A0.jpg" alt="我的心里只有学习"><br>《为什么学生不喜欢上学?》是一本关于认知心理学的普及读物，也是一本教育心理学的入门书籍。作为美国弗吉尼亚大学心理学教授威林厄姆的重要著作，是一本深受学生和教师欢迎的教育心理学著作。他用认知心理学的原理，详细分析了学生学习的过程和教师在课堂教学中必须注意的一些问题。</p><p>作者丹尼尔·T·威林厄姆，哈佛大学心理学博士，美国弗吉尼亚大学心理学教授。主要研究以大脑为基础的学习和记忆及认知心理学的基础教育应用。《美国教育家》杂志《向认知科学家提问》专栏作者。</p><p>这本书有着容易被人忽视和低估的名字，实际上它是一本认知心理学和教育心理学的科普著作，长期在美国亚马逊图书榜畅销不衰。在豆瓣评分高达9.3分！</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E7%94%9F%E4%B8%8D%E5%96%9C%E6%AC%A2%E4%B8%8A%E5%AD%A6.png" alt="为什么学生不喜欢上学"><br>书中主要提出并回答了这些问题：</p><ul><li>为什么学生不喜欢上学？</li><li>为什么学生能记住电视里的所有细节，却记不住我们教他的知识？</li><li>为什么让学生理解抽象概念这么难？</li><li>题海战术有用吗？</li><li>科学家是怎样思考的？如何让学生像专家一样思考？</li><li>如何因材施教？</li></ul><p>这本书刷新了很多人对学习的认知，不仅仅适合学生，同样适合处于终生学习时代的你和我。如果你的小学老师能早一点看到，你也就不会讨厌学习了。当然，现在的你看了也同样不晚。不论是教育孩子还是自己，了解了认知学的原理，按照符合科学原理的方法去做，都会让大家的学习更有效率。特别是，本书有许多震撼人心、不符合我们直觉的认知让我们重新去思考如何去更好的学习。</p><h3 id="学生为什么不爱学习？"><a href="#学生为什么不爱学习？" class="headerlink" title="学生为什么不爱学习？"></a><strong>学生为什么不爱学习？</strong></h3><p>从认知心理学的角度来看，人是充满好奇心的，愿意探索了解一切；也喜欢思考，因为思考就是解决问题，而解决问题能带来愉悦感。比如当你苦苦思索，终于解出了一道难题或者想通了一件事情，你的大脑可能奖励它自己少量的多巴胺，让你恨不得手舞足蹈，瞬间自信心爆棚，觉得自己是世界上最棒的人。这种快乐，跟吃个甜点是完全不一样。学习应该是件很快乐的事情。</p><p>既然解决问题也能带来快乐，那为什么还有这么多人不愿意思考，不愿意学习呢？</p><p><strong>因为：大脑不是用来思考的！！！</strong></p><p>看到这里估计大家会一脸闷逼，大脑不是用来思考的，哪是用来干啥的呢？是的，大脑能做很多事情，但思考并不是它最拿手的，人类不常思考是因为我们的大脑<strong>不是用来思考，而是用来避免思考的</strong>。思考很费力，而且它还是缓慢、靠不住的。幸运的是尽管我们并不擅长思考，但我们其实喜欢思考，我们生来就有着好奇心，也寻找可以进行思考的机会。但正是因为思考很难，需要条件合适，这份好奇心才能存活，否则我们很快就会放弃思考的念头。<strong>好奇心是与生俱来的，但它很脆弱</strong>。思考的愉悦感来自解决问题的过程，在一个要解决的问题上毫无进展是不会有愉悦感的，实际上，还会让你沮丧。同样只是知道问题的答案也不会有多大的愉悦感。如何保持好奇心，激发思考的兴趣呢？答案是思考问题的难易程度。太容易的问题不会带来愉悦感，同样太难的问题不但不会带来愉悦感还会带来挫折感让人渐渐的避免思考。</p><p><strong>所以：要确保提供给学生的问题是可以解决的。尊重学生的认知局限和个体间的认知差异，难易适中。</strong></p><p>根据资料，认知心理学把人类对于外部世界的认识分成了三个区域：舒适区、学习区、恐慌区。其中，“舒适区”是对自己来说没有学习难度的知识，接触这类知识感觉很舒适，但可学到的东西很少，进展缓慢；“学习区”有一定挑战，接触时会感到不适，但又不至于太难受，保持在这个区间学习，可以得到快速成长；“恐慌区”是超出自己能力范围太多的知识，接触会感到忧虑、恐惧，不堪负重以至放弃学习。学习具有适当挑战的东西，一段时间后，“学习区”会慢慢变为“舒适区”， 而一部分的“恐慌区” 又会变成“学习区”。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E8%88%92%E9%80%82%E5%8C%BA.jpg" alt="舒适区、学习区、恐慌区"></p><p>在舒适区学习，会因为太容易而觉得枯燥，无法坚持；在恐慌区学习，会因为太难好奇心受挫，很快就放弃。所以学习任务要难易适中。要确保在学习过程中碰到的问题可以被解决。</p><h3 id="在学习的过程中死记硬背是否合理？"><a href="#在学习的过程中死记硬背是否合理？" class="headerlink" title="在学习的过程中死记硬背是否合理？"></a><strong>在学习的过程中死记硬背是否合理？</strong></h3><p>一般大家都会死记硬背的学习方法嗤之以鼻，认为是读死书。然而你错了！有些东西该背的还得背，该记的还得记。事实性知识要先于技能，也就是说如9*9乘法表，元素周期表、历史年代表、一些常识等等，必须得用心记下，这些都是学习的基石。</p><p>毫无疑问，让学生记住枯燥的事实是完全不够的，需要进行关联和分析。但是同样，如果没有事实性知识想要凭空让学生拥有分析能力或者归纳能力是不可能的。</p><p><strong>因为：</strong><br><strong>第一，背景知识对阅读理解来说必不可少</strong>。它帮我们在单个的要点之间建立起联系。</p><p><strong>第二，背景知识对于我们的认知是必要的</strong>。一个人看起来在进行逻辑思考，但其实大部分是在进行记忆检索。它使我们能够将独立的元素合成一个单元，进而增加工作记忆的空间。</p><p><strong>第三，事实性知识可以增强记忆</strong>。如果你对一方面了解的越多，你就越能更好的理解这方面的新知识。</p><p>长期记忆中的事实性记忆使得获取更多的事实性知识更容易，它说明持有的信息量取决于已有的信息量。</p><p><strong>所以：</strong><br>我们必须让学生学习背景知识。学生必须学会反复出现的概念–统一所有学科的思想。</p><p><strong>知识体系在先，批判性思维在后</strong>。批判性思考并不能够脱离背景知识而单独实践以至完善的。<br>具有浅显知识都比没有知识强。了解的深固然好，但是我们不可能细致地了解每一件事情，泛泛的知识显然比不懂要强。</p><p><strong>加强阅读</strong>。大量的数据证实，读“闲书”的人一生都因此受益。</p><p><strong>偶然获得知识</strong>。学习事实性知识可以随时随地的学习如读闲书、翻杂志、看记录片、新闻或者和朋友聊天都可以获得相应的知识。</p><p><strong>尽早开始</strong>。家庭环境的培养，如父母使用的语言、书籍资源是否可得、家长是否平时看书。等等还有其他一些因素决定了孩子在上学前拥有的知识。</p><h3 id="题海战术到底有没有用？"><a href="#题海战术到底有没有用？" class="headerlink" title="题海战术到底有没有用？"></a><strong>题海战术到底有没有用？</strong></h3><p>题海战术也是比较有争议的学习方法，现在有一种观点认为，题海战术只对提高考试成绩有帮助，扼杀了学生内在的学习动力，是现行教育下的畸形产物，它带来的弊远大于利。但同时也有教育专家跳出来说，学生必须反复地练习才能学会知识和技能。两者孰是孰非？</p><p>在认知学看来，练习是最有效的窍门之一，它减少了大脑活动需要的空间。没有充分的练习，你不可能精通任何脑力活。</p><p>为什么要练习？因为通过练习能获得最基本的能力，以期精益求精。如果你作为足球运动员在带球的同时还要思考踢球的角度和速度，你不太可能成为一个优秀的足球运动员。你必须得日复一日的练习。像这样的低层次过程必须不假思索，才能给更高层次的过程，比如战术策略提供足够的空间。类似的，你如果不熟记数据要诀也学不好代数。练习的目的是获得能力和提高能力。</p><p><strong>因为：</strong></p><p><strong>练习是为了日后更好的学</strong>习。通过大量的练习会让一些步骤变得自动化，学习者才能将思考能力提高到下一个层次。让思考过程变得省力，这样才能学得更多。</p><p><strong>练习使记忆更长久</strong>。努力学习显然不能防止遗忘，但持续地练习可以防止遗忘。</p><p><strong>练习促进知识的迁移</strong>。重复做很多某一类型的题目使你更容易辨识一个新问题的内在结构，即使你以前没有见过这一题目。</p><p>但是，不是每件事情都需要无限度地练习的。</p><p><strong>所以：</strong></p><p>如果练习可以让思考过程变得省力，我们就要去识别哪些过程需要自动化，总的来说需要自动化的过程往往是自动化后效益能达到最大值的技能的基础。</p><p><strong>分散练习时间</strong>。没有必要把关于一个概念的所有练习集中在很短的一段时间里完成。分散练习后记忆会更持久。持续不断地练习同一项技能是很无聊的事，最好能有点变化。分散练习的另一个好处是学习者有更多的时间思考如何将学到的东西加以应用。</p><p><strong>在进阶环境中练习</strong>。自动化需要很多练习，聪明的办法是既分散练习的时间，又分散练习的环境。尽量多的设计有创意的方法来练习最关键的技巧，同时让学习者在更高阶的环境中学到基本技能。</p><h3 id="有些孩子天生就不是学习的料？"><a href="#有些孩子天生就不是学习的料？" class="headerlink" title="有些孩子天生就不是学习的料？"></a><strong>有些孩子天生就不是学习的料？</strong></h3><p>有些人认为，学习能力是受基因影响，如果你的基因优秀，你就聪明；基因不好，就不聪明。你聪明就可以学得很好。另外一种看法就是认为智能是可以塑造的。如果考试考砸了或不理解某个知识点，不是因为笨，而是因为他们还不够努力。哪一种看法是正确的呢？</p><p>答案是：两者都有正确的部分。我们的基因遗传确实对智能有影响，但是通常是通过环境影响的。毫无疑问智能是可以改变的！</p><p>孩子智能上的差异可以通过持久的努力来改变。</p><p><strong>因为：</strong></p><p><strong>对于智能，态度很重要</strong><br>有充分证据证明，相信智能可以通过努力提高的学生比相信智能是改变不了得事情的学生学得更好，得到的分数更高。<br>孩子必须知道他的能力决定他所作事情时的成功率，他需要发展对于自己能力的自信，而且还要理解，对于不同类型的任务他拥有不同级别的能力。</p><p><strong>所以：</strong></p><p>要确保孩子相信自己能够进步，要让他们相信为此所作的努力是值得的。</p><p><strong>赞扬努力，而非能力</strong>。赞扬过程而不是能力，赞扬孩子面对困难时坚持不懈的精神或对作业负责的态度。</p><p>告诉他们<strong>一份耕耘一份收获</strong>。所有的所谓“天才”都是持续努力的结果。</p><p><strong>坦然的接受失败</strong>。如果你想提高智能，你需要挑战自己，这表示接受了略高过自己能力的任务，你很有可能第一次就会失败，但失败没有什么大不了的。人生中的一次又一次的失败是成功的原因。<br>学习技能不是天生的。所有的学习者都要学会自觉、时间分配、足智多谋（如遇到难题时该如何做）。</p><p>终身学习，做保持好奇心和探索欲的父母和老师，我们需要更多的智慧。而教育就是将智慧薪火相传的过程，尊重孩子的认知规律，谨慎积极的保持努力和践行。教育使人更聪明，聪明的人可以使教育更美好。</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E8%AF%BB%E4%B9%A6.png&quot; alt=&quot;读书&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这个知识爆炸、学习竞争压力巨大的时代，让父母最焦
      
    
    </summary>
    
    
      <category term="读书" scheme="https://xiejava.gitee.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读后感" scheme="https://xiejava.gitee.io/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="学习考试" scheme="https://xiejava.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>都2021了，我为什么还在用博客这种古老的方式在记录</title>
    <link href="https://xiejava.gitee.io/posts/7626e526/"/>
    <id>https://xiejava.gitee.io/posts/7626e526/</id>
    <published>2021-08-20T13:53:09.000Z</published>
    <updated>2021-08-20T13:55:36.246Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/81616d1642d7445796c58b74e0b30bf9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70#pic_center" alt="BLOG"></p><p>都2021了，在这个移动互联网异常发达，自媒体泛滥的时代，博客这个古老的在互联网时代记录自己的工具似乎是不合时宜要被大众所遗忘被历史所淘汰。而我却还在用博客这种古老的方式生活在移动互联网时代记录工作，学习，生活。</p><p><strong>一、为什么要记录</strong><br>正如我的博客标题，记录最好的自己。最朴实的想法就是想记录自己的所学、所见、所闻、所思、所想。记录使人进步。吴军老师的《全球科技通史》中提到，促进人类文明发展的是两条主线，一条是能源，一条是信息。文字的发明，信息的记录，让人类的文明得以延续和发展。是一代一代人通过信息的记载和积累促进科技的发展，让信息不管是从记录方式还是传播速度都得到了跨越式的发展，进入到了现在信息爆炸的时代。书中提到，为什么在近代早期西方的科学技术进步的速度要明显的快于中国，一个重要的原因就西方对于科学技术的研究及传播方式。西方的研究方式是通过不断的实验大量的记录进行定量研究，后人可以基于前人记录的信息研究成果进行研究和传播，大大加快的科学技术的进步。而那时候中国可能还是定性方式的研究，口口相传的传播方式，导致原来很多技术到现在都失传了。</p><p>对于个人来说，我想应该也是一样的，要想更快进步和发展，将自己生活、学习、工作过程中的所学、所见、所闻、所思、所想记录下来定期的回顾和思考应该会有所促进吧。而且随着时间的推移回头看看自己以前记录的东西应该也是一种乐趣。或许，有人看到我所记录的东西以此为鉴少走一点弯路。</p><p>不在乎文笔，不限于内容，仅仅只是记录，希望记录能够成就最好的自己。</p><p><strong>二、为什么是博客这种方式</strong><br>记录信息的手段很多，尤其是自媒体时代，微博、微信、头条、抖音、小红书啥的，平台很多。为什么还要用博客这种古老的方式呢？如果自是记录给自己看映象笔记、网易云笔记都是很好的，私密性太强，不够开放。微博、微信社交属性太强关注的都是些熟人。头条、抖音、小红书，功利性太强，为了收益去强迫自己去写也不是自己的初衷。想来想去还只有博客这种古老的方式比较合适，安安静静的自己想记录什么就记录什么。也不用去担心什么流量，不用去关注什么人关注了你。以前几个大的通用的博客平台都不提供服务了如新浪博客、网易博客等，而CSDN、cnblog主要是技术类的博客，想记录点乱七八糟的事情似乎也不太适合。所以只好自己来搭建博客咯。</p><p>自己搭建的博客<a href="http://xiejava.ishareread.com" target="_blank" rel="noopener">http://xiejava.ishareread.com</a> 已经快两年了。记录的东西不是太多，说明见识不多，思考太少。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/81616d1642d7445796c58b74e0b30bf9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>安全运维与安全运营</title>
    <link href="https://xiejava.gitee.io/posts/76373188/"/>
    <id>https://xiejava.gitee.io/posts/76373188/</id>
    <published>2021-08-20T03:18:22.000Z</published>
    <updated>2021-08-20T03:21:08.582Z</updated>
    
    <content type="html"><![CDATA[<p>安全运维与安全运营是安全人员经常听到的两个名词。到底什么是安全运维，什么是安全运营，两者之间有什么区别和联系呢？</p><p>我们先来看一下运维与运营的概念区别。<br><strong>运维</strong>一般来说指的是运行维护，通过一定的技术和管理手段保障平台或系统的正常运行。本质上是对平台、系统或产品所涉及的网络、服务器、服务的生命周期各个阶段的运营与维护，在成本、稳定性、效率上达成一致可接受的状态。</p><p><strong>运营</strong>从字面上理解更多的是指经营。通过对平台、系统或产品的经营达到预期的业务目标。对运营过程的计划、组织、实施和控制，是与产品生产和服务创造密切相关的各项管理工作的总称。从另一个角度来讲，运营管理也可以指为对生产和提供公司主要的产品和服务的系统进行设计、运行、评价和改进的管理工作。</p><p>总体来说<strong>运营应该是覆盖运维的，运维是支持运营的</strong>。那么安全运维和安全运营，应该也是同样的道理。</p><p>网上有人进行了概括：</p><p><strong>安全运维</strong>简单来说，就是从安全的角度对日常IT信息系统进行运行维护，传统运维工作主要是为了保障信息系统的正常运行，安全运维则是通过安全分析，检测和解决已经产生和即将产生的安全问题，从而建立从防护到监测到解决的闭环安全机制管理系统，实现运维的目的——保障企业整体IT系统运行正常。</p><p><strong>安全运营</strong>应该来说概念更广，狭义的安全运营是为以资产为核心，以安全事件管理为关键流程，依托于安全运营平台（SOC），建立一套实时的资产风险模型，进行事件分析、风险分析、预警管理和应急响应处理的集中安全管理体系。广义安全运营是一个技术、流程和人有机结合的复杂的系统工程，通过对已有的安全产品、工具、服务产出的数据进行有效的分析，持续输出价值，解决安全风险，从而实现安全的最终目标。</p><p>个人认为<strong>运维更多的强调流程，运营更多的强调体系。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安全运维与安全运营是安全人员经常听到的两个名词。到底什么是安全运维，什么是安全运营，两者之间有什么区别和联系呢？&lt;/p&gt;
&lt;p&gt;我们先来看一下运维与运营的概念区别。&lt;br&gt;&lt;strong&gt;运维&lt;/strong&gt;一般来说指的是运行维护，通过一定的技术和管理手段保障平台或系统的
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络信息安全管理之资产、脆弱性、威胁、风险</title>
    <link href="https://xiejava.gitee.io/posts/57a81e07/"/>
    <id>https://xiejava.gitee.io/posts/57a81e07/</id>
    <published>2021-08-19T07:16:23.000Z</published>
    <updated>2021-08-19T08:20:56.067Z</updated>
    
    <content type="html"><![CDATA[<p>​<br><strong>网络信息安全管理</strong>是指对网络资产采取合适的安全措施，以确保网络资产的可用性、完整性、可控制性和抗抵赖性，不致因网络设备、网络通信协议、网络服务、网络管理受到人为和自然因素的危害，而导致网络中断、信息泄露或破坏。网络信息管理对象主要包括网络设备、网络通信协议、网络操作系统、网络服务、安全网络管理等在内的所有支持网络系统运行的软、硬件总和。网络信息安全管理的目标就是通过适当的安全防范措施，保障网络的运行安全和信息安全，满足网上业务开展的安全要求。</p><p><strong>网络信息安全管理要素</strong>由网络管理对象、网络威胁、网络脆弱性、网络风险、网络保护措施组成。由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。网络安全管理实际上就是风险控制，其基本过程是通过网络管理对象的威胁和脆弱性进行分析，确定网络管理对象的价值、网络管理对象威胁发生的可能性、网络管理对象的脆弱程度，从而确定网络管理对象的风险等级，然后据此选取合适的安全保护措施，降低网络管理对象的风险。</p><p><strong>安全风险管理的三要素</strong>分别是<strong>资产</strong>、<strong>威胁</strong>和<strong>脆弱性</strong>，脆弱性的存在将会导致风险，而威胁主体利用脆弱性产生风险。网络攻击主要利用了系统的脆弱性。由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。</p><p><img src="https://img-blog.csdnimg.cn/20201204163036136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络信息安全管理要素"></p><p>网络信息安全管理对象是企业、机构直接赋予了价值而需要保护的资产。它的存在形式包括有形的和无形的，如网络设备硬件、软件文档是有形的，而服务质量、网络带宽是无形的。</p><p>常见的网络信息安全管理对象信息安全资产分类如下：</p><table><thead><tr><th>分类</th><th>示例</th></tr></thead><tbody><tr><td>数据</td><td>保存在信息媒介上的各种数据资料，包括源代码、数据库数据、系统文档、运行管理规程、计划报告、用户手册、各类纸质的文档等</td></tr><tr><td>软件</td><td>系统软件：操作系统、数据库管理系统、语句包、开发系统<br>应用软件：办公软件、数据库软件、各类工具软件等<br>源程序：各种共享源代码、自行或合作开发的各种代码等</td></tr><tr><td>硬件</td><td>网络设备：路由器、网关、交换机等<br>计算机设备：大型机、小型机、服务器、工作站、台式计算机、便携计算机等<br>存储设备：磁带机、磁盘阵列、磁带、光盘、软盘、移动硬盘等<br>传输线路：光纤、双绞线等<br>保障设备：UPS、变电设备、空调、保险柜、文件柜、门禁、消防设施等<br>安全设备：防火墙、入侵检测系统、身份鉴别等<br>其他：打印机、复印机、扫描仪、传真机等</td></tr><tr><td>服务</td><td>信息服务：对外依赖该系统开展的各类服务<br>网络服务：各种网络设备、设施提供的网络连接服务<br>办公服务：为提高效率而开发的管理信息系统，包括各种内部配置管理、文件流转管理等服务</td></tr><tr><td>人员</td><td>掌握重要信息和核心业务的人员，如主机维护主管、网络维护主管及应用项目经理等</td></tr><tr><td>其他</td><td>企业形象、客户关系等</td></tr></tbody></table><p><strong>脆弱性</strong>：脆弱性也可称为弱点或漏洞，是资产或资产组中存在的可能被威胁利用造成损害的薄弱环节。脆弱性一旦被威胁成功利用就可能对资产造成损害。脆弱性可能存在于物理环境、组织、过程、人员、管理、配置、硬件、软件和信息等各个方面。</p><p>脆弱性是与资产紧密相连的，是其固有的属性，客观存在是绝对的，但存在脆弱性不一定就绝对造成安全事件。如果没有被相应的威胁利用，单纯的脆弱性本身不会对资产造成伤害。</p><table><tr><th>类型</th><th>识别对象</th><th>脆弱性子类</th></tr><tr ><td rowspan=6>技术脆弱性</td><td>物理环境</td><td>机房场地、机房防火、机房供配电、机房防静电、机房接地与防雷、电磁防护、通讯线路的保护、机房区域防护、机房设备管理等</td><tr><td>网络结构</td><td>网络结构设计、网络传输加密、网络设备安全漏洞、边界保护、外部访问控制策略、内部访问控制策略、网络设备安全配置等</td></tr><tr><td>服务器/系统软件</td><td>补丁安装、物理保护、用户帐号、口令策略、资源共享、事件审计、访问控制、新系统配置（初始化）、注册表加固、网络安全、系统软件安全漏洞、软件安全功能管理等</td></tr><tr><td>数据库</td><td>补丁安装、鉴别机制、口令机制、访问控制、网络和服务设置、备份恢复机制、审计机制等</td></tr><tr><td>应用系统</td><td>审计机制、审计存储、访问控制策略、数据完整性、通讯、鉴别机制、密码保护等</td></tr><tr><td>应用中间件</td><td>协议安全、交易完整性、数据完整性等</td></tr><tr><td rowspan=2>管理脆弱性</td><td>技术管理</td><td>物理和环境安全、通讯和操作管理、访问控制、系统开发与维护、业务连续性等</td></tr><tr><td>组织管理</td><td>安全策略、组织安全、信息资产分类与控制、人员安全、符合性等</td></tr></table>威胁：对资产或组织可能导致负面结果的一个事件的潜在源。威胁利用管理对象自身的脆弱性，采用一定的途径和方式，对评估对象造成损害或损失，从而形成风险。<p>威胁源分三类：自然威胁、人为威胁和环境威胁。</p><table><thead><tr><th>种类</th><th>描述</th><th>威胁子类</th></tr></thead><tbody><tr><td>软硬件故障</td><td>对业务实施或系统运行产生影响的设备硬件故障、通讯链路中断、系统本身或软件缺陷等问题</td><td>设备硬件故障、传输设备故障、存储媒体故障、 系统软件故障、应用软件故障、数据库软件故障、开发环境故障等</td></tr><tr><td>物理环境影响</td><td>对信息系统正常运行造成影响的物理环境问题和自然灾害</td><td>断电、静电、灰尘、潮湿、温度、洪灾、火灾、地震、暴风雨、潮汐、污染、空调设备故障、鼠蚁虫害、电磁干扰等</td></tr><tr><td>操作失误</td><td>应该执行而没有执行相应的操作，或无意执行了错误的操作</td><td>维护错误、操作失误、提供错误的指南或操作信息等</td></tr><tr><td>管理不到位</td><td>安全管理无法落实或不到位，从而破坏信息系统正常有序运行</td><td>管理制度和策略不完善、管理规程缺失、职责不明确、监督控管机制不健全等</td></tr><tr><td>恶意代码</td><td>故意在计算机系统上执行恶意任务的程序代码</td><td>病毒、特洛伊木马、蠕虫、陷门、间谍软件、窃听软件、携带恶意软件的垃圾邮件、流氓安全软件、即时消息垃圾邮件等</td></tr><tr><td>越权或滥用</td><td>通过采用一些措施，超越自己的权限访问了本来无权访问的资源，或者滥用自己的权限，做出破坏信息系统的行为</td><td>非授权访问网络资源、非授权访问系统资源、滥用权限非正常修改系统配置或数据、滥用权限泄露秘密信息、非授权使用存储介质等</td></tr><tr><td>网络攻击</td><td>利用工具和技术通过网络对信息系统进行攻击和入侵</td><td>网络探测和信息采集、漏洞探测、嗅探（账号、口令、权限等）、用户身份伪造和欺骗、用户或业务数据的窃取和破坏、系统运行的控制和破坏、拒绝服务攻击、僵尸网络、隐蔽式下载、名誉劫持、网络黑客的入侵等</td></tr><tr><td>物理攻击</td><td>通过物理的接触造成对软件、硬件、数据的破坏</td><td>物理接触、物理破坏、盗窃、勒索、罢工、内部员工蓄意破坏等</td></tr><tr><td>泄密</td><td>信息泄露给不应了解的他人</td><td>内部信息泄露、外部信息泄露等</td></tr><tr><td>篡改</td><td>非法修改信息，破坏信息的完整性使系统的安全性降低或信息不可用</td><td>篡改网络配置信息、篡改系统配置信息、篡改安全配置信息、篡改用户身份信息或业务数据信息等</td></tr><tr><td>抵赖</td><td>不承认收到的信息和所作的操作和交易</td><td>原发抵赖、接受抵赖、第三方抵赖等</td></tr></tbody></table><p>在这里可以看出威胁与攻击的区别和关系。攻击是威胁的一种类型，攻击是人为的蓄意的有计划采取的恶意破坏的行动。一般来说攻击比较容易检测到。</p><p><strong>网络信息安全风险</strong>是指特定的威胁利用网络管理对象所存在的脆弱性，导致网络管理对象的价值受到损害或丢失的可能性。简单的说，网络安全风险就是网络威胁发生的概率和所造成影响的乘积。</p><p><img src="https://img-blog.csdnimg.cn/20201204163838552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络安全风险分析"></p><p>本文整理自《信息安全工程师教程第2版》</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&lt;br&gt;&lt;strong&gt;网络信息安全管理&lt;/strong&gt;是指对网络资产采取合适的安全措施，以确保网络资产的可用性、完整性、可控制性和抗抵赖性，不致因网络设备、网络通信协议、网络服务、网络管理受到人为和自然因素的危害，而导致网络中断、信息泄露或破坏。网络信息管理对象主要包
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
