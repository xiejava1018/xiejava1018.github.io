<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieJava&#39;s blog</title>
  
  <subtitle>记录最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiejava.gitee.io/"/>
  <updated>2024-10-10T07:14:53.339Z</updated>
  <id>https://xiejava.gitee.io/</id>
  
  <author>
    <name>XieJava</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue3实现登录获取token并自动刷新token进行JWT认证</title>
    <link href="https://xiejava.gitee.io/posts/faae10b6/"/>
    <id>https://xiejava.gitee.io/posts/faae10b6/</id>
    <published>2024-10-10T06:49:20.000Z</published>
    <updated>2024-10-10T07:14:53.339Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://xiejava.ishareread.com/posts/ca8e72/" target="_blank" rel="noopener">《django应用JWT(JSON Web Token)实战》</a>介绍了如何通过django实现JWT，并以一个具体API接口实例的调用来说明JWT如何使用。本文介绍如何通过vue3的前端应用来使用JWT认证调用后端的API接口，实现一下的登录认证获取JWT进行接口认证。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20241010/1-%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81jwt%E6%B5%81%E7%A8%8B.jpg" alt="账号密码验证jwt流程"></p><h2 id="一、账号密码登录获取JWT"><a href="#一、账号密码登录获取JWT" class="headerlink" title="一、账号密码登录获取JWT"></a>一、账号密码登录获取JWT</h2><p>通过Login.vue实现登录的用户名、密码表单信息收集，调用getToken()方法进行鉴权验证并获取jwt的token。<br>Login.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"form"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"loginForm"</span> <span class="attr">class</span>=<span class="string">"loginContainer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"loginTitle"</span>&gt;</span></span><br><span class="line">            欢迎登录</span><br><span class="line">            <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户名"</span> <span class="attr">prop</span>=<span class="string">"username"</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"form.username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"密码"</span>  <span class="attr">prop</span>=<span class="string">"password"</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"form.password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:plain</span>=<span class="string">"true"</span> @<span class="attr">click</span>=<span class="string">"submitForm('form')"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">'@/stores/user'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">'element-plus'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;getToken&#125; <span class="keyword">from</span> <span class="string">'../api/user'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      form: &#123;</span><br><span class="line"><span class="actionscript">        username: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        password: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        err_username: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">        err_password: <span class="string">""</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [</span><br><span class="line"><span class="actionscript">          &#123; required: <span class="literal">true</span>, message: <span class="string">'请输入用户名'</span>, trigger: <span class="string">'blur'</span> &#125;</span></span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line"><span class="actionscript">          &#123; required: <span class="literal">true</span>, min:<span class="number">6</span>, message: <span class="string">'请输入密码'</span>, trigger: <span class="string">'blur'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,     </span><br><span class="line"><span class="actionscript">      formLabelWidth: <span class="string">'120px'</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">this</span>.$refs.loginForm) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$refs.loginForm.validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span></span><br><span class="line">            if (valid) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 提交表单逻辑</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'提交成功:'</span>, <span class="keyword">this</span>.form);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.login();</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'验证失败'</span>);</span></span><br><span class="line"><span class="actionscript">                ElMessage.error(<span class="string">'验证失败，请检查您的输入！'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.error(<span class="string">'表单未找到'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    login() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.message = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 用户名密码鉴权获取jwt的token</span></span></span><br><span class="line">      getToken(&#123;</span><br><span class="line"><span class="actionscript">        <span class="string">'username'</span>: <span class="keyword">this</span>.form.username,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'password'</span>: <span class="keyword">this</span>.form.password,</span></span><br><span class="line"><span class="javascript">      &#125;).then(<span class="function">(<span class="params">Response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(Response);</span></span><br><span class="line">          if (Response &amp;&amp; Response.access) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// //保存数据到本地存储</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.username= that.form.username;</span></span><br><span class="line"><span class="actionscript">            useUserStore().login(<span class="keyword">this</span>.username,Response.access,Response.refresh)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.username = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.password = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$router.push(&#123;name:<span class="string">"home"</span>&#125;); <span class="comment">//跳转到首页</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        .catch(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (<span class="string">"username"</span> <span class="keyword">in</span> error) &#123;</span></span><br><span class="line">            that.err_username = error.username[0];</span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"password"</span> <span class="keyword">in</span> error) &#123;</span></span><br><span class="line">            that.err_password = error.password[0];</span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            ElMessage.error(<span class="string">'登录失败！'</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.loginContainer</span>&#123;</span></span><br><span class="line">        border-radius: 15px;</span><br><span class="line">        background-clip: padding-box;</span><br><span class="line">        text-align: left;</span><br><span class="line">        margin: auto;</span><br><span class="line">        margin-top: 180px;</span><br><span class="line">        width: 450px;</span><br><span class="line">        padding: 15px 35px 15px 35px;</span><br><span class="line">        background: aliceblue;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blueviolet</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 0 25<span class="selector-tag">px</span> <span class="selector-id">#f885ff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.loginTitle</span>&#123;</span></span><br><span class="line">        margin: 0px auto 48px auto;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.loginRemember</span>&#123;</span></span><br><span class="line">        text-align: left;</span><br><span class="line">        margin: 0px 0px 15px 0px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.loginbody</span>&#123;</span></span><br><span class="line">        width: 100vw;</span><br><span class="line">        height: 100vh;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-size</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在登录时调用getToken()方法获取jwt的token<br>getToken的封装方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">'token/'</span>,</span><br><span class="line">      method: <span class="string">'post'</span>,</span><br><span class="line">      data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过用户名和密码鉴权可以获得JWT的token，接口会返回access的token和refresh的token，需要将这两个token保存下来，access的token用来进行API接口的jwt认证，refresh的token用来刷新失效的access的token。</p><h2 id="二、将JWT保存至本地"><a href="#二、将JWT保存至本地" class="headerlink" title="二、将JWT保存至本地"></a>二、将JWT保存至本地</h2><p>通过pinia将token保存至浏览器的本地存储，以便于后面请求API时带上访问的token </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">import</span> &#123; refreshToken &#125; <span class="keyword">from</span> <span class="string">'../api/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(<span class="string">'user'</span>, &#123;</span><br><span class="line">    persist: &#123;</span><br><span class="line">        enabled: <span class="literal">true</span>, <span class="comment">//开启数据持久化</span></span><br><span class="line">        strategies: [</span><br><span class="line">            &#123;</span><br><span class="line">                key: <span class="string">"userState"</span>, <span class="comment">//给一个要保存的名称</span></span><br><span class="line">                storage: localStorage, <span class="comment">//sessionStorage / localStorage 存储方式</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">        isLoggedIn: <span class="literal">false</span>,</span><br><span class="line">        username: <span class="string">''</span>,</span><br><span class="line">        jwtAccessToken: <span class="literal">null</span>,</span><br><span class="line">        jwtRefreshToken: <span class="literal">null</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    actions: &#123;</span><br><span class="line">        login(username, accessToken,refreshToken) &#123;</span><br><span class="line">            <span class="keyword">this</span>.username = username</span><br><span class="line">            <span class="keyword">this</span>.isLoggedIn = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">this</span>.setToken(accessToken, refreshToken)</span><br><span class="line">        &#125;,</span><br><span class="line">        logout() &#123;</span><br><span class="line">            <span class="keyword">this</span>.username = <span class="string">''</span></span><br><span class="line">            <span class="keyword">this</span>.jwtAccessToken = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">this</span>.isLoggedIn = <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        setToken(accessToken, refreshToken) &#123;</span><br><span class="line">            <span class="keyword">this</span>.jwtAccessToken = accessToken</span><br><span class="line">            <span class="keyword">this</span>.jwtRefreshToken = refreshToken</span><br><span class="line">        &#125;,</span><br><span class="line">        refreshToken() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                refreshToken(&#123;<span class="string">"refresh"</span>:<span class="keyword">this</span>.jwtRefreshToken&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.setToken(response.access, <span class="keyword">this</span>.jwtRefreshToken)</span><br><span class="line">                    resolve(response.access)</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'return refreshToken-----------'</span>+response.access)</span><br><span class="line">                &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                    reject(error)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        getIsLoggedIn: <span class="function">(<span class="params">state</span>) =&gt;</span> state.isLoggedIn,</span><br><span class="line">        getUsername: <span class="function">(<span class="params">state</span>) =&gt;</span> state.username,</span><br><span class="line">        getUserAccessToken: <span class="function">(<span class="params">state</span>) =&gt;</span> state.jwtAccessToken,</span><br><span class="line">        getRefreshToken: <span class="function">(<span class="params">state</span>) =&gt;</span> state.jwtRefreshToken,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在登录的Login.vue组件中调用<code>useUserStore().login(this.username,Response.access,Response.refresh)</code>将用户名、access的token、refresh的token保存至浏览器的本地存储。</p><h2 id="三、请求API带上JWT"><a href="#三、请求API带上JWT" class="headerlink" title="三、请求API带上JWT"></a>三、请求API带上JWT</h2><p>将axios的调用封装成request.js在调用API接口时带上JWT</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'@/components/tools/Router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">'@/stores/user'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> &#123; refreshToken &#125; <span class="keyword">from</span> <span class="string">'../api/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api_rul = <span class="keyword">import</span>.meta.env.VITE_APP_API_URL</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: api_rul,</span><br><span class="line">    timeout: <span class="number">5000</span>, <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="comment">// do something before request is sent</span></span><br><span class="line">        <span class="keyword">const</span> &#123; url &#125; = config</span><br><span class="line">        <span class="comment">// 指定页面访问需要JWT认证。</span></span><br><span class="line">        <span class="keyword">if</span> (url.indexOf(<span class="string">'/login'</span>)!== <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> jwt = useUserStore().getUserAccessToken</span><br><span class="line">        config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;jwt&#125;</span>`</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="comment">// do something with request error</span></span><br><span class="line">        <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>主要是在请求头重带着jwt的信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jwt = useUserStore().getUserAccessToken</span><br><span class="line">config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;jwt&#125;</span>`</span></span><br></pre></td></tr></table></figure><h2 id="四、在token失效时自动重新获取token"><a href="#四、在token失效时自动重新获取token" class="headerlink" title="四、在token失效时自动重新获取token"></a>四、在token失效时自动重新获取token</h2><p>前面提到JWT基于安全考虑有两个token，一个是access token ,一个是refresh token 。access token的失效时间较短，可以有效降低泄露而造成的影响，两个token的区别和作用如下：</p><table><thead><tr><th></th><th>access token</th><th>refresh token</th></tr></thead><tbody><tr><td>有效时间</td><td>较短(如半小时)</td><td>较长(如一天)</td></tr><tr><td>作用</td><td>鉴权验证</td><td>重新获取access token</td></tr><tr><td>什么时候使用</td><td>每次接口鉴权验证时</td><td>access token失效时使用</td></tr></tbody></table><p>使用refresh token的逻辑如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20241010/2-%E9%87%8D%E6%96%B0%E8%8E%B7%E5%8F%96token.jpg" alt="重新获取token流程"></p><p>以下通过拦截器实现token失效后重新获取access token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'@/components/tools/Router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">'@/stores/user'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> &#123; refreshToken &#125; <span class="keyword">from</span> <span class="string">'../api/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api_rul = <span class="keyword">import</span>.meta.env.VITE_APP_API_URL</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: api_rul,</span><br><span class="line">    timeout: <span class="number">5000</span>, <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="comment">// do something before request is sent</span></span><br><span class="line">        <span class="keyword">const</span> &#123; url &#125; = config</span><br><span class="line">        <span class="comment">// 指定页面访问需要JWT认证。</span></span><br><span class="line">        <span class="keyword">if</span> (url.indexOf(<span class="string">'/login'</span>)!== <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> jwt = useUserStore().getUserAccessToken</span><br><span class="line">        config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;jwt&#125;</span>`</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="comment">// do something with request error</span></span><br><span class="line">        <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response interceptor</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line"> </span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = response.data</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> error =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'err'</span> + error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">const</span> originalRequest = error.config;</span><br><span class="line">        <span class="comment">// 授权验证失败</span></span><br><span class="line">        <span class="keyword">if</span> (error.response.status === <span class="number">401</span> &amp;&amp; originalRequest._retry!== <span class="literal">true</span>) &#123;</span><br><span class="line">            originalRequest._retry = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 刷新token</span></span><br><span class="line">            <span class="keyword">let</span> jwtRefreshToken=useUserStore().getRefreshToken</span><br><span class="line">            <span class="keyword">await</span> refreshToken(&#123;<span class="string">"refresh"</span>:jwtRefreshToken&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 刷新token成功，重新请求</span></span><br><span class="line">                <span class="keyword">let</span> jwtToken=response.access</span><br><span class="line">                useUserStore().setToken(jwtToken, jwtRefreshToken)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'return refreshToken-----------'</span>+response.access)</span><br><span class="line">                originalRequest.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;jwtToken&#125;</span>`</span></span><br><span class="line">                <span class="keyword">return</span> service(originalRequest)                </span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 刷新token失败，跳转到登录页面</span></span><br><span class="line">                ElMessage.error(<span class="string">'请重新登录！'</span>)</span><br><span class="line">                Router.push(&#123;<span class="attr">name</span>:<span class="string">'login'</span>&#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 内部错误</span></span><br><span class="line">        <span class="keyword">if</span> (error.response.status === <span class="number">500</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> errormsg=error.response.data.msg</span><br><span class="line">            ElMessage.error(<span class="string">'服务器内部错误！'</span>+errormsg)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (error.response.status === <span class="number">400</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ElMessage.error(<span class="string">'错误的请求！'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>在判断<code>error.response.status === 401</code>时调用refreshToken重新获取jwttoken进行接口的调用。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;http://xiejava.ishareread.com/posts/ca8e72/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《django应用JWT(JSON Web Token)实战》&lt;/a&gt;介绍了如何通过django实现J
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>django应用JWT(JsonWebToken)实战</title>
    <link href="https://xiejava.gitee.io/posts/ca8e72/"/>
    <id>https://xiejava.gitee.io/posts/ca8e72/</id>
    <published>2024-09-22T04:17:14.000Z</published>
    <updated>2024-09-22T04:38:06.550Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离的项目中，前后端进行身份验证通常用JWT来进行，JWT 提供了一个理想的认证解决方案，用来保护 RESTful API，确保只有经过认证的用户才能访问受保护的资源。基于前端框架（如React, Angular, Vue.js）的单页面应用 (SPA)，开发者通过使用 JWT可以获得一种简单、安全、高效的方式来处理用户认证和授权的问题。本文通过django项目的实战来说明如何应用和使用JWT。</p><h2 id="一、什么是JWT"><a href="#一、什么是JWT" class="headerlink" title="一、什么是JWT"></a>一、什么是JWT</h2><p>JWT（JSON Web Token）是一种开放标准（RFC 7519），用于在网络各方之间以安全且紧凑的形式传输信息。JWT 是一个小型的凭证，通常用于身份验证和授权场景。JWT 由三部分组成：头部 (Header)、负载 (Payload) 和签名 (Signature)。<br>JWT信息由3段构成，它们之间用圆点“.”连接，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaa.bbbbbb.cccccc</span><br></pre></td></tr></table></figure><p>一个典型的JWT如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzI2OTcyMDc2LCJpYXQiOjE3MjY5NzAyNzYsImp0aSI6IjMyMTFiZjdmZDlhZTRmNTBhMDNmOGM2NjcwNDM2NjFiIiwidXNlcl9pZCI6Mn0.Ej6US4Uk-sSNm9P8kTU_cDAzBpO4I-BLhPstp5sG00Q</span><br></pre></td></tr></table></figure><ul><li>头部 (Header)：包含了关于 JWT 类型的信息以及所使用的签名算法。</li><li>负载 (Payload)：是 JWT 的主体部分，包含了实际需要声明的数据。这些数据通常包括用户ID、用户名、角色等信息。</li><li>签名 (Signature)：用于验证 JWT 的发送者就是它声称的发送者，同时也确保了 JWT 在传输过程中没有被篡改。</li></ul><h2 id="二、为什么使用JWT"><a href="#二、为什么使用JWT" class="headerlink" title="二、为什么使用JWT"></a>二、为什么使用JWT</h2><p>使用 JWT 的原因主要有以下几点：</p><ul><li>安全性：JWT 通过签名来保证数据的完整性和防篡改性。如果有人试图修改 JWT 内容，签名会失效，接收方可以检测到这一行为。</li><li>无状态性：JWT 是自包含的，这意味着不需要在服务器上保存会话状态。每个 JWT 都包含了所有必要的信息，从而减少了对服务器端存储的需求。</li><li>跨域支持：JWT 可以轻松地在不同的域之间共享，这使得它非常适合微服务架构和分布式系统。</li><li>性能提升：由于 JWT 是自包含的，所以服务器可以快速地验证 JWT，而无需查询数据库来获取用户信息，这提高了应用的响应速度。</li><li>易于缓存和扩展：JWT 可以被缓存，并且因为它们是无状态的，所以可以很容易地扩展到多个服务器，而无需担心会话复制问题。</li><li>CSRF 防护：使用 JWT 可以帮助缓解跨站请求伪造（CSRF）攻击的风险，因为 JWT 不依赖于 cookie，也就不会随同 HTTP 请求自动发送。</li></ul><p>总的来说，JWT 提供了一种高效、安全的方式来处理用户认证和授权，尤其是在需要跨域操作或构建无状态服务的情况下。</p><h2 id="三、在django项目中如何应用JWT"><a href="#三、在django项目中如何应用JWT" class="headerlink" title="三、在django项目中如何应用JWT"></a>三、在django项目中如何应用JWT</h2><p>JWT（JSON Web Token）是一种用于在网络应用中安全地传输信息的令牌。它通常用于身份验证和授权，特别是在单页应用（SPA）和API服务中。在Django中应用JWT，可以使用 djangorestframework-simplejwt。</p><h3 id="1、安装djangorestframework-simplejwt库："><a href="#1、安装djangorestframework-simplejwt库：" class="headerlink" title="1、安装djangorestframework-simplejwt库："></a>1、安装djangorestframework-simplejwt库：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-simplejwt</span><br></pre></td></tr></table></figure><h3 id="2、在settings-py中配置JWT认证："><a href="#2、在settings-py中配置JWT认证：" class="headerlink" title="2、在settings.py中配置JWT认证："></a>2、在settings.py中配置JWT认证：</h3><p>在INSTALLED_APPS中添加rest_framework_simplejwt的应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'rest_framework_simplejwt'</span>,  <span class="comment"># 添加 simplejwt 应用</span></span><br><span class="line">    <span class="string">'django_filters'</span>,  <span class="comment"># 注册条件查询</span></span><br><span class="line">    <span class="string">'mdeditor'</span>,  <span class="comment"># 注册markdown的应用</span></span><br><span class="line">    <span class="string">'drf_yasg2'</span>,  <span class="comment"># 接口文档</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>添加REST_FRAMEWORK的默认认证类为JWT认证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework_simplejwt.authentication.JWTAuthentication'</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加SIMPLE_JWT的相关配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JWT 相关设置</span></span><br><span class="line">SIMPLE_JWT = &#123;</span><br><span class="line">    <span class="string">'ACCESS_TOKEN_LIFETIME'</span>: timedelta(minutes=<span class="number">30</span>),  <span class="comment"># 访问令牌的有效时间</span></span><br><span class="line">    <span class="string">'REFRESH_TOKEN_LIFETIME'</span>: timedelta(days=<span class="number">1</span>),  <span class="comment"># 刷新令牌的有效时间</span></span><br><span class="line">    <span class="string">'ROTATE_REFRESH_TOKENS'</span>: <span class="literal">False</span>,  <span class="comment"># 是否允许刷新令牌循环</span></span><br><span class="line">    <span class="string">'BLACKLIST_AFTER_ROTATION'</span>: <span class="literal">True</span>,  <span class="comment"># 刷新令牌后是否加入黑名单</span></span><br><span class="line">    <span class="string">'UPDATE_LAST_LOGIN'</span>: <span class="literal">False</span>,  <span class="comment"># 登录时是否更新最后登录时间</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'ALGORITHM'</span>: <span class="string">'HS256'</span>,  <span class="comment"># 签名算法</span></span><br><span class="line">    <span class="string">'SIGNING_KEY'</span>: SECRET_KEY,  <span class="comment"># 签名密钥</span></span><br><span class="line">    <span class="string">'VERIFYING_KEY'</span>: <span class="literal">None</span>,  <span class="comment"># 验证密钥</span></span><br><span class="line">    <span class="string">'AUDIENCE'</span>: <span class="literal">None</span>,  <span class="comment"># 观众</span></span><br><span class="line">    <span class="string">'ISSUER'</span>: <span class="literal">None</span>,  <span class="comment"># 发行人</span></span><br><span class="line">    <span class="string">'JWK_URL'</span>: <span class="literal">None</span>,  <span class="comment"># JWK URL</span></span><br><span class="line">    <span class="string">'LEEWAY'</span>: <span class="number">0</span>,  <span class="comment"># 宽限期</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'AUTH_HEADER_TYPES'</span>: (<span class="string">'Bearer'</span>,),  <span class="comment"># 授权头类型</span></span><br><span class="line">    <span class="string">'AUTH_HEADER_NAME'</span>: <span class="string">'HTTP_AUTHORIZATION'</span>,  <span class="comment"># 授权头名称</span></span><br><span class="line">    <span class="string">'USER_ID_FIELD'</span>: <span class="string">'id'</span>,  <span class="comment"># 用户 ID 字段</span></span><br><span class="line">    <span class="string">'USER_ID_CLAIM'</span>: <span class="string">'user_id'</span>,  <span class="comment"># 用户 ID 声明</span></span><br><span class="line">    <span class="string">'USER_AUTHENTICATION_RULE'</span>: <span class="string">'rest_framework_simplejwt.authentication.default_user_authentication_rule'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'AUTH_TOKEN_CLASSES'</span>: (<span class="string">'rest_framework_simplejwt.tokens.AccessToken'</span>,),  <span class="comment"># 认证令牌类</span></span><br><span class="line">    <span class="string">'TOKEN_TYPE_CLAIM'</span>: <span class="string">'token_type'</span>,  <span class="comment"># 令牌类型声明</span></span><br><span class="line">    <span class="string">'TOKEN_USER_CLASS'</span>: <span class="string">'rest_framework_simplejwt.models.TokenUser'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'SLIDING_TOKEN_REFRESH_EXP_CLAIM'</span>: <span class="string">'refresh_exp'</span>,  <span class="comment"># 滑动令牌刷新过期声明</span></span><br><span class="line">    <span class="string">'SLIDING_TOKEN_LIFETIME'</span>: timedelta(minutes=<span class="number">5</span>),  <span class="comment"># 滑动令牌有效时间</span></span><br><span class="line">    <span class="string">'SLIDING_TOKEN_REFRESH_LIFETIME'</span>: timedelta(days=<span class="number">1</span>),  <span class="comment"># 滑动令牌刷新有效时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、在urls-py中配置JWT的获取和刷新路由："><a href="#3、在urls-py中配置JWT的获取和刷新路由：" class="headerlink" title="3、在urls.py中配置JWT的获取和刷新路由："></a>3、在urls.py中配置JWT的获取和刷新路由：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> (TokenObtainPairView, TokenRefreshView)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'token/'</span>, TokenObtainPairView.as_view(), name=<span class="string">'token_obtain_pair'</span>),</span><br><span class="line">    path(<span class="string">'token/refresh/'</span>, TokenRefreshView.as_view(), name=<span class="string">'token_refresh'</span>),</span><br><span class="line">    <span class="comment"># 其他路由...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>4、在视图中需要认证的地方使用JWT认证<br>如下modelviweset中使用，对于查询方法如list，retrieve不做鉴权，对于其他方法需要鉴权。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of permissions that this view requires.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.action <span class="keyword">in</span> [<span class="string">'list'</span>, <span class="string">'retrieve'</span>]:</span><br><span class="line">        <span class="comment"># 对于list方法，返回AllowAny权限类，表示不需要鉴权</span></span><br><span class="line">        permission_classes = [AllowAny, ]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 对于其他方法，返回IsAuthenticated权限类，表示需要用户已认证</span></span><br><span class="line">        permission_classes = [IsAuthenticated, ]</span><br><span class="line">    <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> permission_classes]</span><br></pre></td></tr></table></figure><h2 id="四、JWT如何使用"><a href="#四、JWT如何使用" class="headerlink" title="四、JWT如何使用"></a>四、JWT如何使用</h2><p>通过上面的应用后，使用接口调用遇到需要鉴权的会提示需要认证。<br>如当我们调用删除接口时，如果没有获得鉴权，接口会返回需要认证的信息。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240922/1-%E9%9C%80%E8%A6%81%E9%89%B4%E6%9D%83.png" alt="接口调用需要认证"></p><p>那如何通过JWT进行认证呢？<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240922/2-JWT%E7%9A%84%E9%AA%8C%E8%AF%81%E8%BF%87%E7%A8%8B.png" alt="JWT进行认证过程"></p><p>下面通过postman来应用JWT的使用过程。</p><h3 id="1、调用生成JWT的接口获取JWT"><a href="#1、调用生成JWT的接口获取JWT" class="headerlink" title="1、调用生成JWT的接口获取JWT"></a>1、调用生成JWT的接口获取JWT</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240922/3-%E8%B0%83%E7%94%A8%E7%94%9F%E6%88%90JWT%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%8E%B7%E5%8F%96JWT.png" alt="调用生成JWT的接口获取JWT"></p><h3 id="2、客户端保存JWT在调用接口时带上获取的JWT"><a href="#2、客户端保存JWT在调用接口时带上获取的JWT" class="headerlink" title="2、客户端保存JWT在调用接口时带上获取的JWT"></a>2、客户端保存JWT在调用接口时带上获取的JWT</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240922/4-%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E5%B8%A6%E4%B8%8AJWT.png" alt="调用接口时带上获取的JWT"></p><p>至此，本文介绍了什么时JWT，为什么要使用JWT，通过django实现JWT，介绍了JWT的使用流程，最后以一个具体API接口实例的调用来说明JWT如何使用。后续将介绍VUE从前端登录获取JWT到JWT认证的实例。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前后端分离的项目中，前后端进行身份验证通常用JWT来进行，JWT 提供了一个理想的认证解决方案，用来保护 RESTful API，确保只有经过认证的用户才能访问受保护的资源。基于前端框架（如React, Angular, Vue.js）的单页面应用 (SPA)，开发者通过
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>django实现开发、测试、生产环境配置区分</title>
    <link href="https://xiejava.gitee.io/posts/2affeb7f/"/>
    <id>https://xiejava.gitee.io/posts/2affeb7f/</id>
    <published>2024-09-16T02:55:15.000Z</published>
    <updated>2024-09-16T03:02:41.430Z</updated>
    
    <content type="html"><![CDATA[<p>任何实际的软件项目中都要经过开发、测试、然后上生产的阶段，在开发、测试的过程中往往会要频繁的切换开发、测试、生产等不同的环境。每个环境的配置有可能不一样，本文介绍如何实现django项目配置环境变量实现开发、测试、生产灵活便捷的切换。</p><h2 id="一、为什么要区分开发-dev-、测试-test-和生产-prod-环境"><a href="#一、为什么要区分开发-dev-、测试-test-和生产-prod-环境" class="headerlink" title="一、为什么要区分开发 (dev)、测试 (test) 和生产 (prod) 环境"></a>一、为什么要区分开发 (dev)、测试 (test) 和生产 (prod) 环境</h2><p>在Django项目中区分开发、测试和生产环境是非常重要的，这主要是因为不同环境在多个方面存在显著差异。<br>● 开发环境：通常配置为易于开发和调试，比如开启调试模式（DEBUG = True），这样可以提供更详细的错误信息和页面跟踪，方便开发者定位问题。同时，开发环境可能使用本地数据库或内存数据库，以便快速启动和测试。<br>● 测试环境：配置为模拟生产环境，但用于自动化测试。测试环境需要确保测试的独立性和一致性，以便准确地评估应用程序在类似生产条件下的表现。测试环境通常使用与生产环境相同或相似的数据库设置，但数据是测试专用的。<br>● 生产环境：配置为高性能、高可用性和高安全性。关闭调试模式，优化数据库连接和缓存策略，确保应用程序能够处理大量并发请求和保障数据的安全。<br>通过区分这些环境，开发者可以更有效地管理django项目，确保每个环境都能满足其特定的需求，从而提高开发效率、保障数据安全和提升用户体验。</p><h2 id="二、django项目如何通过配置实现环境配置的区分"><a href="#二、django项目如何通过配置实现环境配置的区分" class="headerlink" title="二、django项目如何通过配置实现环境配置的区分"></a>二、django项目如何通过配置实现环境配置的区分</h2><p>对于django项目实现开发（dev）、测试(test)和生产(prod)环境的配置分离可以通过使用不同的设置文件实现。<br>下面，我们以一个实例来介绍在django的项目如何通过使用不同的设置文件的方式区分不同的环境。</p><h3 id="1、针对不同的环境创建不同的设置文件settings-py"><a href="#1、针对不同的环境创建不同的设置文件settings-py" class="headerlink" title="1、针对不同的环境创建不同的设置文件settings.py"></a>1、针对不同的环境创建不同的设置文件settings.py</h3><p>针对不同的环境创建不同的设置文件，如开发环境settings_dev.py ,测试环境setting_test.py，正式生产环境使用默认的setting.py，对于共性的配置可以抽取到base.py中，其他的设置文件可以继承base.py中的配置，只有实现各个环境特有的设置就可以了。<br>创建设置文件的目录结构如下图所示。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240916/1-%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E7%8E%AF%E5%A2%83%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%90%8C%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="根据不同的环境创建不同的配置文件"></p><h3 id="2、在设置文件中根据需要进行配置区分"><a href="#2、在设置文件中根据需要进行配置区分" class="headerlink" title="2、在设置文件中根据需要进行配置区分"></a>2、在设置文件中根据需要进行配置区分</h3><p>典型的，如开发环境settings_dev.py用的本地数据库并开启debug模式、测试环境setting_test.py用sqlite3数据库开启debug模式。<br>注意：其他的设置文件要继承base.py中的配置，需要加入<code>from .base import *</code><br>参考配置如下：<br>setting_test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = []</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'test_db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setting_dev.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'127.0.0.1'</span>, <span class="string">'localhost'</span>,<span class="string">'ishareblog.com'</span>]</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'ishareblog_test'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'ishareblog'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'yourpassword'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="comment"># 1、取消外键约束，否则多对多模型迁移报django.db.utils.IntegrityError: (1215, 'Cannot add foreign key constraint')；</span></span><br><span class="line">        <span class="comment"># 2、解决字符串4个字节的utf8编码的字符报错的问题</span></span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'charset'</span>: <span class="string">'utf8mb4'</span>,<span class="string">"init_command"</span>: <span class="string">"SET foreign_key_checks = 0;"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、根据不同的环境运行使用不同的设置文件"><a href="#3、根据不同的环境运行使用不同的设置文件" class="headerlink" title="3、根据不同的环境运行使用不同的设置文件"></a>3、根据不同的环境运行使用不同的设置文件</h3><p>不同的环境有了不同的设置文件后，就可以在不同的环境运行和使用配置文件。<br>如生产环境使用的wsgi启动的服务，可以在wsgi.py文件中指定使用生产环境的配置文件</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240916/2-wsgi%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="wsgi中使用生产环境配置文件"></p><p>在开发环境中使用manage.py启动服务的，可以修改manage.py将设置文件改为setting_dev<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240916/3-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%9C%A8manage%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%BC%80%E5%8F%91%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="开发环境在manage文件中使用开发设置文件"></p><p>也可以通过命令行指定设置文件  <code>python manage.py runserver  --settings=ishareblog.settings_dev</code><br>如果时通过IDE启动，可以在IDE中指定使用的环境设置文件。<br>如下图所示：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240916/4-%E5%9C%A8IDE%E4%B8%AD%E6%8C%87%E5%AE%9A%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="在IDE中指定环境设置文件"></p><p>如要使用测试环境的设置文件，可以配置成ishareblog.settings_test，或通过命令行指定设置文件  <code>python manage.py runserver  --settings=ishareblog.settings_test</code></p><p>至此，本文详细的介绍了通过不同的设置文件来区分配置开发、测试、生产环境的配置及如何根据不同的环境使用不同的设置文件。解决不同环境去频繁修改settings.py环境设置的问题。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;任何实际的软件项目中都要经过开发、测试、然后上生产的阶段，在开发、测试的过程中往往会要频繁的切换开发、测试、生产等不同的环境。每个环境的配置有可能不一样，本文介绍如何实现django项目配置环境变量实现开发、测试、生产灵活便捷的切换。&lt;/p&gt;
&lt;h2 id=&quot;一、为什么要区
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>vue3+elementplus的表格展示和分页实战</title>
    <link href="https://xiejava.gitee.io/posts/ea8d8762/"/>
    <id>https://xiejava.gitee.io/posts/ea8d8762/</id>
    <published>2024-09-02T01:45:22.000Z</published>
    <updated>2024-09-02T01:50:33.624Z</updated>
    
    <content type="html"><![CDATA[<p>Element Plus 是一个基于 Vue 3 的现代化 UI 组件库，旨在帮助开发者快速构建美观且功能丰富的 Web 应用程序。它提供了大量的 UI 组件，如按钮、表单、表格、弹出框、标签页、树形控件等，涵盖了 Web 应用开发中常见的大多数场景。本文通过一个实例来说明vue3+elementplus查询、展示和分页实战。</p><h2 id="一、Element-Plus的安装使用"><a href="#一、Element-Plus的安装使用" class="headerlink" title="一、Element Plus的安装使用"></a>一、Element Plus的安装使用</h2><p>要开始使用 Element Plus，首先需要在项目中安装它。如果你正在使用 Vue 3 的项目，可以通过 npm 或 yarn 安装 Element Plus：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><p>然后可以在Vue 项目中全局引入 Element Plus：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./components/tools/Router'</span></span><br><span class="line"><span class="comment">// 导入ElementPlus</span></span><br><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-plus/dist/index.css'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ElementPlusIconsVue <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="comment">// 遍历ElementPlusIconsVue中的所有组件进行祖册</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(ElementPlusIconsVue)) &#123;</span><br><span class="line">    <span class="comment">// 向应用实例中全局注册图标组件</span></span><br><span class="line">    app.component(key, component)</span><br><span class="line">&#125;</span><br><span class="line">app.use(ElementPlus) <span class="comment">// 使用ElementPlus</span></span><br><span class="line">app.use(Router); <span class="comment">// 使用路由</span></span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="二、el-table-表格组件"><a href="#二、el-table-表格组件" class="headerlink" title="二、el-table 表格组件"></a>二、el-table 表格组件</h2><p>el-table 是Element Plus 中的一个重要组件，用于展示列表数据。可以通过 <el-table-column> 组件来定义表格中的每一列，包括列标题、列宽、对齐方式等,可以结合 el-pagination 可以实现分页功能。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table</span><br><span class="line">            ref=<span class="string">"multipleTable"</span></span><br><span class="line">            :data=<span class="string">"postList"</span></span><br><span class="line">            tooltip-effect=<span class="string">"dark"</span></span><br><span class="line">            style=<span class="string">"width: 100%"</span></span><br><span class="line">            fit</span><br><span class="line">            :pagination=<span class="string">"pagination"</span></span><br><span class="line">            @selection-change=<span class="string">"handleSelectionChange"</span> &gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                type=<span class="string">"selection"</span></span><br><span class="line">                width=<span class="string">"55"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="ID"</span></span><br><span class="line"><span class="regexp">                width="100"</span></span><br><span class="line"><span class="regexp">                prop="id"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"标题"</span></span><br><span class="line">                width=<span class="string">"450"</span></span><br><span class="line">                prop=<span class="string">"title"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="是否置顶"</span></span><br><span class="line"><span class="regexp">                width="100"</span></span><br><span class="line"><span class="regexp">                prop="isTop"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"热度"</span></span><br><span class="line">                width=<span class="string">"100"</span></span><br><span class="line">                prop=<span class="string">"viewsCount"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="发布时间"</span></span><br><span class="line"><span class="regexp">                width="200"</span></span><br><span class="line"><span class="regexp">                prop="pubTime"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"操作"</span></span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;template #default="scope"&gt;</span><br><span class="line">                        &lt;el-button size=<span class="string">"mini"</span> type=<span class="string">"danger"</span> @click=<span class="string">"deleteItem(scope.$index)"</span>&gt;删除&lt;<span class="regexp">/el-button&gt;         </span></span><br><span class="line"><span class="regexp">                    &lt;/</span>template&gt;     </span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-table&gt;</span><br></pre></td></tr></table></figure><p>其中<br><code>:data=&quot;postList&quot;</code>  绑定要显示在表格中的数据源，通常是一个对象数组<br><code>fit:</code> 让表格宽度自动填充父容器。<br><code>:pagination=&quot;pagination&quot;</code> 绑定分页的数据对象</p><p>数据定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 博客文章列表数据</span></span><br><span class="line">postList:[],</span><br><span class="line"><span class="comment">// 分页</span></span><br><span class="line">pagination: &#123;</span><br><span class="line">    currentPage: <span class="number">1</span>, <span class="comment">// 当前页</span></span><br><span class="line">    pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数</span></span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">    layout: <span class="string">'total,sizes,prev, pager, next, jumper'</span>, <span class="comment">// 分页布局</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="三、el-pagination-分页组件"><a href="#三、el-pagination-分页组件" class="headerlink" title="三、el-pagination 分页组件"></a>三、el-pagination 分页组件</h2><p>el-pagination Element Plus 中用于实现分页功能的重要组件。它可以与 el-table 组件结合使用，实现数据的分页显示。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">    @size-change=<span class="string">"handleSizeChange"</span></span><br><span class="line">    @current-change=<span class="string">"handleCurrentChange"</span></span><br><span class="line">    :current-page=<span class="string">"pagination.currentPage"</span></span><br><span class="line">    :page-sizes=<span class="string">"[10, 20, 30, 40]"</span></span><br><span class="line">    :page-size=<span class="string">"pagination.pageSize"</span></span><br><span class="line">    layout=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span><br><span class="line">    :total=<span class="string">"pagination.total"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-pagination&gt;</span></span><br></pre></td></tr></table></figure><p>属性<br>● <code>@size-change=&quot;handleSizeChange&quot;</code> 当每页显示数量变化时触发。<br>● <code>@current-change=&quot;handleCurrentChange&quot;</code> 当当前页变化时触发。<br>● <code>:current-page=&quot;currentPage&quot;</code> 设置当前页。<br>● <code>:page-sizes=&quot;[10, 20, 30, 40]&quot;</code>  设置每页可选的数量。<br>● <code>:page-size=&quot;pageSize&quot;</code> 设置每页显示的数量。<br>● <code>layout=&quot;total, sizes, prev, pager, next, jumper&quot;</code>  设置分页布局。<br>● <code>:total=&quot;tableData.length&quot;</code> 设置总数据量。<br>方法：<br>● <code>handleSelectionChange(val)</code> 处理行选择变化。<br>● <code>deleteItem(index)</code>  删除指定行。<br>● <code>handleSizeChange(val)</code>  处理每页显示数量变化。<br>● <code>handleCurrentChange(val)</code> 处理当前页变化。</p><h2 id="四、全部代码"><a href="#四、全部代码" class="headerlink" title="四、全部代码"></a>四、全部代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content-container"</span> direction=<span class="string">"vertical"</span>&gt;</span><br><span class="line">        &lt;!-- input --&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;el-container <span class="class"><span class="keyword">class</span></span>=<span class="string">"content-row"</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-tip"</span>&gt;</span><br><span class="line">                    文章标题:</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div class="input-field" style="width: 400px;"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-input v-model="queryParam.words"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-button type="primary" @click="getBlogList"&gt;筛选&lt;/</span>el-button&gt;</span><br><span class="line">                &lt;el-button type=<span class="string">"danger"</span> @click=<span class="string">"clear"</span>&gt;清空筛选&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-container&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;!-- list --&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-tabs type="card" @tab-click="handleClick"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="全部"&gt;&lt;/</span>el-tab-pane&gt;</span><br><span class="line">                &lt;el-tab-pane v-<span class="keyword">for</span>=<span class="string">"(item,index) in blogCategorys"</span></span><br><span class="line">                 :key=<span class="string">"index"</span></span><br><span class="line">                 :label=<span class="string">"item.title"</span></span><br><span class="line">                 :name=<span class="string">"item.id"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-tabs&gt;</span><br><span class="line">            &lt;el-table</span><br><span class="line">            ref=<span class="string">"multipleTable"</span></span><br><span class="line">            :data=<span class="string">"postList"</span></span><br><span class="line">            tooltip-effect=<span class="string">"dark"</span></span><br><span class="line">            style=<span class="string">"width: 100%"</span></span><br><span class="line">            fit</span><br><span class="line">            :pagination=<span class="string">"pagination"</span></span><br><span class="line">            @selection-change=<span class="string">"handleSelectionChange"</span> &gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                type=<span class="string">"selection"</span></span><br><span class="line">                width=<span class="string">"55"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="ID"</span></span><br><span class="line"><span class="regexp">                width="100"</span></span><br><span class="line"><span class="regexp">                prop="id"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"标题"</span></span><br><span class="line">                width=<span class="string">"450"</span></span><br><span class="line">                prop=<span class="string">"title"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="是否置顶"</span></span><br><span class="line"><span class="regexp">                width="100"</span></span><br><span class="line"><span class="regexp">                prop="isTop"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"热度"</span></span><br><span class="line">                width=<span class="string">"100"</span></span><br><span class="line">                prop=<span class="string">"viewsCount"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="发布时间"</span></span><br><span class="line"><span class="regexp">                width="200"</span></span><br><span class="line"><span class="regexp">                prop="pubTime"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"操作"</span></span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;template #default="scope"&gt;</span><br><span class="line">                        &lt;el-button size=<span class="string">"mini"</span> type=<span class="string">"danger"</span> @click=<span class="string">"deleteItem(scope.$index)"</span>&gt;删除&lt;<span class="regexp">/el-button&gt;         </span></span><br><span class="line"><span class="regexp">                    &lt;/</span>template&gt;     </span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-table&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"pagination-container"</span>&gt;</span><br><span class="line">                &lt;el-pagination</span><br><span class="line">                    @size-change=<span class="string">"handleSizeChange"</span></span><br><span class="line">                    @current-change=<span class="string">"handleCurrentChange"</span></span><br><span class="line">                    :current-page=<span class="string">"pagination.currentPage"</span></span><br><span class="line">                    :page-sizes=<span class="string">"[10, 20, 30, 40]"</span></span><br><span class="line">                    :page-size=<span class="string">"pagination.pageSize"</span></span><br><span class="line">                    layout=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span><br><span class="line">                    :total=<span class="string">"pagination.total"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-pagination&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">.pagination-container &#123;</span></span><br><span class="line"><span class="regexp">  margin-top: 20px;</span></span><br><span class="line"><span class="regexp">  text-align: center;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;getBlogList,getBlogCategory&#125; <span class="keyword">from</span> <span class="string">'@/api'</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 博客文章列表数据</span></span><br><span class="line">            postList:[],</span><br><span class="line">            <span class="comment">// 筛选博客的参数</span></span><br><span class="line">            queryParam:&#123;</span><br><span class="line">                words:<span class="string">""</span>,</span><br><span class="line">                cateid:<span class="string">""</span>,</span><br><span class="line">                tag:<span class="string">""</span>,</span><br><span class="line">                search:<span class="string">""</span>,</span><br><span class="line">                page:<span class="number">1</span>,</span><br><span class="line">                size:<span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 分页</span></span><br><span class="line">            pagination: &#123;</span><br><span class="line">                currentPage: <span class="number">1</span>, <span class="comment">// 当前页</span></span><br><span class="line">                pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数</span></span><br><span class="line">                total: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">                layout: <span class="string">'total,sizes,prev, pager, next, jumper'</span>, <span class="comment">// 分页布局</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 博客分类</span></span><br><span class="line">            blogCategorys:[],</span><br><span class="line">            <span class="comment">// 当前选中的博客分类</span></span><br><span class="line">            selectCategory:<span class="string">""</span>,</span><br><span class="line">            <span class="comment">// 当前选中的博客文章</span></span><br><span class="line">            multipleSelection:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        <span class="keyword">this</span>.getBlogCategory();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 路由更新时刷新数据</span></span><br><span class="line">    beforeRouteUpdate (to) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        <span class="keyword">this</span>.getBlogCategory();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        <span class="comment">// 获取博客文章列表数据</span></span><br><span class="line">        getBlogList() &#123;</span><br><span class="line">            getBlogList(<span class="keyword">this</span>.queryParam).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.postList = res.data.items</span><br><span class="line">                <span class="keyword">this</span>.pagination.total = res.data.total</span><br><span class="line">                <span class="keyword">this</span>.pagination.currentPage= res.data.page</span><br><span class="line">                    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">                &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(err)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 获取博客分类数据</span></span><br><span class="line">        getBlogCategory() &#123;</span><br><span class="line">            getBlogCategory().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.blogCategorys = res.data</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 改变分页大小</span></span><br><span class="line">        handleSizeChange(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pagination.pageSize = val;</span><br><span class="line">            <span class="keyword">this</span>.queryParam.size = val;</span><br><span class="line">            <span class="keyword">this</span>.getBlogList(); </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 跳到当前页 </span></span><br><span class="line">        handleCurrentChange(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pagination.currentPage = val;</span><br><span class="line">            <span class="keyword">this</span>.queryParam.page = val;</span><br><span class="line">            <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 切换Tab 刷新数据</span></span><br><span class="line">        handleClick(tab) &#123;</span><br><span class="line">            <span class="keyword">this</span>.queryParam.cateid = tab.props.name</span><br><span class="line">            <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 清空筛选项</span></span><br><span class="line">        clear() &#123;</span><br><span class="line">            <span class="keyword">this</span>.queryParam.words=<span class="string">""</span></span><br><span class="line">            <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        &#125;,</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、效果"><a href="#五、效果" class="headerlink" title="五、效果"></a>五、效果</h2><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240901/1-elementplus%E8%A1%A8%E6%A0%BC.png" alt="elementplus表格"><br>表格展示及数据分页是前端开发常用的功能，通过vue3+elementplus能够快速是实现对数据的展示及分页。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Element Plus 是一个基于 Vue 3 的现代化 UI 组件库，旨在帮助开发者快速构建美观且功能丰富的 Web 应用程序。它提供了大量的 UI 组件，如按钮、表单、表格、弹出框、标签页、树形控件等，涵盖了 Web 应用开发中常见的大多数场景。本文通过一个实例来说明
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue3+vite配置环境变量实现开发、测试、生产的区分</title>
    <link href="https://xiejava.gitee.io/posts/12b9f376/"/>
    <id>https://xiejava.gitee.io/posts/12b9f376/</id>
    <published>2024-08-25T06:57:34.000Z</published>
    <updated>2024-08-25T07:06:11.312Z</updated>
    
    <content type="html"><![CDATA[<p>在vue的实际项目中都要经过开发、测试、然后上生产的阶段，在开发、测试的过程中往往会要频繁的切换开发、测试、生产等不同的环境。每个环境的配置有可能不一样，本文介绍如何通过vue3+vite配置环境变量实现开发、测试、生产灵活便捷的切换。</p><h2 id="一、为什么需要区分-dev-、测试-test-和生产-prod-环境"><a href="#一、为什么需要区分-dev-、测试-test-和生产-prod-环境" class="headerlink" title="一、为什么需要区分 (dev)、测试 (test) 和生产 (prod) 环境"></a>一、为什么需要区分 (dev)、测试 (test) 和生产 (prod) 环境</h2><p>做过大型项目开发的都知道，每个项目都会要经历开发、测试、再到生产上线，一般在开发时候最常用到(development)开发环境、(production)生产环境、(test)测试环境。每个环境的配置可能都不太一样。</p><ul><li><strong>开发环境</strong>：为开发人员提供一个安全的地方来进行编码和调试，不会影响到其他环境，一般来说开发人员在本地机器上运行和测试应用程序。</li><li><strong>测试环境</strong>：用于测试，模拟生产环境，确保新功能在部署前能够正常工作，并且不会影响现有功能。</li><li><strong>生产环境</strong>：是面向用户的最终环境，任何更改都必须经过严格的测试才能部署到这里，通常具有优化和最少的日志记录。</li></ul><p>区分开发 (dev)、测试 (test) 和生产 (prod) 环境是软件开发中的一个最佳实践。不同的环境通常有不同的资源配置。典型的如vue所调用的后台接口数据，在开发平台可能是本地服务提供的接口、用于自动化测试可能是mock提供的数据、生产应该是正式环境提供的真实接口。</p><h2 id="二、vue3的项目如何通过配置方式区分不同的环境"><a href="#二、vue3的项目如何通过配置方式区分不同的环境" class="headerlink" title="二、vue3的项目如何通过配置方式区分不同的环境"></a>二、vue3的项目如何通过配置方式区分不同的环境</h2><p>vue3的项目可以通过vite的环境变量配置来进行不同环境的配置，可以参考vite的官方文档《<a href="https://cn.vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noopener">环境变量和模式</a>》<br>接下来，我们以一个实例来介绍在vue3的项目如何通过vite配置方式区分不同的环境。</p><h3 id="1、创建不同环境的-env文件"><a href="#1、创建不同环境的-env文件" class="headerlink" title="1、创建不同环境的.env文件"></a>1、创建不同环境的.env文件</h3><p>在vue3根目录下创建三个文件分别为<code>.env.develoment</code>、<code>.env.test</code>、<code>.env.production</code><br>创建的文件需要<code>.env</code>开头</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240825/1-env%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="env文件"></p><h3 id="2、在不同的-env文件中配置相应的环境变量"><a href="#2、在不同的-env文件中配置相应的环境变量" class="headerlink" title="2、在不同的.env文件中配置相应的环境变量"></a>2、在不同的.env文件中配置相应的环境变量</h3><h4 id="1）-env-develoment"><a href="#1）-env-develoment" class="headerlink" title="1）.env.develoment"></a>1）.env.develoment</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">'development'</span></span><br><span class="line"><span class="comment"># API URL</span></span><br><span class="line">VITE_APP_API_URL=<span class="string">'http://localhost:8000'</span></span><br></pre></td></tr></table></figure><h4 id="2）-env-test"><a href="#2）-env-test" class="headerlink" title="2）.env.test"></a>2）.env.test</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">'test'</span></span><br><span class="line"><span class="comment"># API URL</span></span><br><span class="line">VITE_APP_API_URL=<span class="string">''</span></span><br></pre></td></tr></table></figure><h4 id="3）-env-production"><a href="#3）-env-production" class="headerlink" title="3）.env.production"></a>3）.env.production</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">'production'</span></span><br><span class="line"><span class="comment"># API URL</span></span><br><span class="line">VITE_APP_API_URL=<span class="string">'http://iblog.ishareread.com'</span></span><br></pre></td></tr></table></figure><p>这里我们主要通过<code>VITE_APP_API_URL</code>变量来区分不同的环境调用不同的接口，在开发环境调用本地接口<a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> ，在测试环境用mock接口，在生产环境调用真实接口。</p><h3 id="3、在项目中使用环境变量"><a href="#3、在项目中使用环境变量" class="headerlink" title="3、在项目中使用环境变量"></a>3、在项目中使用环境变量</h3><p>使用<code>import.meta.env.VITE_APP_API_URL</code>在axios请求中使用环境变量的配置来调用不同的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> api_rul = <span class="keyword">import</span>.meta.env.VITE_APP_API_URL</span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: api_rul,</span><br><span class="line">    timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>查看调用的哪些环境变量，可以在在main.js打印<code>console.log(&#39;环境变量：&#39;, import.meta.env);</code>看一下<br>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./assets/main.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'环境变量：'</span>, <span class="keyword">import</span>.meta.env);</span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h3 id="4、在package-json中定义运行项目的脚本命令"><a href="#4、在package-json中定义运行项目的脚本命令" class="headerlink" title="4、在package.json中定义运行项目的脚本命令"></a>4、在package.json中定义运行项目的脚本命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"mocktest"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"module"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"vite"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"vite --mode test"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vite build"</span>,</span><br><span class="line">    <span class="string">"preview"</span>: <span class="string">"vite preview"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"axios"</span>: <span class="string">"^1.7.5"</span>,</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"^3.4.29"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@vitejs/plugin-vue"</span>: <span class="string">"^5.0.5"</span>,</span><br><span class="line">    <span class="string">"mockjs"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="string">"vite"</span>: <span class="string">"^5.3.1"</span>,</span><br><span class="line">    <span class="string">"vite-plugin-mock"</span>: <span class="string">"^3.0.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240825/2-package.json%E6%96%87%E4%BB%B6.png" alt="package.json"></p><h2 id="三、运行效果"><a href="#三、运行效果" class="headerlink" title="三、运行效果"></a>三、运行效果</h2><p>开发环境运行<code>npm run dev</code></p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240825/3-dev%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="npm run dev"></p><p>测试环境运行<code>npm run test</code></p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240825/4-test%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="npm run dev"></p><p>可以看出通过运行不同的命令通过环境变量区分了不同的运行环境，避免了不同环境去改代码去适配不同的环境。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在vue的实际项目中都要经过开发、测试、然后上生产的阶段，在开发、测试的过程中往往会要频繁的切换开发、测试、生产等不同的环境。每个环境的配置有可能不一样，本文介绍如何通过vue3+vite配置环境变量实现开发、测试、生产灵活便捷的切换。&lt;/p&gt;
&lt;h2 id=&quot;一、为什么需
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue3+vite+axios+mock从接口获取模拟数据实战</title>
    <link href="https://xiejava.gitee.io/posts/e9ff8595/"/>
    <id>https://xiejava.gitee.io/posts/e9ff8595/</id>
    <published>2024-08-24T06:44:23.000Z</published>
    <updated>2024-08-25T07:18:03.375Z</updated>
    
    <content type="html"><![CDATA[<p>在用Vue.js开发前端应用时通常要与后端服务进行交互，例如通过API接口获取数据，在后端服务接口还没有具备之前，可以通过mock(模拟)数据来进行开发。使用mock数据可以让前端开发人员独立于后端开发人员工作，加快开发速度。在没有真实数据的情况下，mock数据可以帮助开发者更快地看到UI的呈现效果和交互逻辑。</p><p>本文通过vue3+vite+axios+mock来介绍如何实现Vue.js的前端应用从接口获取模拟数据。</p><h2 id="一、安装相关组件"><a href="#一、安装相关组件" class="headerlink" title="一、安装相关组件"></a>一、安装相关组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br><span class="line">npm install mockjs vite-plugin-mock -D</span><br></pre></td></tr></table></figure><p> 其中<code>axios</code> 是一个基于 Promise 非常强大且灵活的 HTTP 客户端，适用于 Vue.js 应用程序中的数据获取和后端交互。它可以简化 HTTP 请求的处理，并提供丰富的功能来满足不同的需求。我们用axios来实现与接口服务的http请求。</p><p><code>Mock.js</code> 是一个用于生成随机数据的 JavaScript 库，它主要用于前端开发过程中模拟后端接口数据。Mock.js 提供了一套简洁易用的 API，可以帮助开发者快速生成符合特定规则的假数据，从而在没有后端支持的情况下进行前端开发和测试。</p><p><code>vite-plugin-mock</code> 是一个专为 Vite 设计的插件，用于在 Vite 项目中模拟数据。它简化了使用 Mock.js 的过程，让开发者能够更加方便地管理模拟数据。</p><p>简单来说，就是mock.js提供mock数据，通过vite-plugin-mock，将管理mock发布成服务，通过axios通过http请求接口的方式获取mock数据。</p><p>安装相关组件后，在package.json中看到相关的组件信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"mocktest"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"module"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"vite"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"vite --mode test"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vite build"</span>,</span><br><span class="line">    <span class="string">"preview"</span>: <span class="string">"vite preview"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"axios"</span>: <span class="string">"^1.7.5"</span>,</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"^3.4.29"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@vitejs/plugin-vue"</span>: <span class="string">"^5.0.5"</span>,</span><br><span class="line">    <span class="string">"mockjs"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="string">"vite"</span>: <span class="string">"^5.3.1"</span>,</span><br><span class="line">    <span class="string">"vite-plugin-mock"</span>: <span class="string">"^3.0.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、在vite-config-js中配置vite-plugin-mock插件"><a href="#二、在vite-config-js中配置vite-plugin-mock插件" class="headerlink" title="二、在vite.config.js中配置vite-plugin-mock插件"></a>二、在vite.config.js中配置vite-plugin-mock插件</h2><p>● viteMockServe的相关配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, URL &#125; <span class="keyword">from</span> <span class="string">'node:url'</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; viteMockServe &#125; <span class="keyword">from</span> <span class="string">'vite-plugin-mock'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    <span class="comment">// mock 数据的 dev环境</span></span><br><span class="line">    viteMockServe(&#123;</span><br><span class="line">      <span class="comment">// supportTs: true, // 是否开启支持ts</span></span><br><span class="line">      mockPath: <span class="string">'mock'</span>, <span class="comment">// 设置mockPath为根目录下的mock目录</span></span><br><span class="line">      localEnabled: <span class="literal">true</span>, <span class="comment">// 设置是否监视mockPath对应的文件夹内文件中的更改</span></span><br><span class="line">      prodEnabled: <span class="literal">false</span>, <span class="comment">// 设置是否启用生产环境的mock服务</span></span><br><span class="line">      watchFiles: <span class="literal">true</span>, <span class="comment">// 是否监视文件更改</span></span><br><span class="line">      logger: <span class="literal">true</span>  <span class="comment">//是否在控制台显示请求日志</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: fileURLToPath(<span class="keyword">new</span> URL(<span class="string">'./src'</span>, <span class="keyword">import</span>.meta.url))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在viteMockServe中指定了mockPath为mock也就是根目录下的mock目录，在该目录下的mock服务都会被发布成mock服务。</p><h2 id="三、实现mock服务"><a href="#三、实现mock服务" class="headerlink" title="三、实现mock服务"></a>三、实现mock服务</h2><p>在根目录下新建mock目录在mock目录下新建mock文件实现mock服务，如app.js、user.js</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240824/1-mock%E7%9B%AE%E5%BD%95.png" alt="mock目录"></p><p>app.js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [&#123;</span><br><span class="line">    url: <span class="string">'/mock/api/getApiInfo'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    response: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        title: <span class="string">'mock api test.'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/api/category'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    response: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            code: <span class="number">200</span>,</span><br><span class="line">            data: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">1</span>,</span><br><span class="line">                    title: <span class="string">'JAVA'</span>,</span><br><span class="line">                    href: <span class="string">'/category/java'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">2</span>,</span><br><span class="line">                    title: <span class="string">'SpringBoot'</span>,</span><br><span class="line">                    href: <span class="string">'/category/SpringBoot'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">3</span>,</span><br><span class="line">                    title: <span class="string">'MySql'</span>,</span><br><span class="line">                    href: <span class="string">'/category/MySql'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">4</span>,</span><br><span class="line">                    title: <span class="string">'随笔'</span>,</span><br><span class="line">                    href: <span class="string">'/category/live'</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在app.js中我们并没有用mock生产数据，只是实现了mock服务放到了mock文件目录通过viteMockServe发布出来，后面可以通过axios调用获取。<br>user.js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Mock生成模拟数据</span></span><br><span class="line"><span class="keyword">const</span> userdata = Mock.mock(&#123;</span><br><span class="line">  <span class="string">'list|10'</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'@cname'</span>,</span><br><span class="line">      <span class="string">'age|18-60'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'email'</span>: <span class="string">'@email'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/mock/api/getUserInfo'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    response: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        data: userdata</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在user.js中，我们通过Mock生成模拟的用户列表数据</p><h2 id="四、调用api接口请求mock数据"><a href="#四、调用api接口请求mock数据" class="headerlink" title="四、调用api接口请求mock数据"></a>四、调用api接口请求mock数据</h2><h3 id="方法一、直接使用axios-请求mock-数据"><a href="#方法一、直接使用axios-请求mock-数据" class="headerlink" title="方法一、直接使用axios 请求mock 数据"></a>方法一、直接使用axios 请求mock 数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br></pre></td></tr></table></figure><p>在方法中通过axios.get()方法直接获取请求数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> getData() &#123;</span><br><span class="line">         <span class="keyword">await</span> axios.get(<span class="string">'/mock/api/getApiInfo'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.msg = res.data.title</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="方法二、对axios进行封装统一请求mock数据"><a href="#方法二、对axios进行封装统一请求mock数据" class="headerlink" title="方法二、对axios进行封装统一请求mock数据"></a>方法二、对axios进行封装统一请求mock数据</h3><p>建立一个service.js对axios进行封装，让后通过service.js来统一请求mock数据，这样做的好处是在切到真实接口的时候可以更加灵活<br>service.js的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> api_rul = <span class="string">''</span>  <span class="comment">//mock 接口地址可以为空字符串，真实接口配置为真实的接口地址。</span></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: api_rul,</span><br><span class="line">    timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>通过一个统一的调用接口文件请求mock数据<br>如mockapi.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">'@/utils/service'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>  <span class="title">getCategory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service(&#123;</span><br><span class="line">        url: <span class="string">'/api/category'</span>,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        params: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>  <span class="title">getUserInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service(&#123;</span><br><span class="line">        url: <span class="string">'/mock/api/getUserInfo'</span>,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        params: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在methods中进行方法的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：通过封装后的get方法获取数据</span></span><br><span class="line">    getUserInfo()</span><br><span class="line">    &#123;</span><br><span class="line">      getUserInfo().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.userinfo = res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    getCategory()</span><br><span class="line">    &#123;</span><br><span class="line">      getCategory().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.categorys = res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在vue的组件中具体的调用和展示代码如下：<br>HelloWorld.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    人员列表</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">"(user) in userinfo.list"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">        &#123;&#123; user.id &#125;&#125; : &#123;&#123; user.name &#125;&#125;  &#123;&#123; user.age &#125;&#125;  &#123;&#123; user.email &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    目录</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">"(category) in categorys"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">        &#123;&#123; category.id &#125;&#125; : &#123;&#123; category.title &#125;&#125;  &#123;&#123; category.href &#125;&#125; </span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script &gt;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCategory,getUserInfo &#125; <span class="keyword">from</span> <span class="string">'../api/mockapi'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span><br><span class="line">      userinfo: &#123;&#125;,</span><br><span class="line">      categorys: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getData()</span><br><span class="line">    <span class="keyword">this</span>.getUserInfo()</span><br><span class="line">    <span class="keyword">this</span>.getCategory()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 方法一：直接axios请求调用获取mock数据</span></span><br><span class="line">    <span class="keyword">async</span> getData() &#123;</span><br><span class="line">         <span class="keyword">await</span> axios.get(<span class="string">'/mock/api/getApiInfo'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.msg = res.data.title</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 方法二：通过封装后的get方法获取数据</span></span><br><span class="line">    getUserInfo()</span><br><span class="line">    &#123;</span><br><span class="line">      getUserInfo().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.userinfo = res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    getCategory()</span><br><span class="line">    &#123;</span><br><span class="line">      getCategory().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.categorys = res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>整个工程的目录结构说明如下：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240824/2-mocktest%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt="mocktest工程目录"></p><h2 id="五、实际运行效果"><a href="#五、实际运行效果" class="headerlink" title="五、实际运行效果"></a>五、实际运行效果</h2><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240824/3-mock%E6%95%88%E6%9E%9C.png" alt="mock效果"><br>可以看到分别用两种方式获取mock数据的效果，其中人员列表中的数据是mock生成的模拟数。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在用Vue.js开发前端应用时通常要与后端服务进行交互，例如通过API接口获取数据，在后端服务接口还没有具备之前，可以通过mock(模拟)数据来进行开发。使用mock数据可以让前端开发人员独立于后端开发人员工作，加快开发速度。在没有真实数据的情况下，mock数据可以帮助开发
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>不忘初心，方得始终，码农实现自我提升的心法与工具</title>
    <link href="https://xiejava.gitee.io/posts/927ce8c5/"/>
    <id>https://xiejava.gitee.io/posts/927ce8c5/</id>
    <published>2024-08-20T01:06:38.000Z</published>
    <updated>2024-08-20T01:21:56.347Z</updated>
    
    <content type="html"><![CDATA[<p>在信息技术飞速发展的今天，越来越多的人进入到IT行业，也使得这个行业越来越卷。随着信息化普及进入尾声以及全球经济下行，IT行业也像传统的房地产行业一样哀鸿遍野，码农也像农民工一样转行的转行失业的失业。想要在这个行业里站住脚不被淘汰只能是不断的提升学习提升自己的能力，让自己成为不可替代才行。</p><p>作为码农，如是今还有份稳定的工作，应该来说是幸运的，但也是很焦虑的。一方面不知道自己所负责的业务还能撑多久，公司还能撑多久；一方面还得要思考一旦失业不知道自己的技术水平还能不能找到合适的工作。作为社会人，只有有了对抗风险的本钱后，才会有底气，有了底气后才会不至于那么的焦虑。而底气来自两个方面一方面是有足够的钱；另一方面是有足够的能力。如果有足够的钱，像文艺复兴时期的大咖们被人包养，吃喝不愁，那我们可以不用焦虑，惬意的写代码那一定是很开心的；如果能力足够强，其实也不用担心，换个地方施展自己的能力而已。而我们的现状是既要幸幸苦苦赚钱维持自己的生活又要不断的学习来提升自己的能力适应这个不断发展的行业。</p><p>如何在繁忙琐碎的编码工作与个人成长之间找到平衡，下面以我个人的经历来谈谈我的思考。对于码农来说，面临最大的两个问题是<strong>如何更好的利用时间</strong>和<strong>如何通过学习来提升自我</strong>的问题。</p><h2 id="一、如何更好的利用时间？"><a href="#一、如何更好的利用时间？" class="headerlink" title="一、如何更好的利用时间？"></a>一、如何更好的利用时间？</h2><p>在李笑来老师的《和时间做朋友》的书中讲到，其实时间是不可以管理的，每个人每天只有24小时，能够管理的是自己的精力，也就是把自己的关注力放到哪里。要学习，就应该把学习精力、注意力投入足够多的时间。对于我们来说最大的挑战来自手机，下班后很多同学报复性的休息放松，想起自己上班工作了，休息的时候一定得要彻底的放松，拿着手机刷抖音、打游戏、聊天不知不觉就到了深夜。为了避免长时间的玩手机，我的做法是到了一定时间把手机所有的应用都关闭，给自己一段没有手机打挠的时间，很多手机都提供的“禅定模式”，开启“禅定模式”后手机上除了接打电话，其他的应用都暂时不能用，除非退出“禅定模式”，通过这种方式让自己的注意力从手机上移开，放到看书和学习上来。在这里我常用的专注力APP是”Forest 专注森林“，它可以设置一段专注力时间，比如60分钟，如果60分钟你没有动手机就成功的种下了一颗健康的树，如果中途心痒痒玩了手机这个树就会蔫掉。可以按时间周期统计你的专注的时间。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240817/Forest%E4%B8%93%E6%B3%A8%E6%B7%B1%E6%9E%97.jpg" alt="Forest 专注森林"></p><p>当然专注力是一方面，其实更重要的是我们应该有自控力的意识，有自我提升学习的意识。有了意识以后才会有行动。</p><h2 id="二、如何通过学习来提升自我？"><a href="#二、如何通过学习来提升自我？" class="headerlink" title="二、如何通过学习来提升自我？"></a>二、如何通过学习来提升自我？</h2><p>焦虑是因为面对残酷的社会竞争压力以及对自身能力的不自信。所以很多东西都想学，机器学习、网络安全、英语、写作等等。正因为焦虑，所以面临的困惑是什么都想学，什么都想学的结果是什么都没有学会。相信大多数人都有这样的经历，心想着要不断的提升自己，桌上摆了很多书，今天看几页这本书，明天翻几页那本书，看上去天天在看书，实际上一本书都没有看进去。看英语的时候在想应该多花点时间看看专业书，看专业书的时候在想英语也很重要，要不看会英语。实际就是有限的时间精力和无限的需要学习的知识之间的矛盾。尤其是专业领域，看了很多书，不能学以致用，看了就忘，感觉就是学了个寂寞。</p><p>早几年我也有相同的困惑，认识到学习，目标非常重要，没有明确目标的学习到头来都是浪费时间。于是写了一篇《<a href="http://xiejava.ishareread.com/posts/e6daf5ca/" target="_blank" rel="noopener">你有了一个目标，于是你有了一堆技能，而不是反过来</a>》。其实道理大家都懂，要有目标，不忘初心，方得始终。但是对于个人来说目标其实并不好确定，大部分人来说其实也没有什么明确的目标，我的经验是在没有明确的目标的时候就把考证当做目标，以考促学。见《<a href="http://xiejava.ishareread.com/posts/9fed4f95/" target="_blank" rel="noopener">工作这么多年了，我为什么还在考证</a>》。后来我意识到自我提升最核心的是要构建自己知识体系，我的目标是<strong>构建了自己的知识体系</strong>，能够利用自己的知识体系具备“成事”的能力。如何建立个人知识体系，借用网上的一张图。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240817/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.png" alt="个人知识体系"></p><p>有了构建自己知识体系的大目标后，我把自己近几年需要巩固提升的方面做了一个学习地图，有了学习地图就像航海的地图一样，避免东一下西一下迷失方向。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240817/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E5%9C%B0%E5%9B%BE.png" alt="学习地图"></p><p>刘未鹏在他的《暗时间》中有个观点让我感触特别的深刻，意思是你所懂得的多少并不是在于你看了多少书而是取决于你思考有多深。“教是最好的学”、“书写是更好的思考”。为了践行“<strong>问题-&gt;输入-&gt;内化-&gt;输出</strong>”，笃信写是为了更好的思考，坚持写作，力争更好的思考。我开启了自己的博客持续在CSDN和自己的博客上进行写作输出，将自己碰到的问题、经验、思考写出来，即帮助了大家又促进了自己，希望能和大家一起成长。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在信息技术飞速发展的今天，越来越多的人进入到IT行业，也使得这个行业越来越卷。随着信息化普及进入尾声以及全球经济下行，IT行业也像传统的房地产行业一样哀鸿遍野，码农也像农民工一样转行的转行失业的失业。想要在这个行业里站住脚不被淘汰只能是不断的提升学习提升自己的能力，让自己成
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>node20+版本下hexo部署报错失败的解决办法</title>
    <link href="https://xiejava.gitee.io/posts/442ea121/"/>
    <id>https://xiejava.gitee.io/posts/442ea121/</id>
    <published>2024-08-15T06:43:55.000Z</published>
    <updated>2024-08-17T12:47:38.096Z</updated>
    
    <content type="html"><![CDATA[<p>最近升级了node.js的版本，升到了最新的稳定版本v20.16.0，结果发现在该版本下hexo部署报错失败。本文记录了node20+版本下hexo部署报错失败的解决办法。</p><h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><p>执行hexo的deploy部署命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>具体报错信息如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">TypeError: mode must be int32 or null/undefined</span></span><br><span class="line"><span class="string">    at copyFile (node:fs:3020:11)</span></span><br><span class="line"><span class="string">    at tryCatcher (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\util.js:16:23)</span></span><br><span class="line"><span class="string">    at ret (eval at makeNodePromisifiedEval (C:\Users\xiejava\AppData\Roaming\npm\node_modules\hexo-cli\node_modules\bluebird\js\release\promisify.js:184:12), &lt;anonymous&gt;:13:39)</span></span><br><span class="line"><span class="string">    at D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\hexo-fs\lib\fs.js:144:39</span></span><br><span class="line"><span class="string">    at tryCatcher (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\util.js:16:23)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseFromHandler (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:547:31)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:604:18)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise0 (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:649:10)</span></span><br><span class="line"><span class="string">    at Promise._settlePromises (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:729:18)</span></span><br><span class="line"><span class="string">    at Promise._fulfill (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:673:18)</span></span><br><span class="line"><span class="string">    at Promise._resolveCallback (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:466:57)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseFromHandler (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:559:17)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:604:18)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise0 (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:649:10)</span></span><br><span class="line"><span class="string">    at Promise._settlePromises (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:729:18)</span></span><br><span class="line"><span class="string">    at Promise._fulfill (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:673:18)</span></span><br><span class="line"><span class="string">    at Promise._resolveCallback (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:466:57)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseFromHandler (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:559:17)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:604:18)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise0 (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:649:10)</span></span><br><span class="line"><span class="string">    at Promise._settlePromises (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:729:18)</span></span><br><span class="line"><span class="string">    at Promise._fulfill (D:\CloudStation\personal\xiejavablog\myhexo\myblog\node_modules\bluebird\js\release\promise.js:673:18)</span></span><br></pre></td></tr></table></figure><p>遇到<code>FATAL Something&#39;s wrong TypeError: mode must be int32 or null/undefined</code>这类错误通常是在使用Hexo生成静态文件时出现的。这个问题通常与Hexo的一些插件不兼容或配置不当有关。</p><h2 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h2><p>一般来说因为node.js和hexo存在版本适配的关系，所以当可能是一个版本过高一个版本过低导致的出现问题。<br>解决这个问题可以降低node.js的版本，可以将hexo更新至适配的高版本。这里介绍如何将hexo更新至适配的高版本。</p><h3 id="1、查看哪些包需要更新"><a href="#1、查看哪些包需要更新" class="headerlink" title="1、查看哪些包需要更新"></a>1、查看哪些包需要更新</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240815/1-%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9B%E5%8C%85%E8%A6%81%E6%9B%B4%E6%96%B0.png" alt="在这里插入图片描述"></p><p>通过npm outdated 列出了所有需要升级的组件包，这里还给出了npm也需要升级的信息，需要将npm从10.8.1升级到10.8.2，具体的升级命令是 npm install -g <a href="mailto:npm@10.8.2">npm@10.8.2</a><br>执行 <code>npm install -g npm@10.8.2</code> 完成npm的升级</p><h3 id="2、升级更新需要升级的包"><a href="#2、升级更新需要升级的包" class="headerlink" title="2、升级更新需要升级的包"></a>2、升级更新需要升级的包</h3><p>升级hexo和hexo-cli</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo<span class="literal">-cli</span> hexo -<span class="literal">-latest</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240815/2-%E6%9B%B4%E6%96%B0hexo%E5%8C%85.png" alt="在这里插入图片描述"></p><p>重新执行npm outdated<br>可以看到hexo 的版本从4.2.0升级到了4.2.1<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240815/3-%E6%9F%A5%E7%9C%8Bhexo%E6%98%AF%E5%90%A6%E6%9B%B4%E6%96%B0.png" alt="在这里插入图片描述"></p><p>重新执行<code>hexo d</code>，发现不报错了，并且可以成功部署。<br>这里还有hexo-abbrlink和hexo-generator-search 不是适配的版本，虽然不影响hexo部署，但也可以用同样的方法将其升为最新适配的版本。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo<span class="literal">-abbrlink</span> hexo<span class="literal">-generator</span><span class="literal">-search</span> -<span class="literal">-latest</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240815/4-%E6%9B%B4%E6%96%B0%E5%85%B6%E4%BB%96%E5%8C%85.png" alt="在这里插入图片描述"></p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近升级了node.js的版本，升到了最新的稳定版本v20.16.0，结果发现在该版本下hexo部署报错失败。本文记录了node20+版本下hexo部署报错失败的解决办法。&lt;/p&gt;
&lt;h2 id=&quot;一、报错信息&quot;&gt;&lt;a href=&quot;#一、报错信息&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="https://xiejava.gitee.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>django+markdown2+pygments实现markdown解析及代码高亮</title>
    <link href="https://xiejava.gitee.io/posts/af83983b/"/>
    <id>https://xiejava.gitee.io/posts/af83983b/</id>
    <published>2024-08-14T10:38:22.000Z</published>
    <updated>2024-08-17T12:47:38.077Z</updated>
    
    <content type="html"><![CDATA[<p>随着markdown的流行，web应用系统常常会要碰到有使用markdown编辑器进行富文本编辑，然后在前台web页面进行显示。常见的博客系统当然也需要支持markdown的编辑与显示。本文就通过一个真实的博客系统来说明django+markdown2+pygments实现markdown解析及代码高亮。</p><h2 id="一、后台管理支持markdown编辑"><a href="#一、后台管理支持markdown编辑" class="headerlink" title="一、后台管理支持markdown编辑"></a>一、后台管理支持markdown编辑</h2><p>django应用的后台管理支持markdown可以用django-mdeditor，它是一个Django应用，它集成了markdown-editor，允许你在Django项目中使用富文本编辑器编写Markdown格式的内容。这个插件通常用于博客、论坛或任何需要用户输入Markdown文本的场景。</p><h3 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><p>首先，通过pip安装django-mdeditor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-mdeditor</span><br></pre></td></tr></table></figure><h3 id="2、添加应用到INSTALLED-APPS"><a href="#2、添加应用到INSTALLED-APPS" class="headerlink" title="2、添加应用到INSTALLED_APPS"></a>2、添加应用到INSTALLED_APPS</h3><p>在settings.py文件中，将django_mdeditor添加到INSTALLED_APPS列表中，参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'django_filters'</span>,  <span class="comment"># 注册条件查询</span></span><br><span class="line">    <span class="string">'mdeditor'</span>,  <span class="comment"># 注册markdown的应用</span></span><br><span class="line">    <span class="string">'drf_yasg2'</span>,  <span class="comment"># 接口文档</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3、设置MEDIA-URL和MEDIA-ROOT"><a href="#3、设置MEDIA-URL和MEDIA-ROOT" class="headerlink" title="3、设置MEDIA_URL和MEDIA_ROOT"></a>3、设置MEDIA_URL和MEDIA_ROOT</h3><p>django-mdeditor使用文件上传功能，因此需要在settings.py中正确设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL和MEDIA_ROOT：</span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'uploads'</span>)</span><br></pre></td></tr></table></figure><h3 id="4、在模型中使用MdEditorField"><a href="#4、在模型中使用MdEditorField" class="headerlink" title="4、在模型中使用MdEditorField"></a>4、在模型中使用MdEditorField</h3><p>在Django模型中，使用MdEditorField替换标准的TextField：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''博客文章'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'文章标题'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(BlogCategory, blank=<span class="literal">True</span>,null=<span class="literal">True</span>, verbose_name=<span class="string">'文章分类'</span>, on_delete=models.DO_NOTHING)</span><br><span class="line">    isTop = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'是否置顶'</span>)</span><br><span class="line">    isHot = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'是否热门'</span>)</span><br><span class="line">    isShow = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'是否显示'</span>)</span><br><span class="line">    summary = models.TextField(max_length=<span class="number">500</span>, verbose_name=<span class="string">'内容摘要'</span>, default=<span class="string">''</span>)</span><br><span class="line">    content = MDTextField(verbose_name=<span class="string">'内容'</span>)</span><br><span class="line">    viewsCount = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"查看数"</span>)</span><br><span class="line">    commentsCount = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"评论数"</span>)</span><br><span class="line">    tags = models.ManyToManyField(to=Tag, related_name=<span class="string">"tag_post"</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">"标签"</span>)</span><br><span class="line">    blogSource = models.CharField(max_length=<span class="number">200</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, default=<span class="string">''</span>,verbose_name=<span class="string">'文章来源'</span>)</span><br><span class="line">    pubTime = models.DateTimeField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'发布日期'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tag_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">','</span>.join([i.tag <span class="keyword">for</span> i <span class="keyword">in</span> self.tags.all()])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'博客文章'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'博客文章'</span></span><br></pre></td></tr></table></figure><p>在博客文章的模型中，文章内容需要支持markdown,所以<code>content = MDTextField(verbose_name=&#39;内容&#39;)</code></p><h3 id="5、查看效果"><a href="#5、查看效果" class="headerlink" title="5、查看效果"></a>5、查看效果</h3><p>用django自带的后台管理admin就可以看到效果了</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240814/1-django%E7%9A%84admin%E7%9A%84markdown%E7%BC%96%E8%BE%91%E6%95%88%E6%9E%9C.png" alt="django自带的后台管理admin"></p><h2 id="二、前台支持markdown解析及代码高亮"><a href="#二、前台支持markdown解析及代码高亮" class="headerlink" title="二、前台支持markdown解析及代码高亮"></a>二、前台支持markdown解析及代码高亮</h2><p>在后台支持markdown编辑后，前台页面的博客文章页面也得要支持对markdown得解析。</p><h3 id="1、安装依赖-1"><a href="#1、安装依赖-1" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><p>在Django项目中使用markdown2库实现代码高亮，安装markdown2和pygments这两个Python库。markdown2用于解析Markdown文本，而pygments用于代码高亮。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown2 pygments</span><br></pre></td></tr></table></figure><h3 id="2、配置Markdown解析器"><a href="#2、配置Markdown解析器" class="headerlink" title="2、配置Markdown解析器"></a>2、配置Markdown解析器</h3><p>在Django视图中，需要导入markdown2模块，并使用它来解析Markdown文本。同时，要启用fenced-code-blocks扩展，以便markdown2能正确识别代码块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> markdown2</span><br></pre></td></tr></table></figure><p>markdown2的扩展说明见 <a href="https://github.com/trentm/python-markdown2/wiki/Extras" target="_blank" rel="noopener">https://github.com/trentm/python-markdown2/wiki/Extras</a><br>在这里加入了 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extras=[<span class="string">"code-color"</span>, <span class="string">"fenced-code-blocks"</span>, <span class="string">"cuddled-lists"</span>, <span class="string">"tables"</span>,</span><br><span class="line">  <span class="string">"with-toc"</span>, <span class="string">"code-friendly"</span>]</span><br></pre></td></tr></table></figure><p>视图实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 详情页视图实现.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_detail</span><span class="params">(request, id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post_obj = BlogPost.objects.get(id=id)</span><br><span class="line">        html_content = markdown2.markdown(post_obj.content,</span><br><span class="line">                                          extras=[<span class="string">"code-color"</span>, <span class="string">"fenced-code-blocks"</span>, <span class="string">"cuddled-lists"</span>, <span class="string">"tables"</span>,</span><br><span class="line">                                                  <span class="string">"with-toc"</span>, <span class="string">"code-friendly"</span>])</span><br><span class="line">        html_content = html_content.replace(<span class="string">'&lt;table&gt;'</span>, <span class="string">'&lt;table class="table table-bordered"&gt;'</span>)</span><br><span class="line">        html_content = html_content.replace(<span class="string">'&lt;img src='</span>, <span class="string">'&lt;img style="max-width:100%;height:auto;" src='</span>)</span><br><span class="line">        context = &#123;<span class="string">"post_obj"</span>: post_obj,</span><br><span class="line">                   <span class="string">"html_content"</span>: html_content,</span><br><span class="line">                   <span class="string">"hot_posts"</span>: get_hot_posts(),</span><br><span class="line">                   <span class="string">"tags"</span>: get_all_tags(),</span><br><span class="line">                   <span class="string">"post_grouped_by_year"</span>: get_post_groped_by_year(),</span><br><span class="line">                   <span class="string">'categories'</span>: get_categories(),</span><br><span class="line">                   <span class="string">'social_infos'</span>: get_socialinfo()&#125;</span><br><span class="line">    <span class="keyword">except</span> BlogPost.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Post does not exist"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"blog/post.html"</span>, context)</span><br></pre></td></tr></table></figure><h3 id="3、在模板中显示HTML"><a href="#3、在模板中显示HTML" class="headerlink" title="3、在模板中显示HTML"></a>3、在模板中显示HTML</h3><p>在Django模板中，直接输出转换后的HTML内容。使用|safe过滤器告诉模板引擎不要转义HTML代码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="lyear-arc-detail"&gt;</span><br><span class="line">   &#123;&#123; html_content|safe &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="4、导出高亮的css文件并引入css"><a href="#4、导出高亮的css文件并引入css" class="headerlink" title="4、导出高亮的css文件并引入css"></a>4、导出高亮的css文件并引入css</h3><p>有了上面的步骤，只是可以解析了markdown成html并显示，最终代码的高亮是通过css 来控制显示的，执行以下命令将高亮的css文件导出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygmentize -S default -f html -a .codehilite &gt; markdown_highlighy.css</span><br></pre></td></tr></table></figure><p>pyments的官方文档 <a href="https://pygments.org/" target="_blank" rel="noopener">https://pygments.org/</a> 查看一共有多少种风格，可以参考网址 <a href="https://pygments.org/docs/styles/#getting-a-list-of-available-styles" target="_blank" rel="noopener">https://pygments.org/docs/styles/#getting-a-list-of-available-styles</a><br>将生成的markdown_highlighy.css文件拷入到static/blog/css下<br>在模板页面中引入css </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'blog/css/markdown_highlighy.css' %&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、查看效果-1"><a href="#5、查看效果-1" class="headerlink" title="5、查看效果"></a>5、查看效果</h3><p>可以看到markdown可以正常解析，代码也可以高亮显示了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240814/2-django%E5%8D%9A%E5%AE%A2markdown%E8%A7%A3%E6%9E%90%E4%B8%8E%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA.png" alt="在这里插入图片描述"></p><h2 id="三、全套代码"><a href="#三、全套代码" class="headerlink" title="三、全套代码"></a>三、全套代码</h2><p><a href="https://gitee.com/xiejava/ishareblog" target="_blank" rel="noopener">https://gitee.com/xiejava/ishareblog</a></p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着markdown的流行，web应用系统常常会要碰到有使用markdown编辑器进行富文本编辑，然后在前台web页面进行显示。常见的博客系统当然也需要支持markdown的编辑与显示。本文就通过一个真实的博客系统来说明django+markdown2+pygments实现
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>一个人活成一个团队：python的django项目devops实战</title>
    <link href="https://xiejava.gitee.io/posts/fd8c1dd4/"/>
    <id>https://xiejava.gitee.io/posts/fd8c1dd4/</id>
    <published>2024-08-11T08:54:24.000Z</published>
    <updated>2024-08-17T12:47:38.059Z</updated>
    
    <content type="html"><![CDATA[<p>对于开发团队来说提高软件交付的速度和质量是一个永恒的话题，对于个人开发者来说同样如此。作为一个码农，一定会有几个自己私有的小项目，从需求管理到开发到测试到部署运维都得要自己来，将自己一个人活成一个团队。</p><p>DevOps（Development和Operations的组合），旨在通过自动化、协作和共享责任来提高软件开发和运维的效率、质量和安全性。作为一个人的团队，也可通过devops实践来提高对自己项目的效率和质量，使产品持续开发、持续集成、持续测试、持续部署、持续监控，非常频繁地发布新版本。本文就以一个实际的python的django项目来运用阿里的云效devops平台来进行实战。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/1-devops.png" alt="在这里插入图片描述"><br>DevOps平台工具有很多，最常见的就是大名顶顶的Jenkins，作为个人开发者要准备相应的硬件资源，还要要自己维护一套Jenkins有点麻烦。这里直接就选择成熟的阿里云效devops <a href="https://devops.aliyun.com/" target="_blank" rel="noopener">https://devops.aliyun.com/</a> ，这套平台基础版是免费的，对于个人开发者来说已经够用了。</p><h2 id="一、需求规划"><a href="#一、需求规划" class="headerlink" title="一、需求规划"></a>一、需求规划</h2><p>个人项目虽小，但是也得要有相应的规划，至少得有个需求清单来进行需求的规划和跟踪，哪些需求已经完成了，哪些还需要进行开发做到自己心中有数。<br>可以在云效的项目协作中创建一个项目进行管理。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/2-%E4%BA%91%E6%95%88%E5%B7%A5%E4%BD%9C%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%8D%8F%E4%BD%9C.png" alt="在这里插入图片描述"></p><p>在这里我创建了一个xiejava的博客项目<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/3-%E4%BA%91%E6%95%88%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%A7%88.png" alt="在这里插入图片描述"></p><p>在这里我们就可以将自己规划的需求录入进来做好自己的需求跟踪清单<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/4-%E4%BA%91%E6%95%88%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82%E5%88%97%E8%A1%A8.png" alt="在这里插入图片描述"></p><p>可以规划自己的版本，将需求跟踪清单里的需求纳入到版本迭代计划。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/5-%E4%BA%91%E6%95%88%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%85%B3%E8%81%94.png" alt="在这里插入图片描述"></p><p>在迭代计划中可以看到这个迭代要完成的需求清单。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/6-%E4%BA%91%E6%95%88%E9%A1%B9%E7%9B%AE%E8%BF%AD%E4%BB%A3%E8%AE%A1%E5%88%92.png" alt="在这里插入图片描述"></p><h2 id="二、代码管理"><a href="#二、代码管理" class="headerlink" title="二、代码管理"></a>二、代码管理</h2><p>即使是最简单的项目，建议还是通过代码仓库进行代码的版本管理，我的代码是放到码云<a href="https://gitee.com/xiejava/ishareblog" target="_blank" rel="noopener">https://gitee.com/xiejava/ishareblog</a>  进行托管的，也可以托管到云效自己的代码管理仓库。<br>有了代码仓库，可以通过在云效构建流水线来进行自动构建、自动测试、自动部署了。</p><h2 id="三、创建流水线"><a href="#三、创建流水线" class="headerlink" title="三、创建流水线"></a>三、创建流水线</h2><p>在云效中创建ishareblog的自动发布流水线，整个流水线包括获取代码、测试、构建、部署。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/7-%E4%BA%91%E6%95%88%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%89%A7%E8%A1%8C%E6%83%85%E5%86%B5.png" alt="在这里插入图片描述"></p><h3 id="1、配置流水线源"><a href="#1、配置流水线源" class="headerlink" title="1、配置流水线源"></a>1、配置流水线源</h3><p>流水线源可以配置云效自己的代码库，也可以配置其他的代码库，如我里是配置的码云代码库。<br>可以开启代码源触发，开启后一旦代码库有提交操作，就会自动触发流水线工作。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/8-%E4%BA%91%E6%95%88%E4%BB%8E%E7%A0%81%E4%BA%91%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%A0%81.png" alt="在这里插入图片描述"></p><blockquote><p>需要说明的是，如果是外部的代码仓库，需要在外部的代码仓库中添加Webhook触发设置</p></blockquote><p>如我的是码云的仓库，就要在码云的仓库中添加Webhook的配置<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/9-%E4%BA%91%E6%95%88webhooks%E7%AE%A1%E7%90%86.png" alt="在这里插入图片描述"></p><h2 id="四、自动测试"><a href="#四、自动测试" class="headerlink" title="四、自动测试"></a>四、自动测试</h2><p>在测试环节，配置了python代码扫描和Python单元测试。<br>python代码扫描用的是云效默认的配置<br>比较麻烦的是Python单元测试，Python单元测试需要在Python项目中写测试用例，还要配置测试命令。<br>在Python项目中写测试用例见《<a href="https://blog.csdn.net/fullbug/article/details/140893466" target="_blank" rel="noopener">django集成pytest进行自动化单元测试实战</a>》。<br>配置测试命令就是在测试服务其中进行发布测试的所有shell命令<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/10-%E4%BA%91%E6%95%88%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.png" alt="在这里插入图片描述"></p><p>配置测试命令就是在测试服务其中进行发布测试的所有shell命令<br>作为一个django的项目测试命令参考如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pytest default command</span></span><br><span class="line"><span class="comment"># 安装mysql客户端</span></span><br><span class="line">sudo apt<span class="literal">-get</span> update</span><br><span class="line">sudo apt<span class="literal">-get</span> install <span class="literal">-y</span> libmysqlclient<span class="literal">-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装新版本的SQLite3</span></span><br><span class="line"><span class="comment"># wget https://www.sqlite.org/2024/sqlite-autoconf-3460000.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo pip install <span class="literal">-r</span> requirements.txt <span class="literal">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">sudo pip install pysqlite3 <span class="literal">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">sudo pip install pysqlite3<span class="literal">-binary</span> <span class="literal">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换Django的sqlite3的驱动文件</span></span><br><span class="line">sudo cp <span class="operator">-f</span> /root/workspace/ishareblog_J18t/change_set/base.py  /usr/local/lib/python3.<span class="number">8</span>/site<span class="literal">-packages</span>/django/db/backends/sqlite3/base.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">sudo python manage.py makemigrations -<span class="literal">-settings</span>=ishareblog.settings_test</span><br><span class="line">sudo python manage.py migrate -<span class="literal">-settings</span>=ishareblog.settings_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动django服务</span></span><br><span class="line">sudo nohup python manage.py runserver <span class="number">8000</span> -<span class="literal">-settings</span>=ishareblog.settings_test &amp;</span><br><span class="line"></span><br><span class="line">PORT=<span class="number">8000</span>  <span class="comment"># 替换为您想要检查的端口号</span></span><br><span class="line">NEXT_COMMAND=<span class="string">"sudo pytest --html=report/index.html"</span>  <span class="comment"># 通过pytest进行单元测试</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">until</span> nc <span class="literal">-z</span> localhost <span class="variable">$PORT</span>; <span class="keyword">do</span></span><br><span class="line">    echo <span class="string">"Port <span class="variable">$PORT</span> is not ready - waiting..."</span></span><br><span class="line">    curl http://localhost:<span class="number">8000</span></span><br><span class="line">    sleep <span class="number">1</span></span><br><span class="line">done</span><br><span class="line"> </span><br><span class="line">echo <span class="string">"Port <span class="variable">$PORT</span> is ready"</span></span><br><span class="line">eval <span class="string">"<span class="variable">$NEXT_COMMAND</span>"</span></span><br><span class="line"></span><br><span class="line">ps aux | grep python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过pytest进行单元测试</span></span><br><span class="line"><span class="comment">#sudo pytest --html=report/index.html</span></span><br><span class="line"></span><br><span class="line">pkill <span class="operator">-f</span> manage.py</span><br><span class="line"></span><br><span class="line">ps aux | grep python</span><br></pre></td></tr></table></figure><p>因为在单元测试中还做了接口测试，这里会要启动djang服务，进行接口测试，测试完成后还要停止服务。<br>可以在流水线执行完后查看扫描报告和测试报告<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/11-%E4%BA%91%E6%95%88%E6%9F%A5%E7%9C%8B%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.png" alt="在这里插入图片描述"></p><p>扫描报告<br>代码扫描报告，报出来的大部分是格式规范的问题。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/12-%E4%BA%91%E6%95%88%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F%E6%8A%A5%E5%91%8A.png" alt="在这里插入图片描述"></p><p>测试报告<br>自动化测试报告是通过pytest测试完成形成的报告。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/13-%E4%BA%91%E6%95%88%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.png" alt="在这里插入图片描述"></p><h2 id="五、自动构建"><a href="#五、自动构建" class="headerlink" title="五、自动构建"></a>五、自动构建</h2><p>自动构建将会将构建好的制品打包上传至构建服务器上。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/14-%E4%BA%91%E6%95%88%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA.png" alt="在这里插入图片描述"></p><h2 id="六、自动部署"><a href="#六、自动部署" class="headerlink" title="六、自动部署"></a>六、自动部署</h2><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/15-%E4%BA%91%E6%95%88%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2.png" alt="在这里插入图片描述"></p><p>也可以配置部署后的通知邮件，比如部署成功或失败后发邮件通知。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/16-%E4%BA%91%E6%95%88%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%90%8E%E5%8F%91%E9%80%9A%E7%9F%A5%E9%82%AE%E4%BB%B6.png" alt="在这里插入图片描述"></p><p>最后通过统计报表可以看到流水线近段期间的执行情况</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240811/17-%E4%BA%91%E6%95%88%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%BB%9F%E8%AE%A1%E6%8A%A5%E8%A1%A8.png" alt="在这里插入图片描述"></p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>DevOps通过自动化的流程，使得构建、测试、发布软件能够更加地快捷、频繁和可靠。本文通过一个python的django个人博客应用进行了DevOps的实战，通过DevOps拉通开发和运维，通过应用云效的DevOps平台实现自动化“软件交付”的流程，使得构建、测试、发布软件能够更加地快捷、频繁和可靠，提交研发交付效率。作为个人项目也是可以应用devops提高效率。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于开发团队来说提高软件交付的速度和质量是一个永恒的话题，对于个人开发者来说同样如此。作为一个码农，一定会有几个自己私有的小项目，从需求管理到开发到测试到部署运维都得要自己来，将自己一个人活成一个团队。&lt;/p&gt;
&lt;p&gt;DevOps（Development和Operation
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="https://xiejava.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>django快速实现个人博客(附源码)</title>
    <link href="https://xiejava.gitee.io/posts/7f9a3a8d/"/>
    <id>https://xiejava.gitee.io/posts/7f9a3a8d/</id>
    <published>2024-08-10T06:18:04.000Z</published>
    <updated>2024-08-17T12:47:38.037Z</updated>
    
    <content type="html"><![CDATA[<p>Django作为一款成熟的Python Web开发框架提供了丰富的内置功能，如ORM（对象关系映射）、Admin管理界面、URL分发、模板系统、表单处理等，使得开发者能够快速搭建Web应用，大幅提高了开发效率。以前写过一篇博文《<a href="https://xiejava.blog.csdn.net/article/details/125939504" target="_blank" rel="noopener">Django+Vue快速实现博客网站</a>》介绍了通过Djang+Vue快速实现博客网站，django+vue作为个人博客来说稍显复杂，部署起来也比较麻烦，Vue的单页面架构也不利于SEO，更简单的解决方案其实还是用django的模板系统快速构建web应用，对于个人博客来说部署和运维更加简单也利于SEO。下面介绍如何快速的通过django模板系统快速实现个人博客。</p><h2 id="一、工程目录组织结构"><a href="#一、工程目录组织结构" class="headerlink" title="一、工程目录组织结构"></a>一、工程目录组织结构</h2><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240810/1-django%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B7%A5%E7%A8%8B%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84.png" alt="在这里插入图片描述"></p><h2 id="二、模型及管理实现"><a href="#二、模型及管理实现" class="headerlink" title="二、模型及管理实现"></a>二、模型及管理实现</h2><p>模型及管理端的实现沿用《<a href="https://xiejava.blog.csdn.net/article/details/125939504" target="_blank" rel="noopener">Django+Vue快速实现博客网站</a>》文章中的实现，用Django搭建很快很简单。<br>模型很简单，根据博客要显示的内容包括有‘文章分类’、‘文章标签’、‘博客文章’、‘站点信息’、‘社交信息’、‘聚焦’，模型定义分别如下： 这里要说明的是因为博客文章内容准备用markdown编写，所以引入了<code>mdeditor from mdeditor.fields import MDTextField</code> 内容字段<code>content=MDTextField(verbose_name=&#39;内容&#39;)</code><br>模型代码示例如下：</p><h3 id="1、模型"><a href="#1、模型" class="headerlink" title="1、模型"></a>1、模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> common.basemodel <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> mdeditor.fields <span class="keyword">import</span> MDTextField</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="string">'''文章分类'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategory</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>,verbose_name=<span class="string">'分类名称'</span>,default=<span class="string">''</span>)</span><br><span class="line">    href = models.CharField(max_length=<span class="number">100</span>,verbose_name=<span class="string">'分类路径'</span>,default=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'文章分类'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'文章分类'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''文章标签'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    tag=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标签'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tag</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'标签'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'标签'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''博客文章'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'文章标题'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(BlogCategory, blank=<span class="literal">True</span>,null=<span class="literal">True</span>, verbose_name=<span class="string">'文章分类'</span>, on_delete=models.DO_NOTHING)</span><br><span class="line">    isTop = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'是否置顶'</span>)</span><br><span class="line">    isHot = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'是否热门'</span>)</span><br><span class="line">    isShow = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'是否显示'</span>)</span><br><span class="line">    summary = models.TextField(max_length=<span class="number">500</span>, verbose_name=<span class="string">'内容摘要'</span>, default=<span class="string">''</span>)</span><br><span class="line">    content = MDTextField(verbose_name=<span class="string">'内容'</span>)</span><br><span class="line">    viewsCount = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"查看数"</span>)</span><br><span class="line">    commentsCount = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"评论数"</span>)</span><br><span class="line">    tags = models.ManyToManyField(to=Tag, related_name=<span class="string">"tag_post"</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">"标签"</span>)</span><br><span class="line">    blogSource = models.CharField(max_length=<span class="number">200</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, default=<span class="string">''</span>,verbose_name=<span class="string">'文章来源'</span>)</span><br><span class="line">    pubTime = models.DateTimeField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'发布日期'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tag_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">','</span>.join([i.tag <span class="keyword">for</span> i <span class="keyword">in</span> self.tags.all()])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'博客文章'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'博客文章'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''站点信息'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'站点名称'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    avatar = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点图标'</span>)</span><br><span class="line">    slogan = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点标语'</span>)</span><br><span class="line">    domain = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点域名'</span>)</span><br><span class="line">    notice = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点备注'</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'站点信息'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'站点信息'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''社交信息'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Social</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    icon = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'图标'</span>)</span><br><span class="line">    color = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'颜色'</span>)</span><br><span class="line">    href = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'社交信息'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'社交信息'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''聚焦'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Focus</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    img = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'聚焦'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'聚焦'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''友链'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    siteName = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'友链站点名称'</span>)</span><br><span class="line">    path = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'地址路径'</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.siteName</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'友链'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'友链'</span></span><br></pre></td></tr></table></figure><h3 id="2、admin管理"><a href="#2、admin管理" class="headerlink" title="2、admin管理"></a>2、admin管理</h3><p>实际上只要把模型注册到admin就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="meta">@admin.register(BlogCategory)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategoryAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    admin.site.site_title=<span class="string">"ishareblog后台"</span></span><br><span class="line">    admin.site.site_header=<span class="string">"ishareblog后台"</span></span><br><span class="line">    admin.site.index_title=<span class="string">"ishareblog管理"</span></span><br><span class="line"></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(BlogPost)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'category'</span>,<span class="string">'isTop'</span>,<span class="string">'isHot'</span>]</span><br><span class="line">    search_fields = (<span class="string">'title'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Site)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>,<span class="string">'slogan'</span>,<span class="string">'domain'</span>,<span class="string">'desc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Social)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Focus)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoucusAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'img'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Friend)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoucusAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'siteName'</span>,<span class="string">'path'</span>,<span class="string">'desc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Tag)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>,<span class="string">'tag'</span>]</span><br></pre></td></tr></table></figure><h2 id="三、博客展现实现"><a href="#三、博客展现实现" class="headerlink" title="三、博客展现实现"></a>三、博客展现实现</h2><p>博客前端展现用django的模板技术实现。在网上找了一个基于Bootstrap v4.3.1的小清新风格HTML博客模板，<a href="https://gitee.com/yinqi/Light-Year-Blog" target="_blank" rel="noopener">https://gitee.com/yinqi/Light-Year-Blog</a>  这个博客模只有三个页面，首页，详细页和About页面，样式和js都不多，比较简单。将html模板放入到templates的blog目录，为了便于维护将一些公共部分抽到了base.html，index.html和post.html 通过<code>{ % extends &#39;blog/base.html&#39; % }</code>进行应用</p><h3 id="1、视图实现"><a href="#1、视图实现" class="headerlink" title="1、视图实现"></a>1、视图实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, Http404</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost, Tag, BlogCategory</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="keyword">from</span> django.db.models.functions <span class="keyword">import</span> TruncYear</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> markdown2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页/列表页视图实现.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    category_id = request.GET.get(<span class="string">'category'</span>)</span><br><span class="line">    tag_id = int(request.GET.get(<span class="string">'tag'</span>,<span class="number">0</span>))</span><br><span class="line">    year = request.GET.get(<span class="string">'year'</span>)</span><br><span class="line">    search = request.GET.get(<span class="string">'search'</span>)</span><br><span class="line">    <span class="keyword">if</span> category_id:</span><br><span class="line">        blogpost_list = BlogPost.objects.filter(category=category_id, isShow=<span class="literal">True</span>).order_by(<span class="string">'-isTop'</span>, <span class="string">'-pubTime'</span>)</span><br><span class="line">    <span class="keyword">elif</span> tag_id:</span><br><span class="line">        blogpost_list = BlogPost.objects.filter(tags__id=tag_id, isShow=<span class="literal">True</span>).order_by(<span class="string">'-isTop'</span>, <span class="string">'-pubTime'</span>)</span><br><span class="line">    <span class="keyword">elif</span> year:</span><br><span class="line">        blogpost_list = BlogPost.objects.filter(pubTime__year=year, isShow=<span class="literal">True</span>).order_by(<span class="string">'-isTop'</span>, <span class="string">'-pubTime'</span>)</span><br><span class="line">    <span class="keyword">elif</span> search:</span><br><span class="line">        blogpost_list = BlogPost.objects.filter(content__icontains=search, isShow=<span class="literal">True</span>).order_by(<span class="string">'-isTop'</span>, <span class="string">'-pubTime'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 筛选出需要显示的博客文章</span></span><br><span class="line">        blogpost_list = BlogPost.objects.filter(isShow=<span class="literal">True</span>).order_by(<span class="string">'-isTop'</span>, <span class="string">'-pubTime'</span>, <span class="string">'-update_time'</span>)</span><br><span class="line">    <span class="comment"># 每页显示的数量</span></span><br><span class="line">    per_page = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建分页器实例</span></span><br><span class="line">    paginator = Paginator(blogpost_list, per_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取当前页码，如果没有提供，则默认为第一页</span></span><br><span class="line">    page_number = request.GET.get(<span class="string">'page'</span>) <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取当前页的数据</span></span><br><span class="line">    page_obj = paginator.get_page(page_number)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算显示的页码范围</span></span><br><span class="line">    current_page = int(page_number)</span><br><span class="line">    pages_to_show = <span class="number">11</span>  <span class="comment"># 当前页前后各5页加上当前页共11页</span></span><br><span class="line">    start_page = max(current_page - <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">    end_page = min(start_page + pages_to_show - <span class="number">1</span>, paginator.num_pages)</span><br><span class="line"></span><br><span class="line">    template = loader.get_template(<span class="string">"blog/index.html"</span>)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">"page_obj"</span>: page_obj,</span><br><span class="line">        <span class="string">'start_page'</span>: start_page,</span><br><span class="line">        <span class="string">'end_page'</span>: end_page,</span><br><span class="line">        <span class="string">'hot_posts'</span>: get_hot_posts(),</span><br><span class="line">        <span class="string">'tags'</span>: get_all_tags(),</span><br><span class="line">        <span class="string">'post_grouped_by_year'</span>:get_post_groped_by_year(),</span><br><span class="line">        <span class="string">'categories'</span>: get_categories(),</span><br><span class="line">        <span class="string">'category_id'</span>: category_id,</span><br><span class="line">        <span class="string">'tag_id'</span>: tag_id,</span><br><span class="line">        <span class="string">'year'</span>: year,</span><br><span class="line">        <span class="string">'search'</span>: search,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情页视图实现.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_detail</span><span class="params">(request, id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post_obj = BlogPost.objects.get(id=id)</span><br><span class="line">        html_content = markdown2.markdown(post_obj.content,</span><br><span class="line">                                          extras=[<span class="string">"code-color"</span>, <span class="string">"fenced-code-blocks"</span>, <span class="string">"cuddled-lists"</span>, <span class="string">"tables"</span>,</span><br><span class="line">                                                  <span class="string">"with-toc"</span>, <span class="string">"highlightjs-lang"</span>])</span><br><span class="line">        html_content = html_content.replace(<span class="string">'&lt; table &gt;'</span>, <span class="string">'&lt; table class="table table-bordered" &gt;'</span>)</span><br><span class="line">        html_content = html_content.replace(<span class="string">'&lt; img src='</span>, <span class="string">'&lt; img style="max-width:100%;height:auto;" src= '</span>)</span><br><span class="line">        context = &#123;<span class="string">"post_obj"</span>: post_obj, <span class="string">"html_content"</span>: html_content, <span class="string">"hot_posts"</span>: get_hot_posts(),<span class="string">"tags"</span>: get_all_tags(),<span class="string">"post_grouped_by_year"</span>:get_post_groped_by_year(),<span class="string">'categories'</span>: get_categories()&#125;</span><br><span class="line">    <span class="keyword">except</span> BlogPost.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Post does not exist"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"blog/post.html"</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hot_posts</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取点赞数最高的前5篇文章</span></span><br><span class="line">    hot_posts = BlogPost.objects.filter(isShow=<span class="literal">True</span>).order_by(<span class="string">'-viewsCount'</span>, <span class="string">'-pubTime'</span>)[:<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">return</span> hot_posts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_tags</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取所有的标签</span></span><br><span class="line">    tags = Tag.objects.all()  <span class="comment"># 获取所有的标签</span></span><br><span class="line">    <span class="keyword">return</span> tags</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_post_groped_by_year</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 将发布日期截断为年份，并计算每年的文章数量。</span></span><br><span class="line">    post_grouped_by_year = (</span><br><span class="line">        BlogPost.objects</span><br><span class="line">        .annotate(year=TruncYear(<span class="string">'pubTime'</span>))</span><br><span class="line">        .values(<span class="string">'year'</span>)  <span class="comment"># 返回的字典包含'year'键</span></span><br><span class="line">        .annotate(publication_count=Count(<span class="string">'id'</span>))  <span class="comment"># 计算每年的文章数量</span></span><br><span class="line">        .order_by(<span class="string">'-year'</span>)  <span class="comment"># 按年排序</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> post_grouped_by_year</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_categories</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取所有分类</span></span><br><span class="line">    categories = BlogCategory.objects.all()</span><br><span class="line">    <span class="keyword">return</span> categories</span><br></pre></td></tr></table></figure><h3 id="2、模板实现"><a href="#2、模板实现" class="headerlink" title="2、模板实现"></a>2、模板实现</h3><p>静态文件如css、js等放到static的blog目录，html模板文件放到templates的blog目录<br>在setting.py文件中配置 <code>STATIC_URL = &#39;static/&#39;</code>，在html模板文件中通过<code>{ % load static % }</code> 将静态文件的地址引用进来<br>将公共部分抽取出来形成base.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">&#123; % load static % &#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>XieJava的博客<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"xiejava"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123; % static 'blog/css/bootstrap.min.css' % &#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123; % static 'blog/css/materialdesignicons.min.css' % &#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123; % static 'blog/css/style.min.css' % &#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"lyear-header text-center"</span> <span class="attr">style</span>=<span class="string">"background-image:url(images/left-bg.jpg);"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lyear-header-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lyear-mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"lyear-blogger pt-lg-4 mb-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'index' % &#125;"</span>&gt;</span>XieJava的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-expand-lg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-toggler"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navigation"</span> <span class="attr">aria-controls</span>=<span class="string">"navigation"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-label</span>=<span class="string">"Toggle navigation"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lyear-hamburger"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hamburger-inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navigation"</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse flex-column"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile-section pt-3 pt-lg-0"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"profile-image mb-3 rounded-circle mx-auto"</span> <span class="attr">src</span>=<span class="string">"https://img9.doubanio.com/icon/ul70489051-4.jpg"</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"120"</span> <span class="attr">alt</span>=<span class="string">"xiejava"</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lyear-sentence mb-3"</span>&gt;</span></span><br><span class="line">            记录最好的自己<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            写是为了更好的思考，坚持写作，力争更好的思考。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar-nav flex-column text-center"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item active"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'index' % &#125;"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123; % for category in categories % &#125;</span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'index' % &#125;?category=&#123;  &#123; category.id  &#125;  &#125;"</span>&gt;</span>&#123;  &#123; category.title  &#125;  &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123; % endfor % &#125;</span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'index' % &#125;"</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-2 my-md-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"lyear-search-form form-inline justify-content-center pt-3"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"form-control mr-md-1"</span> <span class="attr">placeholder</span>=<span class="string">"搜索关键词"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lyear-wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"mt-5 pb-5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文章列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xl-8"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">           &#123; % block content % &#125;</span><br><span class="line">            <span class="comment">&lt;!-- 默认内容 --&gt;</span></span><br><span class="line">           &#123; % endblock % &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内容 end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xl-4"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lyear-sidebar"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 热门文章 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"widget widget-hot-posts"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>热门文章<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                  &#123; % for post in hot_posts % &#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'post_detail' id=post.id % &#125;"</span>&gt;</span>&#123;  &#123; post.title  &#125;  &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;  &#123; post.pubTime  &#125;  &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  &#123; % endfor % &#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 归档 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"widget"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>归档<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                  &#123; % for post in post_grouped_by_year % &#125;</span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'index' % &#125;?year=&#123;  &#123; post.year|date:'Y'  &#125;  &#125;"</span> &gt;</span>&#123; % if year == post.year|date:'Y' % &#125;<span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;  &#123; post.year|date:'Y'  &#125;  &#125; 年 <span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#123; % else % &#125;&#123;  &#123; post.year|date:'Y'  &#125;  &#125; 年&#123; % endif % &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> (&#123;  &#123; post.publication_count  &#125;  &#125;)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  &#123; % endfor % &#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 标签 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"widget widget-tag-cloud"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>标签 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag-cloud"</span>&gt;</span></span><br><span class="line">                  &#123; % for tag in tags % &#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'index' % &#125;?tag=&#123;  &#123; tag.id  &#125;  &#125;"</span> &#123; % <span class="attr">if</span> <span class="attr">tag_id</span> == <span class="string">tag.id</span> % &#125;<span class="attr">class</span>=<span class="string">"badge badge-primary"</span>&#123; % <span class="attr">else</span> % &#125;<span class="attr">class</span>=<span class="string">"badge badge-light"</span>&#123; % <span class="attr">endif</span> % &#125;&gt;</span>&#123;  &#123; tag.tag  &#125;  &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  &#123; % endfor % &#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 侧边栏 end --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- end container --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123; % static 'blog/js/jquery.min.js' % &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123; % static 'blog/js/jquery.nicescroll.min.js' % &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123; % static 'blog/js/bootstrap.min.js' % &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123; % static 'blog/js/main.min.js' % &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>博客首页/列表页<br>通过<code>{ % extends &#39;blog/base.html&#39; % }</code> 将公共部门引入进来后index.html的内容就简洁了很多<br>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123; % extends 'blog/base.html' % &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">&#123; % block content % &#125;</span><br><span class="line"> &#123; % if page_obj.object_list.count &gt; 0 % &#125;</span><br><span class="line">  &#123; % for blogpost in page_obj.object_list % &#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"lyear-arc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arc-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"arc-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"article/&#123;  &#123; blogpost.id  &#125;  &#125;"</span>&gt;</span>&#123;  &#123; blogpost.title  &#125;  &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"arc-meta"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;  &#123; blogpost.pubTime  &#125;  &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-tag-text-outline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123; % for tag in blogpost.tags.all % &#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'index' % &#125;?tag=&#123;  &#123; tag.id  &#125;  &#125;"</span>&gt;</span>&#123;  &#123; tag.tag  &#125;  &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&#123; % endfor % &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;li&gt;&lt;i class="mdi mdi-comment-multiple-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;3 评论&lt;/a&gt;&lt;/li&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-heart-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;  &#123; blogpost.viewsCount  &#125;  &#125; 喜欢<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arc-synopsis"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;  &#123; blogpost.summary  &#125;  &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"> &#123; % endfor % &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">       &#123; % if page_obj.has_previous % &#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"?page=&#123;  &#123; page_obj.previous_page_number  &#125;  &#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       &#123; % endif % &#125;</span><br><span class="line"></span><br><span class="line">        &#123; % for page_no in page_obj.paginator.page_range % &#125;</span><br><span class="line">            &#123; % if page_no &gt;= start_page and page_no <span class="tag">&lt;<span class="name">=</span> <span class="attr">end_page</span> % &#125;</span></span><br><span class="line"><span class="tag">                &#123; % <span class="attr">if</span> <span class="attr">page_no</span> == <span class="string">page_obj.number</span> % &#125;</span></span><br><span class="line">                    &lt;li class="page-item active"&gt;&lt;a class="page-link" href="#"&gt;&#123;  &#123; page_no  &#125;  &#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &#123; % else % &#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"?page=&#123;  &#123; page_no  &#125;  &#125;&#123; % if tag_id % &#125;&amp;tag=&#123;  &#123; tag_id  &#125;  &#125;&#123; % endif % &#125;&#123; % if year % &#125;&amp;year=&#123;  &#123; year  &#125;  &#125;&#123; % endif % &#125;&#123; % if search % &#125;&amp;search=&#123;  &#123; search  &#125;  &#125;&#123; % endif % &#125;"</span>&gt;</span>&#123;  &#123; page_no  &#125;  &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123; % endif % &#125;</span><br><span class="line">            &#123; % endif % &#125;</span><br><span class="line">        &#123; % endfor % &#125;</span><br><span class="line"></span><br><span class="line">      &#123; % if page_obj.has_next % &#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"?page=&#123;  &#123; page_obj.next_page_number  &#125;  &#125;&#123; % if tag_id % &#125;&amp;tag=&#123;  &#123; tag_id  &#125;  &#125;&#123; % endif % &#125;&#123; % if year % &#125;&amp;year=&#123;  &#123; year  &#125;  &#125;&#123; % endif % &#125;&#123; % if search % &#125;&amp;search=&#123;  &#123; search  &#125;  &#125;&#123; % endif % &#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      &#123; % endif % &#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总页数: &#123;  &#123; page_obj.paginator.num_pages &#125;  &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123; % else % &#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 没有找到文章 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123; % endif % &#125;</span><br><span class="line">  <span class="comment">&lt;!-- 分页 end --&gt;</span></span><br><span class="line">&#123; % endblock % &#125;</span><br><span class="line"><span class="comment">&lt;!-- 内容 end --&gt;</span></span><br></pre></td></tr></table></figure><p>博客详情页post.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123; % extends 'blog/base.html' % &#125;</span><br><span class="line"><span class="comment">&lt;!-- 文章阅读 --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123; % block content % &#125;</span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"lyear-arc"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arc-header"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"arc-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;  &#123; post_obj.title  &#125;  &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"arc-meta"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;  &#123; post_obj.pubTime  &#125;  &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123; % for tag in post_obj.tags.all % &#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'index' % &#125;?tag=&#123;  &#123; tag.id  &#125;  &#125;"</span>&gt;</span>&#123;  &#123; tag.tag  &#125;  &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123; % endfor % &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;li&gt;&lt;i class="mdi mdi-comment-multiple-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;3 评论&lt;/a&gt;&lt;/li&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-heart-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;  &#123; post_obj.viewsCount  &#125;  &#125; 喜欢<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arc-preview"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/blog/post-1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"img-fluid rounded"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lyear-arc-detail"</span>&gt;</span></span><br><span class="line">               &#123;  &#123; html_content|safe  &#125;  &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123; % endblock % &#125;</span><br><span class="line"><span class="comment">&lt;!-- 内容 end --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、部署及效果"><a href="#四、部署及效果" class="headerlink" title="四、部署及效果"></a>四、部署及效果</h2><p>在部署之前执行<code>python manage.py collectstatic</code> 将admin等其他模块用到的静态文件统一输出到static的目录。<br>通过  <code>python manage.py runserver</code> 启动应用就可以看到效果。<br>实际效果见 <a href="http://iblog.ishareread.com/" target="_blank" rel="noopener">http://iblog.ishareread.com/</a><br><strong>博客首页</strong><br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240810/2-django%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A6%96%E9%A1%B5.png" alt="在这里插入图片描述"></p><p><strong>博客详情页</strong><br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240810/3-django%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E6%83%85%E9%A1%B5.png" alt="在这里插入图片描述"></p><h2 id="五、源代码"><a href="#五、源代码" class="headerlink" title="五、源代码"></a>五、源代码</h2><p>所有源代码及说明见 <a href="https://gitee.com/xiejava/ishareblog" target="_blank" rel="noopener">https://gitee.com/xiejava/ishareblog</a></p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Django作为一款成熟的Python Web开发框架提供了丰富的内置功能，如ORM（对象关系映射）、Admin管理界面、URL分发、模板系统、表单处理等，使得开发者能够快速搭建Web应用，大幅提高了开发效率。以前写过一篇博文《&lt;a href=&quot;https://xiejav
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>django集成pytest进行自动化单元测试实战</title>
    <link href="https://xiejava.gitee.io/posts/8fbbc02f/"/>
    <id>https://xiejava.gitee.io/posts/8fbbc02f/</id>
    <published>2024-08-03T09:23:11.000Z</published>
    <updated>2024-08-17T12:47:38.013Z</updated>
    
    <content type="html"><![CDATA[<p>在Django项目中集成Pytest进行单元测试可以提高测试的灵活性和效率，相比于Django自带的测试框架，Pytest提供了更为丰富和强大的测试功能。本文通过一个实际项目ishareblog介绍django集成pytest进行自动化单元测试实战。</p><h2 id="一、引入pytest相关的包"><a href="#一、引入pytest相关的包" class="headerlink" title="一、引入pytest相关的包"></a>一、引入pytest相关的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br><span class="line">pip install pytest-django</span><br><span class="line">pip install pytest-html</span><br></pre></td></tr></table></figure><p>其中pytest-django插件，它提供了Django和Pytest之间的桥梁，pytest-html 是一个 pytest 的插件，用于生成详细的 HTML 测试报告。这个插件能够将 pytest 运行的结果转化为一个直观、易于阅读的 HTML 格式报告，这对于分享测试结果、审查测试覆盖率以及归档测试历史非常有帮助。</p><h2 id="二、配置pytest"><a href="#二、配置pytest" class="headerlink" title="二、配置pytest"></a>二、配置pytest</h2><h3 id="1、将django的配置区分测试环境、开发环境和生产环境"><a href="#1、将django的配置区分测试环境、开发环境和生产环境" class="headerlink" title="1、将django的配置区分测试环境、开发环境和生产环境"></a>1、将django的配置区分测试环境、开发环境和生产环境</h3><p>因为测试环境、开发环境和生产环境的环境配置参数不一样，一个好的实践是将开发、测试和生产环境通过配置区分开，django的配置主要集中在项目的settings.py文件，这里通过settings.py的配置文件将开发、测试、生产区分开，不同的环境调用不通的配置文件。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240803/1-django%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.png" alt="在这里插入图片描述"></p><p>因为大部分的配置参数都是一样的，在这里我将公共的配置参数都抽到了base.py，环境配置中有差异的部分分别放到各自的配置文件中，如开发环境用的是mysql，测试环境用sqlite3，就可以将不同的配置给区分开。<br>测试环境是settings_test.py，这里除了数据库的配置不一样，其他都沿用基础的公共配置。settings_test.py配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = []</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'test_db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、配置pytest"><a href="#2、配置pytest" class="headerlink" title="2、配置pytest"></a>2、配置pytest</h3><p>在Django项目根目录下，创建或编辑pytest.ini文件，来配置Pytest。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240803/2-pytest%E9%85%8D%E7%BD%AE.png" alt="在这里插入图片描述"></p><p>pytest.ini代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[pytest]</span><br><span class="line">DJANGO_SETTINGS_MODULE = ishareblog.settings_test</span><br><span class="line"></span><br><span class="line">python_files = tests.py test_*.py *_tests.py</span><br></pre></td></tr></table></figure><p>DJANGO_SETTINGS_MODULE = ishareblog.settings_test  指定了pytest用到的环境配置<br>python_files = tests.py test_*.py *_tests.py 指定了pytest将测试以test开头的py文件中的测试用例。</p><h2 id="三、编写测试用例"><a href="#三、编写测试用例" class="headerlink" title="三、编写测试用例"></a>三、编写测试用例</h2><p>接下来，可以在tests.py或test_*.py文件中编写你的测试用例。由于pytest-django插件的存在，你可以像平常一样使用Django的测试机制，同时也能享受Pytest带来的便利。以下以我的ishareblog博客代码通过业务测试和接口测试来编写测试用例。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240803/3-pytest%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.png" alt="在这里插入图片描述"></p><h3 id="1、业务测试"><a href="#1、业务测试" class="headerlink" title="1、业务测试"></a>1、业务测试</h3><p>我的isharebog业务相对简单，主要是测试验证业务模型模块的增删改查是否符合预期。<br>业务测试tests.py示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogCategory</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.django_db</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBlogCategory</span><span class="params">(TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.blogcategory = BlogCategory.objects.create(id=<span class="number">1</span>,title=<span class="string">"Test Category"</span>, href=<span class="string">'/category/1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_BogCategoryModel</span><span class="params">(self)</span>:</span></span><br><span class="line">        blog_category = BlogCategory.objects.get(id=self.blogcategory.id)</span><br><span class="line">        self.assertEqual(blog_category.title, <span class="string">"Test Category"</span>)</span><br><span class="line">        self.assertEqual(blog_category.href, <span class="string">'/category/1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.django_db</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_blog_category_create</span><span class="params">()</span>:</span></span><br><span class="line">    blogcategory = BlogCategory.objects.create(id=<span class="number">1</span>,title=<span class="string">"Test Category"</span>, href=<span class="string">'/category/1'</span>)</span><br><span class="line">    category_count = BlogCategory.objects.count()</span><br><span class="line">    <span class="keyword">assert</span> category_count &gt; <span class="number">0</span>, <span class="string">"Blog category was not created category_count=0."</span></span><br><span class="line">    <span class="keyword">assert</span> blogcategory.id &gt; <span class="number">0</span>, <span class="string">"Blog category was not created."</span></span><br><span class="line">    <span class="keyword">assert</span> blogcategory.title == <span class="string">"Test Category"</span>, <span class="string">"Blog category title is wrong."</span></span><br><span class="line">    <span class="keyword">assert</span> blogcategory.href == <span class="string">"/category/1"</span>, <span class="string">"Blog category href is wrong."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.django_db</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_blog_category_query</span><span class="params">()</span>:</span></span><br><span class="line">    category_count = len(BlogCategory.objects.all())</span><br><span class="line">    <span class="keyword">assert</span> category_count &gt;= <span class="number">0</span>, <span class="string">"Blog category query error."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pytest.main([<span class="string">"-s"</span>, <span class="string">"-v"</span>, <span class="string">"-p"</span>, <span class="string">"no:warnings"</span>, <span class="string">"--tb=short"</span>, <span class="string">"--html=report.html"</span>, <span class="string">"blog/tests.py"</span>])</span><br></pre></td></tr></table></figure><p>业务测试举了通过测试类和测试方法写的测试用例，分别对博客目录进行添加和查询编写了测试用例。</p><h3 id="2、接口测试"><a href="#2、接口测试" class="headerlink" title="2、接口测试"></a>2、接口测试</h3><p>接口是暴露给前端程序调用的，接口测试主要是测试接口正不正常，接口值是不是符合预期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://localhost:8000"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApi</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_getcategory_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = <span class="string">f'<span class="subst">&#123;host&#125;</span>/api/category/'</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">assert</span> response.status_code == <span class="number">200</span>, <span class="string">f'Expected status code 200 but got <span class="subst">&#123;response.status_code&#125;</span>'</span></span><br><span class="line">        <span class="keyword">assert</span> response.json() != <span class="literal">None</span>, <span class="string">f'Expected to get json response but got <span class="subst">&#123;response.text&#125;</span>'</span></span><br><span class="line">        print(response.json())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_getpost_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = <span class="string">f'<span class="subst">&#123;host&#125;</span>/api/post/list'</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">assert</span> response.status_code == <span class="number">200</span>, <span class="string">f'Expected status code 200 but got <span class="subst">&#123;response.status_code&#125;</span>'</span></span><br><span class="line">        <span class="keyword">assert</span> response.json() != <span class="literal">None</span>, <span class="string">f'Expected to get json response but got <span class="subst">&#123;response.text&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pytest.main([<span class="string">"-s"</span>, <span class="string">"-v"</span>, <span class="string">"-p"</span>, <span class="string">"no:warnings"</span>, <span class="string">"--tb=short"</span>, <span class="string">"--html=report.html"</span>, <span class="string">"api/tests.py"</span>])</span><br></pre></td></tr></table></figure><p>接口测试部分，对获取目录的API接口和文章列表的API接口编写了测试用例。</p><h2 id="四、进行测试"><a href="#四、进行测试" class="headerlink" title="四、进行测试"></a>四、进行测试</h2><p>最后可以分别在blog目录和api目录下运行test.py 分别进行业务和接口的单元测试。<br>注意在进行测试之前需要执行 <code>python manage.py makemigrations --settings=ishareblog.settings_test</code> 初始化环境。<br>在进行api接口测试之前需要将django的应用服务启动 <code>python manage.py runserver 8000 --settings=ishareblog.settings_test</code> 启动的时候也带上测试环境的配置。<br>可以通过<code>pytest --html=report.html</code> 自动执行所有的单元测试，并生成可读的html的测试报告。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240803/4-pytest%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95.png" alt="在这里插入图片描述"></p><p>pytest生成的report.html测试报告<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240803/5-pytest%E7%9A%84report%E6%8A%A5%E5%91%8A.png" alt="在这里插入图片描述"></p><p>以上通过一个ishareblog的实际项目介绍django集成pytest进行自动化单元测试实战。<br>ishareblog的所有代码包括pytest的配置见 <a href="https://gitee.com/xiejava/ishareblog" target="_blank" rel="noopener">https://gitee.com/xiejava/ishareblog</a></p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Django项目中集成Pytest进行单元测试可以提高测试的灵活性和效率，相比于Django自带的测试框架，Pytest提供了更为丰富和强大的测试功能。本文通过一个实际项目ishareblog介绍django集成pytest进行自动化单元测试实战。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>解决django与sqlite3不兼容报SQLite 3.9.0 or later is required (found 3.8.2)错的问题</title>
    <link href="https://xiejava.gitee.io/posts/b952e40e/"/>
    <id>https://xiejava.gitee.io/posts/b952e40e/</id>
    <published>2024-07-23T09:23:11.000Z</published>
    <updated>2024-08-17T12:47:37.986Z</updated>
    
    <content type="html"><![CDATA[<p>今天在尝试用pytest进行django的单元测试，pytest用的数据库是sqlite3，在window环境下测试得好好的，但是放到linux环境下就报错，具体是报<code>django.core.exceptions.ImproperlyConfigured: SQLite 3.9.0 or later is required (found 3.8.2).</code>的错。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240721/%E6%8A%A5%E9%94%991.png" alt="在这里插入图片描述"></p><p>从报错的提示看是sqlite3的版本太低，期望是3.9.0但是当前版本是3.8.2<br>在网上找了很多资料，也都是说django与sqlite3的版本不兼容，需要升级sqlite3的版本。<br>于是将sqlite3升级到目前的稳定版本3.46.0，然而发现并没有什么用，还是报<code>sqlite3.NotSupportedError: deterministic=True requires SQLite 3.8.3 or higher</code> 。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240721/%E6%8A%A5%E9%94%992.png" alt="在这里插入图片描述"></p><p>通过sqlite3 –version 查看版本号已经是3.46.0了，但还是提示要求SQLite版本在3.8.3以上。重装django4和python3.8的环境都没有用。<br>最后在网上找到解决办法。使用第三方包pysqlite3运行SQLite3<br>具体方法如下：<br>1、安装pysqlite3和pysqlite3-binary</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pysqlite3</span><br><span class="line">pip install pysqlite3<span class="literal">-binary</span></span><br></pre></td></tr></table></figure><p>2、找到django的sqlite3驱动包，/usr/local/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py 找到 from sqlite3 import dbapi2 as Database 注释它，添加代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#from sqlite3 import dbapi2 as Database  #注释它</span></span><br><span class="line"><span class="keyword">from</span> pysqlite3 <span class="keyword">import</span> dbapi2 <span class="keyword">as</span> Database <span class="comment">#新加这段代码</span></span><br></pre></td></tr></table></figure><p>历经周折终于解决。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在尝试用pytest进行django的单元测试，pytest用的数据库是sqlite3，在window环境下测试得好好的，但是放到linux环境下就报错，具体是报&lt;code&gt;django.core.exceptions.ImproperlyConfigured: SQL
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>什么是软件定义安全SDSec</title>
    <link href="https://xiejava.gitee.io/posts/2e4b09a6/"/>
    <id>https://xiejava.gitee.io/posts/2e4b09a6/</id>
    <published>2024-07-09T08:06:27.000Z</published>
    <updated>2024-08-17T12:47:37.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、软件定义安全SDSec产生的背景"><a href="#一、软件定义安全SDSec产生的背景" class="headerlink" title="一、软件定义安全SDSec产生的背景"></a>一、软件定义安全SDSec产生的背景</h2><p>软件定义安全（Software Defined Security，SDSec）的产生背景主要源于传统网络安全防护方法在面对复杂网络环境时的不适应性，以及软件定义网络（SDN）技术的发展和应用。</p><p><strong>SDN技术影响与数据与控制分离的理念</strong>：SDN的出现将网络的控制平面与数据平面分离，实现了网络资源的集中管理和自动化配置。SDN控制器可以全局视角管理网络，这为安全策略的统一规划和执行提供了可能。SDSec的核心理念是数据与控制分离，安全管理与控制集中化，这与SDN的内在性质相契合，适合用于网络安全的场景。</p><p><strong>复杂网络环境与传统安全设备的挑战</strong>：在物理与虚拟网络共存的数据中心等复杂环境中，传统的网络安全设备部署过程繁复，不能灵活地区分处理流经的流量，安全防护范围僵化，且安全设备可能成为单一故障点，传统的安全网关设备如防火墙、入侵防护系统等，存在互操作性差、难以集成等问题，SDN的理念可以拓展到这些设备上，作为下一代安全产品开发的指导思想，从而产生了SDSec的概念 </p><p><strong>云计算和虚拟化技术的发展对安全的需求</strong>：云计算系统的开放API、虚拟化技术的资源池能力、SDN的支持，以及中小型企业对安全防护系统有效性、便捷性和灵活性的需求，促使软件定义安全理念在云计算安全防护中得到体现。</p><p>SDSec的产生是为了解决传统网络安全方法在现代网络环境中的局限性，同时利用SDN技术的优势，实现更高效、灵活和自动化的网络安全防护。</p><h2 id="二、软件定义安全SDSec的定义"><a href="#二、软件定义安全SDSec的定义" class="headerlink" title="二、软件定义安全SDSec的定义"></a>二、软件定义安全SDSec的定义</h2><p>软件定义安全（Software Defined Security，SDSec）是一种从软件定义网络（SDN）引申而来的概念，其核心原理是将网络安全设备与其接入模式、部署方式、实现功能进行解耦。这种解耦使得底层的网络安全设备可以抽象为安全资源池中的资源，而顶层则通过软件编程的方式进行智能化、自动化的业务编排和管理，以完成相应的安全功能，实现灵活的安全防护 。</p><p>SDSec的工作机制可以分解为三个主要部分：<strong>软件定义流量</strong>、<strong>软件定义资源</strong>和<strong>软件定义威胁模型</strong>。这三个部分相互关联，形成一个动态、闭环的工作模型。具体来说：<br>● <strong>软件定义流量</strong>通过软件编程实现网络流量的细粒度定义及转发控制管理，将目标网络流量转发到安全设备上，实现安全设备的逻辑部署和使用。<br>● <strong>软件定义资源</strong>通过管理中心对安全资源进行统一注册、池化管理、弹性分配，并在虚拟计算环境下支持虚拟安全设备模板的分发和设备的创建。<br>● <strong>软件定义威胁模型</strong>涉及自动化采集、分析和挖掘网络流量、网络行为、安全事件等信息，实现对未知威胁或高级安全威胁的实时分析和建模，并用建模结果指导流量定义，实现动态、闭环的安全防护。</p><p>SDSec的架构设计使得安全策略执行点（数据平面）与安全控制器（控制平面）相互分离，从而使安全设备能够快速、自动地适应业务的动态变化。这种分离的架构有助于厂商集中精力研发异常检测技术，提高安全产品的核心能力，并便于在一个计算能力更强的、开放的、综合的平台上完成异常检测</p><h2 id="三、软件定义安全SDSec的支撑技术"><a href="#三、软件定义安全SDSec的支撑技术" class="headerlink" title="三、软件定义安全SDSec的支撑技术"></a>三、软件定义安全SDSec的支撑技术</h2><p>软件定义安全本质上是一种技术理念，主要技术思路为参考 SDN 的数 据与控制层面分离 ，通过构建上层安全管理平台去运营、运维下层集约化部署的安 全资源。软件定义安全SDSec的主要支撑技术包括<strong>软件定义网络 (SDN)</strong>、<strong>虚拟化技术</strong>、<strong>API和标准化接口</strong>、<strong>安全编排与自动化响应 (SOAR)</strong></p><p><strong>软件定义网络 (SDN)</strong>：SDN是SDSec的基础之一，它将网络的控制平面与数据平面分离，允许对网络流量进行集中控制和策略实施，为安全策略的灵活部署和动态调整提供了可能。<br><strong>虚拟化技术</strong>：虚拟化技术支持快速准备虚拟化的安全设备，包括服务器虚拟化、网络功能虚拟化（NFV）和软件定义存储（SDS），这些技术允许安全功能如防火墙、入侵检测系统（IDS）、入侵防御系统（IPS）等作为虚拟实例运行，并灵活调度计算、存储、网络资源，可以更容易地在不同位置之间移动和扩展，为安全功能服务。<br><strong>API和标准化接口</strong>：SDSec依赖于API和标准化接口来集成不同的安全组件和服务，允许不同供应商的产品之间进行互操作，增强整体安全生态系统的灵活性和可扩展性。<br><strong>安全编排与自动化响应 (SOAR)</strong>：自动化工具和工作流编排用于实现安全策略的快速部署、更新和响应。这包括安全策略的自动化生成、配置和变更管理，以及在检测到威胁时的自动响应。SOAR平台结合了安全事件管理、自动化响应和编排功能，用于协调多个安全工具和流程，提高安全团队的效率和响应速度。</p><p>这些技术共同作用，使SDSec能够提供一个更加强大、灵活和响应迅速的安全框架，以应对不断变化的威胁环境。</p><h2 id="四、软件定义安全SDSec的优缺点"><a href="#四、软件定义安全SDSec的优缺点" class="headerlink" title="四、软件定义安全SDSec的优缺点"></a>四、软件定义安全SDSec的优缺点</h2><p>软件定义安全（SDSec）与传统安全产品相比，各有其独特的优点和缺点：</p><table><thead><tr><th></th><th>软件定义安全(SDSec)</th><th>传统安全产品</th></tr></thead><tbody><tr><td><strong>灵活性与可扩展性</strong></td><td>使用SDN和NFV技术，安全策略可以动态配置和调整，适应网络流量变化和新的安全威胁。可以通过软件更新和配置更轻松地适应新的安全需求和技术进展。</td><td>通常使用硬件设备，配置和更新安全策略较为繁琐，不够灵活。硬件设备的功能和性能受到限制，升级和扩展可能需要更换设备或增加新的硬件。</td></tr><tr><td><strong>集中化管理和自动化</strong></td><td>可以通过集中的安全策略控制器管理整个网络的安全策略，实现自动化响应和安全事件管理。</td><td>管理分散在各个设备上，安全策略的更新和管理通常需要更多的人工干预。</td></tr><tr><td><strong>资源利用率和成本效益</strong></td><td>利用NFV将安全功能虚拟化在通用服务器上运行，提高了资源利用率，并降低了成本。</td><td>需要购买和维护多个专用硬件设备，成本和资源利用率不如虚拟化解决方案高效。</td></tr><tr><td><strong>技术成熟度和部署复杂性</strong></td><td>相较传统安全产品，SDSec 的技术可能需要更多时间来成熟，并且在部署和管理上可能存在一定的复杂性。</td><td>技术相对成熟，部署相对简单，但可能缺乏SDSec中的一些先进功能和灵活性。</td></tr><tr><td><strong>安全性考量</strong></td><td>虽然提供了灵活和智能的安全防护，但在实施时需要确保其本身不会成为攻击目标或单点故障。如果控制平台受到攻击，可能会对整个网络的安全造成影响。</td><td>可能因为使用独立的硬件设备，一些传统攻击方式可能更难以实施。</td></tr></tbody></table><p>SDSec通过软件定义的方式提供了更灵活、智能和高效的安全解决方案，尤其适合于需要频繁更新和动态调整安全策略的现代网络环境。然而，与传统安全产品相比，SDSec在技术成熟度、部署复杂性和对网络基础设施的依赖性等方面可能存在一些挑战和限制。</p><p>需要注意的是，软件定义安全理念从逻辑上和架构上是涵盖了传统安全与云计算安全的，前者是从改变安全技术架构去提高安全管理效率，提升安全运营的 价值，而后者则是区别于安全落地的不同场景。因此软件定义安全同样适用于传统 IT 环境，如果做到了构建统一的上层管理平台，使其具备开放接口，下层各类安全 组件资源可受上层管理应用进行编排、计量等手段统一关联起来，那么这套安全防 护体系也可认为是由软件定义的。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、软件定义安全SDSec产生的背景&quot;&gt;&lt;a href=&quot;#一、软件定义安全SDSec产生的背景&quot; class=&quot;headerlink&quot; title=&quot;一、软件定义安全SDSec产生的背景&quot;&gt;&lt;/a&gt;一、软件定义安全SDSec产生的背景&lt;/h2&gt;&lt;p&gt;软件定义安全
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>常见网络攻击方式及防御方法</title>
    <link href="https://xiejava.gitee.io/posts/5cd84f32/"/>
    <id>https://xiejava.gitee.io/posts/5cd84f32/</id>
    <published>2024-07-04T03:22:23.000Z</published>
    <updated>2024-08-17T12:47:37.933Z</updated>
    
    <content type="html"><![CDATA[<p>网络安全威胁的不断演变和增长，网络攻击的种类和数量也在不断增加，攻防对抗实战演练在即，让我们一起了解一下常见网络攻击方式及防御方法。</p><h2 id="1-DDOS攻击（分布式拒绝服务攻击）"><a href="#1-DDOS攻击（分布式拒绝服务攻击）" class="headerlink" title="1. DDOS攻击（分布式拒绝服务攻击）"></a>1. DDOS攻击（分布式拒绝服务攻击）</h2><p>借助于C/S（客户端/服务器）技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDOS攻击，从而成倍地提高拒绝服务攻击的威力。<br><strong>防护方法：</strong><br>所有的主机平台都有低于DDOS的设置，基本的有：</p><ul><li>关闭不必要的服务</li><li>限制同时打开的syn半连接数目</li><li>缩短syn半连接的time out时间</li><li>及时更新补丁</li></ul><p><strong>网络设置：</strong><br>防火墙</p><ul><li>禁止对主机的非半开服务的访问，限制SYN的连接数和IP访问</li><li>路由器</li><li>设置SYN数据包流量速率</li></ul><h2 id="2-UDP洪水攻击"><a href="#2-UDP洪水攻击" class="headerlink" title="2. UDP洪水攻击"></a>2. UDP洪水攻击</h2><p>利用含有udp数据包的ip数据包对目标主机上的随机端口进行饱和攻击，由于udp流量不需要像tcp那样三次握手，可以低成本的运行。这种特质也使得udp非常脆弱，更容易被滥用，一些udp洪水攻击能够利用dns方法攻击的形式实施。<br><strong>防护方法：</strong><br>根据业务UDP最大包长设置UDP最大包大小以过滤异常流量。<br>建立UDP连接规则，要求所有去往该端口的UDP包，必须首先与TCP端口建立TCP连接。</p><h2 id="3-Smurf攻击"><a href="#3-Smurf攻击" class="headerlink" title="3. Smurf攻击"></a>3. Smurf攻击</h2><p>攻击者向网络广播地址发送ICMP包，并将回复地址设置成受害网络的广播地址，通过使用ICMP应答请求数据包来淹没受害主机的方式进行，最终导致该网络的所有主机都对次ICMP应答请求作出答复，导致网络阻塞。更加复杂的Smurf攻击攻击将源地址改为第三方受害者，最终导致第三方崩溃。<br><strong>防护方法：</strong><br>1.配置路由器禁止IP广播包进网<br>2.配置网络上所有计算机的操作系统，禁止对目标地址为广播地址的ICMP包响应<br>3.对于从本网络向外部网络发送的数据包，本网络应该将其源地址为其他网络的这部分数据包过滤掉</p><h2 id="4-CC攻击"><a href="#4-CC攻击" class="headerlink" title="4. CC攻击"></a>4. CC攻击</h2><p>CC攻击利用代理服务器向网站发送大量需要较长计算时间的URL请求，如数据库查询等，导致服务器进行大量计算而很快达到自身的处理能力而形成DOS，而攻击者一旦发送请求给代理后就主动断开连接，因为代理并不因为客户端这边连接的断开就不去连接目标服务器，因此攻击机的资源消耗相对很小，而从目标服务器看来，来自代理的请求都是合法的。<br><strong>防护方法：</strong><br>CC有效性在于攻击方不接受服务器回应的数据，发送完请求后就主动断开连接，因此要确认连接是否是CC，服务器端不立即执行URL请求命令，而是简单的返回一个页面转向的回应，回应中包含新的URL请求地址，如果是正常访问，客户端会主动再次连接到转向页面，对用户来说是透明的;而对于CC攻击者，由于不接收回应数据，因此就不会重新连接，服务器也就不需要进行查询操作。</p><h2 id="5-ARP攻击（中间人攻击）"><a href="#5-ARP攻击（中间人攻击）" class="headerlink" title="5. ARP攻击（中间人攻击）"></a>5. ARP攻击（中间人攻击）</h2><p>通过伪造IP地址和MAC地址实现ARP欺骗，能够在网络中产生大量的ARP通信量使网络阻塞，攻击者只要持续不断的发出伪造的ARP相应包就能更改目标主机ARP缓存中的IP-MAC条目，造成网络终端或中间人攻击。<br><strong>防护方法：</strong></p><ul><li>网关和终端双向绑定IP和MAC地址</li><li>局域网中的每台电脑中进行静态ARP绑定</li><li>打开安全防护软件的ARP防火墙功能</li><li>彻底追踪查杀ARP病毒</li></ul><h2 id="6-邮件钓鱼"><a href="#6-邮件钓鱼" class="headerlink" title="6. 邮件钓鱼"></a>6. 邮件钓鱼</h2><p>利用伪装的电邮，欺骗收件人将账号、口令等信息回复给指定的接收者；或引导收件人连接到特制的网页，这些网页通常会伪装成和真实网站一样，如银行或理财的网页，令登录者信以为真，输入信用卡或银行卡号码、账户名称及密码等而被盗取。<br><strong>防护方法：</strong></p><ul><li>不点击不知来源的邮件和附件</li><li>在邮箱服务端安装安全软件，开启SPF策略</li><li>安装个人电脑杀毒软件</li></ul><p><strong>拓展：</strong></p><ul><li>鱼叉攻击<br>攻击者将木马程序作为电子邮件的附件，并起上一个极具诱惑力的名称，发送给目标电脑，诱使受害者打开附件，从而感染木马。</li><li>水坑攻击<br>攻击者分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，先将此网站“攻破”并植入攻击代码，一旦攻击目标访问该网站就会“中招”。</li></ul><h2 id="7-WIFI钓鱼"><a href="#7-WIFI钓鱼" class="headerlink" title="7. WIFI钓鱼"></a>7. WIFI钓鱼</h2><p>WIFI钓鱼是一种新型的无线网络攻击方式，将中间人攻击和钓鱼攻击相结合，选定目标路由器后，将连接到路由器上的客户端全部强制退出重新登录。当用户再次登录时，会连接到假冒的路由器上，弹出登录窗口，并要求用户输入无线网络的用户名和密码来更新路由器硬件，从而盗取用户的账号密码等信息。<br><strong>防护方法：</strong><br>1.不连接公共场所的wifi，重要文件用手机热点发送<br>2.路由器定期更换密码<br>3.路由器定期升级</p><h2 id="8-挖矿木马"><a href="#8-挖矿木马" class="headerlink" title="8. 挖矿木马"></a>8. 挖矿木马</h2><p>由于区块链技术热炒以及数字货币的推广运营，如比特币、以太币等层出不穷的数字货币各种热炒，在这些的利益驱使下便出现各种模式的挖矿木马程序，挖矿木马主要就是通过利用各种手段，将挖矿程序植入到用户的计算机中，在用户不知情的情况下，偷偷利用用户的计算机进行执行挖矿功能，从而获取收益。<br><strong>用户中木马的常见方式：</strong><br>1.用户往往在不注意的时候，下载并运行了来历不明的破解软件或不安全软件<br>2.用户点击运行了钓鱼邮件中的附件的文件<br>3.用户没有做好系统及时更新，通过系统漏洞传播<br>4.用户浏览了植入挖矿脚本的网页，浏览器就解析脚本进行挖矿<br><strong>防护方法：</strong><br>1.在计算机中安装病毒查杀软件(火绒、360杀毒)，并及时更新病毒查杀软件的病毒库，还需做好定时全盘查杀病毒。<br>2.及时做好计算机系统补丁的更新。<br>3.服务器、主机、数据库等使用高强度的密码口令，切勿使用弱口令，防止被暴力破解。<br>4.网络上不要去随意下载、运行来历不明的程序或者破解程序，不随意点击来历不明的链接。</p><h2 id="9-0day攻击"><a href="#9-0day攻击" class="headerlink" title="9. 0day攻击"></a>9. 0day攻击</h2><p>0day漏洞是指攻击者最新发现的，厂家还未发布补丁，在网络上还未公布的系统或应用程序新漏洞。<br><strong>防护方法：</strong><br>1.安装实时监控和主动防御设备<br>2.实施网络边界防范<br>3.加固终端系统<br>4.加强网络基础设施的安全</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络安全威胁的不断演变和增长，网络攻击的种类和数量也在不断增加，攻防对抗实战演练在即，让我们一起了解一下常见网络攻击方式及防御方法。&lt;/p&gt;
&lt;h2 id=&quot;1-DDOS攻击（分布式拒绝服务攻击）&quot;&gt;&lt;a href=&quot;#1-DDOS攻击（分布式拒绝服务攻击）&quot; class=
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>什么是基于风险的漏洞管理RBVM及其优势</title>
    <link href="https://xiejava.gitee.io/posts/d8042a8c/"/>
    <id>https://xiejava.gitee.io/posts/d8042a8c/</id>
    <published>2024-06-13T14:20:11.000Z</published>
    <updated>2024-06-13T14:52:42.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是漏洞管理"><a href="#一、什么是漏洞管理" class="headerlink" title="一、什么是漏洞管理"></a>一、什么是漏洞管理</h2><p>安全漏洞是网络或网络资产的结构、功能或实现中的任何缺陷或弱点，黑客可以利用这些缺陷或弱点发起网络攻击，获得对系统或数据的未经授权的访问，或以其他方式损害组织。常见漏洞的示例包括可能允许某些类型的恶意软件进入网络的防火墙配置错误，或可能允许黑客接管设备的操作系统远程桌面协议中未修补的错误。</p><p>漏洞管理是指通过对网络系统中的漏洞进行识别、评估、修复、验证等一系列操作，以保障系统的安全性。这一过程是IT风险管理的一个子领域，主要关注组织IT基础设施和软件中的安全漏洞。</p><p>关于漏洞的分类及漏洞管理参见《<a href="http://xiejava.ishareread.com/posts/a937cbf5/" target="_blank" rel="noopener">安全运营之漏洞管理</a>》</p><h2 id="二、什么是基于风险的漏洞管理RBVM"><a href="#二、什么是基于风险的漏洞管理RBVM" class="headerlink" title="二、什么是基于风险的漏洞管理RBVM"></a>二、什么是基于风险的漏洞管理RBVM</h2><p>传统的漏洞管理方法通常依赖于扫描工具来发现漏洞，然后按照某种顺序（如时间顺序或严重程度）进行修复。随着技术的快速发展和数字化转型的推进，网络系统和应用程序的复杂性日益增加，导致安全漏洞的数量也呈现爆炸式增长。面对不断增长的漏洞列表和警报，安全团队很容易陷入警报疲劳，难以判断哪些漏洞是真正需要优先处理的。</p><p>而<strong>RBVM（Risk-based Vulnerability Management）是基于风险的漏洞管理</strong>，RBVM方法不是简单地修补所有漏洞，而是关注那些实际可利用的、对组织构成风险的漏洞。这种方法通过分析内部资产、攻击者活动以及威胁情报馈送（特别是漏洞情报），来确定哪些漏洞是需要优先处理的。是一种更加智能化和策略性的方法来识别、评估、优先级排序和修复组织中的安全漏洞。</p><p>RBVM的核心在于更好地了解和评估风险，通过综合考虑漏洞的严重性、可利用性、资产价值等因素，确定每个漏洞的风险等级，并据此制定修复策略。这种方法能够帮助安全团队集中资源处理那些真正高风险的漏洞，提高漏洞管理的效率和效果。</p><h2 id="三、RBVM的基本流程"><a href="#三、RBVM的基本流程" class="headerlink" title="三、RBVM的基本流程"></a>三、RBVM的基本流程</h2><p>RBVM（基于风险的漏洞管理）与传统漏洞管理的识别、评估、修复、验证相比是多了资产识别、风险评估和优先级排序。RBVM的基本流程如下：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240613/RBVM%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="RBVM的基本流程"></p><p><strong>1. 资产识别</strong></p><ul><li>列出组织内的所有关键资产，包括硬件、软件、数据和网络等。</li><li>对每个资产进行分类，如生产环境、测试环境、非关键业务系统等。</li><li>确定每个资产的重要性级别，如高、中、低。</li></ul><p><strong>2. 漏洞发现</strong></p><ul><li>使用自动化漏洞扫描工具对关键资产进行定期扫描。</li><li>结合手动渗透测试，发现可能存在的未知漏洞。</li><li>订阅外部漏洞情报服务，获取最新的漏洞信息。</li></ul><p><strong>3. 风险评估</strong></p><ul><li>对每个发现的漏洞进行风险评估，包括严重性、可利用性、资产重要性等因素。</li><li>使用脆弱性优先级技术（Vulnerability Prioritize Technology–VPT）、CVSS（Common Vulnerability Scoring System）或其他风险评估框架进行评分。</li><li>结合威胁情报，评估漏洞被利用的可能性和潜在影响。</li></ul><p><strong>4. 优先级排序</strong></p><ul><li>根据风险评估结果，将漏洞按照风险级别进行排序。</li><li>优先处理高风险漏洞，确保关键资产的安全。</li><li>对于中低风险漏洞，制定缓解措施或监控计划。</li></ul><p><strong>5. 修复和缓解</strong></p><ul><li>对于高风险漏洞，立即制定修复计划并实施。</li><li>对于无法立即修复的漏洞，制定缓解措施，如限制访问权限、部署防火墙规则等。</li><li>与供应商和社区保持沟通，获取漏洞修复的最新信息。</li></ul><p><strong>6. 监控和重新评估</strong></p><ul><li>定期对已修复的漏洞进行验证，确保漏洞已被成功修复。</li><li>监控新的漏洞和威胁情报，及时更新风险评估和优先级排序。</li><li>定期对RBVM流程进行审查和更新，以适应组织环境的变化。</li></ul><p>RBVM策略将帮助我们优先处理那些对组织构成最大威胁的漏洞，从而在有限的资源下实现最大的安全效益。</p><h2 id="四、RBVM的特点和优势"><a href="#四、RBVM的特点和优势" class="headerlink" title="四、RBVM的特点和优势"></a>四、RBVM的特点和优势</h2><p>RBVM是一种更为精细化和策略性的方法，旨在识别、评估、优先级排序和修复那些对组织构成最大风险的漏洞。与传统的漏洞管理方法相比，RBVM具有以下区别：</p><ol><li>风险评估：传统的漏洞管理通常侧重于发现和修复所有检测到的漏洞，而不考虑这些漏洞对组织的实际风险。而RBVM则根据漏洞的严重性、可利用性、资产的重要性以及威胁的紧迫性等因素，对漏洞进行风险评估，以确定修复的优先级。</li><li>资源优化：由于RBVM侧重于修复高风险的漏洞，因此它可以帮助组织更有效地分配资源。组织可以将有限的资源集中在那些对业务影响最大的漏洞上，而不是盲目地修复所有检测到的漏洞。</li><li>业务上下文：RBVM将漏洞管理置于业务上下文中，考虑漏洞对组织业务运营和战略目标的影响。这种方法使组织能够更清楚地了解哪些漏洞是需要优先处理的，以确保业务连续性和合规性。</li><li>持续监控和评估：RBVM强调对漏洞的持续监控和评估。它使用自动化工具和流程来跟踪漏洞的状态，包括已知漏洞的发布、修复和再利用等。此外，RBVM还利用威胁情报来识别新的攻击向量和漏洞，以便及时调整漏洞管理策略。</li><li>威胁情报整合：RBVM将威胁情报与漏洞管理相结合，以便更准确地评估漏洞的风险。威胁情报提供了关于攻击者行为、目标、工具和技术的信息，这些信息有助于组织识别那些可能被攻击者利用的漏洞。</li><li>优先级排序：RBVM使用风险评估结果来确定漏洞修复的优先级。这有助于组织在有限的资源下，优先处理那些对业务影响最大的漏洞。与传统的漏洞管理方法相比，这种方法更加灵活和有效。</li></ol><p><strong>RBVM的优点</strong></p><ol><li>资源优化：通过优先处理高风险的漏洞，RBVM可以帮助组织更有效地分配资源，确保在有限的资源下取得最大的安全效益。</li><li>业务连续性：RBVM关注业务上下文与业务的关联性强，确保在修复漏洞的过程中不会中断关键业务操作或影响用户体验。</li><li>提高安全性：通过持续监控和评估漏洞风险，RBVM可以帮助组织及时发现并修复潜在的安全隐患，提高整体安全性。</li></ol><p>RBVM 在传统漏洞管理的基础上，进一步引入了资产攻击面、 漏洞情报、威胁情报等多维度数据 ，以脆弱性优先级技术（Vulnerability Prioritize Technology – VPT）对漏洞进行打分 与评级。如此一来，安全团队需要面对的“高危”、“严重”漏洞的范围与数量大大缩小，漏洞不再只是漏洞，而是与业务连续性、 资产关键性等联系更加紧密的脆弱点。安全团队可以更加主动地协调运维、业务部门率先修复高优先级的脆弱点。</p><p><strong>RBVM 的主要价值在于</strong>，避免那些最需要优先被关注的可能带来巨大风险的漏洞淹没在海量漏洞告警中，转而<strong>让安全团队能够优先考虑优先级更高的关键漏洞</strong>。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是漏洞管理&quot;&gt;&lt;a href=&quot;#一、什么是漏洞管理&quot; class=&quot;headerlink&quot; title=&quot;一、什么是漏洞管理&quot;&gt;&lt;/a&gt;一、什么是漏洞管理&lt;/h2&gt;&lt;p&gt;安全漏洞是网络或网络资产的结构、功能或实现中的任何缺陷或弱点，黑客可以利用这些缺陷或
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>django.db.utils.operationalerror:\xF0\x9F\x9....报错解决办法</title>
    <link href="https://xiejava.gitee.io/posts/835ea0bc/"/>
    <id>https://xiejava.gitee.io/posts/835ea0bc/</id>
    <published>2024-05-30T06:21:41.000Z</published>
    <updated>2024-06-13T14:52:41.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、问题现象"><a href="#一、问题现象" class="headerlink" title="一、问题现象"></a>一、问题现象</h2><p>今天在迁移hexo的.md博客文件到django的博客程序的时候报错了，具体报错信息如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">"D:\project\pythonproject\work\ishareblog\venv\lib\site-packages\django\db\backends\mysql\base.py"</span>, line 75, <span class="keyword">in</span> execute</span><br><span class="line">    <span class="built_in">return</span> self.cursor.execute(query, args)</span><br><span class="line">  File <span class="string">"D:\project\pythonproject\work\ishareblog\venv\lib\site-packages\MySQLdb\cursors.py"</span>, line 206, <span class="keyword">in</span> execute</span><br><span class="line">    res = self._query(query)</span><br><span class="line">  File <span class="string">"D:\project\pythonproject\work\ishareblog\venv\lib\site-packages\MySQLdb\cursors.py"</span>, line 319, <span class="keyword">in</span> _query</span><br><span class="line">    db.query(q)</span><br><span class="line">  File <span class="string">"D:\project\pythonproject\work\ishareblog\venv\lib\site-packages\MySQLdb\connections.py"</span>, line 254, <span class="keyword">in</span> query</span><br><span class="line">    _mysql.connection.query(self, query)</span><br><span class="line">django.db.utils.OperationalError: (1366, <span class="string">"Incorrect string value: '\\xF0\\x9F\\x98\\x82\\xE5\\x93...' for column 'content' at row 1"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240529/1-%E6%8A%A5%E9%94%99%E7%8E%B0%E8%B1%A1.png" alt="报错现象"></p><p>后来发现是因为.md文件中的内容含有mysql不能识别4个字节的utf8编码的字符，抛出了异常。类似于这种4个字节☺、��</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240529/2-%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0.png" alt="报错原因"></p><h2 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h2><h3 id="1、修改mysql的数据库的字符集和的字符集"><a href="#1、修改mysql的数据库的字符集和的字符集" class="headerlink" title="1、修改mysql的数据库的字符集和的字符集"></a>1、修改mysql的数据库的字符集和的字符集</h3><p>修改数据库的字符集为utf8mb4</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240529/3-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86.png" alt="在这里插入图片描述"></p><p>修改字段的字符集为utf8mb4</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240529/4-%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86.png" alt="在这里插入图片描述"></p><h3 id="2、在djanog的mysql连接串属性中加入字符集为utf8mb4的设置"><a href="#2、在djanog的mysql连接串属性中加入字符集为utf8mb4的设置" class="headerlink" title="2、在djanog的mysql连接串属性中加入字符集为utf8mb4的设置"></a>2、在djanog的mysql连接串属性中加入字符集为utf8mb4的设置</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240529/5-%E4%BF%AE%E6%94%B9django%E8%BF%9E%E6%8E%A5%E4%B8%B2%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AE%BE%E7%BD%AE.png" alt="在这里插入图片描述"></p><p>修改完成后，插入正常。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、问题现象&quot;&gt;&lt;a href=&quot;#一、问题现象&quot; class=&quot;headerlink&quot; title=&quot;一、问题现象&quot;&gt;&lt;/a&gt;一、问题现象&lt;/h2&gt;&lt;p&gt;今天在迁移hexo的.md博客文件到django的博客程序的时候报错了，具体报错信息如下。&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>什么是安全左移,如何实现安全左移</title>
    <link href="https://xiejava.gitee.io/posts/729ef48e/"/>
    <id>https://xiejava.gitee.io/posts/729ef48e/</id>
    <published>2024-05-24T01:10:39.000Z</published>
    <updated>2024-06-13T14:52:41.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、传统软件开发面临的安全挑战"><a href="#一、传统软件开发面临的安全挑战" class="headerlink" title="一、传统软件开发面临的安全挑战"></a>一、传统软件开发面临的安全挑战</h2><p>传统软件开发面临的安全挑战主要包括以下几个方面：</p><ol><li>安全意识和文化的缺乏：在传统软件开发过程中，往往缺乏对安全性的足够重视和深入理解。开发团队可能更注重功能的实现和交付时间，而忽视了安全性在软件开发过程中的重要性。这种缺乏安全意识和文化的环境使得软件容易受到各种安全威胁的攻击。</li><li>代码漏洞和缺陷：在软件开发过程中，由于人为错误、不安全的编程实践或缺乏足够的安全测试，代码中可能存在各种漏洞和缺陷。这些漏洞和缺陷可能被攻击者利用，从而实现对系统的未授权访问、数据泄露或系统破坏等攻击。</li><li>依赖的第三方组件和库的安全问题：传统软件开发通常依赖于各种第三方组件和库来加速开发过程。然而，这些第三方组件和库可能存在安全漏洞或已知的安全问题，如果未经过充分的安全验证和测试，就可能会被引入到软件中，从而给软件带来安全隐患。</li><li>安全的配置和管理：在软件开发和部署过程中，如果配置不当或管理不善，可能会导致安全问题。例如，错误的权限设置、不安全的网络连接、未加密的敏感数据等，都可能成为攻击者的目标。</li><li>应对新型攻击和威胁的能力不足：随着网络攻击技术的不断发展和新型威胁的出现，传统软件开发可能无法及时应对这些新型攻击和威胁。例如，零日漏洞、勒索软件、分布式拒绝服务攻击（DDoS）等新型攻击手段可能给软件带来严重的安全风险。</li></ol><p>为了应对这些安全挑战，传统软件开发需要采取一系列措施来加强安全性。这包括提高开发团队的安全意识和技能、加强代码审查和测试、对第三方组件和库进行充分的安全验证和测试、实施安全的配置和管理等。此外，还可以引入安全左移等新的安全开发方法，将安全性作为软件开发的核心考量因素，从源头上降低安全风险。</p><h2 id="二、什么是安全左移"><a href="#二、什么是安全左移" class="headerlink" title="二、什么是安全左移"></a>二、什么是安全左移</h2><p>在传统的软件开发流程中，安全测试和评估通常在开发周期的后期进行，比如在测试阶段或部署前。然而，这种方法往往会导致在产品即将发布时才发现安全问题，从而增加了修复成本和风险。</p><p>安全左移（Shift-Left Security）是一种软件开发实践，其核心思想是<strong>将安全措施提前到软件开发生命周期（SDLC）的更早阶段</strong>。安全左移的目标是在软件开发的早期阶段，甚至是在编码之前，就开始考虑和实施安全措施。这样，潜在的安全问题可以在它们变得更加根深蒂固和难以修复之前被发现和解决。</p><h2 id="三、安全左移与安全开发生命周期（SDL）"><a href="#三、安全左移与安全开发生命周期（SDL）" class="headerlink" title="三、安全左移与安全开发生命周期（SDL）"></a>三、安全左移与安全开发生命周期（SDL）</h2><p>安全左移（Shift-Left Security）与安全开发生命周期（SDL, Security Development Lifecycle）紧密相关，是SDL中的一个重要概念。</p><p>安全左移是一种在软件开发过程的早期阶段就引入安全考虑的实践，旨在帮助开发人员在代码被集成、测试、记录甚至发布之前，就能发现潜在的安全风险。这种方法的目标是提高安全任务的效率，并确保这些必要的任务不会遗留到开发周期结束。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240523/1-SDL.png" alt="SDL"></p><p>SDL由微软提出并应用一个帮助开发人员构建更安全的软件和解决安全合规要求的同时降低开发成本的软件开发过程，侧重于软件开发的安全保证过程，旨在开发出安全的软件应用。其核心理念是将安全考虑集成在软件开发的每一个阶段，包括需求分析、设计、编码、测试和维护。SDL的目标是通过在各个阶段都增加相应的安全活动，来减少软件中漏洞的数量并将安全缺陷降低到最小程度。</p><p>在安全左移与SDL的关系中，可以认为安全左移是SDL的一种实践方式。也就是说，通过实施安全左移，可以将SDL的理念和方法更好地应用到实际的软件开发过程中。安全左移强调在软件开发早期阶段就引入安全考虑，这与SDL将安全考虑集成在软件开发每个阶段的目标是一致的。</p><h2 id="四、安全左移对开发的挑战"><a href="#四、安全左移对开发的挑战" class="headerlink" title="四、安全左移对开发的挑战"></a>四、安全左移对开发的挑战</h2><p>安全左移对开发带来的挑战主要体现在以下几个方面：</p><ol><li>缺少计划：在实践安全左移过程中，缺少合理的规划和计划是最大的挑战之一。安全左移需要建立起安全意识与责任感，并将安全融入到开发团队的工作流程中。然而，由于缺乏明确的计划，许多企业仅仅执意进行左移，却忽略了安全规范和流程的制定，从而导致安全措施的不完善和应对漏洞的能力不足。</li><li>安全责任转嫁：安全左移的核心思想是将安全的责任从专门的安全团队转嫁给开发团队，让开发人员在软件开发过程中就能够考虑和实施必要的安全措施。然而，这种转嫁过程并不容易。开发团队通常关注的是项目的进度和功能的实现，对于安全知识和安全技能的掌握相对较弱。因此，企业需要通过定期的培训和教育，提高开发团队的安全意识和能力，使他们能够主动参与到安全左移的实践中。</li><li>技术和工具的选择：安全左移需要借助各种技术和工具来辅助实施，如自动化测试工具、安全扫描工具等。然而，如何选择和使用这些工具也是一个挑战。不同的工具有不同的适用场景和优缺点，需要根据实际情况进行选择和调整。同时，如何将这些工具与现有的开发流程相结合，也是需要考虑的问题。</li><li>平衡安全与进度：在安全左移的过程中，需要平衡安全与进度的关系。一方面，需要确保软件的安全性，避免潜在的安全漏洞和风险；另一方面，也需要保证项目的进度和交付时间。如何在保证安全的前提下，尽可能地提高开发效率，是安全左移需要解决的一个问题。</li><li>跨团队协作：安全左移需要跨团队协作，包括开发团队、安全团队和运维团队等。如何确保这些团队之间的有效沟通和协作，避免信息孤岛和沟通障碍，也是安全左移需要面临的挑战之一。</li></ol><p>为了应对这些挑战，企业可以采取以下措施：</p><ol><li>制定全面的计划和策略：明确安全左移的目标和步骤，制定详细的计划和策略，确保安全左移的顺利实施。</li><li>加强培训和教育：提高开发团队的安全意识和能力，使他们能够更好地参与到安全左移的实践中。</li><li>选择合适的技术和工具：根据实际需求选择合适的技术和工具，确保它们能够有效地辅助安全左移的实施。</li><li>平衡安全与进度：在制定开发计划时充分考虑安全因素，确保在保证安全的前提下尽可能地提高开发效率。</li><li>加强跨团队协作：建立良好的沟通机制和协作机制，确保各个团队之间的有效沟通和协作。</li></ol><h2 id="五、从DevOps到DevSecOps"><a href="#五、从DevOps到DevSecOps" class="headerlink" title="五、从DevOps到DevSecOps"></a>五、从DevOps到DevSecOps</h2><p>随着对软件安全性的要求不断提高，传统的DevOps模式开始面临挑战。什么是DevOps见《<a href="http://xiejava.ishareread.com/posts/5efe604f/" target="_blank" rel="noopener">研发管理之认识DevOps</a>》。为了确保软件在开发过程中的安全性，需要在DevOps的基础上引入安全性的考虑，这就是DevSecOps（Development，Security，Operations的组合词）的出现。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240523/2-DevOps2DevSecOps.png" alt="从DevOps到DevSecOps"></p><p>DevSecOps是一种集开发、安全和运维于一体的新型软件开发和运营模式。它强调在快速迭代和持续交付的背景下，将安全性融入到整个软件开发过程中，实现开发、安全和运维的协同和一体化。在DevSecOps模式下，安全性不再是软件开发过程的一个附加环节，而是贯穿于整个开发流程中，从需求分析、设计、编码、测试到部署和维护的每个阶段都需要考虑安全性。</p><p>与DevOps相比，DevSecOps具有以下优势：</p><ol><li>提高安全性：通过在开发过程中引入安全性的考虑，DevSecOps可以更早地发现和修复潜在的安全漏洞和缺陷，从而提高软件的安全性。</li><li>加速开发过程：DevSecOps通过自动化和标准化的安全流程，可以减少手动测试和修复安全漏洞的时间，从而加速开发过程。</li><li>提高团队协作效率：DevSecOps强调开发、安全和运维团队之间的紧密协作，可以提高团队协作效率，促进知识的共享和交流。</li></ol><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240523/3-DevSecOps.png" alt="DevSecOps"></p><p>DevSecOps和DevOps在理念和实践上存在一些关键的区别，主要体现在以下几个方面：</p><ol><li>安全性集成：DevSecOps是“开发、安全和运营”的缩写，它强调在快速迭代和持续交付的背景下，将安全性融入到整个软件开发过程中。这意味着安全性是DevSecOps的一个核心组成部分，从软件开发的早期阶段就开始考虑并贯穿整个开发流程。而DevOps则更侧重于促进开发（Dev）和运维（Ops）团队之间的沟通与协作，虽然也关注安全性，但通常不是其首要关注点。</li><li>安全性防护：DevSecOps强调将安全性作为整个IT生命周期的共同责任，通过应用和基础架构的安全防护来确保软件的安全性。这包括在开发阶段进行安全编码实践、安全测试和漏洞扫描等，以及在运维阶段进行安全监控和事件响应等。而DevOps则更关注于提高开发和运维的协同效率，以及通过自动化和持续集成等技术手段来加速软件交付。</li><li>安全性实践：DevSecOps在安全性实践方面更加深入和全面，它要求在软件开发的全过程中都遵循安全最佳实践，包括安全需求分析、安全设计、安全编码、安全测试、安全部署和安全运维等。而DevOps虽然也关注安全性，但通常不会深入到这些具体的实践层面。<br>DevSecOps和DevOps都是为了提高软件开发和运维的效率和质量而出现的理念和实践，但它们在安全性方面的关注度和实践方式有所不同。DevSecOps更加强调安全性的重要性，并将其作为整个软件开发和运维流程的核心组成部分，而DevOps则更侧重于促进开发和运维团队之间的沟通与协作，以及通过自动化和持续集成等技术手段来加速软件交付。</li></ol><h2 id="六、SDL与DevSecOps"><a href="#六、SDL与DevSecOps" class="headerlink" title="六、SDL与DevSecOps"></a>六、SDL与DevSecOps</h2><p>SDL（Security Development Lifecycle）和DevSecOps（Development Security Operations）都是旨在加强软件开发过程中的安全性的方法论。SDL提供了一种系统化的方法来集成安全实践，而DevSecOps则提供了一种文化和实践框架，以支持SDL的安全实践在DevOps环境中的实施，DevSecOps可以看作是SDL在现代敏捷和DevOps环境中的扩展和适应，它强调了自动化和持续集成的重要性。</p><ul><li>SDL更侧重于安全措施的过程化和文档化，而DevSecOps更侧重于安全文化的推广和自动化工具的应用。</li><li>在SDL中，安全责任可能更侧重于安全团队，而在DevSecOps中，安全是开发、安全、运维团队共同的责任。</li><li>SDL可能更适合大型、长期、需求变化不频繁的项目，而DevSecOps更适合快速迭代、需求不断变化的环境。</li></ul><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、传统软件开发面临的安全挑战&quot;&gt;&lt;a href=&quot;#一、传统软件开发面临的安全挑战&quot; class=&quot;headerlink&quot; title=&quot;一、传统软件开发面临的安全挑战&quot;&gt;&lt;/a&gt;一、传统软件开发面临的安全挑战&lt;/h2&gt;&lt;p&gt;传统软件开发面临的安全挑战主要包括以
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/"/>
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="运维" scheme="https://xiejava.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>DevOps实践：通过云效实现hexo自动构建部署发布</title>
    <link href="https://xiejava.gitee.io/posts/f872a2f0/"/>
    <id>https://xiejava.gitee.io/posts/f872a2f0/</id>
    <published>2024-05-20T04:41:16.000Z</published>
    <updated>2024-06-13T14:52:41.618Z</updated>
    
    <content type="html"><![CDATA[<p>DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。这是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例，是一个软件开发方法论。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/1-DevOps.png" alt="DevOps"></p><p>DevOps的目标是通过自动化“软件交付”和“架构变更”的流程，使得构建、测试、发布软件能够更加地快捷、频繁和可靠。这种方法的出现是因为软件行业日益清晰地认识到，为了按时交付软件产品和服务，开发和运维工作必须紧密合作。</p><p>《<a href="http://xiejava.ishareread.com/posts/5efe604f/" target="_blank" rel="noopener">研发管理之认识DevOps</a>》介绍了DevOps的概念和价值，本文我们来做一个小小的实践，通过阿里的云效DevOps平台来实现我的xiejava.ishareread.com的hexo博客网站的自动化部署实现持续集成和持续部署（CI/CD）。</p><h2 id="一、没有用DevOps之前"><a href="#一、没有用DevOps之前" class="headerlink" title="一、没有用DevOps之前"></a>一、没有用DevOps之前</h2><p>我的xiejava.ishareread.com个人博客是通过hexo搭建的。因为是个人博客用hexo搭建比较简单而且还可以通过github的pages服务不用购买自己的服务器都可让大家访问。hexo博客的搭建教程见《<a href="http://xiejava.ishareread.com/posts/79ebd763/" target="_blank" rel="noopener">通过Git Pages+Hexo搭建自己的博客</a>》毕竟github在国内访问不是很稳定，所以我是购买了一台阿里的云主机ECS来部署我的hexo应用。</p><p>在没有用DevOps之前，我是通过自己本地用VS Code来编辑hexo的markdown博文，让后在本地通过执行hexo g命令生成构建hexo网站，然后登录到自己的阿里云主机上将文件传到服务器目录，再在服务器上构建并部署hexo应用。hexo很简单，这样构建发布也很容易，这几年也是这样做的。唯一不方便的就是有时候写的博文要修改，改一次就要重新上传发布到服务器上。毕竟咱也是搞IT的，感觉这样还是很不优雅。能不能提交markdown博文的.md文件候就自动给我发布了，省得每次还要登服务器，上传文件，编译，重启服务搞一系列的操作。</p><h2 id="二、用了DevOps之后"><a href="#二、用了DevOps之后" class="headerlink" title="二、用了DevOps之后"></a>二、用了DevOps之后</h2><p>为了体现程序员的优雅，我的个人博客xiejava.ishareread.com，小小的hexo用上了DevOps的牛刀。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/2-hexo%E7%BD%91%E7%AB%99devops.png" alt="hexo的DevOps"></p><p>用了DevOps后，我只需要在本地用VS Code来编辑hexo的markdown博文，提交到代码仓库。后面的构建，打包，部署我都不用管了，直接通过DevOps平台自动做了。</p><h2 id="三、如何实践DevOps实现hexo网站的自动发布"><a href="#三、如何实践DevOps实现hexo网站的自动发布" class="headerlink" title="三、如何实践DevOps实现hexo网站的自动发布"></a>三、如何实践DevOps实现hexo网站的自动发布</h2><p>DevOps平台工具有很多，最常见的就是大名顶顶的Jenkins，本来想搭一套Jenkins的我的云服务器本来就只有1核1G的内存，更本就扛不住。后来在阿里的网站上看到阿里推出了自己的DevOps平台云效，赶紧来试试。<br>云效DevOps平台功能很多，包括有项目协作、代码管理、流水线、测试管理、制品仓库、知识库。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/3-%E4%BA%91%E6%95%88%E5%B9%B3%E5%8F%B0.png" alt="在这里插入图片描述"></p><p>对于我这个小小的hexo个人博客的应用，其他都用不上，我就用了代码管理和流水线。</p><h3 id="1、代码管理"><a href="#1、代码管理" class="headerlink" title="1、代码管理"></a>1、代码管理</h3><p>将我的hexo博客代码托管到云效的代码管理Codeup代码库。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/4-%E4%BA%91%E6%95%88Codeup%E4%BB%A3%E7%A0%81%E5%BA%93.png" alt="代码管理"></p><p>可以支持从github、gitee、coding等代码仓库导入代码库。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/5-%E4%BA%91%E6%95%88%E4%BB%8E%E5%85%B6%E4%BB%96%E4%BB%A3%E7%A0%81%E5%BA%93%E5%AF%BC%E5%85%A5%E4%BB%A3%E7%A0%81.png" alt="云效从其他代码库导入代码"></p><h3 id="2、构建流水线"><a href="#2、构建流水线" class="headerlink" title="2、构建流水线"></a>2、构建流水线</h3><p>新建一条流水线用于拉代码、构建、部署。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/6-%E4%BA%91%E6%95%88%E6%B5%81%E6%B0%B4%E7%BA%BF.png" alt="构建流水线"></p><h4 id="1）设置流水线源"><a href="#1）设置流水线源" class="headerlink" title="1）设置流水线源"></a>1）设置流水线源</h4><p>这里流水线源就是设置代码源流水线将从代码管理的Codeup代码库获取代码。其实也可以不用托管到云效的Codeup代码库，流水线代码源支持github、gitee、coding等代码仓库。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/7-%E4%BA%91%E6%95%88%E4%BB%8E%E5%85%B6%E4%BB%96%E4%BB%93%E5%BA%93%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%A0%81%E6%BA%90.png" alt="设置流水线源"></p><h4 id="2）添加并设置构建环节"><a href="#2）添加并设置构建环节" class="headerlink" title="2）添加并设置构建环节"></a>2）添加并设置构建环节</h4><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/8-%E4%BA%91%E6%95%88%E6%B7%BB%E5%8A%A0%E6%9E%84%E5%BB%BA%E7%8E%AF%E8%8A%82.png" alt="云效添加构建环节"></p><p>因为hexo是通过Node.js构建的，所以这里添加构建任务Node.js构建。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/9-Nodejs%E6%9E%84%E5%BB%BA%E5%86%99%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9E%84%E5%BB%BA%E5%91%BD%E4%BB%A4.png" alt="Nodejs构建写入自己的构建命令"></p><p>在node.js构建节点，可以选择Node的版版本，将自己hexo应用的构建命令写入到构建命令。<br>我这里只用到了三条命令，安装hexo，从代码库中拉取hexo的主题，通过hexo g生成hexo的博客应用。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span> -<span class="literal">-unsafe</span><span class="literal">-perm</span></span><br><span class="line">git clone https://gitee.com/xiejava/hexo<span class="literal">-theme</span><span class="literal">-next</span>.git themes/hexo<span class="literal">-theme</span><span class="literal">-next</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>这一步的任务输出就会生成hexo的博客应用的制品，给你打好包。下一步的动作就是将打好的制品包上传至自己的服务器进行部署。</p><h4 id="3）添加并设置部署环节"><a href="#3）添加并设置部署环节" class="headerlink" title="3）添加并设置部署环节"></a>3）添加并设置部署环节</h4><p>云效支持很多种部署，因为我是要部署到自己的云主机，所以选择“主机部署”<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/10-%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9C%BA%E9%83%A8%E7%BD%B2%E7%8E%AF%E8%8A%82.png" alt="添加主机部署环节"></p><p>要部署到自己的云主机，就要让云效知道你的主机在哪里，可以点击新建主机组，将自己的主机添加进来。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/11-%E6%96%B0%E5%BB%BA%E4%B8%BB%E6%9C%BA%E7%BB%84.png" alt="新建主机组"></p><p>将需要部署的主机添加到主机组<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/12-%E5%B0%86%E4%B8%BB%E6%9C%BA%E6%B7%BB%E5%8A%A0%E5%88%B0%E4%B8%BB%E6%9C%BA%E7%BB%84.png" alt="将主机添加到主机组"></p><p>然后添加在主机上执行的部署脚本<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/13-%E6%B7%BB%E5%8A%A0%E5%9C%A8%E4%B8%BB%E6%9C%BA%E4%B8%8A%E6%89%A7%E8%A1%8C%E7%9A%84%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC.png" alt="添加在主机上执行的部署脚本"></p><p>我在主机上hexo 服务进程用supervisor进行了托管，在这里部署脚本只有三条命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl stop hexo</span><br><span class="line">tar zxvf /home/admin/app/package.tgz <span class="literal">-C</span> /home/myhexo/myblog</span><br><span class="line">supervisorctl start hexo</span><br></pre></td></tr></table></figure><p>停止hexo的服务，将制品包解压到hexo的目录，然后再启动hexo服务就可以了。<br>云效还可以定义任务插件，比如在部署成功后发个邮件通知等。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/14-%E6%B7%BB%E5%8A%A0%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5.png" alt="云效邮件通知"></p><p>到这里流水线就构建好了。</p><h3 id="3、测试流水线"><a href="#3、测试流水线" class="headerlink" title="3、测试流水线"></a>3、测试流水线</h3><p>设置触发条件，开启Webhook触发，实现提交代码到到云效的Codeup代码库就可以触发流水线，开启自动拉取代码，自动构建、自动打包上传至主机、自动部署的流水线作业。也可以手动运行触发流水线。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/15-%E8%AE%BE%E7%BD%AE%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6.png" alt="设置触发条件"></p><p>流水线执行后，可以在运行历史中看到每次流水线执行的情况。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/16-%E6%9F%A5%E7%9C%8B%E6%AF%8F%E6%AC%A1%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5.png" alt="查看每次流水线执行情况"></p><p>也可以收到云效自动发过来的每次部署情况的邮件。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/17-%E4%BA%91%E6%95%88%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%89%A7%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5.png" alt="云效邮件通知"></p><h3 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h3><p>云效针对流水线还提供了统计报表，可以看到流水线运行的概况的统计数据。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240519/18-%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%BB%9F%E8%AE%A1%E6%A6%82%E5%86%B5.png" alt="流水线运行的概况的统计数据"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本文通过一个hexo个人博客进行了DevOps的实践，当然因为项目太小不能实践到DevOps的全部，但也可以窥豹一斑。通过DevOps拉通开发和运维，通过应用DevOps平台能实现自动化“软件交付”的流程，使得构建、测试、发布软件能够更加地快捷、频繁和可靠，提交研发交付效率。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。这是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
      <category term="管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/"/>
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>研发管理之认识DevOps</title>
    <link href="https://xiejava.gitee.io/posts/5efe604f/"/>
    <id>https://xiejava.gitee.io/posts/5efe604f/</id>
    <published>2024-05-14T06:14:59.000Z</published>
    <updated>2024-06-13T14:52:41.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是DevOps"><a href="#一、什么是DevOps" class="headerlink" title="一、什么是DevOps"></a>一、什么是DevOps</h2><p>DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。这是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例，是一个软件开发方法论。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240514/2.dev_ops.png" alt="DevOps"></p><p>DevOps的目标是通过自动化“软件交付”和“架构变更”的流程，使得构建、测试、发布软件能够更加地快捷、频繁和可靠。这种方法的出现是因为软件行业日益清晰地认识到，为了按时交付软件产品和服务，开发和运维工作必须紧密合作。</p><p>DevOps它强调开发（Development）和运维（Operations）之间的协作与交流，以提高软件交付的速度和质量。DevOps的核心目标是缩短系统开发生命周期，提供持续的交付和快速的反馈。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240514/1.devops.png" alt="DevOps"></p><h2 id="二、DevOps的背景和起源"><a href="#二、DevOps的背景和起源" class="headerlink" title="二、DevOps的背景和起源"></a>二、DevOps的背景和起源</h2><p>DevOps的背景和起源可以追溯到软件开发行业面临的一些挑战和变革。</p><p>在传统的软件开发模式中，设计、开发、测试、部署等各个环节往往是顺序进行的又叫瀑布开发模型，每个阶段都有明确的输出和交接点。然而，这种模式在面对快速变化的市场需求时显得捉襟见肘，无法满足用户对软件的快速迭代和持续交付的需求。因此，敏捷开发模式开始受到广泛关注。</p><p>敏捷开发强调跨部门、跨角色的协作与沟通，注重快速响应变化，持续交付价值。在这种模式下，开发团队被划分为多个小团队，每个小团队负责一部分功能或模块的开发，通过短周期的迭代开发方式，逐步实现软件的整体功能。这种模式有效地提高了软件开发的并行度和效率，但也给运维带来了新的挑战。</p><p>持续开发带来的运维问题主要包括：随着软件功能的不断增加和版本迭代速度的加快，运维工作面临巨大的压力。开发团队和运维团队之间往往存在沟通障碍，导致开发完成的功能在部署和运维阶段出现问题。此外，传统的软件开发模式通常将开发、IT运营和质量保障设为各自分离的部门，这种分工方式使得跨部门的协作变得困难，进一步加剧了运维问题。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240514/3.%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B%E6%BC%94%E8%BF%9B.png" alt="开发模型演进"></p><p>为了解决这些问题，DevOps应运而生。DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。</p><p>DevOps的起源可以追溯到2009年左右，当时一些欧洲的IT企业开始尝试将开发和运维工作结合起来，以提高软件交付的效率和质量。随着这种模式的不断发展和完善，DevOps逐渐成为了全球软件开发行业的一种主流趋势。</p><p>DevOps将开发、测试、运维拉到同一战线，使产品持续开发、持续集成、持续测试、持续部署、持续监控，非常频繁地发布新版本。它的目标是打破开发和运维之间的壁垒，实现二者的紧密结合，从而提高软件交付的速度和质量。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240514/4.%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="开发模型之间的关系"></p><p>如今，越来越多的企业开始采用DevOps模式来改进软件开发和运维流程，以应对快速变化的市场需求。</p><h2 id="三、DevOps的特点和价值"><a href="#三、DevOps的特点和价值" class="headerlink" title="三、DevOps的特点和价值"></a>三、DevOps的特点和价值</h2><p>DevOps（Development和Operations的组合），旨在通过自动化、协作和共享责任来提高软件开发和运维的效率、质量和安全性。以下是DevOps的主要特点和价值：</p><h3 id="1、特点："><a href="#1、特点：" class="headerlink" title="1、特点："></a>1、特点：</h3><p>● 文化和团队协作：DevOps强调开发（Dev）和运维（Ops）团队之间的紧密合作，打破传统的壁垒，实现跨部门、跨角色的沟通和协作。<br>● 自动化：通过引入自动化工具和流程，DevOps可以显著减少手动操作，提高开发、测试、部署和运维的效率。<br>● 持续集成和持续部署（CI/CD）：CI/CD是DevOps的核心实践之一，通过自动化构建、测试和部署流程，实现快速迭代和交付。<br>● 监控和反馈：DevOps强调对系统性能、安全性和可靠性的实时监控，以便及时发现问题并进行修复。同时，通过收集和分析数据，为决策提供支持。<br>● 共享责任：在DevOps文化中，开发和运维团队共同承担系统质量、稳定性和可靠性的责任，共同推动系统的持续改进和优化。</p><h3 id="2、价值："><a href="#2、价值：" class="headerlink" title="2、价值："></a>2、价值：</h3><p>● 提高交付速度和质量：通过自动化和协作，DevOps可以显著缩短开发周期，提高交付速度。同时，通过引入持续集成和持续部署等实践，可以确保代码质量和系统稳定性。<br>● 降低运维成本：通过自动化运维流程和工具，DevOps可以降低手动操作的错误率，减少故障恢复时间，从而降低运维成本。<br>● 增强安全性：DevOps强调对系统性能的实时监控和数据分析，有助于及时发现潜在的安全风险并进行修复。此外，通过引入自动化安全测试和审计工具，可以确保系统的安全性。<br>● 提高客户满意度：通过快速迭代和交付高质量的产品，DevOps可以满足客户的不断变化的需求，提高客户满意度。<br>● 促进创新和竞争力：DevOps鼓励团队之间的协作和创新，有助于推动组织的持续创新和竞争力提升。</p><p>DevOps将开发、测试、运维拉到同一战线，使产品持续开发、持续集成、持续测试、持续部署、持续监控，非常频繁地发布交付新版本。对比前面所说的瀑布式开发和敏捷开发，我们可以明显看出，DevOps贯穿了软件全生命周期。下面这张图，更明显地说明了DevOps所处的位置，还有它的价值：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240514/5.devops%E4%BB%B7%E5%80%BC.png" alt="devops价值"></p><p>DevOps通过打破传统壁垒、引入自动化和协作实践、实时监控和数据分析等手段，为组织带来了诸多价值和优势。随着技术的不断发展和市场需求的变化，DevOps将在未来继续发挥重要作用。</p><h2 id="四、DevOps如何帮助提高软件交付速度和质量"><a href="#四、DevOps如何帮助提高软件交付速度和质量" class="headerlink" title="四、DevOps如何帮助提高软件交付速度和质量"></a>四、DevOps如何帮助提高软件交付速度和质量</h2><p>DevOps通过一系列的实践和工具，帮助提高软件交付速度和质量，具体体现在以下几个方面：</p><ol><li>持续集成（CI）和持续交付（CD）：<br>○ DevOps强调将代码集成到主干开发分支中，并经过自动化测试，以确保每次提交的代码都是可靠的。持续集成使得开发人员能够频繁地将代码变更集成到共享的主干代码库中，并通过自动化测试和构建流程进行验证。<br>○ 持续交付则通过自动化构建、测试和部署软件，实现快速、可靠的交付流程。当代码通过所有测试后，可以自动部署到生产环境，从而大大缩短了发布周期。</li><li>自动化测试：<br>○ 自动化测试是DevOps中不可或缺的一部分。通过自动化测试，可以快速、高效地发现和解决代码问题，同时减少手动测试的工作量。常见的自动化测试包括单元测试、集成测试和端到端测试等。这些测试可以在代码集成阶段就进行，从而确保代码的质量。</li><li>自动化部署和配置管理：<br>○ DevOps强调自动化部署和配置管理，通过使用工具和脚本自动化应用程序的部署和配置过程。自动化部署可以减少人为错误，确保发布过程的一致性和可重复性。配置管理工具则可以帮助团队管理应用程序的配置，提供版本控制和自动化更新，使得应用程序的部署和配置变得更加灵活和可管理。</li><li>实时监控和快速响应：<br>○ 通过实时监控，DevOps可以及时发现和解决系统问题，减少系统故障和停机时间。同时，快速响应也可以保证在系统出现问题时能够快速解决问题，进一步减少停机时间。这种实时监控和快速响应的机制有助于确保软件的稳定性和可用性。</li><li>文化与团队协作：<br>○ DevOps强调跨团队协作和沟通，打破了传统开发和运维之间的壁垒。它鼓励团队成员共同制定标准、流程和最佳实践，共享知识和经验，从而提高团队整体的工作效率。这种文化和团队协作的氛围有助于加快软件开发和交付的速度。</li><li>反馈迭代循环：<br>○ DevOps通过建立反馈循环，将客户反馈和业务需求纳入产品迭代计划中。这使得团队能够更快地响应客户需求和变化，不断改进产品以满足市场的期望。这种反馈循环有助于确保软件交付的质量符合客户和业务的需求。</li></ol><p>DevOps通过持续集成、自动化测试、自动化部署和配置管理、实时监控和快速响应、文化与团队协作以及反馈循环等手段，帮助提高软件交付速度和质量。这些实践和工具使得软件开发和交付过程更加高效、可靠和灵活。以下是DevOps生态圈中的一些工具，企业可以通过集成这些工具搭建自己的DevOps平台。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240514/devops%E7%94%9F%E6%80%81%E5%9C%88.png" alt="devops生态圈"></p><p>在DevOps的流程下，运维人员会在项目开发期间就介入到开发过程中，了解开发人员使用的系统架构和技术路线，从而制定适当的运维方案。而开发人员也会在运维的初期参与到系统部署中，并提供系统部署的优化建议。除了平台工具外，想要将DevOps真正落地，首先第一点，是<strong>思维转变</strong>，DevOps并不仅仅是组织架构变革，更是企业文化和思想观念的变革。根据DevOps思想重新梳理全流程的<strong>规范和标准</strong>。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是DevOps&quot;&gt;&lt;a href=&quot;#一、什么是DevOps&quot; class=&quot;headerlink&quot; title=&quot;一、什么是DevOps&quot;&gt;&lt;/a&gt;一、什么是DevOps&lt;/h2&gt;&lt;p&gt;DevOps（Development和Operations的组合词）
      
    
    </summary>
    
    
      <category term="管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/"/>
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
