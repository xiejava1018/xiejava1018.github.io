<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieJava&#39;s blog</title>
  
  <subtitle>记录最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiejava.gitee.io/"/>
  <updated>2025-08-30T08:05:23.195Z</updated>
  <id>https://xiejava.gitee.io/</id>
  
  <author>
    <name>XieJava</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Easytier快速实现异地组网</title>
    <link href="https://xiejava.gitee.io/posts/d2b2ee39/"/>
    <id>https://xiejava.gitee.io/posts/d2b2ee39/</id>
    <published>2025-08-30T07:51:04.000Z</published>
    <updated>2025-08-30T08:05:23.195Z</updated>
    
    <content type="html"><![CDATA[<p>玩NAS的小伙伴在安装完NAS系统后都在折腾“回家”，NAS是放在家里的设备，如何在外面方便的访问家里的主机设备是很多小伙伴面临的课题。“回家”的办法有很多，今天主要介绍我个人觉得很方便的Easytier来快速实现异地组网在外面访问家里的设备。</p><h2 id="一、什么是Easytier"><a href="#一、什么是Easytier" class="headerlink" title="一、什么是Easytier"></a>一、什么是Easytier</h2><p>EasyTier 是一款简单、安全、去中心化的内网穿透和异地组网工具，适合远程办公、异地访问、游戏加速等多种场景。无需公网 IP，无需复杂配置，轻松实现不同地点设备间的安全互联。</p><h2 id="二、飞牛NAS安装Easytier"><a href="#二、飞牛NAS安装Easytier" class="headerlink" title="二、飞牛NAS安装Easytier"></a>二、飞牛NAS安装Easytier</h2><p>在飞牛NAS的镜像仓库中找到下载量最大的easytier斤镜像进行安装<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250830/1-%E9%A3%9E%E7%89%9Bnas-docker.png" alt="\[图片\]"></p><p>在启动容器时设置使用高权限执行容器<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250830/2-easytier-docker%E9%AB%98%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE.png" alt="\[图片\]"></p><p>在“命令”输入框中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--network-name &lt;你的虚拟网络名称&gt;</span><br><span class="line">--network-secret &lt;你的网络密码，随便输入，后面加入网络的要用到&gt;</span><br><span class="line">-p tcp://public.easytier.top:11010</span><br><span class="line">--ipv4 10.10.10.3</span><br><span class="line">-n 192.168.0.0/24(这里换成自己的内网的网段)</span><br></pre></td></tr></table></figure><p>这是一个用于连接到一个现有 EasyTier 网络的客户端节点的典型配置。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250830/3-easytier-docker%E5%91%BD%E4%BB%A4%E9%85%8D%E7%BD%AE.png" alt="\[图片\]"></p><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><ol><li><code>--network-name 你的虚拟网络名称</code> <ul><li>含义： 指定要加入的虚拟网络的名称。</li><li>解释： 所有要组成同一个虚拟局域网（VLAN）的节点（客户端和超级节点）必须使用完全相同的网络名称。如网络名为 xiejava。这相当于一个共享的“房间号”或“频道号”，只有名称相同的节点才能互相发现和通信。</li></ul></li><li><code>--network-secret 你的网络密码</code><ul><li>含义： 用于验证和加密网络通信的密钥（密码）。</li><li>解释： 所有加入同一网络的节点必须使用完全相同的密钥。它有两个主要作用：<ul><li>身份认证： 防止未经授权的节点随意加入你的私有网络。</li><li>通信加密： 对节点之间传输的数据进行加密，保障通信安全。因此，一个强密码非常重要。</li></ul></li></ul></li><li><code>-p tcp://public.easytier.top:11010</code><ul><li>含义： 指定要连接的上层节点（Super Node）的地址。</li><li>解释：<ul><li>-p 是 –peer 的简写形式。</li><li>tcp:// 表示使用 TCP 协议进行连接。</li><li>public.easytier.top:11010 是超级节点的地址和端口。这是一个部署在公网上的服务器，它的作用是帮助位于不同内网中的客户端节点（比如你的这台机器）进行“打洞”和中转连接。</li></ul></li><li>简单来说，这个参数告诉你的客户端：“请去这个地址找中介服务器，它会帮你联系网络里的其他伙伴。”</li></ul></li><li><code>--ipv4 10.10.10.3</code><ul><li>含义： 指定本节点在虚拟网络中使用的静态 IPv4 地址。</li><li>解释： 加入虚拟网络后，你的机器会拥有两个IP地址：一个是物理网卡的真实地址（如 192.168.1.100），另一个就是这个虚拟地址 10.10.10.3。网络中的其他设备将通过这个 10.10.10.3 的地址来访问你的机器。使用静态IP可以方便地管理和访问特定的设备。</li></ul></li><li><code>-n 192.168.0.0/24</code><ul><li>含义： 为虚拟网络添加一条静态路由规则。</li><li>解释：<ul><li>-n 是 –route 的简写形式，用于添加路由。</li><li>192.168.0.0/24 是一个网段。这条命令的意思是：“所有发往 192.168.0.0/24 这个网段的数据包，都请通过本机的 EasyTier 虚拟网卡发送（即通过 EasyTier 虚拟网络来路由）。”</li></ul></li><li>用途： 假设你家里的本地局域网网段是 192.168.0.0/24，你在这台机器上添加了这条路由。那么，当网络中的其他节点（如 10.10.10.2）想访问你内网的服务器（如 192.168.0.100）时，它们的数据包会发到你这台机器（10.10.10.3），然后由你这台机器利用本地物理网络转发到 192.168.0.100。这样就实现了从异地访问公司内网资源的功能。这通常是在作为“网关”或提供路由服务的节点上配置的。</li></ul></li></ol><h3 id="配置总结"><a href="#配置总结" class="headerlink" title="配置总结"></a>配置总结</h3><p>这条完整的命令配置了一个 EasyTier 客户端，其作用是：</p><ol><li>加入一个名为 “虚拟网络名”、密码为 “你的虚拟网络密码” 的私有虚拟网络。</li><li>通过连接公网上的超级节点 public.easytier.top:11010 来与其他节点建立联系。</li><li>它在本虚拟网络中的固定IP地址是 10.10.10.3。</li><li>它同时宣布了自己可以为整个虚拟网络提供到 192.168.0.0/24 网段的路由服务，其他节点要访问这个网段的数据都会经过它。</li></ol><p>简单来说，将这台NAS机器作为家里网络内部的节点，它既加入了虚拟网络（地址 10.10.10.3），又扮演了让外部能够访问内部 192.168.0.x 服务器的“网关”角色。</p><h2 id="三、Easytier快速组网异地访问"><a href="#三、Easytier快速组网异地访问" class="headerlink" title="三、Easytier快速组网异地访问"></a>三、Easytier快速组网异地访问</h2><p>Easytier提供了多种符合各类操作系统的工具包括linux、window、MacOS、Android 等，下面以window为例，到官网<a href="https://easytier.rs/guide/download.html下载window的Easytier" target="_blank" rel="noopener">https://easytier.rs/guide/download.html下载window的Easytier</a> GUI。<br>在window机器上进行安装后打开Easytier GUI界面进行设置<br>在网络名称和网络密码中分别设置成在飞牛NAS中Easytier docker容器中命令中指定的网络名称和网络密码。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250830/4-easytier-window%E7%BB%84%E7%BD%91.png" alt="\[图片\]"></p><p>设置完成后点击“运行网络”，稍等一会就发现节点信息中本机和飞牛NAS中的easytier都连上来了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250830/5-easytier-window%E7%BB%84%E7%BD%91%E6%88%90%E5%8A%9F.png" alt="\[图片\]"></p><p>可以看到运行window的Easytier GUI的机器在外面连的是手机热点的网络，可以ping通家里内网的IP，可以畅快的访问家里的网络了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250830/6-easytier%E7%BB%84%E7%BD%91%E6%95%88%E6%9E%9C.png" alt="\[图片\]"></p><h2 id="四、Easytier的适用场景"><a href="#四、Easytier的适用场景" class="headerlink" title="四、Easytier的适用场景"></a>四、Easytier的适用场景</h2><ul><li>远程办公：让公司、家中和外地的电脑像在同一局域网一样互通。</li><li>异地访问：随时随地安全访问家中 NAS、服务器或其他设备。</li><li>游戏加速：组建虚拟局域网，畅玩联机游戏。</li><li>物联网组网：让分布在不同地点的设备安全互联。</li></ul><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;玩NAS的小伙伴在安装完NAS系统后都在折腾“回家”，NAS是放在家里的设备，如何在外面方便的访问家里的主机设备是很多小伙伴面临的课题。“回家”的办法有很多，今天主要介绍我个人觉得很方便的Easytier来快速实现异地组网在外面访问家里的设备。&lt;/p&gt;
&lt;h2 id=&quot;一、
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="NAS" scheme="https://xiejava.gitee.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>为搞清楚凌晨上网都在干啥，我建了一套AI上网行为分析系统</title>
    <link href="https://xiejava.gitee.io/posts/80e87a29/"/>
    <id>https://xiejava.gitee.io/posts/80e87a29/</id>
    <published>2025-08-10T10:57:20.000Z</published>
    <updated>2025-08-10T11:34:51.480Z</updated>
    
    <content type="html"><![CDATA[<p>近期小孩放假在家，发现晚上还抱着平板不放，每天搞到凌晨。这得要劝说有正常的作息时间，少拿平板做与学习无关的事情，但又不能强制拿平板检查看在哪些时间段都在干啥。于是为了搞清楚其凌晨上网都在干啥，我建了一套AI上网行为分析系统，随时收到上网行为的分析报告。</p><p>原理很简单，通过Alloy采集路由器的上网行为日志，用Loki进行日志存储，然后通过n8n建立AI分析工作流，通过Loki的API接口定期获取上网行为日志，给AI大模型进行分析整理然后自动将上网行为分析结果整理发邮件出来。</p><p>原理图如下：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/1-%E7%94%A8%E6%88%B7%E4%B8%8A%E7%BD%91%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="上网行为分析系统"></p><p>接下来看如何实现的完整过程。</p><h2 id="一、上网行为的日志采集"><a href="#一、上网行为的日志采集" class="headerlink" title="一、上网行为的日志采集"></a>一、上网行为的日志采集</h2><p>要采集上网行为的日志，需要在路由器上进行配置，将上网行为的日志通过syslog的方式外发出来。这里可以参考《<a href="https://xiejava.blog.csdn.net/article/details/149515943" target="_blank" rel="noopener">通过TPLink路由器进行用户行为审计实战</a>》<br>另外需要有一套日志分析系统进行采集、存储。这里可以参考《<a href="https://xiejava.blog.csdn.net/article/details/150145269" target="_blank" rel="noopener">Loki+Alloy+Grafana构建轻量级的日志分析系统</a>》</p><h2 id="二、上网行为的自动分析"><a href="#二、上网行为的自动分析" class="headerlink" title="二、上网行为的自动分析"></a>二、上网行为的自动分析</h2><p>基于前面介绍的采集到的上网行为数据，我们基于n8n来构建利用LLM大模型的分析能力实现上网行为的分析和整理。<br>关于如何搭建本地的n8n平台可以参考《<a href="https://blog.csdn.net/fullbug/article/details/149696653" target="_blank" rel="noopener">飞牛NAS本地化部署n8n打造个人AI工作流中心</a>》<br>整个n8n的工作流如下图所示：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/2-n8n%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="n8n工作流"></p><h3 id="1、获取上网行为的数据-HTTP-Request"><a href="#1、获取上网行为的数据-HTTP-Request" class="headerlink" title="1、获取上网行为的数据(HTTP Request)"></a>1、获取上网行为的数据(HTTP Request)</h3><p>n8n提供了Http Request节点，可以很方便的调用Http的API接口获取数据。而Loki也是很贴心的提供Http的API接口进行数据的查询。<br>n8n的Http Request节点配置如下，通过Get方法调用loki的查询接口地址<code>http://192.168.0.30:3100/loki/api/v1/query_range</code>，查询条件设置<code>{exporter=&quot;OTLP&quot;} != &quot;apptype:网络基础协议&quot;</code> 意思是排除掉apptype:网络基础协议，因为这部分不是用户的上网行为信息。设置查近2个小时的2000条日志信息。因为用的是开源LLM大模型，一次性处理token的数量有限。如果模型能力强可以设置查更多的数据。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/3-httpRequst%E9%85%8D%E7%BD%AE.png" alt="HTTP Request"></p><p>点击“Execute step”就可以看到通过loki的API接口查到的上网行为的结果数据。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/4-httpRequst%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%9B%BE.png" alt="API接口查到的上网行为的结果数据"></p><h3 id="2、通过AI智能体进行行为分析-AI-Agent"><a href="#2、通过AI智能体进行行为分析-AI-Agent" class="headerlink" title="2、通过AI智能体进行行为分析(AI Agent)"></a>2、通过AI智能体进行行为分析(AI Agent)</h3><p>我们要将上网行为的数据交给LLM大模型来进行分析，所以要引入AI智能体的节点。在AI Agent接口，把HTTP Request的结果给AI Agent，然后给出提示词。提示词就是告诉AI大模型要做什么。<br>我的提示词如下：</p><blockquote><p>“你是一个安全分析专家，根据日志信息能够分析用户的异常行为，请根据得到信息进行用户行为分析，分析发现是否有异常的行为。请特别注意分析凌晨0点至5点时间段，如有用户在此时间段有上网行为，请详细分析在该时间段用了多少时间做了什么。”</p></blockquote><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/5-AIAgent%E9%85%8D%E7%BD%AE.png" alt="AI Agent配置"></p><p>在这里我用的大模型是google的Gemini2.5flash。 </p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/6-LLM%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%85%8D%E7%BD%AE.png" alt="大模型配置"></p><p>配置Gemini2.5flash的API key就可以使用了Gemini2.5了。如何白嫖Gemini可以参考《<a href="https://xiejava.blog.csdn.net/article/details/149178997" target="_blank" rel="noopener">国内免代理免费使用Gemini大模型实战</a>》和《<a href="https://xiejava.blog.csdn.net/article/details/149257107" target="_blank" rel="noopener">使用Gemini Balance让Gemini免费到底</a>》</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/7-Gemini%E7%9A%84APIKey%E9%85%8D%E7%BD%AE.png" alt="API key配置"></p><p>当然也可以配置成其他的大模型。</p><h3 id="3、整理分析结果-Markdown"><a href="#3、整理分析结果-Markdown" class="headerlink" title="3、整理分析结果(Markdown)"></a>3、整理分析结果(Markdown)</h3><p>通过Markdown节点将大模型分析出来的结果进行美化整理成HTML的格式</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/8-markdown%E8%BD%AChtml.png" alt="Markdown节点"></p><h3 id="4、自动发邮件报告-Send-Mail"><a href="#4、自动发邮件报告-Send-Mail" class="headerlink" title="4、自动发邮件报告(Send Mail)"></a>4、自动发邮件报告(Send Mail)</h3><p>加入自动发邮件的节点，将用户上网行为的分析报告通过邮件的方式发送出来。<br>配置SMTP account信息。<br>关于如何配置SMTP 信息可以参考以前的博文《<a href="https://xiejava.blog.csdn.net/article/details/128495415" target="_blank" rel="noopener">通过Django发送邮件</a>》里面有详细的介绍。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/9-SMTPaccount%E9%85%8D%E7%BD%AE.png" alt="SMTP配置"></p><p>配置邮件的发送者和接收者，邮件主题等信息。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/10-sendmail%E9%85%8D%E7%BD%AE.png" alt="配置sendmail"></p><h3 id="5、配置AI工作流定时启动-Schedule-Trigger"><a href="#5、配置AI工作流定时启动-Schedule-Trigger" class="headerlink" title="5、配置AI工作流定时启动(Schedule Trigger)"></a>5、配置AI工作流定时启动(Schedule Trigger)</h3><p>将n8n的工作流配置为Schedule Trigger根据周期定时触发，我这里设置的是每两个小时触发一次。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/11-ScheduleTrigger%E9%85%8D%E7%BD%AE.png" alt="Schedule Trigger"></p><h2 id="三、上网行为分析报告及效果"><a href="#三、上网行为分析报告及效果" class="headerlink" title="三、上网行为分析报告及效果"></a>三、上网行为分析报告及效果</h2><p>将n8n的工作流激活后，AI用户上网行为分析系统就开始勤勤恳恳的工作了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/12-%E6%BF%80%E6%B4%BBn8n%E5%B7%A5%E4%BD%9C%E6%B5%81.png" alt="activate工作流"></p><p>每两个小时从路由器获取上网行为的日志，通过大模型进行上网行为的分析，整理后自动发邮件进行报告了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/13-n8n%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5.png" alt="执行情况"></p><p>最后看一下经过大模型分析的上网行为分析报告</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/14-AI%E4%B8%8A%E7%BD%91%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A.png" alt="上网行为分析报告"></p><p>也可以配置到网易邮箱大师通过手机收到上网行为分析报告的邮件通知了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/2025081002/14-%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%9A%84%E4%B8%8A%E7%BD%91%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A.png" alt="手机端报告"></p><p>至此，我们通过综合运用alloy+loki构建了日志采集系统采集路由器的用户行为日志，通过n8n构建AI工作流调用Gemini大模型进行用户行为的分析自动发送上网行为的分析报告，构建了自动化的上网行为分析系统。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期小孩放假在家，发现晚上还抱着平板不放，每天搞到凌晨。这得要劝说有正常的作息时间，少拿平板做与学习无关的事情，但又不能强制拿平板检查看在哪些时间段都在干啥。于是为了搞清楚其凌晨上网都在干啥，我建了一套AI上网行为分析系统，随时收到上网行为的分析报告。&lt;/p&gt;
&lt;p&gt;原理很
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="AI机器学习" scheme="https://xiejava.gitee.io/tags/AI%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Loki+Alloy+Grafana构建轻量级的日志分析系统</title>
    <link href="https://xiejava.gitee.io/posts/9804ee9f/"/>
    <id>https://xiejava.gitee.io/posts/9804ee9f/</id>
    <published>2025-08-10T04:50:25.000Z</published>
    <updated>2025-08-10T05:29:36.422Z</updated>
    
    <content type="html"><![CDATA[<p>在现代运维和开发流程中，日志分析是故障排查、性能优化的核心环节。传统的日志系统（如 ELK Stack）虽功能强大，但资源消耗高、配置复杂，对中小规模环境或边缘设备不够友好。Loki+Alloy+Grafana组合则以 “轻量级、低成本、易部署” 为核心优势，成为替代方案的理想选择。</p><p>典型的基于 Loki 的日志记录技术栈由 3 个组件组成：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/1-LAG%E6%9E%B6%E6%9E%84.png" alt="Loki"></p><ul><li>Loki：Grafana Labs 开源的日志聚合系统，借鉴 Prometheus 设计理念，仅索引日志元数据（标签）而非全文，大幅降低存储和计算开销。</li><li>Alloy：代理或客户端，Grafana 官方推荐的新一代数据采集器Alloy（替代 Promtail），支持日志、指标、追踪多信号采集，配置灵活且资源占用低。</li><li>Grafana：强大的可视化平台，原生支持 Loki 数据源，提供丰富的日志查询、过滤和仪表盘功能。</li></ul><p>对网络设备、安全设备等的告警日志进行分析是在网络运维和安全运营中经常遇到的场景，我们可以通过Loki+Alloy+Grafana来搭建一套轻量级的日志分析系统来收集各类网络设备、安全设备的日志进行分析。现在就以采集TP-Link路由器的上网行为日志为例来构建这套日志分析系统。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/2-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%AD%98%E5%82%A8%E5%88%86%E6%9E%90.png" alt="日志采集分析"></p><p>本文将详细介绍在Ubuntu 24.04 LTS环境中，从零搭建这套日志分析系统的全过程，确保每个步骤可操作、可复现。</p><p>环境准备：Ubuntu 24.04 系统配置<br>系统要求</p><ul><li>硬件：2 核 CPU、4GB 内存、20GB 磁盘（日志存储根据需求调整）</li><li>系统：Ubuntu 24.04 LTS（已更新至最新版本）</li><li>权限：sudo 权限（用于安装软件和配置服务）</li></ul><p>根据Grafana官网的建议步骤，先安装Loki，再部署采集代理Alloy,再部署Grafana，通过Grafana来分析日志。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/3-LAG%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4.png" alt="日志采集步骤"></p><h2 id="部署Loki日志存储系统"><a href="#部署Loki日志存储系统" class="headerlink" title="部署Loki日志存储系统"></a>部署Loki日志存储系统</h2><p>Loki 是日志的 “后端存储”，负责接收、存储日志并响应查询请求。采用二进制方式部署，步骤如下：</p><h3 id="1-下载Loki二进制文件"><a href="#1-下载Loki二进制文件" class="headerlink" title="1. 下载Loki二进制文件"></a>1. 下载Loki二进制文件</h3><p>通过 GitHub API 获取Loki的二进制安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Loki安装目录并下载二进制包  这里安装的是3.5.1 </span></span><br><span class="line">sudo mkdir -p /opt/loki /etc/loki</span><br><span class="line">wget -qO /opt/loki/loki-linux-amd64.zip <span class="string">"https://github.com/grafana/loki/releases/download/v3.5.1/loki-linux-amd64.zip"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压并设置可执行权限</span></span><br><span class="line">sudo unzip -d /opt/loki /opt/loki/loki-linux-amd64.zip &amp;&amp; rm /opt/loki/loki-linux-amd64.zip</span><br><span class="line">sudo chmod a+x /opt/loki/loki-linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建软链接，方便全局调用</span></span><br><span class="line">sudo ln -s /opt/loki/loki-linux-amd64 /usr/<span class="built_in">local</span>/bin/loki</span><br></pre></td></tr></table></figure><p>查看Loki版本 <code>loki --version</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loki --version</span><br><span class="line">loki, version 3.5.1 (branch: release-3.5.x, revision: d4e637ce)</span><br><span class="line">  build user:       root@ceaea196ea87</span><br><span class="line">  build date:       2025-05-19T17:06:03Z</span><br><span class="line">  go version:       go1.24.1</span><br><span class="line">  platform:         linux/amd64</span><br><span class="line">  tags:             netgo</span><br></pre></td></tr></table></figure><h3 id="2-配置-Loki"><a href="#2-配置-Loki" class="headerlink" title="2. 配置 Loki"></a>2. 配置 Loki</h3><p>使用官方提供的本地存储配置文件，创建 Loki 配置目录并下载默认配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/loki</span><br><span class="line">sudo wget https://raw.githubusercontent.com/grafana/loki/v3.5.1/cmd/loki/loki-local-config.yaml -O /etc/loki/config.yaml</span><br></pre></td></tr></table></figure><h3 id="3-创建-Systemd-服务"><a href="#3-创建-Systemd-服务" class="headerlink" title="3. 创建 Systemd 服务"></a>3. 创建 Systemd 服务</h3><p>为 Loki 创建系统服务，确保开机自启和进程管理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/systemd/system/loki.service &lt;&lt;EOF</span><br><span class="line">Description=Grafana Loki Log Aggregation System</span><br><span class="line">After=network.target </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/loki -config.file=/etc/loki/config.yaml</span><br><span class="line">Restart=on-failure </span><br><span class="line">User=root </span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target </span><br><span class="line">EOF<span class="comment"># 重载systemd配置并启动Loki</span></span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start loki</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> loki</span><br><span class="line"><span class="comment"># 验证服务状态（应显示active (running)）</span></span><br><span class="line">sudo systemctl status loki</span><br></pre></td></tr></table></figure><p>可以使用 <code>journalctl -u loki -f</code> 查看 Loki 日志以进行故障排除</p><h3 id="4-验证-Loki-运行"><a href="#4-验证-Loki-运行" class="headerlink" title="4.  验证 Loki 运行"></a>4.  验证 Loki 运行</h3><p>通过 HTTP 接口检查 Loki 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:3100/ready</span><br></pre></td></tr></table></figure><p>预期输出：ready（表示 Loki 已就绪）</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/4-loki-ready.png" alt="loki ready"></p><h2 id="部署配置Alloy"><a href="#部署配置Alloy" class="headerlink" title="部署配置Alloy"></a>部署配置Alloy</h2><p>Alloy 是连接日志源与 Loki 的 “桥梁”，负责采集服务器本地日志并发送到 Loki。作为 Grafana Agent 的替代者，Alloy 配置更灵活，支持多信号采集。</p><h3 id="1-安装-Alloy"><a href="#1-安装-Alloy" class="headerlink" title="1. 安装 Alloy"></a>1. 安装 Alloy</h3><p>通过 Grafana 官方仓库安装 Alloy（与 Grafana 使用同一仓库，无需重复添加）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Alloy包</span></span><br><span class="line">sudo apt install -y alloy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">alloy --version</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/5-alloy-version.png" alt="alloy --version"></p><h3 id="2-配置-Alloy-收集日志"><a href="#2-配置-Alloy-收集日志" class="headerlink" title="2. 配置 Alloy 收集日志"></a>2. 配置 Alloy 收集日志</h3><p>Alloy 使用声明式配置文件定义采集规则，默认路径为<code>/etc/alloy/config.alloy</code>。我们需配置：<br>1、 通过syslog采集；2、对日志中的IP进行提取；3、 将日志转发到 Loki。<br>创建配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">otelcol.receiver.syslog <span class="string">"local"</span> &#123;</span><br><span class="line">  udp &#123;</span><br><span class="line">    listen_address = <span class="string">"0.0.0.0:514"</span></span><br><span class="line">    encoding = <span class="string">"GBK"</span></span><br><span class="line">  &#125;</span><br><span class="line">  output &#123;</span><br><span class="line">    logs = [otelcol.exporter.loki.local.input]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">otelcol.exporter.loki <span class="string">"local"</span> &#123;</span><br><span class="line">  forward_to = [loki.process.extract_ip.receiver]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loki.process <span class="string">"extract_ip"</span> &#123;</span><br><span class="line">  stage.regex &#123;</span><br><span class="line">    expression = <span class="string">"a:(?P&lt;ip&gt;\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)"</span></span><br><span class="line">  &#125;</span><br><span class="line">  stage.labels &#123;</span><br><span class="line">    values = &#123;</span><br><span class="line">      ip = <span class="string">"ip"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  forward_to = [loki.write.local.receiver]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loki.write <span class="string">"local"</span> &#123;</span><br><span class="line">  endpoint &#123;</span><br><span class="line">    url = <span class="string">"http://localhost:3100/loki/api/v1/push"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置说明：</p><blockquote><p>alloy目前对syslog支持并不是特别好，经过多次尝试，用alloy的syslog组件不能支持中文编码，所以改用通过otelcol的syslog来采集日志。<br>listen_address = “0.0.0.0:514” 表示监听所有源的514端口来的upd数据。</p></blockquote><h3 id="3-启动-Alloy-服务"><a href="#3-启动-Alloy-服务" class="headerlink" title="3. 启动 Alloy 服务"></a>3. 启动 Alloy 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Alloy并设置开机自启</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now alloy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证服务状态（应显示active (running)）</span></span><br><span class="line">sudo systemctl status alloy</span><br></pre></td></tr></table></figure><blockquote><p>排查提示若启动失败，通过sudo journalctl -u alloy -f查看日志，常见问题：配置文件语法错误、Loki未启动导致连接失败</p></blockquote><h2 id="部署Grafana"><a href="#部署Grafana" class="headerlink" title="部署Grafana"></a>部署Grafana</h2><p>Grafana 是整个系统的 “前端”，用于日志查询和可视化。通过官方仓库安装可确保自动更新。</p><h3 id="1-添加-Grafana-官方仓库"><a href="#1-添加-Grafana-官方仓库" class="headerlink" title="1. 添加 Grafana 官方仓库"></a>1. 添加 Grafana 官方仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入Grafana GPG密钥（用于验证包完整性）</span></span><br><span class="line">wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Grafana OSS仓库（稳定版）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://packages.grafana.com/oss/deb stable main'</span> | sudo tee /etc/apt/sources.list.d/grafana.list</span><br></pre></td></tr></table></figure><h3 id="2-安装并启动-Grafana"><a href="#2-安装并启动-Grafana" class="headerlink" title="2. 安装并启动 Grafana"></a>2. 安装并启动 Grafana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新包索引并安装Grafana</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt install -y grafana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Grafana服务并设置开机自启</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now grafana-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证服务状态（应显示active (running)）</span></span><br><span class="line">sudo systemctl status grafana-server</span><br></pre></td></tr></table></figure><h3 id="3-验证-Grafana-安装"><a href="#3-验证-Grafana-安装" class="headerlink" title="3.  验证 Grafana 安装"></a>3.  验证 Grafana 安装</h3><p>打开浏览器访问 <code>http://&lt;服务器IP&gt;:3000</code>，首次登录使用默认凭据：</p><ul><li>用户名：admin</li><li>密码：admin</li></ul><p>首次登录会要求修改密码，按提示设置新密码即可。</p><h2 id="接入数据源"><a href="#接入数据源" class="headerlink" title="接入数据源"></a>接入数据源</h2><h3 id="1-在发送端配置采集器的地址"><a href="#1-在发送端配置采集器的地址" class="headerlink" title="1. 在发送端配置采集器的地址"></a>1. 在发送端配置采集器的地址</h3><p>这里我们要接入和分析TP-Link路由器的上网行为日志。所以要在路由器上配置将日志发送到alloy采集节点的服务器。具体的TP-Link路由器的上网行为分析审计的配置参考《<a href="http://xiejava.ishareread.com/posts/e87ac72d/" target="_blank" rel="noopener">通过TPLink路由器进行用户行为审计实战</a>》</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/6-TPLINK%E9%85%8D%E7%BD%AE.png" alt="行为审计"></p><h3 id="2-在采集端看是否收到数据"><a href="#2-在采集端看是否收到数据" class="headerlink" title="2. 在采集端看是否收到数据"></a>2. 在采集端看是否收到数据</h3><p>通过tcpdump命令查看采集节点是否有日志数据进来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i ens2 -A port 514</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/7-tcpdump.png" alt="tcpdump"></p><p>这里可以看到有日志数据通过ens2网卡的514端口进来了。</p><h2 id="用Grafana查询和分析数据"><a href="#用Grafana查询和分析数据" class="headerlink" title="用Grafana查询和分析数据"></a>用Grafana查询和分析数据</h2><p>在用Grafana进行查询之前先要配置Grafana的数据源添加loki的数据源</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/8-new-data-source.png" alt="添加数据源"></p><p>在loki的数据源中设置loki的连接地址</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/9-%E9%85%8D%E7%BD%AEloki%E8%BF%9E%E6%8E%A5%E5%9C%B0%E5%9D%80.png" alt="loki连接"></p><p>设置完成后就可以用Grafana强大的分析查询和可视化来对日志进行分析了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250810/10-grafana%E5%88%86%E6%9E%90%E5%B1%95%E7%A4%BA.png" alt="日志分析"></p><p>通过本文步骤，我们在 Ubuntu 24.04 上构建了 Loki+Alloy+Grafana 日志分析系统：</p><p>Loki 负责高效存储日志，仅索引元数据降低开销；<br>Alloy 轻量采集系统日志，配置灵活易扩展；<br>Grafana 提供强大的日志查询与可视化能力（支持 LogQL、仪表盘、告警）。</p><p>该架构资源占用低（单节点最低 2 核 4GB 内存即可运行），适合中小规模环境、边缘设备或开发测试场景。后续可扩展至多节点 Loki 集群、添加日志告警规则，或集成 Prometheus 监控指标，构建完整的可观测性平台。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在现代运维和开发流程中，日志分析是故障排查、性能优化的核心环节。传统的日志系统（如 ELK Stack）虽功能强大，但资源消耗高、配置复杂，对中小规模环境或边缘设备不够友好。Loki+Alloy+Grafana组合则以 “轻量级、低成本、易部署” 为核心优势，成为替代方案的
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="日志分析" scheme="https://xiejava.gitee.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>VScode对Ubuntu用root账号进行SSH远程连接开发</title>
    <link href="https://xiejava.gitee.io/posts/9880bf27/"/>
    <id>https://xiejava.gitee.io/posts/9880bf27/</id>
    <published>2025-08-02T13:19:42.000Z</published>
    <updated>2025-08-02T14:51:54.765Z</updated>
    
    <content type="html"><![CDATA[<p>由于linux服务器大部分都是基于命令行的操作，缺乏比较方便好用的编辑工具，对于经常在linux服务器上做开发的同学来说直接在服务器上进行开发或配置文件的修改还不是特别的方便。虽然linux上有vi或vim比起图形化的编辑工具体验感还是不是很好。作为程序员常用的宇宙第一的VScode就提供了相应的插件可以通过ssh远程连接到服务器上直接编辑服务器上相应的文件，极大提高了在服务器上开发或修改配置文件的效率和体验感。本文就来介绍通过VScode对Ubuntu用root账号进行SSH远程连接直接在服务器上进行开发。</p><h2 id="一、安装VScode的ssh扩展插件"><a href="#一、安装VScode的ssh扩展插件" class="headerlink" title="一、安装VScode的ssh扩展插件"></a>一、安装VScode的ssh扩展插件</h2><p>Remote-SSH 扩展 允许你将任何带有 SSH 服务器的远程机器用作你的开发环境。这可以在多种情况下极大地简化开发和故障排除：</p><ul><li>在部署目标操作系统上开发​，或者使用比本地机器更大、更快或更专业化的硬件进行开发。</li><li>轻松切换不同的远程开发环境，并安全地进行更新​，而无需担心影响本地机器。</li><li>从多台机器或不同位置访问现有的开发环境。</li><li>调试运行在其他地方（例如客户现场或云端​）的应用程序。</li></ul><p>在VScode的编辑器界面在Extension中搜索ssh排名前三的Remote-SSH、Remote - SSH: Editing Configuration Files、Remote Explorer是微软官方的ssh扩展插件，都安装一下。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/1-ssh-remote.png" alt="ssh扩展插件"></p><p>安装好了后就会在左侧的导航看到Remote Exploer</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/2-remoteExplorer.png" alt="Remote Exploer"></p><p>在SSH中点“+” 后就可以在上面的导航输入框中输入要ssh连接服务器的命令。如:<code>ssh xiejava@192.168.0.30</code> 意思就是通过xiejava的用户名ssh登录到192.168.0.30的服务器。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/3-NewRemote.png" alt="New Remote"></p><p>输入正确的口令后，表示服务器的图标变亮就意味着已经通过SSH连上了服务器了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/4-SSH%E8%BF%9E%E4%B8%8A%E4%BA%86%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="SSH连上了服务器"></p><p>连上服务器后就可以通过命令来对服务器进行操作，也可以直接打开服务器上的文件进行操作了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/5-%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C.png" alt="直接打开服务器上的文件进行操作"></p><p>这样就可以直接在服务器上直接编辑文件，直接在命令行中输入命令执行，直接看到执行结果，简直不要太爽。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/6-%E7%9B%B4%E6%8E%A5%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6.png" alt="直接编辑文件"></p><p>一般的教程到这里就结束了。但是有些Linux是默认不能使用root用户登录的如Ubuntu，如果不用root用户登录只能访问到登录用户的文件夹，如我是用xiejava登录的就只能访问到/home/xiejava的目录，只能在这个目录下新建和编辑相应的文件，而且每次打开编辑操作文件都要输入登录密码，作为服务器上的开发来说这显然是不可接受的。所以我们要用root账号进行ssh进行远程连接。</p><h2 id="二、开启Ubuntu的root账号免密登录"><a href="#二、开启Ubuntu的root账号免密登录" class="headerlink" title="二、开启Ubuntu的root账号免密登录"></a>二、开启Ubuntu的root账号免密登录</h2><h3 id="1、生成SSH密钥对，并部署到服务器"><a href="#1、生成SSH密钥对，并部署到服务器" class="headerlink" title="1、生成SSH密钥对，并部署到服务器"></a>1、生成SSH密钥对，并部署到服务器</h3><p>要使 root 用户成功登录，需先在客户端生成 SSH 密钥对，并将公钥部署到服务器：</p><ol><li>客户端生成密钥 (在本地PC执行)：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">"root_ssh_key"</span></span><br></pre></td></tr></table></figure><ul><li>按提示选择保存路径（默认 C:\Users\你的用户名.ssh\id_ed25519）。</li><li>连续按 3 次回车​，不设密码（实现完全免密）<br>最后在文件夹中生成SSH密钥对<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/7-%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5%E5%AF%B9.png" alt="生成SSH密钥对"></li></ul><ol start="2"><li>部署公钥到服务器​：<br>登录 Ubuntu<br>创建 .ssh 目录并写入公钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"粘贴复制的公钥内容，也就是id_ed25519.pub文件里面的内容"</span> &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="2、测试免密登录"><a href="#2、测试免密登录" class="headerlink" title="2、测试免密登录"></a>2、测试免密登录</h3><p>在 Windows PowerShell 执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@Ubuntu_IP</span><br></pre></td></tr></table></figure><ul><li>成功标志​：直接登录 Ubuntu，无需输入密码。</li><li>失败表现​：提示输入密码或返回 Permission denied。</li></ul><h3 id="3、启用root用户"><a href="#3、启用root用户" class="headerlink" title="3、启用root用户"></a>3、启用root用户</h3><p>使用当前具有 sudo 权限的用户登录系统。执行密码修改命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><ul><li>输入当前用户的密码​（用于 sudo 提权）。</li><li>输入新的 root 密码​（输入时不会显示字符）。</li><li>再次确认新密码。<br>禁用root密码登录（增强安全）​</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>设置<code>PermitRootLogin prohibit-password</code><br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/8-PermitRootLogin.png" alt="PermitRootLogin prohibit-password"></p><p>重启<code>systemctl restart ssh</code></p><h3 id="4、找到本地的ssh配置文件并配置密钥登录"><a href="#4、找到本地的ssh配置文件并配置密钥登录" class="headerlink" title="4、找到本地的ssh配置文件并配置密钥登录"></a>4、找到本地的ssh配置文件并配置密钥登录</h3><p>在vscode中点击SSH旁边的配置按钮就会出现ssh本地的配置文件，一般是<code>C:\Users\你的用户名\.ssh\config</code></p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/9-ssh%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="找到本地的ssh配置文件"></p><p>在config文件中配置User root 和IdentityFile 密钥文件的路径。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/10-config%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="配置"></p><p>这样就可以通过root进入到任何目录操作编辑任何文件了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250802/11-%E8%BF%9B%E5%85%A5%E4%BB%BB%E4%BD%95%E7%9B%AE%E5%BD%95%E7%BC%96%E8%BE%91.png" alt="root免密登录"></p><p>最后要提醒大家的是大家在修改任何配置文件的时候要注意备份和确认，因为获得了root权限可以操作编辑任何文件了。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于linux服务器大部分都是基于命令行的操作，缺乏比较方便好用的编辑工具，对于经常在linux服务器上做开发的同学来说直接在服务器上进行开发或配置文件的修改还不是特别的方便。虽然linux上有vi或vim比起图形化的编辑工具体验感还是不是很好。作为程序员常用的宇宙第一的V
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维" scheme="https://xiejava.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>飞牛NAS本地化部署n8n打造个人AI工作流中心</title>
    <link href="https://xiejava.gitee.io/posts/e20e4b6a/"/>
    <id>https://xiejava.gitee.io/posts/e20e4b6a/</id>
    <published>2025-07-27T14:31:38.000Z</published>
    <updated>2025-07-27T14:46:06.039Z</updated>
    
    <content type="html"><![CDATA[<p>n8n是一个开源的工作流自动化工具，类似于Zapier和IFTTT，但它更加灵活和强大 。它允许用户通过图形化界面，以拖拽的形式构建自动化工作流，将不同的应用程序和服务连接起来，实现各种自动化任务 。<br>n8n最初的用途是自动化日常工作流，帮助用户节省时间，提高工作效率。在AI技术出现后，n8n更是成为了连接AI与数字世界的桥梁，因为它能够让AI与超过1000种不同的服务进行交互，几乎使AI能与赛博世界中的任何其他主体畅通无阻。</p><p>n8n的主要优势包括：</p><ul><li><strong>部署简单</strong>：支持Docker一键私有化部署，也提供云服务选项。</li><li><strong>可接入服务强</strong>：集成了超过1000种第三方服务，且自部署版本具备丰富的本地调用能力，可以对本地数据库、文件等进行操作，甚至作为寄生系统为现有业务增添自动化和AI功能。</li><li><strong>对大模型友好</strong>：内置图形可视化的LangChain节点，能够方便地集成各种AI模型、记忆、工具和解析器，支持BYOK（Bring Your Own Key）模式，即用户可以自备API Key来调用AI服务。</li><li><strong>支持半封装模式</strong>：在低代码和代码之间实现了平衡。对于已有的节点，可以拖拽完成接入；对于没有现成节点的功能，支持通过HTTP Request接入几乎任何开放API的第三方服务。同时，其Code节点支持运行JavaScript和Python代码，非常适合与ChatGPT进行结对编程。</li></ul><p>对于个人用户来说，在NAS（网络附加存储）上部署n8n具有多方面的优势：</p><ul><li><strong>完全掌控数据和流程</strong>：n8n是开源的，可以选择将其部署在自己的NAS服务器上，从而完全掌控您的数据和自动化流程，无需担心数据泄露或被供应商锁定。</li><li><strong>部署简单</strong>：n8n的部署过程相对简单，可以通过Docker一键私有化部署，即使是不懂代码的用户也能通过可视化的界面快速上手。</li><li><strong>常态化运行</strong>：NAS通常是7x24小时开机的设备，结合n8n的AI工作流能力，可以帮助个人用户完成日常工作中大量的重复性劳动，例如自动生成日报、周报等，从而释放更多时间用于其他活动。</li><li><strong>随时随地访问</strong>：NAS虽然部署在家里，但是一般都通过ddns或其他方式打通了与外网的连接，可以随时随地方便的构建和调试自己AI工作流应用。</li></ul><p>本文就以我的飞牛NAS为例来部署n8n打造人工的AI工作流中心。</p><h2 id="一、下载n8n的镜像"><a href="#一、下载n8n的镜像" class="headerlink" title="一、下载n8n的镜像"></a>一、下载n8n的镜像</h2><p>在飞牛NAS的Docker镜像仓库中找到n8n的镜像，下载这个下载量和标星最多的n8nio/n8n的镜像。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/1-%E4%B8%8B%E8%BD%BDn8n%E9%95%9C%E5%83%8F.png" alt="下载n8n镜像"></p><p>下载后就可以在飞牛NAS的本地镜像库中看到这个n8nio/n8n镜像。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/2-%E6%9C%AC%E5%9C%B0n8n%E9%95%9C%E5%83%8F.png" alt="本地镜像"></p><h2 id="二、启动镜像创建n8n容器"><a href="#二、启动镜像创建n8n容器" class="headerlink" title="二、启动镜像创建n8n容器"></a>二、启动镜像创建n8n容器</h2><p>点击本地n8nio/n8n镜像的启动按钮，弹出创建容器的配置界面，在配置界面中输入容器的名称n8n勾选开机自启动。 </p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/3-%E5%88%9B%E5%BB%BAn8n%E5%AE%B9%E5%99%A8.png" alt="创建容器"></p><p>在进行存储位置配置之前，在NAS的文件管理中创建用于存储n8n数据文件的文件夹。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/4-%E5%88%9B%E5%BB%BANAS%E7%9A%84n8n%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="创建存储位置"></p><p>在创建容器详情的配置界面其他的配置项都可以默认，在存储位置的配置项中一定要配置将容器的存储空间映射到NAS上的文件夹，这个文件夹就是刚在NAS文件管理中建的文件夹（也就是将docker容器中的/home/node/.n8n映射到NAS中的n8n/n8n_data）。否则docker重启n8n的配置数据会丢失。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/5-%E6%98%A0%E5%B0%84docker%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="存储空间映射"></p><p>配置完成后，勾选创建后启动容器，点击“创建”。容器创建启动后就可以通过本地的5678端口访问n8n的应用了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/6-%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8.png" alt="启动容器"></p><h2 id="三、访问使用n8n"><a href="#三、访问使用n8n" class="headerlink" title="三、访问使用n8n"></a>三、访问使用n8n</h2><p>在浏览器中输入你的主机和端口就可以访问n8n，我这里是 <a href="http://192.168.0.18:5678/" target="_blank" rel="noopener">http://192.168.0.18:5678/</a><br>第一次访问有可能会出现如下图所示的提示，n8n用到了安全的cookie，要不就要配置HTTPS，要不就在环境变量中配置<code>N8N_SECURE_COOKIE</code>为<code>false</code></p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/7-%E8%AE%BF%E9%97%AEn8n%E5%91%8A%E8%AD%A6%E6%8F%90%E7%A4%BA.png" alt="警告"></p><p>这里，我们在容器设置里添加变量，设置N8N_SECURE_COOKIE为false</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/8-%E9%85%8D%E7%BD%AE%E5%AE%B9%E5%99%A8%E8%AF%A6%E6%83%85.png" alt="设置N8N_SECURE_COOKIE为false"></p><p>这样再次访问 <a href="http://192.168.0.18:5678/" target="_blank" rel="noopener">http://192.168.0.18:5678/</a> 就可以正常访问了。第一次用n8n要设置自己的用户名和密码。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/9-%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7%E5%90%8D.png" alt="设置自己的用户名和密码"></p><p>设置完用户名密码就可以使用n8n了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/10-n8n%E4%B8%BB%E7%95%8C%E9%9D%A2.png" alt="使用n8n"></p><p>我们可以导入一个已经配置好的n8n工作流实例。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/11-%E5%AF%BC%E5%85%A5n8n%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E4%BE%8B.png" alt="导入n8n工作流实例"></p><p>可以看到正常导入，将配置修改为自己的配置就可以直接使用别人已经配置好的工作流了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250727/12-%E4%BD%BF%E7%94%A8n8n%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E4%BE%8B.png" alt="使用效果"></p><p>至此我们在飞牛NAS上成功部署了n8n，可以方便的随时随地构建自己的AI工作流应用了。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;n8n是一个开源的工作流自动化工具，类似于Zapier和IFTTT，但它更加灵活和强大 。它允许用户通过图形化界面，以拖拽的形式构建自动化工作流，将不同的应用程序和服务连接起来，实现各种自动化任务 。&lt;br&gt;n8n最初的用途是自动化日常工作流，帮助用户节省时间，提高工作效率
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AI机器学习" scheme="https://xiejava.gitee.io/tags/AI%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="NAS" scheme="https://xiejava.gitee.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>通过TPLink路由器进行用户行为审计实战</title>
    <link href="https://xiejava.gitee.io/posts/e87ac72d/"/>
    <id>https://xiejava.gitee.io/posts/e87ac72d/</id>
    <published>2025-07-21T14:08:26.000Z</published>
    <updated>2025-08-10T04:52:27.577Z</updated>
    
    <content type="html"><![CDATA[<p>用户行为审计是指对用户在网络平台上的行为进行监控和记录，以便对其行为进行分析和评估的过程。随着互联网的普及和发展，用户行为审计在网络安全和数据隐私保护方面起到了重要的作用。 用户行为审计可以帮助发现和预防网络安全威助。通过对用户的行为进行监控和记录，可以及时发现并阳止恶意攻击、病毒传播等网络安全威胁。例如，当用户的行为异常时，系统可以自动发出警报并采取相应的措施，保护网络平台的安全。<br>本文以家用的TP-Link 路由器为例，来实战一下用户行为审计，看看能发现一些什么异常。<br>TP-Link路由器是家用比较常见的路由器，通过简单的配置就可以实现用户行为管控。</p><h2 id="一、路由器的行为管控配置"><a href="#一、路由器的行为管控配置" class="headerlink" title="一、路由器的行为管控配置"></a>一、路由器的行为管控配置</h2><p>一般的路由器都带有简单行为管控功能，以我的TL-R479GP-AC为例，可以对网站访问、应用控制等进行相应的管控。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/1-tplink%E8%A1%8C%E4%B8%BA%E7%AE%A1%E6%8E%A7.png" alt="路由器行为管控配置"></p><p>这里我们现对网站和应用进行监控记录，对用户的行为进行审计和管控。</p><h3 id="1、网站访问控制"><a href="#1、网站访问控制" class="headerlink" title="1、网站访问控制"></a>1、网站访问控制</h3><p> 网站访问控制可以实现对某些IP，在什么时间段、访问什么网站进行记录和监控。<br>如我们对bilibil网站进行监控，将B站的域名配置到网站分组中，组名为“娱乐视频”。当然还可以加入跟多的需要记录和管控的网站。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/2-%E7%BD%91%E7%AB%99%E5%88%86%E7%BB%84.png" alt="网站分组"></p><p>在网站访问的规则中进行配置，为IP地址组选择受管理的网站，在相应时间段中，与IP地址相匹配的设备在访问“娱乐视频”等类型的网站时受到管理。我这里是配置的是所有的地址段、所有时间段、将“娱乐视频”记录到系统日志。方便我们后续进行上网行为的审计分析。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/3-%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6.png" alt="网站访问控制"></p><h3 id="2、应用控制"><a href="#2、应用控制" class="headerlink" title="2、应用控制"></a>2、应用控制</h3><p>同样可以对应用进行控制，对应用控制就是对APP的移动应用的访问进行监控和控制。在这里我们选择对所有的应用进行监控。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/4-%E5%BA%94%E7%94%A8%E6%8E%A7%E5%88%B6%E9%80%89%E6%8B%A9.png" alt="应用控制选择"></p><p>配置监控的规则，如所有的IP所有的时间段，多访问所有的应用进行记录<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/5-%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE.png" alt="记录应用访问"></p><p>通过上面的配置，路由器就会根据上面配置的规则来记录相应的日志。但是要进行行为审计还要借助其他的工具如安全审计系统。</p><h2 id="二、用户行为审计"><a href="#二、用户行为审计" class="headerlink" title="二、用户行为审计"></a>二、用户行为审计</h2><h3 id="1、安装安全审计系统"><a href="#1、安装安全审计系统" class="headerlink" title="1、安装安全审计系统"></a>1、安装安全审计系统</h3><p>TP-Link提供了免费的TP-LINK安全审计系统。从官网上下载既可以进行部署和设置。TP-link提供的安全审计系统是以虚拟机镜像方式进行安装的。下载安装包后安装包附有一个比较详细的安装教程。<br>TP-Link官网 <a href="https://www.tp-link.com.cn/" target="_blank" rel="noopener">https://www.tp-link.com.cn/</a><br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/6-TPLINK%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD.png" alt="TPLINK官网下载安全审计系统"></p><p>下载安装包解压后除了有一个虚拟机镜像文件外安装包还附有一个比较详细的安装教程。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/7-SAS%E5%AE%89%E8%A3%85%E5%8C%85%E8%A7%A3%E5%8E%8B.png" alt="解压安装包"></p><p>在正式安装之前需要安装Oracle VirtualBox的虚拟机管理软件，然后根据这个安装手册将虚拟机注册到管理软件进行启动。<br>虚拟机配置如下图所示：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/8-%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE.png" alt="虚拟机配置"></p><p>启动虚拟机后，就可以访问安全审计平台了。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/9-%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%99%BB%E5%BD%95.png" alt="安全审计系统登录界面"></p><p>安全审计系统默认用户名和密码都是admin，登录成功后会提示该默认密码。</p><h3 id="2、配置安全审计平台"><a href="#2、配置安全审计平台" class="headerlink" title="2、配置安全审计平台"></a>2、配置安全审计平台</h3><p>如果用对路由器进行安全审计，要进行简单的配置。最关键的配置还是设置IP地址。<br>安全审计系统安装后默认的IP是192.168.1.240，要采集网络中路由器的日志，必须要和路由器在同一网段网络要通。所以要将安全审计平台的IP进行修改。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/10-%E9%85%8D%E7%BD%AE%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F%E7%9A%84IP.png" alt="修改IP"></p><h3 id="3、配置路由器"><a href="#3、配置路由器" class="headerlink" title="3、配置路由器"></a>3、配置路由器</h3><p>配置路由器的目的是要将路由器的审计日志发送到刚安装和配置好的安全审计平台。<br>登录到TP-Link路由器的配置管理界面，开启行为审计的上传用户上网行为，输入安全审计系统平台的地址，保存配置。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/11-%E8%B7%AF%E7%94%B1%E5%99%A8%E8%A1%8C%E4%B8%BA%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5.png" alt="上报行为审计"></p><p>同样将系统日志也配置报送到安全审计平台。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/12-%E8%B7%AF%E7%94%B1%E5%99%A8%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5.png" alt="上报系统日志"></p><p>将安全审计的日志也送到安全审计平台。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/13-%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5.png" alt="上报安全审计"></p><h3 id="4、日志分析与行为分析"><a href="#4、日志分析与行为分析" class="headerlink" title="4、日志分析与行为分析"></a>4、日志分析与行为分析</h3><p>配置完成后，我们再登录到安全审计系统，就可以看到审计日志都送到系统了可以做相应的审计了。<br>可以看到那个IP什么时候访问了什么，同时也看到了前面我们在路由器的的访问控制也生效了，有效的阻止了企图访问bilibili.com的IP。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/14-%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95.png" alt="访问控制效果"></p><p>在行为分析中可以看到用户受管控的排行<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/15-%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90.png" alt="行为分析"></p><p>也可以看到具体哪些IP受管控的次数<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/16-%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F%E8%AE%BF%E9%97%AE%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE.png" alt="受管控的次数"></p><p>以及具体被管控的原因<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/17-%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F%E5%8F%97%E7%AE%A1%E6%8E%A7%E8%AE%B0%E5%BD%95.png" alt="具体被管控的原因"></p><h3 id="5、利用AI进行审计与分析"><a href="#5、利用AI进行审计与分析" class="headerlink" title="5、利用AI进行审计与分析"></a>5、利用AI进行审计与分析</h3><p>现在AI大模型已经很强大了，我们可以将安全审计系统的日志导出来给大模型进行审计与分析。发现其他的一些人工审计发现不了的异常。如发现用户的行为特征及偏离平时访问基线的一些访问等。<br>我们将安全审计系统的审计日志导出为Excel，将Excel通过coze空间进行审计分析，可以生成比较完整的审计报告。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/18-coze%E7%A9%BA%E9%97%B4%E5%AE%A1%E8%AE%A1%E5%88%86%E6%9E%90.png" alt="coze空间进行审计分析"></p><p>可以看到coze空间生成的审计报告还是比较全面美观。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/19-coze%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A.jpeg" alt="完整的审计报告"></p><p>也可以用WPS自带的AI数据分析，可以看出对用户的异常行为的分析还是比较专业和详细的。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250721/20-WPSAI%E5%88%86%E6%9E%90.png" alt="WPSAI分析报告"></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户行为审计是指对用户在网络平台上的行为进行监控和记录，以便对其行为进行分析和评估的过程。随着互联网的普及和发展，用户行为审计在网络安全和数据隐私保护方面起到了重要的作用。 用户行为审计可以帮助发现和预防网络安全威助。通过对用户的行为进行监控和记录，可以及时发现并阳止恶意攻
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用GeminiBalance让Gemini免费到底</title>
    <link href="https://xiejava.gitee.io/posts/d786604d/"/>
    <id>https://xiejava.gitee.io/posts/d786604d/</id>
    <published>2025-07-10T15:22:18.000Z</published>
    <updated>2025-07-10T16:30:07.620Z</updated>
    
    <content type="html"><![CDATA[<p>Gemini是目前好用的免费大模型，通过在 Google AI Studio 获取 API 密钥，每位开发者可以获得慷慨的免费使用额度。这包括每天 300,000 个 Token（包括提示和响应）以及每分钟 60 个请求的速率限制 。虽然免费但有一定的额度，不过通过申请不同的账号可以申请获取多个API密钥。Gemini Balance 就是这么一款工具，允许您管理多个 Gemini API Key，这样就可以使Gemini免费额度翻N倍。</p><p>Gemini Balance 是一个基于 Python FastAPI 构建的应用程序，旨在提供 Google Gemini API 的代理和负载均衡功能。它允许您管理多个 Gemini API Key，并通过简单的配置实现 Key 的轮询、认证、模型过滤和状态监控。此外，项目还集成了图像生成和多种图床上传功能，并支持 OpenAI API 格式的代理。</p><p>要感谢snailyp大佬开发的gemini-balance 项目地址：<a href="https://github.com/snailyp/gemini-balance" target="_blank" rel="noopener">https://github.com/snailyp/gemini-balance</a><br>《<a href="http://xiejava.ishareread.com/posts/4999be0b/" target="_blank" rel="noopener">国内免代理免费使用Gemini大模型实战</a>》介绍了如何将Gamini中转到国内能够使用，本文介绍如何使用免费的ClawCloud容器化部署gemini-balance配置多个Gemini API Key，不仅在国内可以使用还可以让Gemini免费到底！</p><h2 id="一、申请注册多个Gemini-API-Key"><a href="#一、申请注册多个Gemini-API-Key" class="headerlink" title="一、申请注册多个Gemini API Key"></a>一、申请注册多个Gemini API Key</h2><p>注册google账号就可以免费申请Gemini API密钥。</p><p>申请地址 <a href="https://aistudio.google.com/" target="_blank" rel="noopener">https://aistudio.google.com/</a></p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/1-APIkey%E7%94%B3%E8%AF%B7.png" alt="申请密钥"> </p><p>有了Gemini API密钥后就可以调用API使用Gemini 大模型的能力了。</p><p>注册多个google账号就可以申请多个Gemini API 密钥。</p><h2 id="二、注册ClawCloud账号"><a href="#二、注册ClawCloud账号" class="headerlink" title="二、注册ClawCloud账号"></a>二、注册ClawCloud账号</h2><p>ClawCloud是一个成立于2024年的云计算平台，总部位于新加坡，ClawCloud旨在简化技术栈的复杂性，帮助用户从编码到生产的整个过程只需几次点击即可完成 。它提供免费的每月5美元GitHub验证赠金，无需信用卡即可开始使用，并承诺在1分钟内完成设置 。</p><p>ClawCloud 在国内可以直接访问，Github 账户注册时间超过 180天就有每个月5美元的赠送额度，足够支撑我们部署gemini-balance的应用了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/2-ClawCloud.png" alt="在这里插入图片描述"></p><p>点击 Github 登录<img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/3-ClawCloudGithub%E7%99%BB%E5%BD%95.png" alt="选择github登录"></p><p>进入 Github 登录界面后，输入账户名、密码，随后点击 Sign in。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/4-github%E7%99%BB%E5%BD%95.png" alt="Github登录"></p><p>登录以后就在用户中心Account Center就可以看到每个月赠送的额度，如果有使用还可以看到目前使用的额度。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/5-ClowCloud%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83.png" alt="ClawCloud的用户中心"></p><h2 id="三、通过-ClawCloud-Run-部署gemini-balance"><a href="#三、通过-ClawCloud-Run-部署gemini-balance" class="headerlink" title="三、通过 ClawCloud Run 部署gemini-balance"></a>三、通过 ClawCloud Run 部署gemini-balance</h2><p>gemini-balance官方有详细的部署文档</p><p><a href="https://gb-docs.snaily.top/guide/setup-clawcloud-sqlite.html" target="_blank" rel="noopener">https://gb-docs.snaily.top/guide/setup-clawcloud-sqlite.html</a></p><p>大家可以按照这个文档一步步部署</p><ol><li>部署项目</li></ol><ul><li>进入主界面后，点击左上角 Region，选择服务器地址。推荐选择 Singapore。选择完成后，网页会刷新，并在服务器地址前☑️。</li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/6-ClowCloud%E9%80%89%E6%8B%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%B0%E5%9D%80.png" alt="选择服务器地址"></p><ul><li>点击 App Launchpad。</li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/7-ClowCloud%E7%9A%84Applaunchpad.png" alt="选择App Lannchpad"></p><ul><li>进入页面后，点击页面右上角 Create App，进入配置页面。</li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/8-ClowCloud%E5%88%9B%E5%BB%BAAPP.png" alt="Create App"></p><ul><li>进入配置页面后，按顺序填写信息（不熟悉项目名称的，请打开在线翻译）。<ul><li>Application Name：为方便识别管理，建议填写本项目名字<code>geminibalance</code></li><li>Image： <code>Public</code><ul><li>Image Name：<code>ghcr.io/snailyp/gemini-balance:latest</code></li></ul></li></ul></li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/9-ClowCloud%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F.png" alt="在这里插入图片描述"></p><pre><code>- Usage：`Fixed`；- Replicas：`1`- CPU：`1`- Memory：`512`&gt; 说明：1. 若登录账号只选择部署 1 个项目，则推荐上述最高免费配置。2.目前免费用户每月流量为 10g，超出部分 0.05 美元/g。可根据流量使用情况选择服务器配置。</code></pre><p> <img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/10-ClowCloud%E9%80%89%E6%8B%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="在这里插入图片描述"></p><pre><code>- Network    - Container Port：`8000`    - Enable Internet：点选为`Access`状态</code></pre><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/11-ClowCloud%E9%80%89%E6%8B%A9%E7%BD%91%E7%BB%9C.png" alt="在这里插入图片描述"></p><ul><li>Advanced Configura<ul><li>Environment Variables：点击 Add，随后粘贴以下变量。填写完成后点击 Add 完成配置。</li></ul></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_TYPE&#x3D;sqlite</span><br><span class="line">SQLITE_DATABASE&#x3D;default_db</span><br><span class="line">API_KEYS&#x3D;[&quot;&quot;]</span><br><span class="line">ALLOWED_TOKENS&#x3D;[&quot;&quot;]</span><br><span class="line">AUTH_TOKEN&#x3D;TZ&#x3D;Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure></code></pre><p>变量说明如下：  </p><table><thead><tr><th>变量名</th><th>说明</th><th>格式及示例</th></tr></thead><tbody><tr><td>API_KEYS</td><td>Gemini API 密钥列表，用于负载均衡</td><td>[“your-gemini-api-key-1”,”your-gemini-api-key-2”]</td></tr><tr><td>ALLOWED_TOKENS</td><td>允许访问的 Token 列表</td><td>[“your-access-token-1”,”your-access-token-2”]</td></tr><tr><td>AUTH_TOKEN</td><td>【可选】超级管理员token，具有所有权限，不填默认使用 ALLOWED_TOKENS 的第一个</td><td>sk-123456</td></tr></tbody></table><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/12-ClowCloud%E9%80%89%E6%8B%A9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="在这里插入图片描述"></p><ul><li>添加完环境变量后，再按照下图设置storage</li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/13-ClowCloud%E9%80%89%E6%8B%A9Storage.png" alt="在这里插入图片描述"></p><ul><li>返回页面最上方，点击 Deploy Application。弹窗提示Are you sure you want to deploy the application?选择 Yes。</li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/14-ClowCloud%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8.png" alt="在这里插入图片描述"></p><ul><li>等待几秒后，跳转至状态界面。此时，请确认页面左上角显示 running。若显示为其他状态，请稍后片刻；仍未显示 running，请确认你配置选项是否正确。需要修改的，可点击页面右下角 Manage Network 选项修改参数，或删除该项目重新部署。</li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/15-ClowCloud%E7%AD%89%E5%BE%85%E9%83%A8%E7%BD%B2%E7%8A%B6%E6%80%81.png" alt="在这里插入图片描述"></p><ul><li>将页面滚动到最下方，在 Network 选项卡中，查看右侧公网地址配置情况。一般情况下，显示 pending 表明还在处理当中，需要等待 2～5 分钟，直至pending 状态变为Available。 实际情况下， 2 分钟后即使公网地址前显示pending，亦可尝试在新的浏览器标签中打开该地址。若网页能正常显示本项目登录界面，则正常使用即可。若公网地址前的pending状态超过 10 分钟，且无法打开登录界面，原因可能是服务器过载，需要更长等待时间。建议换区或换服务商重新部署。</li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/16-ClowCloud%E7%8A%B6%E6%80%81%E5%8F%98%E4%B8%BAAvailable.png" alt="在这里插入图片描述"></p><ul><li>设置自定义域名</li><li>在cloudflare添加cname记录，如我希望域名为ggg.abc.xyz，cloudflare中这样设置，abc.xyz为托管在cloudflare域名</li><li>在clawcloud这样设置，这样就可以自定义域名访问</li></ul><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/17-ClowCloud%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.png" alt="在这里插入图片描述"></p><h2 id="四、使用gemini-balance监控配置页面"><a href="#四、使用gemini-balance监控配置页面" class="headerlink" title="四、使用gemini-balance监控配置页面"></a>四、使用gemini-balance监控配置页面</h2><p>gemini-balance贴心的带了一个监控配置页面，在这个界面可以配置多个Gemimi API 也可以监控Gemini API的调用情况。</p><ol><li>gemini-balance监控页面配置<ul><li>复制项目公网访问地址后，在浏览器中打开。随后进入登录界面，输入密码即可进入。（如果没有更改配置，密码是<code>your-access-token-1</code>）</li></ul></li></ol><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/18-GeminiBalance%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A21.png" alt="gemini-balance监控页面登录"></p><p>登录后可以进行相应的配置如添加更多的Gemini API Key<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/19-GeminiBalance%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A22.png" alt="配置界面"></p><p>也可以监控Gemini API Key的调用情况</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/20-GeminiBalance%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A23.png" alt="监控Gemini API Key的调用情况"></p><h2 id="五、在-cherry-studio使用GeminiBalance"><a href="#五、在-cherry-studio使用GeminiBalance" class="headerlink" title="五、在 cherry studio使用GeminiBalance"></a>五、在 cherry studio使用GeminiBalance</h2><p> 以 cherry studio 为例<br>    1. 添加提供商。<br>        - 提供商名称：任意填写</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/21-Cherrystudio-geminibalance%E9%85%8D%E7%BD%AE1.png" alt="在这里插入图片描述"></p><pre><code>2. 配置    - API 密钥：填写监控面板“API 密钥”选项卡中的“允许的令牌列表”。    - API 地址：填写 ClawCloud 中的公网访问地址。注意结尾不要出现“/”。</code></pre><p>  <img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/22-Cherrystudio-GeminiBalance%E9%85%8D%E7%BD%AEKey.png" alt="在这里插入图片描述"></p><pre><code>3. 添加模型4. 点击“管理”，添加模型。</code></pre><p>   <img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/23-CherryStudio-GeminiBalance%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9E%8B.png" alt="在这里插入图片描述"></p><p> 至此，部署完成。</p><p>最后看调用效果<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250710/24-CheryStudio-GeminiBalance%E4%BD%BF%E7%94%A8%E6%95%88%E6%9E%9C.png" alt="在这里插入图片描述"></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Gemini是目前好用的免费大模型，通过在 Google AI Studio 获取 API 密钥，每位开发者可以获得慷慨的免费使用额度。这包括每天 300,000 个 Token（包括提示和响应）以及每分钟 60 个请求的速率限制 。虽然免费但有一定的额度，不过通过申请不同
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AI机器学习" scheme="https://xiejava.gitee.io/tags/AI%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>国内免代理免费使用Gemini大模型实战</title>
    <link href="https://xiejava.gitee.io/posts/4999be0b/"/>
    <id>https://xiejava.gitee.io/posts/4999be0b/</id>
    <published>2025-07-07T11:19:01.000Z</published>
    <updated>2025-07-07T11:41:40.178Z</updated>
    
    <content type="html"><![CDATA[<p>谷歌的Gemini API 为开发者提供了具体的免费额度，允许将Gemini模型集成到自己的应用程序中。<br>模型可访问范围：开发者可以免费调用 Gemini 2.5 Pro 模型及其轻量级版本 Gemini 2.5 Flash 。<br>标准免费额度：通过在 Google AI Studio 获取 API 密钥，每位开发者可以获得慷慨的免费使用额度。这包括每天 300,000 个 Token（包括提示和响应）以及每分钟 60 个请求的速率限制 。</p><h2 id="一、免费申请Gemini-API密钥"><a href="#一、免费申请Gemini-API密钥" class="headerlink" title="一、免费申请Gemini API密钥"></a>一、免费申请Gemini API密钥</h2><p>注册google账号就可以免费申请Gemini API密钥。<br>申请地址 <a href="https://aistudio.google.com/" target="_blank" rel="noopener">https://aistudio.google.com/</a><br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/1-%E7%94%B3%E8%AF%B7GeminiAPIkey.PNG" alt="申请密钥"></p><p>有了Gemini API密钥后就可以调用API使用Gemini 大模型的能力了。<br>国内上网环境无法直接使用Gemini API，本文介绍能够免代理使用Gemini的方法。</p><h2 id="二、使用openai-gemini"><a href="#二、使用openai-gemini" class="headerlink" title="二、使用openai-gemini"></a>二、使用openai-gemini</h2><h3 id="1、在github上找到openai-gemini"><a href="#1、在github上找到openai-gemini" class="headerlink" title="1、在github上找到openai-gemini"></a>1、在github上找到openai-gemini</h3><p>openai-gemini 是一个 serverless 的代理项目，用于将 Gemini API 转换为 OpenAI API 。<br>项目地址：<a href="https://github.com/PublicAffairs/openai-gemini" target="_blank" rel="noopener">https://github.com/PublicAffairs/openai-gemini</a><br>Gemini API 是免费的， 但有许多工具专门与 OpenAI API 一起使用。该项目可以将Gemini API 转换为 OpenAI API ，并且通过serverless进行调用。我们可以找个国内可以访问的免费serverless服务进行中转满足国内调用使用需求。<br>这里介绍将openai-gemini部署到Netlify<br>Netlify 是一个领先的 Web 开发平台，它专门为构建、部署和管理现代高性能网站和 Web 应用程序提供了一站式解决方案。Netlify 的核心理念是支持 Jamstack 架构（JavaScript, APIs, Markup），该架构强调将网站内容预构建为静态文件，并通过 CDN 快速分发，然后通过 API 调用动态数据和执行后端逻辑。</p><h3 id="2、将openai-gemini部署到Netlify"><a href="#2、将openai-gemini部署到Netlify" class="headerlink" title="2、将openai-gemini部署到Netlify"></a>2、将openai-gemini部署到Netlify</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/2-DeployNetlify.PNG" alt="Deploy to Netlify"></p><p>找到”Deploy to Netlify” 点击就可以一键部署到Netlify,部署完成后Netlify会自动分配一个地址用于访问刚部署的openai-gemini的serverless服务。并且这个地址是在过国内可以正常访问的。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/3-NetlifyProjectOvervier.PNG" alt="project overview"></p><h3 id="3、在Cherry-Studio中配置和使用gemini的模型"><a href="#3、在Cherry-Studio中配置和使用gemini的模型" class="headerlink" title="3、在Cherry Studio中配置和使用gemini的模型"></a>3、在Cherry Studio中配置和使用gemini的模型</h3><h4 id="1）在Cherry-Studio中配置gemini-API"><a href="#1）在Cherry-Studio中配置gemini-API" class="headerlink" title="1）在Cherry Studio中配置gemini API"></a>1）在Cherry Studio中配置gemini API</h4><p>通过Netlify中转访问gemini API，我们可以直接在Cherry Studio中配置通过Netlify中转访问gemini API<br>配置API地址为通过netlify中转的地址<br>API密钥为google gemini 的API Key<br>模型可以配置你想使用的模型 如：gemini-2.5-pro<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/4-CherryStudio%E9%85%8D%E7%BD%AEGeminiAPI.PNG" alt="Cherry Studio中配置API key"></p><h4 id="2）在Cherry-Studio中使用gemini-的模型"><a href="#2）在Cherry-Studio中使用gemini-的模型" class="headerlink" title="2）在Cherry Studio中使用gemini 的模型"></a>2）在Cherry Studio中使用gemini 的模型</h4><p>在Cherry Studio中选择刚配置的gemini-2.5-pro并和它对话，可以看到gemini-2.5-pro可以流畅的输出。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/5-CherryStudio%E4%B8%AD%E4%BD%BF%E7%94%A8GeminiAPI.png" alt="在cherry Studio中使用gemini"></p><h3 id="4、在Dify中配置和使用gemini的模型"><a href="#4、在Dify中配置和使用gemini的模型" class="headerlink" title="4、在Dify中配置和使用gemini的模型"></a>4、在Dify中配置和使用gemini的模型</h3><h4 id="1-在Dify中配置gemini-API"><a href="#1-在Dify中配置gemini-API" class="headerlink" title="1) 在Dify中配置gemini API"></a>1) 在Dify中配置gemini API</h4><p>  通过openai-gemini将 Gemini API 转换为了 OpenAI API ，所以在dify中应该使用“OpenAI-API-compatible”的插件来配置模型。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/6-%E5%9C%A8dify%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9E%8B%E4%BE%9B%E5%BA%94%E5%95%86.png" alt="OpenAI插件"></p><p>如果没有安装“OpenAI-API-compatible”插件需先安装。在模型供应商中选择“OpenAI-API-compatible”,点击“添加模型”。<br>配置API地址为通过netlify中转的地址<br>API密钥为google gemini 的API Key<br>模型可以配置你想使用的模型 如：gemini 2.5 pro<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/7-%E5%9C%A8%E6%A8%A1%E5%9E%8B%E4%BE%9B%E5%BA%94%E5%95%86%E4%B8%AD%E9%85%8D%E7%BD%AEGeminiAPI.png" alt="配置API key"></p><h4 id="2）在Dify中使用gemini的模型"><a href="#2）在Dify中使用gemini的模型" class="headerlink" title="2）在Dify中使用gemini的模型"></a>2）在Dify中使用gemini的模型</h4><p>在Dify中建一个对话应用，选择刚配置好的 Gemini 2.5 Pro 模型进行对话，可以看到对话成功的调用了gemini API使用Gemini 2.5 Pro的模型进行了回复。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/8-%E5%9C%A8Dify%E4%B8%AD%E9%85%8D%E7%BD%AEGemini%E6%A8%A1%E5%9E%8B.png" alt="在Dify中使用"></p><h3 id="5、如果自己有域名可以用自己的域名来中转netlify的地址进行访问"><a href="#5、如果自己有域名可以用自己的域名来中转netlify的地址进行访问" class="headerlink" title="5、如果自己有域名可以用自己的域名来中转netlify的地址进行访问"></a>5、如果自己有域名可以用自己的域名来中转netlify的地址进行访问</h3><h4 id="1-在自己的DNS中配置域名解析到netlify的地址"><a href="#1-在自己的DNS中配置域名解析到netlify的地址" class="headerlink" title="1) 在自己的DNS中配置域名解析到netlify的地址"></a>1) 在自己的DNS中配置域名解析到netlify的地址</h4><p>以我的cloud flare域名服务配置为例，在DNS中配置一个netlifygemini的子域名，解析到目标为开始netlify给的服务地址。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/9-DNS%E9%85%8D%E7%BD%AE%E5%AD%90%E5%9F%9F%E5%90%8D.png" alt="配置子域名"></p><h4 id="2）在netlify中配置子域名"><a href="#2）在netlify中配置子域名" class="headerlink" title="2）在netlify中配置子域名"></a>2）在netlify中配置子域名</h4><p>在netlify中可以配置自己的域名对gemini API进行访问。在netlify的项目中找到“domain you already own”<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/10-%E5%9C%A8netlify%E4%B8%AD%E9%85%8D%E7%BD%AE%E5%AD%90%E5%9F%9F%E5%90%8D.png" alt="在netlify中配置自己的域名"></p><p>在自定义域名配置界面，输入自己的子域名，它会给出Host和Value的值，这两个值需要在自己的DNS域名服务器中配置校验。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/11-netlify%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E4%BF%A1%E6%81%AF.png" alt="效验信息"></p><p>接下来需要在自己的DNS服务中进行配置，我以自己的cloud flare域名服务配置为例，配置如下：</p><h4 id="3）在-Cloudflare-中添加TXT记录用于校验"><a href="#3）在-Cloudflare-中添加TXT记录用于校验" class="headerlink" title="3）在 Cloudflare 中添加TXT记录用于校验"></a>3）在 Cloudflare 中添加TXT记录用于校验</h4><ol><li>登录你的 Cloudflare 账户，选择我的域名doai8.dpdns.org。</li><li>进入左侧的 “DNS” 菜单。</li><li>点击 “Add record” (添加记录) 按钮。</li><li>根据下面的表格，准确填写每一个字段：</li></ol><table><thead><tr><th>Cloudflare 字段</th><th>你需要填写的内容 (从 Netlify 截图复制)</th></tr></thead><tbody><tr><td>Type (类型)</td><td>TXT</td></tr><tr><td>Name (名称)</td><td>netlify-challenge</td></tr><tr><td>Content (内容)</td><td>4f<strong><strong><strong>*****</strong></strong></strong>062b</td></tr><tr><td>TTL</td><td>保持默认的 Auto 即可</td></tr></tbody></table><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/12-%E5%9C%A8DNS%E4%B8%AD%E9%85%8D%E7%BD%AETXT%E9%AA%8C%E8%AF%81%E4%BF%A1%E6%81%AF.png" alt="添加TXT记录"></p><h4 id="4）在netify中进行验证，验证通过就可以用自己的域名访问了"><a href="#4）在netify中进行验证，验证通过就可以用自己的域名访问了" class="headerlink" title="4）在netify中进行验证，验证通过就可以用自己的域名访问了"></a>4）在netify中进行验证，验证通过就可以用自己的域名访问了</h4><p>在netify中进行验证，验证通过就可以用自己的域名访问了，在图中可以看到自己的子域名和netlify给的子域名。两个域名都可以用，自己的子域名的好处就是自己容易记忆。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/13-Netlify%E5%9F%9F%E5%90%8D%E7%AE%A1%E7%90%86.png" alt="自定义域名配好"></p><h4 id="5）用自定义域名进行gemini-API接口的测试"><a href="#5）用自定义域名进行gemini-API接口的测试" class="headerlink" title="5）用自定义域名进行gemini API接口的测试"></a>5）用自定义域名进行gemini API接口的测试</h4><p> 在Cherry Studio中将API地址配置程自定义域名的地址<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/14-%E5%9C%A8cherrystdio%E4%B8%AD%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%8E%A5%E5%8F%A3.png" alt="配置自定义域名地址"><br>可以看到和gemini 2.5 pro 对话同样也很丝滑。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250707/15-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8%E6%95%88%E6%9E%9C.png" alt="测试"></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;谷歌的Gemini API 为开发者提供了具体的免费额度，允许将Gemini模型集成到自己的应用程序中。&lt;br&gt;模型可访问范围：开发者可以免费调用 Gemini 2.5 Pro 模型及其轻量级版本 Gemini 2.5 Flash 。&lt;br&gt;标准免费额度：通过在 Googl
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AI机器学习" scheme="https://xiejava.gitee.io/tags/AI%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>飞牛NAS本地化部署dify打造私有LLMOps平台</title>
    <link href="https://xiejava.gitee.io/posts/a0bb8a4f/"/>
    <id>https://xiejava.gitee.io/posts/a0bb8a4f/</id>
    <published>2025-06-14T03:25:43.000Z</published>
    <updated>2025-06-14T07:00:09.100Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名程序员，在AI蓬勃发展的时代，一定要拥抱AI。<strong>Dify</strong> 是一款开源的大语言模型(LLM) 应用开发平台。它融合了后端即服务（Backend as Service）和 LLMOps 的理念，使开发者可以快速搭建生产级的生成式 AI 应用。即使你是非技术人员，也能参与到 AI 应用的定义和数据运营过程中。</p><p>由于 Dify 内置了构建 LLM 应用所需的关键技术栈，包括对数百个模型的支持、直观的 Prompt 编排界面、高质量的 RAG 引擎、稳健的 Agent 框架、灵活的流程编排，并同时提供了一套易用的界面和 API。这为开发者节省了许多重复造轮子的时间，使其可以专注在创新和业务需求上。</p><p>NAS作为私有化的个人数据中心，基本保持不停机的状态并且功耗小，比较适合作为私有化的开发平台载体。本文介绍如何在家庭飞牛NAS上本地化部署dify打造属于自己的私有化LLMOps平台，可以随时随地的通过Dify来构建自己的AI应用。</p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1、环境介绍"><a href="#1、环境介绍" class="headerlink" title="1、环境介绍"></a>1、环境介绍</h3><p>我的NAS设备为零刻ME mini全闪小主机，CPU intel N200,内存12G，装了fnOS作为NAS用。这个配置如果仅仅只是存存相片、文件等还是有点过剩了，所以为了充分发挥迷你主机的效用决定把它打造为私有的LLMOps平台。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/1-nas%E9%85%8D%E7%BD%AE.png" alt="NAS的硬件配置"></p><h3 id="2、打开飞牛OS的SSH登录"><a href="#2、打开飞牛OS的SSH登录" class="headerlink" title="2、打开飞牛OS的SSH登录"></a>2、打开飞牛OS的SSH登录</h3><p>登录到飞牛OS，在“系统设置”中找到“SSH”，打开SSH功能</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/2-%E6%89%93%E5%BC%80SSH.png" alt="打开SSH"></p><h3 id="3、通过SSH客户端连上NAS主机"><a href="#3、通过SSH客户端连上NAS主机" class="headerlink" title="3、通过SSH客户端连上NAS主机"></a>3、通过SSH客户端连上NAS主机</h3><p>打开SSH后就可以通过SSH的客户端工具连到fnOS</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/3-SSH%E8%BF%9E%E6%8E%A5%E4%B8%BB%E6%9C%BA.png" alt="SSH连接主机"></p><h2 id="二、在飞牛NAS上安装Dify"><a href="#二、在飞牛NAS上安装Dify" class="headerlink" title="二、在飞牛NAS上安装Dify"></a>二、在飞牛NAS上安装Dify</h2><h3 id="1、找到Dify的安装源"><a href="#1、找到Dify的安装源" class="headerlink" title="1、找到Dify的安装源"></a>1、找到Dify的安装源</h3><p>在github或gitee上找到dify的项目地址<br><a href="https://github.com/langgenius/dify/" target="_blank" rel="noopener">https://github.com/langgenius/dify/</a><br><a href="https://gitee.com/dify_ai/dify" target="_blank" rel="noopener">https://gitee.com/dify_ai/dify</a><br>在国内访问github比较慢，可以访问gitee上的difyi项目地址。<br>这里有安装Dify的硬件要求和安装步骤。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/4-gitee%E7%9A%84dify%E9%A1%B9%E7%9B%AE.png" alt="gitee的dify项目"></p><h3 id="2、在飞牛NAS上创建存储目录"><a href="#2、在飞牛NAS上创建存储目录" class="headerlink" title="2、在飞牛NAS上创建存储目录"></a>2、在飞牛NAS上创建存储目录</h3><p>在飞牛NAS上创建一个用户clone和安装dify的目录</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/5-nas%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95.png" alt="NAS上创建Dify目录"><br>右键点击dify文件夹，点击“详细信息”。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/6-%E6%9F%A5%E7%9C%8B%E7%9B%AE%E5%BD%95%E7%9A%84%E5%AD%98%E5%82%A8%E8%AF%A6%E6%83%85.png" alt="查看目录详情"></p><p>在详细信息中找到“复制原始路径”，这里复制的原始路径就是该文件夹在fnOS操作系统的实际路径。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/7-%E5%A4%8D%E5%88%B6%E5%8E%9F%E5%A7%8B%E8%B7%AF%E5%BE%84.png" alt="找到实际路径"></p><h3 id="3、开始安装Dify"><a href="#3、开始安装Dify" class="headerlink" title="3、开始安装Dify"></a>3、开始安装Dify</h3><p>安装Dify需要docker环境，fnOS本身就已经安装好了docker环境，所以可以直接clone后进行安装<br>通过<code>sudo -i</code> 切换到 root 用户，进入到开始复制的原始路径。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/8-%E5%88%87%E6%8D%A2root%E7%94%A8%E6%88%B7%E8%BF%9B%E5%85%A5dify%E7%9B%AE%E5%BD%95.png" alt="切换root用户"></p><p>通过<code>git clone https://gitee.com/dify_ai/dify</code> 命令clone项目</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/9-clonedify.png" alt="clone项目"></p><p>进入到dify下的docker目录，将.env.example 复制成.env文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dify/docker</span><br><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure><p>.env文件中配置的是dify的一些环境变量，dify默认的web端口是80，为了避免80端口冲突，我们把dify的默认端口改成8080，修改.env的配置文件，将docker输出的Nginx端口改成8080，Nginx的SSL端口改成8443。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE_NGINX_PORT=8080</span><br><span class="line">EXPOSE_NGINX_SSL_PORT=8080</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/10-%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3.png" alt="修改端口"></p><p>然后执行 <code>docker compose up -d</code> 就可以完成dify的安装</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/11-%E5%AE%89%E8%A3%85dify.png" alt="安装dify"></p><p>安装完成后通过NAS的内网IP就可以访问到dify的初始化界面<br><a href="http://192.168.0.18:8080/install" target="_blank" rel="noopener">http://192.168.0.18:8080/install</a><br>通过简单的配置，配置用户名、口令就可以正式使用dify了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/12-%E5%86%85%E7%BD%91%E8%AE%BF%E9%97%AEdify.png" alt="内网访问dify"></p><h2 id="三、设置外网访问"><a href="#三、设置外网访问" class="headerlink" title="三、设置外网访问"></a>三、设置外网访问</h2><p>为了随时随地的访问和使用dify我们要对dify进行端口映射，使用nas的ddns来进行外网访问。</p><h3 id="1、外网端口映射"><a href="#1、外网端口映射" class="headerlink" title="1、外网端口映射"></a>1、外网端口映射</h3><p>在路由器上添加一条映射规则，将内网的8080端口映射到外网的某个端口上。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/12-%E5%A4%96%E7%BD%91%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84.png" alt="外网端口映射"></p><h3 id="2、在飞牛nas上进行ddns配置"><a href="#2、在飞牛nas上进行ddns配置" class="headerlink" title="2、在飞牛nas上进行ddns配置"></a>2、在飞牛nas上进行ddns配置</h3><p>如有域名就可以配置阿里云或Cloudflare的ddns服务</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/13-DDNS%E9%85%8D%E7%BD%AE.png" alt="DDNS配置"></p><p>这样就可以通过域名+端口直接访问NAS上的dify应用，随时随地构建和调试自己的AI应用了。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250614/14-%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AEdify.png" alt="外网访问"></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名程序员，在AI蓬勃发展的时代，一定要拥抱AI。&lt;strong&gt;Dify&lt;/strong&gt; 是一款开源的大语言模型(LLM) 应用开发平台。它融合了后端即服务（Backend as Service）和 LLMOps 的理念，使开发者可以快速搭建生产级的生成式 AI 应
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AI机器学习" scheme="https://xiejava.gitee.io/tags/AI%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="NAS" scheme="https://xiejava.gitee.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>什么是RACI矩阵，应用在什么场景？</title>
    <link href="https://xiejava.gitee.io/posts/a95e359b/"/>
    <id>https://xiejava.gitee.io/posts/a95e359b/</id>
    <published>2025-04-08T02:58:36.000Z</published>
    <updated>2025-04-08T05:57:29.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是RACI"><a href="#一、什么是RACI" class="headerlink" title="一、什么是RACI"></a>一、什么是RACI</h2><p>RACI矩阵是一种用于明确项目或任务中角色与责任的管理工具，通过定义不同人员在任务中的参与程度来避免职责不清的问题。以下是其核心要点：</p><ol><li>‌RACI的含义‌</li></ol><ul><li>‌R（Responsible）执行者‌：直接完成任务的具体负责人。</li><li>‌A（Accountable）批准者‌：对任务结果负最终责任，通常为决策者。</li><li>‌C（Consulted）被咨询者‌：提供专业意见的专家或利益相关方。</li><li>‌I（Informed）被通知者‌：需知悉进展但不直接参与的人员。</li></ul><ol start="2"><li>‌典型应用场景‌</li></ol><ul><li>‌跨部门协作项目‌：例如新产品发布，需明确市场、研发、生产等部门的职责。</li><li>‌复杂流程优化‌：如企业ERP系统实施，区分流程设计、数据迁移等任务的责任人。</li><li>‌危机管理‌：如安全事故处理时明确指挥、执行、沟通等角色。</li><li>‌日常运营‌：适用于周期性工作（如财务审计）的职责划分。</li></ul><ol start="3"><li>‌使用案例‌</li></ol><ul><li>‌软件开发项目‌：</li></ul><table><thead><tr><th>任务</th><th>项目经理（A）</th><th>开发团队（R）</th><th>测试组（R）</th><th>客户（C）</th><th>法务（I）</th></tr></thead><tbody><tr><td>需求确认</td><td>A</td><td>R</td><td>-</td><td>C</td><td>I</td></tr><tr><td>代码审查</td><td>R</td><td>C</td><td>-</td><td>-</td><td></td></tr></tbody></table><ol start="4"><li>构建要点‌</li></ol><ul><li>每个任务确保‌仅1个A角色‌，避免多头领导</li><li>避免R角色过多导致执行分散（如单个任务超过3个R）</li><li>关键干系人必须纳入C或I，防止遗漏重要意见</li></ul><ol start="5"><li>常见误区‌</li></ol><ul><li>混淆A和R角色（如误将部门领导设为所有任务的A）</li><li>过度咨询（C角色过多导致决策延迟）</li><li>忽略变更管理（未随项目进展更新矩阵）</li></ul><h2 id="二、如何适用RACI矩阵"><a href="#二、如何适用RACI矩阵" class="headerlink" title="二、如何适用RACI矩阵"></a>二、如何适用RACI矩阵</h2><p>结合不同场景的关键步骤与操作要点：</p><ol><li><p><strong>前期准备‌</strong></p><ul><li>分解任务清单‌<br>基于项目目标，将工作拆解为具体任务（如软件开发中的需求收集、测试、部署等）‌。<br>示例：在IT系统迁移项目中，任务可拆分为“制定迁移方案”“数据备份验证”等‌。</li><li>识别参与角色‌<br>列出所有相关角色或部门（如项目经理、开发团队、法务部等），避免仅使用个人姓名，需标注岗位或职能‌。</li></ul></li><li><p><strong>构建矩阵‌</strong></p><ul><li>分配RACI角色‌<br>○ 每个任务需指定 ‌1个A角色‌（唯一责任人）和若干R/C/I角色‌。<br>示例：在需求确认阶段，产品经理为A，开发团队为R，法务部为I‌。<br>○ 避免单任务分配过多R角色（建议≤3个），防止执行分散‌。</li><li>关键逻辑验证‌<br>○ ‌横向检查‌：每项任务需至少包含R和A角色，确保无遗漏‌。<br>○ ‌纵向检查‌：单个角色名下任务量需合理，避免过度集中（如某成员承担过多R角色）‌。</li></ul></li><li><p><strong>应用中的关键技巧‌</strong></p><ul><li>与项目工具结合‌<br>○ 将RACI矩阵与甘特图、WBS（工作分解结构）联动，识别关键路径任务并优先分配资源‌。<br>示例：在部署阶段，明确运维团队为R角色并与甘特图中的时间节点对齐‌。</li><li>动态更新机制‌<br>○ 项目变更时同步调整矩阵（如新增任务或角色变更）‌。<br>○ 定期向I角色推送进展（如周报同步），向C角色发起咨询（如需求评审会）‌。</li></ul></li><li><p><strong>常见问题与规避策略‌</strong></p></li></ol><table><thead><tr><th>问题类型</th><th>解决方案</th></tr></thead><tbody><tr><td>‌角色冲突‌（多个A）</td><td>重新界定任务边界，仅保留1个A角色‌。</td></tr><tr><td>‌沟通低效‌（C/I过多）</td><td>精简咨询范围（如仅核心专家参与C角色），减少非必要通知‌。</td></tr><tr><td>‌ 责任模糊‌（无明确R）</td><td>通过工作分解细化任务颗粒度，确保每个子任务均有R角色‌。</td></tr></tbody></table><ol start="5"><li>扩展应用场景‌</li></ol><ul><li>‌RASCI矩阵‌：在RACI基础上增加S（Support）角色，标注辅助支持团队（如IT部门协助数据迁移）‌15。</li><li>‌多层级矩阵‌：针对复杂项目分层设计（如战略级、执行级），分别分配责任‌7。</li></ul><p>总结：核心操作流程<br>1.‌分解任务 → 2. 定义角色 → 3. 填充矩阵 → 4. 验证逻辑 → 5. 动态维护‌<br>示例：某市政工程通过RACI矩阵将环评报告责任唯一分配给环保机构（A角色），施工执行由承包商（R角色）承担，社区代表仅需知悉（I角色）‌。<br>通过结构化分配与持续优化，RACI矩阵可显著提升跨团队协作效率，减少责任争议‌。</p><h2 id="三、应用案例"><a href="#三、应用案例" class="headerlink" title="三、应用案例"></a>三、应用案例</h2><ol><li>IT系统升级项目‌<br>‌背景‌：某企业需将本地服务器迁移至云端，涉及IT部、安全部、财务部及外部供应商。<br>‌任务分解与角色分配‌：</li></ol><table><thead><tr><th>任务</th><th>IT经理 (A)</th><th>运维团队 （R）</th><th>安全部 （C）</th><th>财务部 （I）</th><th>供应商 （R）</th></tr></thead><tbody><tr><td>制定迁移方案</td><td>A</td><td>R</td><td>C</td><td>I</td><td>C</td></tr><tr><td>数据备份与验证</td><td>I</td><td>R</td><td>C</td><td>-</td><td>R</td></tr><tr><td>云环境安全测试</td><td>-</td><td>C</td><td>A</td><td>I</td><td>R</td></tr></tbody></table><p>‌关键点‌：</p><ul><li>安全部需深度参与方案设计和测试（C/A角色），避免安全漏洞；</li><li>供应商负责具体执行（R），但需接受IT经理的最终审批（A）。</li></ul><ol start="2"><li>日常运维（IT支持团队）‌<br>‌背景‌：某公司IT部门处理日常故障，需明确一线支持、二线专家及管理层职责。</li></ol><table><thead><tr><th>任务</th><th>IT主管 (A)</th><th>一线支持 (R)</th><th>二线专家 (C)</th><th>用户部门 (I)</th></tr></thead><tbody><tr><td>故障初步诊断</td><td>-</td><td>R</td><td>-</td><td>I</td></tr><tr><td>复杂问题升级处理</td><td>I</td><td>-</td><td>R</td><td>C</td></tr><tr><td>故障解决率报告</td><td>A</td><td>C</td><td>-</td><td>I</td></tr></tbody></table><p>‌注意事项‌：</p><ul><li>一线支持直接处理简单问题（R），二线专家解决技术难点（R）；</li><li>用户部门仅需知悉进展（I），避免干扰技术处理。</li></ul><p>从以上看出，RACI矩阵适用于‌任何<strong>需要明确角色分工的场景‌</strong>，尤其适合跨职能、多利益相关方的复杂任务。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是RACI&quot;&gt;&lt;a href=&quot;#一、什么是RACI&quot; class=&quot;headerlink&quot; title=&quot;一、什么是RACI&quot;&gt;&lt;/a&gt;一、什么是RACI&lt;/h2&gt;&lt;p&gt;RACI矩阵是一种用于明确项目或任务中角色与责任的管理工具，通过定义不同人员在任务中
      
    
    </summary>
    
    
      <category term="管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/"/>
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/categories/%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="https://xiejava.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="学习方法" scheme="https://xiejava.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>什么是互联网暴露面？什么是攻击面？暴露面与攻击面有什么区别？</title>
    <link href="https://xiejava.gitee.io/posts/6e957ca9/"/>
    <id>https://xiejava.gitee.io/posts/6e957ca9/</id>
    <published>2025-02-24T03:28:04.000Z</published>
    <updated>2025-02-24T04:44:56.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、定义与核心概念"><a href="#一、定义与核心概念" class="headerlink" title="一、定义与核心概念"></a>一、定义与核心概念</h2><h3 id="1-‌互联网暴露面‌"><a href="#1-‌互联网暴露面‌" class="headerlink" title="1. ‌互联网暴露面‌"></a>1. ‌互联网暴露面‌</h3><ul><li><strong>定义</strong>：指组织在互联网上公开可访问的数字化资产和服务，如服务器、开放端口、API、网站、云服务等。</li></ul><p><strong>暴露面</strong>指网络系统中<strong>对外界开放的可见部分</strong>，包括公开的接口、网络端口、服务或应用程序等。例如Web服务、API、数据库端口等，这些资源可直接被外部访问或识别‌。暴露面的大小直接影响潜在攻击机会‌。</p><ul><li><p><strong>核心特点</strong>：</p><ul><li>可见性：能被外部扫描或探测到（如通过IP、域名、端口）。</li><li>入口点：是外部与内部系统交互的桥梁（如登录页面、文件上传接口）。</li></ul></li><li><p><strong>示例</strong>：</p><ul><li>公网IP地址、开放的SSH端口（22）、公开的Web应用、未加密的HTTP服务。</li></ul></li></ul><h3 id="2-‌攻击面"><a href="#2-‌攻击面" class="headerlink" title="2. ‌攻击面"></a>2. ‌攻击面</h3><ul><li><strong>定义</strong>：指所有可能被攻击者利用的潜在漏洞和风险点，涵盖技术、人员、流程等多个维度。‌</li></ul><p><strong>攻击面</strong>指攻击者<strong>可能利用的所有潜在入口点和攻击路径</strong>，不仅包含暴露面中的可见部分，还涵盖漏洞、错误配置、权限问题、社会工程等动态风险因素。攻击面越大，系统被入侵的概率越高‌。</p><ul><li><p><strong>核心特点</strong>：</p><ul><li>全面性：不仅包括暴露面，还包含内部漏洞（如配置错误、弱密码、员工安全意识不足）。</li><li>动态性：随系统更新、新漏洞披露、业务扩展而变化。</li></ul></li><li><p><strong>示例</strong>：</p><ul><li>暴露面中的漏洞（如SQL注入）、内部数据库弱口令、员工易受钓鱼攻击、过时的内部软件版本。</li></ul></li></ul><h2 id="二、区别与关联"><a href="#二、区别与关联" class="headerlink" title="二、区别与关联"></a>二、区别与关联</h2><p><strong>关系</strong>：从定义上看，攻击面包含暴露面，并且更加广泛。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2025/20250224001/%E6%9A%B4%E9%9C%B2%E9%9D%A2%E4%B8%8E%E6%94%BB%E5%87%BB%E9%9D%A2%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="暴露面与攻击面的关系"></p><p><strong>区别：</strong></p><table><thead><tr><th>维度‌</th><th>‌暴露面‌</th><th>‌攻击面‌</th></tr></thead><tbody><tr><td>范围‌</td><td>仅包含对外可见的开放部分‌</td><td>包含所有潜在攻击路径（含暴露面及内部系统、人为因素等）‌</td></tr><tr><td>‌动态性‌</td><td>相对静态，与系统配置直接相关‌</td><td>动态变化，受漏洞、人为因素等影响‌</td></tr><tr><td>关注点‌</td><td>资源对外暴露的“可见性”‌，可见性和可访问性</td><td>攻击者可利用的“漏洞总和”‌，潜在漏洞和攻击路径</td></tr><tr><td>防御重点</td><td>减少不必要的公开资产</td><td>全面风险管理（技术+管理）</td></tr><tr><td>管理策略</td><td>定期扫描并关闭不必要的服务，使用防火墙限制访问，最小化公开资产。</td><td>漏洞管理、员工培训、权限控制、持续监控（如日志审计、入侵检测）。</td></tr><tr><td>示例</td><td>如：公司官网（example.com）开放了80和443端口，允许用户访问。</td><td>若官网存在未修复的XSS漏洞（技术风险），且管理员使用弱密码（人为风险），两者均属于攻击面。</td></tr></tbody></table><h2 id="三、防护侧重点"><a href="#三、防护侧重点" class="headerlink" title="三、防护侧重点"></a>三、防护侧重点</h2><h3 id="1-‌暴露面管理‌"><a href="#1-‌暴露面管理‌" class="headerlink" title="1. ‌暴露面管理‌"></a>1. ‌暴露面管理‌</h3><ul><li>‌原则‌：遵循最小权限，仅开放必要端口或服务‌。</li><li>‌措施‌：网络隔离、访问控制、定期审查暴露资源‌。</li></ul><h3 id="2-‌攻击面管理‌"><a href="#2-‌攻击面管理‌" class="headerlink" title="2. ‌攻击面管理‌"></a>2. ‌攻击面管理‌</h3><ul><li>‌原则‌：降低漏洞利用可能性，覆盖技术、流程、人为因素‌。</li><li>‌措施‌：渗透测试、安全评估、漏洞修复、权限管控‌。</li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>‌<strong>暴露面是攻击面的子集‌</strong>，两者区别在于：暴露面聚焦“对外可见性”，攻击面覆盖“可利用性”；前者是静态防御的基础，后者需动态应对综合风险‌。缩小暴露面可降低被攻击概率，而减少攻击面则能全面降低风险。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、定义与核心概念&quot;&gt;&lt;a href=&quot;#一、定义与核心概念&quot; class=&quot;headerlink&quot; title=&quot;一、定义与核心概念&quot;&gt;&lt;/a&gt;一、定义与核心概念&lt;/h2&gt;&lt;h3 id=&quot;1-‌互联网暴露面‌&quot;&gt;&lt;a href=&quot;#1-‌互联网暴露面‌&quot; cla
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>一文搞懂什么是攻击面管理（ASM）</title>
    <link href="https://xiejava.gitee.io/posts/9aafe860/"/>
    <id>https://xiejava.gitee.io/posts/9aafe860/</id>
    <published>2025-02-19T04:24:11.000Z</published>
    <updated>2025-02-19T04:28:30.174Z</updated>
    
    <content type="html"><![CDATA[<p>攻击面是网络安全防御的“第一道防线”，其管理能力直接决定企业的安全基线。</p><p>攻击面管理（Attack Surface Management，ASM）是一种新兴的网络安全策略和实践，旨在通过持续发现、分析、监控和评估组织内外部的所有资产，识别并管理潜在的安全风险。其核心是从攻击者的视角出发，主动识别企业网络资产的攻击面及脆弱性，包括已知和未知的资产、漏洞、配置缺陷以及泄露信息等。</p><h2 id="一、什么是攻击面"><a href="#一、什么是攻击面" class="headerlink" title="一、什么是攻击面"></a>一、什么是攻击面</h2><p>要了解攻击面管理（ASM）首先需要了解什么是攻击面。攻击面指的是所有可能被攻击者利用的入口点，比如硬件、软件、云服务等等。攻击面（Attack Surface） 是网络安全领域的核心概念，指一个系统、网络或组织中可能被攻击者利用的所有潜在入口点和漏洞的集合。简单来说，它是攻击者可能发起攻击的“可触及范围”，范围越大，暴露的风险越高，防御难度也越大。</p><h3 id="攻击面的核心组成部分"><a href="#攻击面的核心组成部分" class="headerlink" title="攻击面的核心组成部分"></a>攻击面的核心组成部分</h3><p>攻击面通常由以下要素构成：</p><ol><li>技术资产<br>○ 硬件：服务器、路由器、IoT设备、摄像头等。<br>○ 软件：操作系统、应用程序、API、开源组件等。<br>○ 网络服务：开放的端口（如HTTP 80端口、SSH 22端口）、云服务（如AWS S3存储桶）、域名等。</li><li>配置缺陷<br>○ 默认密码未修改、权限设置错误、未加密的通信协议（如HTTP）、冗余服务（如未关闭的测试环境）等。</li><li>数据暴露<br>○ 敏感数据泄露（如数据库备份文件被公开）、代码仓库中的密钥硬编码、日志文件中的用户信息等。</li><li>人为因素<br>○ 员工的安全意识薄弱（如点击钓鱼链接）、第三方供应商的访问权限、社会工程攻击的潜在目标。</li><li>供应链风险<br>○ 依赖的第三方软件漏洞（如Log4j）、开源库的未更新版本、外包开发引入的后门等。</li></ol><h3 id="攻击面扩大的原因"><a href="#攻击面扩大的原因" class="headerlink" title="攻击面扩大的原因"></a>攻击面扩大的原因</h3><ol><li>数字化转型：云服务、微服务架构、远程办公导致资产分散化。</li><li>影子IT：员工私自部署未授权的应用或设备（如个人NAS）。</li><li>复杂供应链：第三方服务、开源组件的依赖增加。</li><li>自动化攻击工具：攻击者可快速扫描全网暴露资产（如Shodan搜索引擎）</li></ol><h2 id="二、攻击面的分类"><a href="#二、攻击面的分类" class="headerlink" title="二、攻击面的分类"></a>二、攻击面的分类</h2><p>根据视角和范围，攻击面可分为以下两类：</p><ol><li>外部攻击面（External Attack Surface）<br>○ 定义：暴露在互联网上，能被外部攻击者直接访问的资产和漏洞。<br>○ 典型示例：<br> ■ 面向公网的Web应用、API接口。<br> ■ 云存储桶的错误配置（如公开可读）。<br> ■ 员工在GitHub意外上传的数据库凭证。<br>○ 管理工具：EASM（外部攻击面管理）。</li><li>内部攻击面（Internal Attack Surface）<br>○ 定义：仅限内部网络访问，但可能被已渗透的攻击者横向利用的弱点。<br>○ 典型示例：<br> ■ 内网未修复的漏洞（如永恒之蓝漏洞）。<br> ■ 域控制器权限滥用、共享文件夹过度开放。<br> ■ 内部员工滥用权限窃取数据。<br>○ 管理工具：CAASM（网络资产攻击面管理）、内部漏洞扫描器。</li></ol><h2 id="三、网络资产攻击面管理-CAASM"><a href="#三、网络资产攻击面管理-CAASM" class="headerlink" title="三、网络资产攻击面管理(CAASM)"></a>三、网络资产攻击面管理(CAASM)</h2><p>网络资产攻击面管理(CAASM)全称（Cyber Asset Attack Surface Management, CAASM）是一种网络安全技术或方法论，旨在帮助组织全面发现、识别、监控和管理其数字化资产（包括硬件、软件、云服务、API、物联网设备等）的潜在攻击面，从而降低安全风险并提升防御能力。CAASM通过整合现有安全工具（如漏洞扫描器、EDR、CMDB等）的数据，构建统一的资产视图，覆盖内部网络、云环境、第三方服务等所有资产。其核心目标是解决资产分散、数据孤岛和未知资产的问题，帮助安全团队识别安全控制中的漏洞与差距，并协调修复。</p><h3 id="CAASM-的核心功能"><a href="#CAASM-的核心功能" class="headerlink" title="CAASM 的核心功能"></a>CAASM 的核心功能</h3><ol><li>自动化资产发现<br>○ 通过主动扫描、被动流量分析、API集成等方式，自动发现企业内外的所有资产，包括未授权的“影子IT”（如员工私建的云实例、未知设备）。<br>○ 覆盖范围包括本地基础设施、云环境（AWS、Azure等）、第三方服务、物联网设备等。</li><li>资产分类与优先级排序<br>○ 根据资产类型（服务器、数据库、API）、业务重要性、暴露程度（如是否面向公网）等，对资产进行分类和风险评估。<br>○ 帮助安全团队优先处理高风险资产（如暴露在互联网的敏感数据库）。</li><li>攻击面可视化与实时监控<br>○ 通过仪表盘展示所有资产的拓扑关系和暴露路径，直观呈现攻击面。<br>○ 实时监控资产状态变化（如新开放的端口、新增的云服务），及时发现异常。</li><li>与现有工具集成<br>○ 整合漏洞扫描工具（如Nessus）、EDR（端点检测与响应）、防火墙日志等，形成统一的资产视图。<br>○ 利用API打通数据孤岛，避免不同工具间的信息割裂。</li><li>风险评估与缓解建议<br>○ 结合漏洞数据、威胁情报和资产上下文，生成风险评分。<br>○ 提供修复建议（如关闭不必要的端口、更新补丁）或临时缓解措施（如配置防火墙规则）。</li></ol><h3 id="网络资产攻击面管理-CAASM-与传统资产管理的区别"><a href="#网络资产攻击面管理-CAASM-与传统资产管理的区别" class="headerlink" title="网络资产攻击面管理(CAASM)与传统资产管理的区别"></a>网络资产攻击面管理(CAASM)与传统资产管理的区别</h3><p>传统资产管理工具（如CMDB）通常依赖手动录入或静态数据，且缺乏对攻击面的动态分析。而CAASM的特点包括：<br>● 主动发现：自动识别资产，减少人为遗漏。<br>● 攻击面视角：不仅记录资产，还分析其暴露程度和潜在风险。<br>● 实时性：持续监控变化，适应动态环境（如云资源的弹性扩展）。<br>● 威胁关联：结合漏洞、配置错误和威胁情报进行综合分析。</p><h2 id="四、外部攻击面管理（EASM）"><a href="#四、外部攻击面管理（EASM）" class="headerlink" title="四、外部攻击面管理（EASM）"></a>四、外部攻击面管理（EASM）</h2><p>外部攻击面管理（External Attack Surface Management, EASM） 是一种以攻击者视角为核心的安全管理方法，旨在持续发现、监控和评估组织暴露在互联网上的所有数字资产及其潜在风险。这些资产包括服务器、域名、云服务、API、物联网设备等，同时也涵盖影子资产（如未授权的云实例）、错误配置、开放端口、未修复漏洞以及敏感数据泄露等问题。EASM的关键在于通过外部视角模拟攻击者的行为，识别可能被利用的薄弱点，从而提前修复风险。</p><h3 id="外部攻击面管理（EASM）的核心功能"><a href="#外部攻击面管理（EASM）的核心功能" class="headerlink" title="外部攻击面管理（EASM）的核心功能"></a>外部攻击面管理（EASM）的核心功能</h3><p>外部攻击面管理（EASM）的核心功能主要包括以下几个方面：</p><ol><li>泛资产发现与监控<br>通过分布式探测引擎，持续扫描和监控外部环境，识别和编目从互联网可访问的数字资产，包括域名、IP地址、网页应用程序、API、云服务、影子资产、仿冒资产等。这些功能为企业提供了全面的资产暴露面视图。</li><li>攻击触点识别与评估<br>在攻防视角下，依托指纹库和情报库，对发现的资产进行弱点检测，包括漏洞扫描、弱口令检测、敏感数据识别等。同时，结合供应链情报和攻防情报，评估资产被利用的风险。</li><li>数据泄露监测<br>覆盖全网（包括暗网、深网、代码托管平台、网盘、文库等）范围，监测敏感数据泄露情况，及时发现并处理潜在的数据泄露风险。</li><li>攻击面分析<br>基于弱点检测结果，综合分析资产的风险，识别可能的攻击路径和风险等级。评估一旦发生安全事件，业务可能受影响的范围，并提供风险收敛的优先级建议。</li><li>风险评估与预警<br>评估外部攻击面相关的风险，并根据威胁的潜在影响和可能性进行优先级排序。提供7×24小时的风险预警服务，包括暴露面变动提醒、数据泄露监测、网站篡改和黑链预警等。</li><li>持续监控与适应<br>定期对外部攻击面进行实时扫描和监控，结合威胁情报源和漏洞管理，检测新的或变化的资产、漏洞和威胁，并根据这些变化调整安全策略。</li></ol><h2 id="五、网络资产攻击面管理（CAASM）与外部攻击面管理（EASM）的联系与区别"><a href="#五、网络资产攻击面管理（CAASM）与外部攻击面管理（EASM）的联系与区别" class="headerlink" title="五、网络资产攻击面管理（CAASM）与外部攻击面管理（EASM）的联系与区别"></a>五、网络资产攻击面管理（CAASM）与外部攻击面管理（EASM）的联系与区别</h2><h3 id="EASM与CAASM的联系"><a href="#EASM与CAASM的联系" class="headerlink" title="EASM与CAASM的联系"></a>EASM与CAASM的联系</h3><ol><li>共同目标：两者均属于攻击面管理（ASM）的核心组成部分，旨在缩小攻击面、降低安全风险。</li><li>互补性：EASM提供外部视角的资产发现和风险分析，而CAASM整合内外资产数据，形成全局视图。例如，EASM发现的外部暴露资产可输入到CAASM系统中进行关联分析。</li><li>数据整合：CAASM依赖EASM和DRPS（数字风险保护服务）的数据源，实现更全面的资产清单管理。</li></ol><h3 id="EASM与CAASM的区别"><a href="#EASM与CAASM的区别" class="headerlink" title="EASM与CAASM的区别"></a>EASM与CAASM的区别</h3><table><thead><tr><th>维度</th><th>EASM</th><th>CAASM</th></tr></thead><tbody><tr><td>视角</td><td>攻击者视角（外部“黑盒”扫描）</td><td>防御者视角（内部“白盒”数据整合）</td></tr><tr><td>覆盖范围</td><td>互联网暴露的资产（如云服务、域名、第三方应用）</td><td>内外部所有资产（包括网络设备、服务器、API、IoT设备等）</td></tr><tr><td>技术手段</td><td>依赖网络空间测绘、主动扫描、暗网监控</td><td>通过API与现有工具集成（如CMDB、漏洞扫描器），聚合多源数据</td></tr><tr><td>核心功能</td><td>资产发现、漏洞优先级排序、数据泄露检测、供应链风险评估</td><td>资产清点、数据关联分析、安全控制差距识别、自动化修复建议</td></tr><tr><td>适用场景</td><td>暴露在公网的资产风险管理（如云服务、子公司资产）</td><td>复杂混合环境（如多云、本地数据中心）的资产可见性与合规管理</td></tr><tr><td>数据来源</td><td>外部扫描、公开网络、暗网情报</td><td>内部系统日志、IT工具接口、CMDB数据库</td></tr></tbody></table><h3 id="典型应用场景对比"><a href="#典型应用场景对比" class="headerlink" title="典型应用场景对比"></a>典型应用场景对比</h3><ol><li>EASM：<br>○ 云安全治理：发现公有云上的错误配置或未授权实例。<br>○ 供应链风险：评估第三方服务商的暴露面，如合作伙伴的漏洞代码。<br>○ 敏感数据泄露：监控暗网或公共平台（如GitHub）上的数据泄露。</li><li>CAASM：<br>○ 影子资产管理：通过整合EDR、防火墙日志等，发现未登记的内部设备。<br>○ 漏洞优先级排序：结合资产业务价值与漏洞严重性，优化修复策略。<br>○ 合规性报告：生成统一的资产与安全控制报告，满足ISO 27001等合规要求。</li></ol><p>● EASM更强调从外部攻击者的角度发现风险，适用于防御边界模糊的互联网暴露场景。<br>● CAASM则聚焦于内部资产的全面可见性，解决复杂IT环境下的数据孤岛问题。<br>● 协同作用：在实际应用中，两者需结合使用。例如，EASM发现的外部风险需通过CAASM与内部资产关联分析，形成闭环管理。</p><p>未来，随着攻击面管理技术的成熟，EASM与CAASM可能会进一步融合到统一平台中，实现更高效的风险收敛。</p><h2 id="六、攻击面管理的优势与应用场景"><a href="#六、攻击面管理的优势与应用场景" class="headerlink" title="六、攻击面管理的优势与应用场景"></a>六、攻击面管理的优势与应用场景</h2><p>随着技术的发展，攻击面正从传统IT向云、物联网、供应链等方向快速扩展，企业需借助自动化工具（如EASM、CAASM）和系统化策略，实现攻击面的持续收敛与风险控制。</p><h3 id="攻击面管理的优势"><a href="#攻击面管理的优势" class="headerlink" title="攻击面管理的优势"></a>攻击面管理的优势</h3><p>● 主动防御：从传统的被动防御模式转变为积极主动地发现和管理潜在风险。<br>● 全面覆盖：不仅关注已知资产，还能发现未知的影子资产和泄露信息。<br>● 动态适应：能够适应云计算、物联网等复杂环境，并与现有安全工具（如SOC、SIEM）集成。<br>● 风险量化：提供更精细的风险评估和量化功能，帮助企业制定有效的安全策略。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>攻击面管理适用于多种场景，包括但不限于：<br>● 企业数字化转型：应对云计算、物联网等新技术带来的复杂攻击面。<br>● 供应链安全：评估和管理供应商基础设施中的安全风险。<br>● 安全运营：与安全运营中心（SOC）结合，提升整体安全管理水平。</p><p>随着技术的不断发展，攻击面管理正朝着自动化、智能化、云原生化的方向发展，并与企业的业务风险管理流程紧密结合。</p><hr><p>博客文章：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;攻击面是网络安全防御的“第一道防线”，其管理能力直接决定企业的安全基线。&lt;/p&gt;
&lt;p&gt;攻击面管理（Attack Surface Management，ASM）是一种新兴的网络安全策略和实践，旨在通过持续发现、分析、监控和评估组织内外部的所有资产，识别并管理潜在的安全风险。
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全“挂图作战”及其场景</title>
    <link href="https://xiejava.gitee.io/posts/75c87f06/"/>
    <id>https://xiejava.gitee.io/posts/75c87f06/</id>
    <published>2025-02-18T01:40:28.000Z</published>
    <updated>2025-02-18T01:45:14.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、网络安全挂图作战来源与定义"><a href="#一、网络安全挂图作战来源与定义" class="headerlink" title="一、网络安全挂图作战来源与定义"></a>一、网络安全挂图作战来源与定义</h2><h3 id="1、网络安全挂图作战的来源"><a href="#1、网络安全挂图作战的来源" class="headerlink" title="1、网络安全挂图作战的来源"></a>1、网络安全挂图作战的来源</h3><p>网络安全挂图作战的概念源于传统军事作战中的“挂图作战”，即通过地图来指挥和协调作战行动。在网络空间安全领域，这一概念被引入并发展为一种新的网络安全管理和防御策略。其灵感来自于地理学中的“人地”关系理论，通过将网络空间的要素与地理空间相结合，构建网络空间地图。</p><p>在2020年7月，网络安全专家郭启全等在《中国科学院院刊》上发表了《发展网络空间可视化技术支撑网络安全综合防控体系建设》研究文章，论述了网络空间“挂图作战”的基本理念和发展愿景。</p><p>同年公安部印发《贯彻落实网络安全等保制度和关保制度的指导意见》（公网安[2020]1960号），明确提出“要加强网络新技术研究和应用，研究绘制网络空间地理信息图谱(网络地图)，实现挂图作战”。</p><h3 id="2、网络安全挂图作战的定义"><a href="#2、网络安全挂图作战的定义" class="headerlink" title="2、网络安全挂图作战的定义"></a>2、网络安全挂图作战的定义</h3><p><strong>挂图作战</strong>： 按计划、按目标、按进度、按要求实施的一种作战方式或工作方法。<br><strong>网络安全挂图作战的核心思想</strong>：将攻击者的攻击路径和影响范围以图形化方式展现，帮助防守方更直观、全面地理解攻击者的行为以及对组织资产的影响，从而更有效地进行威胁检测、分析、响应等动作。</p><p>网络安全挂图作战是一种通过<strong>可视化技术</strong>将网络安全态势、资产、威胁等信息以图形化方式展示出来的方法。其核心在于通过构建网络空间地图，实现对网络安全事件的全过程展示和管理，通过“<strong>看、管、防、控</strong>”一体化实现主动防御的工作模式。</p><p>其核心价值在于：<br>● 攻防视角可视化：将攻击者的路径、手段及影响范围图形化呈现，辅助防守方快速定位薄弱点。<br>● 全生命周期管理：覆盖威胁检测、分析、响应、复盘的全流程闭环。<br>● 协同作战能力：整合多部门、多工具数据，打破信息孤岛，提升响应效率。</p><p>具体来说，挂图作战包括以下几个方面：</p><ol><li>可视化展示：将网络环境中的各个要素（如资产、漏洞、威胁等）以图形化的方式呈现，提高网络安全的可视化程度。</li><li>态势感知与分析：通过挂图作战平台，实时监测和感知网络安全态势，及时发现和分析安全威胁。</li><li>决策支持：为安全决策提供直观的数据支持，帮助安全团队更好地研判和处置安全事件。</li><li>协同作战：支持多方协同作战，整合不同安全工具和平台的信息，提高安全事件的响应速度和处理效率。</li></ol><p>通过这些功能，网络安全挂图作战能够有效地提升网络安全防护的效率和准确性，帮助组织更好地应对复杂的网络安全挑战。</p><h2 id="二、挂图作战关键技术"><a href="#二、挂图作战关键技术" class="headerlink" title="二、挂图作战关键技术"></a>二、挂图作战关键技术</h2><ol><li>网络空间测绘技术<br>● 资产指纹库：通过主动扫描（如端口探测、协议解析）和被动流量分析（如流量镜像），识别网络中的设备、服务、应用及版本信息。<br>● 拓扑自动发现：利用路由追踪、SNMP协议等，绘制网络节点间的连接关系和通信路径。</li><li>动态可视化引擎<br>● 图数据库（Neo4j、GraphX）：存储复杂的资产关系与攻击链路，支持快速查询和路径分析。<br>● 威胁热力图：根据攻击频率、漏洞严重性等参数生成风险热区，直观标注高危区域。</li><li>攻击链建模（Cyber Kill Chain）<br>● MITRE ATT&amp;CK框架集成：将攻击者的TTPs（战术、技术、过程）映射到网络地图中，预判攻击路径。<br>● 攻击模拟推演：基于红队工具（如Cobalt Strike）模拟攻击行为，验证防御策略有效性。</li><li>自动化响应编排（SOAR）<br>● 剧本（Playbook）驱动：当检测到攻击时，自动触发防火墙封禁、隔离主机、下发补丁等动作。<br>● 人机协同：高风险操作需人工确认，避免误拦截影响业务。</li><li>多源数据融合<br>● 跨平台集成：对接EDR、SIEM、漏洞扫描器等工具，聚合日志、告警和资产数据。<br>● 威胁情报联动：接入外部威胁情报（如恶意IP库、漏洞库），实时更新攻击特征。</li></ol><h2 id="三、挂图作战与传统态势感知的差异"><a href="#三、挂图作战与传统态势感知的差异" class="headerlink" title="三、挂图作战与传统态势感知的差异"></a>三、挂图作战与传统态势感知的差异</h2><table><thead><tr><th>对比维度</th><th>传统态势感知</th><th>挂图作战</th></tr></thead><tbody><tr><td>核心目标</td><td>被动监控全网安全状态</td><td>主动防御，聚焦攻击路径阻断与协同响应</td></tr><tr><td>数据粒度</td><td>宏观指标（如告警数量、风险等级）</td><td>微观到单个资产、漏洞、攻击链节点的精准定位</td></tr><tr><td>可视化方式</td><td>仪表盘（Dashboard）与统计图表</td><td>交互式网络地图，支持攻击链路动态推演</td></tr><tr><td>响应模式</td><td>人工研判后分步处置</td><td>自动化剧本执行 + 跨团队指令同步</td></tr><tr><td>适用场景</td><td>日常监控与合规报告</td><td>实战攻防（如HW行动）、应急响应、红蓝对抗</td></tr><tr><td>技术重心</td><td>大数据分析与告警聚合</td><td>攻击链建模、可视化指挥、自动化编排</td></tr></tbody></table><h2 id="四、挂图作战主要场景"><a href="#四、挂图作战主要场景" class="headerlink" title="四、挂图作战主要场景"></a>四、挂图作战主要场景</h2><ol><li>关键基础设施防护<br>● 场景痛点：能源、交通等行业的OT系统（工控网络）存在大量老旧设备，难以实时监控。<br>● 挂图方案：<br>○ 绘制OT网络拓扑，标注PLC、SCADA系统的物理位置与逻辑连接。<br>○ 当检测到异常指令（如未授权的参数修改）时，地图自动定位受影响设备并隔离。</li><li>重大活动安保<br>● 场景痛点：活动期间网络访问激增，需防范DDoS、网页篡改等针对性攻击。<br>● 挂图方案：<br>○ 构建“活动专属作战地图”，集成CDN节点、票务系统、直播平台等核心资产。<br>○ 实时标注攻击源IP（如来自特定国家的扫描行为），联动云WAF自动封禁。</li><li>供应链攻击防御<br>● 场景痛点：第三方软件或服务漏洞可能成为攻击跳板（如SolarWinds事件）。<br>● 挂图方案：<br>○ 标注供应链厂商的接入点及权限范围，监控异常横向移动。<br>○ 当某供应商账号异常登录时，地图高亮关联资产并触发权限回收。</li><li>红蓝对抗演练<br>● 场景痛点：传统攻防演练中防守方难以快速定位攻击入口。<br>● 挂图方案：<br>○ 红队攻击路径实时映射到地图，蓝队可追溯攻击者从外网渗透到内网提权的全过程。<br>○ 演练结束后生成攻击路径复盘报告，优化防御策略。</li><li>零日漏洞应急响应<br>● 场景痛点：漏洞爆发后（如Log4j），企业需快速定位受影响资产。<br>● 挂图方案：<br>○ 输入漏洞特征（如JNDI调用），地图自动标记存在漏洞的服务实例。<br>○ 联动补丁管理系统，按业务优先级分批修复。</li></ol><h2 id="五、未来趋势"><a href="#五、未来趋势" class="headerlink" title="五、未来趋势"></a>五、未来趋势</h2><ol><li><strong>数字孪生融合</strong>：结合数字孪生技术，实现网络空间与物理世界的1:1映射。</li><li><strong>AI辅助决策</strong>：通过大语言模型（LLM）生成自然语言防御建议，降低操作门槛。</li><li><strong>跨域协同</strong>：与国土安全、城市应急系统联动，构建国家级网络空间地图。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>“挂图作战”标志着网络安全从“被动告警”迈向“主动防御”的范式转变。通过将虚拟攻击映射为可视化的“战场”，企业不仅能看清自身防御盲区，更能在攻防对抗中抢占先机。随着技术的演进，未来的网络安全指挥中心或许将如军事作战室一般，通过一张动态地图掌控全局。</p><hr><p>博客文章：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、网络安全挂图作战来源与定义&quot;&gt;&lt;a href=&quot;#一、网络安全挂图作战来源与定义&quot; class=&quot;headerlink&quot; title=&quot;一、网络安全挂图作战来源与定义&quot;&gt;&lt;/a&gt;一、网络安全挂图作战来源与定义&lt;/h2&gt;&lt;h3 id=&quot;1、网络安全挂图作战的来源
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之国际主流网络安全架构模型</title>
    <link href="https://xiejava.gitee.io/posts/7eb74e49/"/>
    <id>https://xiejava.gitee.io/posts/7eb74e49/</id>
    <published>2024-11-18T09:12:44.000Z</published>
    <updated>2024-11-18T09:29:04.399Z</updated>
    
    <content type="html"><![CDATA[<p>目前，国际主流的网络安全架构模型主要有：<br>● 信息技术咨询公司Gartner的ASA（Adaptive Security Architecture自适应安全架构）<br>● 美国政府资助的非营利研究机构MITRE的ATT&amp;CK（Adversarial Tactics Techniques &amp; Common Knowledge 对抗战术技术和常识）<br>● 信息技术咨询公司Gartner的CSMA（Cybersecurity Mesh Architecture网络安全网格架构）</p><h2 id="1-Gartner提出的ASA（Adaptive-Security-Architecture自适应安全架构）"><a href="#1-Gartner提出的ASA（Adaptive-Security-Architecture自适应安全架构）" class="headerlink" title="1. Gartner提出的ASA（Adaptive Security Architecture自适应安全架构）"></a>1. Gartner提出的ASA（Adaptive Security Architecture自适应安全架构）</h2><p>2014年，针对于当时业界安全产品主要重在防御和边界，安全态势形成严重挑战的问题，Gartner公司首次提出ASA（Adaptive Security Architecture自适应安全架构），希望业界能从单纯被动防御和应急响应的思路中解放出来，通过加强持续监测和分析预测提升主动防御能力，1.0架构主要包括以下四个象限：</p><p>1) 预防Pretect，通过系统加固和隔离等手段来减少系统暴漏面积，比如采用黑名单；<br>2) 检测Detect，持续监视/检测事故的发生并对其进行评估，对检出的事故进行隔离，以防止其造成进一步的破坏；<br>3) 响应Response，事故发生之后需要对事故进行补救和溯源；<br>4) 预测Predict，根据以往已经存在的威胁，来预测潜在的威胁。</p><p>2017年，针对于高级攻击的防御架构，Gartner公司在1.0架构的基础上进行了相关的理论丰富，将自适应安全架构的外延扩大，自适应安全架构进入2.0时期：</p><p>1) “持续监控分析”改成“持续可视化和评估”，同时加入UEBA相关的内容（User&amp; Entity behavior analytics用户和实体的行为分析）;<br>2) 引入每个象限的小循环体系，不仅仅是四个象限大循环；<br>3) 在大循环中加入了策略和合规要求，同时对大循环的每个步骤说明了循环的目的，到保护象限是实施动作、到检测象限是监测动作、到响应和预测象限都是调整动作。</p><p>2018年，Gartner公司正式确认了CARTA（Continuous Adaptive Risk and Trust Assessment持续自适应风险与信任评估）的安全趋势，即自适应安全架构3.0。相比2.0架构，3.0架构最大的变化是把2.0架构作为攻击的保护外环,增加关于访问的保护内环，原因在于：</p><p>1) 2.0架构未考虑认证问题，导致完整性有缺失，如黑客获取有效认证内容，如用户名密码，自适应架构对于此类事件是“可信”的，威胁无法感知；<br>2) 为加强云时代下的云服务的发现、访问、监控和管理，3.0架构将CASB（Cloud Access Security Broker云访问安全代理）作为原型挪到了这个总体架构中，解决了部分认证问题；<br>3) 如果认证体系只是一次性认证并没有持续的监控和审计，必须要有被窃取认证信息的心理预期，所以要持续的进行监控和分析以及响应，形成闭环。</p><p>3.0架构的适用场景变得更为广泛，包括了安全响应、数据保护、安全运营中心、开发安全运维、物联网、供应链安全、业务持续和灾难恢复等领域。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20241118/1_ASA%E8%87%AA%E9%80%82%E5%BA%94%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84.png" alt="ASA自适应安全架构"></p><h2 id="2-MITRE提出ATT-amp-CK（Adversarial-Tactics-Techniques-amp-Common-Knowledge-对抗战术技术和常识）"><a href="#2-MITRE提出ATT-amp-CK（Adversarial-Tactics-Techniques-amp-Common-Knowledge-对抗战术技术和常识）" class="headerlink" title="2. MITRE提出ATT&amp;CK（Adversarial Tactics Techniques &amp; Common Knowledge 对抗战术技术和常识）"></a>2. MITRE提出ATT&amp;CK（Adversarial Tactics Techniques &amp; Common Knowledge 对抗战术技术和常识）</h2><p>ATT&amp;CK（Adversarial Tactics Techniques &amp; Common Knowledge 对抗战术技术和常识）是一个知识库，它从攻击者的角度看待问题，理顺了攻击者渗透网络、入侵主机、提升权限、隐秘移动和渗漏数据的攻击链，建立了网络攻击中使用的战术和技术的详尽列表，呈现了攻击者在攻击网络时所采用的行为，并且详细介绍了每一种技术的利用方式。</p><p>该模型被CISA（美国网络安全与基础设施安全局）和FBI以及超过80%的企业用于威胁调查，它对于政府或企业组织来说都非常有用，因为组织需要建立一个基于威胁的防御体系。</p><p>ATT&amp;CK模型可以帮助网络事件响应团队(CERT)、安全运营中心(SOC)、红蓝队、威胁猎手、IT部门等安全团队，更好地测试、开发和排序其检测和响应机制，对公司的业务、行业和知识产权提供高效安全保障，具体可分为：</p><p>1) Detections and Analytics（检测和分析）：帮助网络防御者开发分析程序，以检测对手使用的技术。<br>2) Threat Intelligence（威胁情报）：为分析人员提供了一种通用语言来构造，比较和分析威胁情报。<br>3) Adversary Emulation and Red Teaming（攻击模拟）：提供了一种通用语言和框架，攻击模拟团队可以使用该语言和框架来模拟特定威胁并计划其行动。<br>4) Assessment and Engineering（评估与工程化）：可用于评估组织的能力并推动工程决策。</p><p>但是，安全公司McAfee与加州大学伯克利分校长期网络安全中心的联合调研项目发现，很多网络安全团队在框架应用方面仍然面临诸多挑战：</p><p>1) 大多数采用ATT&amp;CK框架的安全团队都没有实现自动化。虽然91%的企业使用ATT&amp;CK框架来标记网络安全事件，但只有不到一半的企业可以自动更改部分安全策略；<br>2) ATT&amp;CK框架和安全产品之间的互操作性存在困难；<br>3) 难以将网络安全事件映射到安全策略更改，以及无法关联来自云、网络和端点的事件；<br>4) 企业使用的安全产品可能无法检测到ATT&amp;CK矩阵中存在的所有技术。</p><p>2021年，MITRE发布了ATT&amp;CK的第十个版本，该版本最大的变化是在企业矩阵（Enterprise ATT&amp;CK）中添加了一组新的数据源和数据组件对象，以补充ATT&amp;CK v9中发布的数据源名称更改。新版ATT&amp;CK企业矩阵包含14个战术、188个技术、379个子技术、129个组和638个软件。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20241118/2_ATT&CK%E6%9E%B6%E6%9E%84.png" alt="ATT&amp;CK架构"></p><h2 id="3-Gartner提出的CSMA（Cybersecurity-Mesh-Architecture网络安全网格架构）"><a href="#3-Gartner提出的CSMA（Cybersecurity-Mesh-Architecture网络安全网格架构）" class="headerlink" title="3. Gartner提出的CSMA（Cybersecurity Mesh Architecture网络安全网格架构）"></a>3. Gartner提出的CSMA（Cybersecurity Mesh Architecture网络安全网格架构）</h2><p>随着更多的应用和数据迁移到云服务，传统网络边界已经消失，网络安全威胁形势日益复杂。同时，网络攻击手段也在快速演进，AI和大规模自动化技术驱动的新型威胁层出不穷，带来了快速增长的网络攻击数量。在这种形势下，传统安全手段已经无以为继，组织普遍存在网络安全技能短缺的困境。因此，Gartner在2021年一种全新的安全架构模式CSMA（Cybersecurity Mesh Architecture网络安全网格架构）。</p><p>CSMA架构是一种现代安全方法，包括在最需要的地方部署控制措施、构建身份化的零信任网络并以身份作为安全边界，通过提供基础安全服务以及集中式策略管理和编排功能，使诸多工具能够协同操作，而不是每个安全工具都在孤岛环境中使用。<br>通过CSMA架构，可以获得所有边缘的深度可见性、集中管理分布式解决方案、策略的一致执行、利用威胁情报、通过集成第三方能力以更好地防卫已知和未知攻击、跨混合环境自动执行可操作响应等优势。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20241118/3_CSMA%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%BD%91%E6%A0%BC%E6%9E%B6%E6%9E%84.png" alt="CSMA网络安全网格架构"></p><p>CSMA架构希望通过搭建一个全面覆盖、深度集成、动态协同的“网络安全网格平台”，将不同厂商的安全工具整合为一个协同生态系统，让组织能够灵活地进行方案部署，同时从集成和融合的运营、可视化和安全性中受益，对于在当前不断扩展的网络中，降低复杂度和提高整体安全有效性至关重要。</p><hr><p>博客文章：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前，国际主流的网络安全架构模型主要有：&lt;br&gt;● 信息技术咨询公司Gartner的ASA（Adaptive Security Architecture自适应安全架构）&lt;br&gt;● 美国政府资助的非营利研究机构MITRE的ATT&amp;amp;CK（Adversarial Tact
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue3实现登录获取token并自动刷新token进行JWT认证</title>
    <link href="https://xiejava.gitee.io/posts/faae10b6/"/>
    <id>https://xiejava.gitee.io/posts/faae10b6/</id>
    <published>2024-10-10T06:49:20.000Z</published>
    <updated>2024-10-10T07:14:53.339Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://xiejava.ishareread.com/posts/ca8e72/" target="_blank" rel="noopener">《django应用JWT(JSON Web Token)实战》</a>介绍了如何通过django实现JWT，并以一个具体API接口实例的调用来说明JWT如何使用。本文介绍如何通过vue3的前端应用来使用JWT认证调用后端的API接口，实现一下的登录认证获取JWT进行接口认证。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20241010/1-%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81jwt%E6%B5%81%E7%A8%8B.jpg" alt="账号密码验证jwt流程"></p><h2 id="一、账号密码登录获取JWT"><a href="#一、账号密码登录获取JWT" class="headerlink" title="一、账号密码登录获取JWT"></a>一、账号密码登录获取JWT</h2><p>通过Login.vue实现登录的用户名、密码表单信息收集，调用getToken()方法进行鉴权验证并获取jwt的token。<br>Login.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"form"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"loginForm"</span> <span class="attr">class</span>=<span class="string">"loginContainer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"loginTitle"</span>&gt;</span></span><br><span class="line">            欢迎登录</span><br><span class="line">            <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户名"</span> <span class="attr">prop</span>=<span class="string">"username"</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"form.username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"密码"</span>  <span class="attr">prop</span>=<span class="string">"password"</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"form.password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:plain</span>=<span class="string">"true"</span> @<span class="attr">click</span>=<span class="string">"submitForm('form')"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">'@/stores/user'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">'element-plus'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;getToken&#125; <span class="keyword">from</span> <span class="string">'../api/user'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      form: &#123;</span><br><span class="line"><span class="actionscript">        username: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        password: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        err_username: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">        err_password: <span class="string">""</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [</span><br><span class="line"><span class="actionscript">          &#123; required: <span class="literal">true</span>, message: <span class="string">'请输入用户名'</span>, trigger: <span class="string">'blur'</span> &#125;</span></span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line"><span class="actionscript">          &#123; required: <span class="literal">true</span>, min:<span class="number">6</span>, message: <span class="string">'请输入密码'</span>, trigger: <span class="string">'blur'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,     </span><br><span class="line"><span class="actionscript">      formLabelWidth: <span class="string">'120px'</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">this</span>.$refs.loginForm) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$refs.loginForm.validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span></span><br><span class="line">            if (valid) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 提交表单逻辑</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'提交成功:'</span>, <span class="keyword">this</span>.form);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.login();</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'验证失败'</span>);</span></span><br><span class="line"><span class="actionscript">                ElMessage.error(<span class="string">'验证失败，请检查您的输入！'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.error(<span class="string">'表单未找到'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    login() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.message = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 用户名密码鉴权获取jwt的token</span></span></span><br><span class="line">      getToken(&#123;</span><br><span class="line"><span class="actionscript">        <span class="string">'username'</span>: <span class="keyword">this</span>.form.username,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'password'</span>: <span class="keyword">this</span>.form.password,</span></span><br><span class="line"><span class="javascript">      &#125;).then(<span class="function">(<span class="params">Response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(Response);</span></span><br><span class="line">          if (Response &amp;&amp; Response.access) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// //保存数据到本地存储</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.username= that.form.username;</span></span><br><span class="line"><span class="actionscript">            useUserStore().login(<span class="keyword">this</span>.username,Response.access,Response.refresh)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.username = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.password = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$router.push(&#123;name:<span class="string">"home"</span>&#125;); <span class="comment">//跳转到首页</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        .catch(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (<span class="string">"username"</span> <span class="keyword">in</span> error) &#123;</span></span><br><span class="line">            that.err_username = error.username[0];</span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"password"</span> <span class="keyword">in</span> error) &#123;</span></span><br><span class="line">            that.err_password = error.password[0];</span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            ElMessage.error(<span class="string">'登录失败！'</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.loginContainer</span>&#123;</span></span><br><span class="line">        border-radius: 15px;</span><br><span class="line">        background-clip: padding-box;</span><br><span class="line">        text-align: left;</span><br><span class="line">        margin: auto;</span><br><span class="line">        margin-top: 180px;</span><br><span class="line">        width: 450px;</span><br><span class="line">        padding: 15px 35px 15px 35px;</span><br><span class="line">        background: aliceblue;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blueviolet</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 0 25<span class="selector-tag">px</span> <span class="selector-id">#f885ff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.loginTitle</span>&#123;</span></span><br><span class="line">        margin: 0px auto 48px auto;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.loginRemember</span>&#123;</span></span><br><span class="line">        text-align: left;</span><br><span class="line">        margin: 0px 0px 15px 0px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.loginbody</span>&#123;</span></span><br><span class="line">        width: 100vw;</span><br><span class="line">        height: 100vh;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-size</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在登录时调用getToken()方法获取jwt的token<br>getToken的封装方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">'token/'</span>,</span><br><span class="line">      method: <span class="string">'post'</span>,</span><br><span class="line">      data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过用户名和密码鉴权可以获得JWT的token，接口会返回access的token和refresh的token，需要将这两个token保存下来，access的token用来进行API接口的jwt认证，refresh的token用来刷新失效的access的token。</p><h2 id="二、将JWT保存至本地"><a href="#二、将JWT保存至本地" class="headerlink" title="二、将JWT保存至本地"></a>二、将JWT保存至本地</h2><p>通过pinia将token保存至浏览器的本地存储，以便于后面请求API时带上访问的token </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">import</span> &#123; refreshToken &#125; <span class="keyword">from</span> <span class="string">'../api/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(<span class="string">'user'</span>, &#123;</span><br><span class="line">    persist: &#123;</span><br><span class="line">        enabled: <span class="literal">true</span>, <span class="comment">//开启数据持久化</span></span><br><span class="line">        strategies: [</span><br><span class="line">            &#123;</span><br><span class="line">                key: <span class="string">"userState"</span>, <span class="comment">//给一个要保存的名称</span></span><br><span class="line">                storage: localStorage, <span class="comment">//sessionStorage / localStorage 存储方式</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">        isLoggedIn: <span class="literal">false</span>,</span><br><span class="line">        username: <span class="string">''</span>,</span><br><span class="line">        jwtAccessToken: <span class="literal">null</span>,</span><br><span class="line">        jwtRefreshToken: <span class="literal">null</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    actions: &#123;</span><br><span class="line">        login(username, accessToken,refreshToken) &#123;</span><br><span class="line">            <span class="keyword">this</span>.username = username</span><br><span class="line">            <span class="keyword">this</span>.isLoggedIn = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">this</span>.setToken(accessToken, refreshToken)</span><br><span class="line">        &#125;,</span><br><span class="line">        logout() &#123;</span><br><span class="line">            <span class="keyword">this</span>.username = <span class="string">''</span></span><br><span class="line">            <span class="keyword">this</span>.jwtAccessToken = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">this</span>.isLoggedIn = <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        setToken(accessToken, refreshToken) &#123;</span><br><span class="line">            <span class="keyword">this</span>.jwtAccessToken = accessToken</span><br><span class="line">            <span class="keyword">this</span>.jwtRefreshToken = refreshToken</span><br><span class="line">        &#125;,</span><br><span class="line">        refreshToken() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                refreshToken(&#123;<span class="string">"refresh"</span>:<span class="keyword">this</span>.jwtRefreshToken&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.setToken(response.access, <span class="keyword">this</span>.jwtRefreshToken)</span><br><span class="line">                    resolve(response.access)</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'return refreshToken-----------'</span>+response.access)</span><br><span class="line">                &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                    reject(error)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        getIsLoggedIn: <span class="function">(<span class="params">state</span>) =&gt;</span> state.isLoggedIn,</span><br><span class="line">        getUsername: <span class="function">(<span class="params">state</span>) =&gt;</span> state.username,</span><br><span class="line">        getUserAccessToken: <span class="function">(<span class="params">state</span>) =&gt;</span> state.jwtAccessToken,</span><br><span class="line">        getRefreshToken: <span class="function">(<span class="params">state</span>) =&gt;</span> state.jwtRefreshToken,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在登录的Login.vue组件中调用<code>useUserStore().login(this.username,Response.access,Response.refresh)</code>将用户名、access的token、refresh的token保存至浏览器的本地存储。</p><h2 id="三、请求API带上JWT"><a href="#三、请求API带上JWT" class="headerlink" title="三、请求API带上JWT"></a>三、请求API带上JWT</h2><p>将axios的调用封装成request.js在调用API接口时带上JWT</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'@/components/tools/Router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">'@/stores/user'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> &#123; refreshToken &#125; <span class="keyword">from</span> <span class="string">'../api/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api_rul = <span class="keyword">import</span>.meta.env.VITE_APP_API_URL</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: api_rul,</span><br><span class="line">    timeout: <span class="number">5000</span>, <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="comment">// do something before request is sent</span></span><br><span class="line">        <span class="keyword">const</span> &#123; url &#125; = config</span><br><span class="line">        <span class="comment">// 指定页面访问需要JWT认证。</span></span><br><span class="line">        <span class="keyword">if</span> (url.indexOf(<span class="string">'/login'</span>)!== <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> jwt = useUserStore().getUserAccessToken</span><br><span class="line">        config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;jwt&#125;</span>`</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="comment">// do something with request error</span></span><br><span class="line">        <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>主要是在请求头重带着jwt的信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jwt = useUserStore().getUserAccessToken</span><br><span class="line">config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;jwt&#125;</span>`</span></span><br></pre></td></tr></table></figure><h2 id="四、在token失效时自动重新获取token"><a href="#四、在token失效时自动重新获取token" class="headerlink" title="四、在token失效时自动重新获取token"></a>四、在token失效时自动重新获取token</h2><p>前面提到JWT基于安全考虑有两个token，一个是access token ,一个是refresh token 。access token的失效时间较短，可以有效降低泄露而造成的影响，两个token的区别和作用如下：</p><table><thead><tr><th></th><th>access token</th><th>refresh token</th></tr></thead><tbody><tr><td>有效时间</td><td>较短(如半小时)</td><td>较长(如一天)</td></tr><tr><td>作用</td><td>鉴权验证</td><td>重新获取access token</td></tr><tr><td>什么时候使用</td><td>每次接口鉴权验证时</td><td>access token失效时使用</td></tr></tbody></table><p>使用refresh token的逻辑如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20241010/2-%E9%87%8D%E6%96%B0%E8%8E%B7%E5%8F%96token.jpg" alt="重新获取token流程"></p><p>以下通过拦截器实现token失效后重新获取access token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'@/components/tools/Router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">'@/stores/user'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> &#123; refreshToken &#125; <span class="keyword">from</span> <span class="string">'../api/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api_rul = <span class="keyword">import</span>.meta.env.VITE_APP_API_URL</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: api_rul,</span><br><span class="line">    timeout: <span class="number">5000</span>, <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="comment">// do something before request is sent</span></span><br><span class="line">        <span class="keyword">const</span> &#123; url &#125; = config</span><br><span class="line">        <span class="comment">// 指定页面访问需要JWT认证。</span></span><br><span class="line">        <span class="keyword">if</span> (url.indexOf(<span class="string">'/login'</span>)!== <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> jwt = useUserStore().getUserAccessToken</span><br><span class="line">        config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;jwt&#125;</span>`</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="comment">// do something with request error</span></span><br><span class="line">        <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response interceptor</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line"> </span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = response.data</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> error =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'err'</span> + error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">const</span> originalRequest = error.config;</span><br><span class="line">        <span class="comment">// 授权验证失败</span></span><br><span class="line">        <span class="keyword">if</span> (error.response.status === <span class="number">401</span> &amp;&amp; originalRequest._retry!== <span class="literal">true</span>) &#123;</span><br><span class="line">            originalRequest._retry = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 刷新token</span></span><br><span class="line">            <span class="keyword">let</span> jwtRefreshToken=useUserStore().getRefreshToken</span><br><span class="line">            <span class="keyword">await</span> refreshToken(&#123;<span class="string">"refresh"</span>:jwtRefreshToken&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 刷新token成功，重新请求</span></span><br><span class="line">                <span class="keyword">let</span> jwtToken=response.access</span><br><span class="line">                useUserStore().setToken(jwtToken, jwtRefreshToken)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'return refreshToken-----------'</span>+response.access)</span><br><span class="line">                originalRequest.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;jwtToken&#125;</span>`</span></span><br><span class="line">                <span class="keyword">return</span> service(originalRequest)                </span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 刷新token失败，跳转到登录页面</span></span><br><span class="line">                ElMessage.error(<span class="string">'请重新登录！'</span>)</span><br><span class="line">                Router.push(&#123;<span class="attr">name</span>:<span class="string">'login'</span>&#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 内部错误</span></span><br><span class="line">        <span class="keyword">if</span> (error.response.status === <span class="number">500</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> errormsg=error.response.data.msg</span><br><span class="line">            ElMessage.error(<span class="string">'服务器内部错误！'</span>+errormsg)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (error.response.status === <span class="number">400</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ElMessage.error(<span class="string">'错误的请求！'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>在判断<code>error.response.status === 401</code>时调用refreshToken重新获取jwttoken进行接口的调用。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;http://xiejava.ishareread.com/posts/ca8e72/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《django应用JWT(JSON Web Token)实战》&lt;/a&gt;介绍了如何通过django实现J
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>django应用JWT(JsonWebToken)实战</title>
    <link href="https://xiejava.gitee.io/posts/ca8e72/"/>
    <id>https://xiejava.gitee.io/posts/ca8e72/</id>
    <published>2024-09-22T04:17:14.000Z</published>
    <updated>2024-09-22T04:38:06.550Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离的项目中，前后端进行身份验证通常用JWT来进行，JWT 提供了一个理想的认证解决方案，用来保护 RESTful API，确保只有经过认证的用户才能访问受保护的资源。基于前端框架（如React, Angular, Vue.js）的单页面应用 (SPA)，开发者通过使用 JWT可以获得一种简单、安全、高效的方式来处理用户认证和授权的问题。本文通过django项目的实战来说明如何应用和使用JWT。</p><h2 id="一、什么是JWT"><a href="#一、什么是JWT" class="headerlink" title="一、什么是JWT"></a>一、什么是JWT</h2><p>JWT（JSON Web Token）是一种开放标准（RFC 7519），用于在网络各方之间以安全且紧凑的形式传输信息。JWT 是一个小型的凭证，通常用于身份验证和授权场景。JWT 由三部分组成：头部 (Header)、负载 (Payload) 和签名 (Signature)。<br>JWT信息由3段构成，它们之间用圆点“.”连接，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaa.bbbbbb.cccccc</span><br></pre></td></tr></table></figure><p>一个典型的JWT如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzI2OTcyMDc2LCJpYXQiOjE3MjY5NzAyNzYsImp0aSI6IjMyMTFiZjdmZDlhZTRmNTBhMDNmOGM2NjcwNDM2NjFiIiwidXNlcl9pZCI6Mn0.Ej6US4Uk-sSNm9P8kTU_cDAzBpO4I-BLhPstp5sG00Q</span><br></pre></td></tr></table></figure><ul><li>头部 (Header)：包含了关于 JWT 类型的信息以及所使用的签名算法。</li><li>负载 (Payload)：是 JWT 的主体部分，包含了实际需要声明的数据。这些数据通常包括用户ID、用户名、角色等信息。</li><li>签名 (Signature)：用于验证 JWT 的发送者就是它声称的发送者，同时也确保了 JWT 在传输过程中没有被篡改。</li></ul><h2 id="二、为什么使用JWT"><a href="#二、为什么使用JWT" class="headerlink" title="二、为什么使用JWT"></a>二、为什么使用JWT</h2><p>使用 JWT 的原因主要有以下几点：</p><ul><li>安全性：JWT 通过签名来保证数据的完整性和防篡改性。如果有人试图修改 JWT 内容，签名会失效，接收方可以检测到这一行为。</li><li>无状态性：JWT 是自包含的，这意味着不需要在服务器上保存会话状态。每个 JWT 都包含了所有必要的信息，从而减少了对服务器端存储的需求。</li><li>跨域支持：JWT 可以轻松地在不同的域之间共享，这使得它非常适合微服务架构和分布式系统。</li><li>性能提升：由于 JWT 是自包含的，所以服务器可以快速地验证 JWT，而无需查询数据库来获取用户信息，这提高了应用的响应速度。</li><li>易于缓存和扩展：JWT 可以被缓存，并且因为它们是无状态的，所以可以很容易地扩展到多个服务器，而无需担心会话复制问题。</li><li>CSRF 防护：使用 JWT 可以帮助缓解跨站请求伪造（CSRF）攻击的风险，因为 JWT 不依赖于 cookie，也就不会随同 HTTP 请求自动发送。</li></ul><p>总的来说，JWT 提供了一种高效、安全的方式来处理用户认证和授权，尤其是在需要跨域操作或构建无状态服务的情况下。</p><h2 id="三、在django项目中如何应用JWT"><a href="#三、在django项目中如何应用JWT" class="headerlink" title="三、在django项目中如何应用JWT"></a>三、在django项目中如何应用JWT</h2><p>JWT（JSON Web Token）是一种用于在网络应用中安全地传输信息的令牌。它通常用于身份验证和授权，特别是在单页应用（SPA）和API服务中。在Django中应用JWT，可以使用 djangorestframework-simplejwt。</p><h3 id="1、安装djangorestframework-simplejwt库："><a href="#1、安装djangorestframework-simplejwt库：" class="headerlink" title="1、安装djangorestframework-simplejwt库："></a>1、安装djangorestframework-simplejwt库：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-simplejwt</span><br></pre></td></tr></table></figure><h3 id="2、在settings-py中配置JWT认证："><a href="#2、在settings-py中配置JWT认证：" class="headerlink" title="2、在settings.py中配置JWT认证："></a>2、在settings.py中配置JWT认证：</h3><p>在INSTALLED_APPS中添加rest_framework_simplejwt的应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'rest_framework_simplejwt'</span>,  <span class="comment"># 添加 simplejwt 应用</span></span><br><span class="line">    <span class="string">'django_filters'</span>,  <span class="comment"># 注册条件查询</span></span><br><span class="line">    <span class="string">'mdeditor'</span>,  <span class="comment"># 注册markdown的应用</span></span><br><span class="line">    <span class="string">'drf_yasg2'</span>,  <span class="comment"># 接口文档</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>添加REST_FRAMEWORK的默认认证类为JWT认证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework_simplejwt.authentication.JWTAuthentication'</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加SIMPLE_JWT的相关配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JWT 相关设置</span></span><br><span class="line">SIMPLE_JWT = &#123;</span><br><span class="line">    <span class="string">'ACCESS_TOKEN_LIFETIME'</span>: timedelta(minutes=<span class="number">30</span>),  <span class="comment"># 访问令牌的有效时间</span></span><br><span class="line">    <span class="string">'REFRESH_TOKEN_LIFETIME'</span>: timedelta(days=<span class="number">1</span>),  <span class="comment"># 刷新令牌的有效时间</span></span><br><span class="line">    <span class="string">'ROTATE_REFRESH_TOKENS'</span>: <span class="literal">False</span>,  <span class="comment"># 是否允许刷新令牌循环</span></span><br><span class="line">    <span class="string">'BLACKLIST_AFTER_ROTATION'</span>: <span class="literal">True</span>,  <span class="comment"># 刷新令牌后是否加入黑名单</span></span><br><span class="line">    <span class="string">'UPDATE_LAST_LOGIN'</span>: <span class="literal">False</span>,  <span class="comment"># 登录时是否更新最后登录时间</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'ALGORITHM'</span>: <span class="string">'HS256'</span>,  <span class="comment"># 签名算法</span></span><br><span class="line">    <span class="string">'SIGNING_KEY'</span>: SECRET_KEY,  <span class="comment"># 签名密钥</span></span><br><span class="line">    <span class="string">'VERIFYING_KEY'</span>: <span class="literal">None</span>,  <span class="comment"># 验证密钥</span></span><br><span class="line">    <span class="string">'AUDIENCE'</span>: <span class="literal">None</span>,  <span class="comment"># 观众</span></span><br><span class="line">    <span class="string">'ISSUER'</span>: <span class="literal">None</span>,  <span class="comment"># 发行人</span></span><br><span class="line">    <span class="string">'JWK_URL'</span>: <span class="literal">None</span>,  <span class="comment"># JWK URL</span></span><br><span class="line">    <span class="string">'LEEWAY'</span>: <span class="number">0</span>,  <span class="comment"># 宽限期</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'AUTH_HEADER_TYPES'</span>: (<span class="string">'Bearer'</span>,),  <span class="comment"># 授权头类型</span></span><br><span class="line">    <span class="string">'AUTH_HEADER_NAME'</span>: <span class="string">'HTTP_AUTHORIZATION'</span>,  <span class="comment"># 授权头名称</span></span><br><span class="line">    <span class="string">'USER_ID_FIELD'</span>: <span class="string">'id'</span>,  <span class="comment"># 用户 ID 字段</span></span><br><span class="line">    <span class="string">'USER_ID_CLAIM'</span>: <span class="string">'user_id'</span>,  <span class="comment"># 用户 ID 声明</span></span><br><span class="line">    <span class="string">'USER_AUTHENTICATION_RULE'</span>: <span class="string">'rest_framework_simplejwt.authentication.default_user_authentication_rule'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'AUTH_TOKEN_CLASSES'</span>: (<span class="string">'rest_framework_simplejwt.tokens.AccessToken'</span>,),  <span class="comment"># 认证令牌类</span></span><br><span class="line">    <span class="string">'TOKEN_TYPE_CLAIM'</span>: <span class="string">'token_type'</span>,  <span class="comment"># 令牌类型声明</span></span><br><span class="line">    <span class="string">'TOKEN_USER_CLASS'</span>: <span class="string">'rest_framework_simplejwt.models.TokenUser'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'SLIDING_TOKEN_REFRESH_EXP_CLAIM'</span>: <span class="string">'refresh_exp'</span>,  <span class="comment"># 滑动令牌刷新过期声明</span></span><br><span class="line">    <span class="string">'SLIDING_TOKEN_LIFETIME'</span>: timedelta(minutes=<span class="number">5</span>),  <span class="comment"># 滑动令牌有效时间</span></span><br><span class="line">    <span class="string">'SLIDING_TOKEN_REFRESH_LIFETIME'</span>: timedelta(days=<span class="number">1</span>),  <span class="comment"># 滑动令牌刷新有效时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、在urls-py中配置JWT的获取和刷新路由："><a href="#3、在urls-py中配置JWT的获取和刷新路由：" class="headerlink" title="3、在urls.py中配置JWT的获取和刷新路由："></a>3、在urls.py中配置JWT的获取和刷新路由：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> (TokenObtainPairView, TokenRefreshView)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'token/'</span>, TokenObtainPairView.as_view(), name=<span class="string">'token_obtain_pair'</span>),</span><br><span class="line">    path(<span class="string">'token/refresh/'</span>, TokenRefreshView.as_view(), name=<span class="string">'token_refresh'</span>),</span><br><span class="line">    <span class="comment"># 其他路由...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>4、在视图中需要认证的地方使用JWT认证<br>如下modelviweset中使用，对于查询方法如list，retrieve不做鉴权，对于其他方法需要鉴权。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of permissions that this view requires.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.action <span class="keyword">in</span> [<span class="string">'list'</span>, <span class="string">'retrieve'</span>]:</span><br><span class="line">        <span class="comment"># 对于list方法，返回AllowAny权限类，表示不需要鉴权</span></span><br><span class="line">        permission_classes = [AllowAny, ]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 对于其他方法，返回IsAuthenticated权限类，表示需要用户已认证</span></span><br><span class="line">        permission_classes = [IsAuthenticated, ]</span><br><span class="line">    <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> permission_classes]</span><br></pre></td></tr></table></figure><h2 id="四、JWT如何使用"><a href="#四、JWT如何使用" class="headerlink" title="四、JWT如何使用"></a>四、JWT如何使用</h2><p>通过上面的应用后，使用接口调用遇到需要鉴权的会提示需要认证。<br>如当我们调用删除接口时，如果没有获得鉴权，接口会返回需要认证的信息。<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240922/1-%E9%9C%80%E8%A6%81%E9%89%B4%E6%9D%83.png" alt="接口调用需要认证"></p><p>那如何通过JWT进行认证呢？<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240922/2-JWT%E7%9A%84%E9%AA%8C%E8%AF%81%E8%BF%87%E7%A8%8B.png" alt="JWT进行认证过程"></p><p>下面通过postman来应用JWT的使用过程。</p><h3 id="1、调用生成JWT的接口获取JWT"><a href="#1、调用生成JWT的接口获取JWT" class="headerlink" title="1、调用生成JWT的接口获取JWT"></a>1、调用生成JWT的接口获取JWT</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240922/3-%E8%B0%83%E7%94%A8%E7%94%9F%E6%88%90JWT%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%8E%B7%E5%8F%96JWT.png" alt="调用生成JWT的接口获取JWT"></p><h3 id="2、客户端保存JWT在调用接口时带上获取的JWT"><a href="#2、客户端保存JWT在调用接口时带上获取的JWT" class="headerlink" title="2、客户端保存JWT在调用接口时带上获取的JWT"></a>2、客户端保存JWT在调用接口时带上获取的JWT</h3><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240922/4-%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E5%B8%A6%E4%B8%8AJWT.png" alt="调用接口时带上获取的JWT"></p><p>至此，本文介绍了什么时JWT，为什么要使用JWT，通过django实现JWT，介绍了JWT的使用流程，最后以一个具体API接口实例的调用来说明JWT如何使用。后续将介绍VUE从前端登录获取JWT到JWT认证的实例。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前后端分离的项目中，前后端进行身份验证通常用JWT来进行，JWT 提供了一个理想的认证解决方案，用来保护 RESTful API，确保只有经过认证的用户才能访问受保护的资源。基于前端框架（如React, Angular, Vue.js）的单页面应用 (SPA)，开发者通过
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>django实现开发、测试、生产环境配置区分</title>
    <link href="https://xiejava.gitee.io/posts/2affeb7f/"/>
    <id>https://xiejava.gitee.io/posts/2affeb7f/</id>
    <published>2024-09-16T02:55:15.000Z</published>
    <updated>2024-09-16T03:02:41.430Z</updated>
    
    <content type="html"><![CDATA[<p>任何实际的软件项目中都要经过开发、测试、然后上生产的阶段，在开发、测试的过程中往往会要频繁的切换开发、测试、生产等不同的环境。每个环境的配置有可能不一样，本文介绍如何实现django项目配置环境变量实现开发、测试、生产灵活便捷的切换。</p><h2 id="一、为什么要区分开发-dev-、测试-test-和生产-prod-环境"><a href="#一、为什么要区分开发-dev-、测试-test-和生产-prod-环境" class="headerlink" title="一、为什么要区分开发 (dev)、测试 (test) 和生产 (prod) 环境"></a>一、为什么要区分开发 (dev)、测试 (test) 和生产 (prod) 环境</h2><p>在Django项目中区分开发、测试和生产环境是非常重要的，这主要是因为不同环境在多个方面存在显著差异。<br>● 开发环境：通常配置为易于开发和调试，比如开启调试模式（DEBUG = True），这样可以提供更详细的错误信息和页面跟踪，方便开发者定位问题。同时，开发环境可能使用本地数据库或内存数据库，以便快速启动和测试。<br>● 测试环境：配置为模拟生产环境，但用于自动化测试。测试环境需要确保测试的独立性和一致性，以便准确地评估应用程序在类似生产条件下的表现。测试环境通常使用与生产环境相同或相似的数据库设置，但数据是测试专用的。<br>● 生产环境：配置为高性能、高可用性和高安全性。关闭调试模式，优化数据库连接和缓存策略，确保应用程序能够处理大量并发请求和保障数据的安全。<br>通过区分这些环境，开发者可以更有效地管理django项目，确保每个环境都能满足其特定的需求，从而提高开发效率、保障数据安全和提升用户体验。</p><h2 id="二、django项目如何通过配置实现环境配置的区分"><a href="#二、django项目如何通过配置实现环境配置的区分" class="headerlink" title="二、django项目如何通过配置实现环境配置的区分"></a>二、django项目如何通过配置实现环境配置的区分</h2><p>对于django项目实现开发（dev）、测试(test)和生产(prod)环境的配置分离可以通过使用不同的设置文件实现。<br>下面，我们以一个实例来介绍在django的项目如何通过使用不同的设置文件的方式区分不同的环境。</p><h3 id="1、针对不同的环境创建不同的设置文件settings-py"><a href="#1、针对不同的环境创建不同的设置文件settings-py" class="headerlink" title="1、针对不同的环境创建不同的设置文件settings.py"></a>1、针对不同的环境创建不同的设置文件settings.py</h3><p>针对不同的环境创建不同的设置文件，如开发环境settings_dev.py ,测试环境setting_test.py，正式生产环境使用默认的setting.py，对于共性的配置可以抽取到base.py中，其他的设置文件可以继承base.py中的配置，只有实现各个环境特有的设置就可以了。<br>创建设置文件的目录结构如下图所示。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240916/1-%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E7%8E%AF%E5%A2%83%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%90%8C%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="根据不同的环境创建不同的配置文件"></p><h3 id="2、在设置文件中根据需要进行配置区分"><a href="#2、在设置文件中根据需要进行配置区分" class="headerlink" title="2、在设置文件中根据需要进行配置区分"></a>2、在设置文件中根据需要进行配置区分</h3><p>典型的，如开发环境settings_dev.py用的本地数据库并开启debug模式、测试环境setting_test.py用sqlite3数据库开启debug模式。<br>注意：其他的设置文件要继承base.py中的配置，需要加入<code>from .base import *</code><br>参考配置如下：<br>setting_test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = []</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'test_db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setting_dev.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'127.0.0.1'</span>, <span class="string">'localhost'</span>,<span class="string">'ishareblog.com'</span>]</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'ishareblog_test'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'ishareblog'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'yourpassword'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="comment"># 1、取消外键约束，否则多对多模型迁移报django.db.utils.IntegrityError: (1215, 'Cannot add foreign key constraint')；</span></span><br><span class="line">        <span class="comment"># 2、解决字符串4个字节的utf8编码的字符报错的问题</span></span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'charset'</span>: <span class="string">'utf8mb4'</span>,<span class="string">"init_command"</span>: <span class="string">"SET foreign_key_checks = 0;"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、根据不同的环境运行使用不同的设置文件"><a href="#3、根据不同的环境运行使用不同的设置文件" class="headerlink" title="3、根据不同的环境运行使用不同的设置文件"></a>3、根据不同的环境运行使用不同的设置文件</h3><p>不同的环境有了不同的设置文件后，就可以在不同的环境运行和使用配置文件。<br>如生产环境使用的wsgi启动的服务，可以在wsgi.py文件中指定使用生产环境的配置文件</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240916/2-wsgi%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="wsgi中使用生产环境配置文件"></p><p>在开发环境中使用manage.py启动服务的，可以修改manage.py将设置文件改为setting_dev<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240916/3-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%9C%A8manage%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%BC%80%E5%8F%91%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="开发环境在manage文件中使用开发设置文件"></p><p>也可以通过命令行指定设置文件  <code>python manage.py runserver  --settings=ishareblog.settings_dev</code><br>如果时通过IDE启动，可以在IDE中指定使用的环境设置文件。<br>如下图所示：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240916/4-%E5%9C%A8IDE%E4%B8%AD%E6%8C%87%E5%AE%9A%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="在IDE中指定环境设置文件"></p><p>如要使用测试环境的设置文件，可以配置成ishareblog.settings_test，或通过命令行指定设置文件  <code>python manage.py runserver  --settings=ishareblog.settings_test</code></p><p>至此，本文详细的介绍了通过不同的设置文件来区分配置开发、测试、生产环境的配置及如何根据不同的环境使用不同的设置文件。解决不同环境去频繁修改settings.py环境设置的问题。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;任何实际的软件项目中都要经过开发、测试、然后上生产的阶段，在开发、测试的过程中往往会要频繁的切换开发、测试、生产等不同的环境。每个环境的配置有可能不一样，本文介绍如何实现django项目配置环境变量实现开发、测试、生产灵活便捷的切换。&lt;/p&gt;
&lt;h2 id=&quot;一、为什么要区
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>vue3+elementplus的表格展示和分页实战</title>
    <link href="https://xiejava.gitee.io/posts/ea8d8762/"/>
    <id>https://xiejava.gitee.io/posts/ea8d8762/</id>
    <published>2024-09-02T01:45:22.000Z</published>
    <updated>2024-09-02T01:50:33.624Z</updated>
    
    <content type="html"><![CDATA[<p>Element Plus 是一个基于 Vue 3 的现代化 UI 组件库，旨在帮助开发者快速构建美观且功能丰富的 Web 应用程序。它提供了大量的 UI 组件，如按钮、表单、表格、弹出框、标签页、树形控件等，涵盖了 Web 应用开发中常见的大多数场景。本文通过一个实例来说明vue3+elementplus查询、展示和分页实战。</p><h2 id="一、Element-Plus的安装使用"><a href="#一、Element-Plus的安装使用" class="headerlink" title="一、Element Plus的安装使用"></a>一、Element Plus的安装使用</h2><p>要开始使用 Element Plus，首先需要在项目中安装它。如果你正在使用 Vue 3 的项目，可以通过 npm 或 yarn 安装 Element Plus：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><p>然后可以在Vue 项目中全局引入 Element Plus：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./components/tools/Router'</span></span><br><span class="line"><span class="comment">// 导入ElementPlus</span></span><br><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-plus/dist/index.css'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ElementPlusIconsVue <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="comment">// 遍历ElementPlusIconsVue中的所有组件进行祖册</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(ElementPlusIconsVue)) &#123;</span><br><span class="line">    <span class="comment">// 向应用实例中全局注册图标组件</span></span><br><span class="line">    app.component(key, component)</span><br><span class="line">&#125;</span><br><span class="line">app.use(ElementPlus) <span class="comment">// 使用ElementPlus</span></span><br><span class="line">app.use(Router); <span class="comment">// 使用路由</span></span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="二、el-table-表格组件"><a href="#二、el-table-表格组件" class="headerlink" title="二、el-table 表格组件"></a>二、el-table 表格组件</h2><p>el-table 是Element Plus 中的一个重要组件，用于展示列表数据。可以通过 <el-table-column> 组件来定义表格中的每一列，包括列标题、列宽、对齐方式等,可以结合 el-pagination 可以实现分页功能。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table</span><br><span class="line">            ref=<span class="string">"multipleTable"</span></span><br><span class="line">            :data=<span class="string">"postList"</span></span><br><span class="line">            tooltip-effect=<span class="string">"dark"</span></span><br><span class="line">            style=<span class="string">"width: 100%"</span></span><br><span class="line">            fit</span><br><span class="line">            :pagination=<span class="string">"pagination"</span></span><br><span class="line">            @selection-change=<span class="string">"handleSelectionChange"</span> &gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                type=<span class="string">"selection"</span></span><br><span class="line">                width=<span class="string">"55"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="ID"</span></span><br><span class="line"><span class="regexp">                width="100"</span></span><br><span class="line"><span class="regexp">                prop="id"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"标题"</span></span><br><span class="line">                width=<span class="string">"450"</span></span><br><span class="line">                prop=<span class="string">"title"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="是否置顶"</span></span><br><span class="line"><span class="regexp">                width="100"</span></span><br><span class="line"><span class="regexp">                prop="isTop"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"热度"</span></span><br><span class="line">                width=<span class="string">"100"</span></span><br><span class="line">                prop=<span class="string">"viewsCount"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="发布时间"</span></span><br><span class="line"><span class="regexp">                width="200"</span></span><br><span class="line"><span class="regexp">                prop="pubTime"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"操作"</span></span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;template #default="scope"&gt;</span><br><span class="line">                        &lt;el-button size=<span class="string">"mini"</span> type=<span class="string">"danger"</span> @click=<span class="string">"deleteItem(scope.$index)"</span>&gt;删除&lt;<span class="regexp">/el-button&gt;         </span></span><br><span class="line"><span class="regexp">                    &lt;/</span>template&gt;     </span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-table&gt;</span><br></pre></td></tr></table></figure><p>其中<br><code>:data=&quot;postList&quot;</code>  绑定要显示在表格中的数据源，通常是一个对象数组<br><code>fit:</code> 让表格宽度自动填充父容器。<br><code>:pagination=&quot;pagination&quot;</code> 绑定分页的数据对象</p><p>数据定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 博客文章列表数据</span></span><br><span class="line">postList:[],</span><br><span class="line"><span class="comment">// 分页</span></span><br><span class="line">pagination: &#123;</span><br><span class="line">    currentPage: <span class="number">1</span>, <span class="comment">// 当前页</span></span><br><span class="line">    pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数</span></span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">    layout: <span class="string">'total,sizes,prev, pager, next, jumper'</span>, <span class="comment">// 分页布局</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="三、el-pagination-分页组件"><a href="#三、el-pagination-分页组件" class="headerlink" title="三、el-pagination 分页组件"></a>三、el-pagination 分页组件</h2><p>el-pagination Element Plus 中用于实现分页功能的重要组件。它可以与 el-table 组件结合使用，实现数据的分页显示。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">    @size-change=<span class="string">"handleSizeChange"</span></span><br><span class="line">    @current-change=<span class="string">"handleCurrentChange"</span></span><br><span class="line">    :current-page=<span class="string">"pagination.currentPage"</span></span><br><span class="line">    :page-sizes=<span class="string">"[10, 20, 30, 40]"</span></span><br><span class="line">    :page-size=<span class="string">"pagination.pageSize"</span></span><br><span class="line">    layout=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span><br><span class="line">    :total=<span class="string">"pagination.total"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-pagination&gt;</span></span><br></pre></td></tr></table></figure><p>属性<br>● <code>@size-change=&quot;handleSizeChange&quot;</code> 当每页显示数量变化时触发。<br>● <code>@current-change=&quot;handleCurrentChange&quot;</code> 当当前页变化时触发。<br>● <code>:current-page=&quot;currentPage&quot;</code> 设置当前页。<br>● <code>:page-sizes=&quot;[10, 20, 30, 40]&quot;</code>  设置每页可选的数量。<br>● <code>:page-size=&quot;pageSize&quot;</code> 设置每页显示的数量。<br>● <code>layout=&quot;total, sizes, prev, pager, next, jumper&quot;</code>  设置分页布局。<br>● <code>:total=&quot;tableData.length&quot;</code> 设置总数据量。<br>方法：<br>● <code>handleSelectionChange(val)</code> 处理行选择变化。<br>● <code>deleteItem(index)</code>  删除指定行。<br>● <code>handleSizeChange(val)</code>  处理每页显示数量变化。<br>● <code>handleCurrentChange(val)</code> 处理当前页变化。</p><h2 id="四、全部代码"><a href="#四、全部代码" class="headerlink" title="四、全部代码"></a>四、全部代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content-container"</span> direction=<span class="string">"vertical"</span>&gt;</span><br><span class="line">        &lt;!-- input --&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;el-container <span class="class"><span class="keyword">class</span></span>=<span class="string">"content-row"</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-tip"</span>&gt;</span><br><span class="line">                    文章标题:</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div class="input-field" style="width: 400px;"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-input v-model="queryParam.words"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-button type="primary" @click="getBlogList"&gt;筛选&lt;/</span>el-button&gt;</span><br><span class="line">                &lt;el-button type=<span class="string">"danger"</span> @click=<span class="string">"clear"</span>&gt;清空筛选&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-container&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;!-- list --&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-tabs type="card" @tab-click="handleClick"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="全部"&gt;&lt;/</span>el-tab-pane&gt;</span><br><span class="line">                &lt;el-tab-pane v-<span class="keyword">for</span>=<span class="string">"(item,index) in blogCategorys"</span></span><br><span class="line">                 :key=<span class="string">"index"</span></span><br><span class="line">                 :label=<span class="string">"item.title"</span></span><br><span class="line">                 :name=<span class="string">"item.id"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-tabs&gt;</span><br><span class="line">            &lt;el-table</span><br><span class="line">            ref=<span class="string">"multipleTable"</span></span><br><span class="line">            :data=<span class="string">"postList"</span></span><br><span class="line">            tooltip-effect=<span class="string">"dark"</span></span><br><span class="line">            style=<span class="string">"width: 100%"</span></span><br><span class="line">            fit</span><br><span class="line">            :pagination=<span class="string">"pagination"</span></span><br><span class="line">            @selection-change=<span class="string">"handleSelectionChange"</span> &gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                type=<span class="string">"selection"</span></span><br><span class="line">                width=<span class="string">"55"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="ID"</span></span><br><span class="line"><span class="regexp">                width="100"</span></span><br><span class="line"><span class="regexp">                prop="id"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"标题"</span></span><br><span class="line">                width=<span class="string">"450"</span></span><br><span class="line">                prop=<span class="string">"title"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="是否置顶"</span></span><br><span class="line"><span class="regexp">                width="100"</span></span><br><span class="line"><span class="regexp">                prop="isTop"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"热度"</span></span><br><span class="line">                width=<span class="string">"100"</span></span><br><span class="line">                prop=<span class="string">"viewsCount"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-table-column</span></span><br><span class="line"><span class="regexp">                label="发布时间"</span></span><br><span class="line"><span class="regexp">                width="200"</span></span><br><span class="line"><span class="regexp">                prop="pubTime"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-table-column&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                label=<span class="string">"操作"</span></span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;template #default="scope"&gt;</span><br><span class="line">                        &lt;el-button size=<span class="string">"mini"</span> type=<span class="string">"danger"</span> @click=<span class="string">"deleteItem(scope.$index)"</span>&gt;删除&lt;<span class="regexp">/el-button&gt;         </span></span><br><span class="line"><span class="regexp">                    &lt;/</span>template&gt;     </span><br><span class="line">                &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-table&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"pagination-container"</span>&gt;</span><br><span class="line">                &lt;el-pagination</span><br><span class="line">                    @size-change=<span class="string">"handleSizeChange"</span></span><br><span class="line">                    @current-change=<span class="string">"handleCurrentChange"</span></span><br><span class="line">                    :current-page=<span class="string">"pagination.currentPage"</span></span><br><span class="line">                    :page-sizes=<span class="string">"[10, 20, 30, 40]"</span></span><br><span class="line">                    :page-size=<span class="string">"pagination.pageSize"</span></span><br><span class="line">                    layout=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span><br><span class="line">                    :total=<span class="string">"pagination.total"</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-pagination&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">.pagination-container &#123;</span></span><br><span class="line"><span class="regexp">  margin-top: 20px;</span></span><br><span class="line"><span class="regexp">  text-align: center;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;getBlogList,getBlogCategory&#125; <span class="keyword">from</span> <span class="string">'@/api'</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 博客文章列表数据</span></span><br><span class="line">            postList:[],</span><br><span class="line">            <span class="comment">// 筛选博客的参数</span></span><br><span class="line">            queryParam:&#123;</span><br><span class="line">                words:<span class="string">""</span>,</span><br><span class="line">                cateid:<span class="string">""</span>,</span><br><span class="line">                tag:<span class="string">""</span>,</span><br><span class="line">                search:<span class="string">""</span>,</span><br><span class="line">                page:<span class="number">1</span>,</span><br><span class="line">                size:<span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 分页</span></span><br><span class="line">            pagination: &#123;</span><br><span class="line">                currentPage: <span class="number">1</span>, <span class="comment">// 当前页</span></span><br><span class="line">                pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数</span></span><br><span class="line">                total: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">                layout: <span class="string">'total,sizes,prev, pager, next, jumper'</span>, <span class="comment">// 分页布局</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 博客分类</span></span><br><span class="line">            blogCategorys:[],</span><br><span class="line">            <span class="comment">// 当前选中的博客分类</span></span><br><span class="line">            selectCategory:<span class="string">""</span>,</span><br><span class="line">            <span class="comment">// 当前选中的博客文章</span></span><br><span class="line">            multipleSelection:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        <span class="keyword">this</span>.getBlogCategory();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 路由更新时刷新数据</span></span><br><span class="line">    beforeRouteUpdate (to) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        <span class="keyword">this</span>.getBlogCategory();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        <span class="comment">// 获取博客文章列表数据</span></span><br><span class="line">        getBlogList() &#123;</span><br><span class="line">            getBlogList(<span class="keyword">this</span>.queryParam).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.postList = res.data.items</span><br><span class="line">                <span class="keyword">this</span>.pagination.total = res.data.total</span><br><span class="line">                <span class="keyword">this</span>.pagination.currentPage= res.data.page</span><br><span class="line">                    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">                &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(err)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 获取博客分类数据</span></span><br><span class="line">        getBlogCategory() &#123;</span><br><span class="line">            getBlogCategory().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.blogCategorys = res.data</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 改变分页大小</span></span><br><span class="line">        handleSizeChange(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pagination.pageSize = val;</span><br><span class="line">            <span class="keyword">this</span>.queryParam.size = val;</span><br><span class="line">            <span class="keyword">this</span>.getBlogList(); </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 跳到当前页 </span></span><br><span class="line">        handleCurrentChange(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pagination.currentPage = val;</span><br><span class="line">            <span class="keyword">this</span>.queryParam.page = val;</span><br><span class="line">            <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 切换Tab 刷新数据</span></span><br><span class="line">        handleClick(tab) &#123;</span><br><span class="line">            <span class="keyword">this</span>.queryParam.cateid = tab.props.name</span><br><span class="line">            <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 清空筛选项</span></span><br><span class="line">        clear() &#123;</span><br><span class="line">            <span class="keyword">this</span>.queryParam.words=<span class="string">""</span></span><br><span class="line">            <span class="keyword">this</span>.getBlogList();</span><br><span class="line">        &#125;,</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、效果"><a href="#五、效果" class="headerlink" title="五、效果"></a>五、效果</h2><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240901/1-elementplus%E8%A1%A8%E6%A0%BC.png" alt="elementplus表格"><br>表格展示及数据分页是前端开发常用的功能，通过vue3+elementplus能够快速是实现对数据的展示及分页。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Element Plus 是一个基于 Vue 3 的现代化 UI 组件库，旨在帮助开发者快速构建美观且功能丰富的 Web 应用程序。它提供了大量的 UI 组件，如按钮、表单、表格、弹出框、标签页、树形控件等，涵盖了 Web 应用开发中常见的大多数场景。本文通过一个实例来说明
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue3+vite配置环境变量实现开发、测试、生产的区分</title>
    <link href="https://xiejava.gitee.io/posts/12b9f376/"/>
    <id>https://xiejava.gitee.io/posts/12b9f376/</id>
    <published>2024-08-25T06:57:34.000Z</published>
    <updated>2024-08-25T07:06:11.312Z</updated>
    
    <content type="html"><![CDATA[<p>在vue的实际项目中都要经过开发、测试、然后上生产的阶段，在开发、测试的过程中往往会要频繁的切换开发、测试、生产等不同的环境。每个环境的配置有可能不一样，本文介绍如何通过vue3+vite配置环境变量实现开发、测试、生产灵活便捷的切换。</p><h2 id="一、为什么需要区分-dev-、测试-test-和生产-prod-环境"><a href="#一、为什么需要区分-dev-、测试-test-和生产-prod-环境" class="headerlink" title="一、为什么需要区分 (dev)、测试 (test) 和生产 (prod) 环境"></a>一、为什么需要区分 (dev)、测试 (test) 和生产 (prod) 环境</h2><p>做过大型项目开发的都知道，每个项目都会要经历开发、测试、再到生产上线，一般在开发时候最常用到(development)开发环境、(production)生产环境、(test)测试环境。每个环境的配置可能都不太一样。</p><ul><li><strong>开发环境</strong>：为开发人员提供一个安全的地方来进行编码和调试，不会影响到其他环境，一般来说开发人员在本地机器上运行和测试应用程序。</li><li><strong>测试环境</strong>：用于测试，模拟生产环境，确保新功能在部署前能够正常工作，并且不会影响现有功能。</li><li><strong>生产环境</strong>：是面向用户的最终环境，任何更改都必须经过严格的测试才能部署到这里，通常具有优化和最少的日志记录。</li></ul><p>区分开发 (dev)、测试 (test) 和生产 (prod) 环境是软件开发中的一个最佳实践。不同的环境通常有不同的资源配置。典型的如vue所调用的后台接口数据，在开发平台可能是本地服务提供的接口、用于自动化测试可能是mock提供的数据、生产应该是正式环境提供的真实接口。</p><h2 id="二、vue3的项目如何通过配置方式区分不同的环境"><a href="#二、vue3的项目如何通过配置方式区分不同的环境" class="headerlink" title="二、vue3的项目如何通过配置方式区分不同的环境"></a>二、vue3的项目如何通过配置方式区分不同的环境</h2><p>vue3的项目可以通过vite的环境变量配置来进行不同环境的配置，可以参考vite的官方文档《<a href="https://cn.vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noopener">环境变量和模式</a>》<br>接下来，我们以一个实例来介绍在vue3的项目如何通过vite配置方式区分不同的环境。</p><h3 id="1、创建不同环境的-env文件"><a href="#1、创建不同环境的-env文件" class="headerlink" title="1、创建不同环境的.env文件"></a>1、创建不同环境的.env文件</h3><p>在vue3根目录下创建三个文件分别为<code>.env.develoment</code>、<code>.env.test</code>、<code>.env.production</code><br>创建的文件需要<code>.env</code>开头</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240825/1-env%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="env文件"></p><h3 id="2、在不同的-env文件中配置相应的环境变量"><a href="#2、在不同的-env文件中配置相应的环境变量" class="headerlink" title="2、在不同的.env文件中配置相应的环境变量"></a>2、在不同的.env文件中配置相应的环境变量</h3><h4 id="1）-env-develoment"><a href="#1）-env-develoment" class="headerlink" title="1）.env.develoment"></a>1）.env.develoment</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">'development'</span></span><br><span class="line"><span class="comment"># API URL</span></span><br><span class="line">VITE_APP_API_URL=<span class="string">'http://localhost:8000'</span></span><br></pre></td></tr></table></figure><h4 id="2）-env-test"><a href="#2）-env-test" class="headerlink" title="2）.env.test"></a>2）.env.test</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">'test'</span></span><br><span class="line"><span class="comment"># API URL</span></span><br><span class="line">VITE_APP_API_URL=<span class="string">''</span></span><br></pre></td></tr></table></figure><h4 id="3）-env-production"><a href="#3）-env-production" class="headerlink" title="3）.env.production"></a>3）.env.production</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">'production'</span></span><br><span class="line"><span class="comment"># API URL</span></span><br><span class="line">VITE_APP_API_URL=<span class="string">'http://iblog.ishareread.com'</span></span><br></pre></td></tr></table></figure><p>这里我们主要通过<code>VITE_APP_API_URL</code>变量来区分不同的环境调用不同的接口，在开发环境调用本地接口<a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> ，在测试环境用mock接口，在生产环境调用真实接口。</p><h3 id="3、在项目中使用环境变量"><a href="#3、在项目中使用环境变量" class="headerlink" title="3、在项目中使用环境变量"></a>3、在项目中使用环境变量</h3><p>使用<code>import.meta.env.VITE_APP_API_URL</code>在axios请求中使用环境变量的配置来调用不同的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> api_rul = <span class="keyword">import</span>.meta.env.VITE_APP_API_URL</span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: api_rul,</span><br><span class="line">    timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>查看调用的哪些环境变量，可以在在main.js打印<code>console.log(&#39;环境变量：&#39;, import.meta.env);</code>看一下<br>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./assets/main.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'环境变量：'</span>, <span class="keyword">import</span>.meta.env);</span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h3 id="4、在package-json中定义运行项目的脚本命令"><a href="#4、在package-json中定义运行项目的脚本命令" class="headerlink" title="4、在package.json中定义运行项目的脚本命令"></a>4、在package.json中定义运行项目的脚本命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"mocktest"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"module"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"vite"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"vite --mode test"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vite build"</span>,</span><br><span class="line">    <span class="string">"preview"</span>: <span class="string">"vite preview"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"axios"</span>: <span class="string">"^1.7.5"</span>,</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"^3.4.29"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@vitejs/plugin-vue"</span>: <span class="string">"^5.0.5"</span>,</span><br><span class="line">    <span class="string">"mockjs"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="string">"vite"</span>: <span class="string">"^5.3.1"</span>,</span><br><span class="line">    <span class="string">"vite-plugin-mock"</span>: <span class="string">"^3.0.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240825/2-package.json%E6%96%87%E4%BB%B6.png" alt="package.json"></p><h2 id="三、运行效果"><a href="#三、运行效果" class="headerlink" title="三、运行效果"></a>三、运行效果</h2><p>开发环境运行<code>npm run dev</code></p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240825/3-dev%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="npm run dev"></p><p>测试环境运行<code>npm run test</code></p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240825/4-test%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="npm run dev"></p><p>可以看出通过运行不同的命令通过环境变量区分了不同的运行环境，避免了不同环境去改代码去适配不同的环境。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在vue的实际项目中都要经过开发、测试、然后上生产的阶段，在开发、测试的过程中往往会要频繁的切换开发、测试、生产等不同的环境。每个环境的配置有可能不一样，本文介绍如何通过vue3+vite配置环境变量实现开发、测试、生产灵活便捷的切换。&lt;/p&gt;
&lt;h2 id=&quot;一、为什么需
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue3+vite+axios+mock从接口获取模拟数据实战</title>
    <link href="https://xiejava.gitee.io/posts/e9ff8595/"/>
    <id>https://xiejava.gitee.io/posts/e9ff8595/</id>
    <published>2024-08-24T06:44:23.000Z</published>
    <updated>2024-08-25T07:18:03.375Z</updated>
    
    <content type="html"><![CDATA[<p>在用Vue.js开发前端应用时通常要与后端服务进行交互，例如通过API接口获取数据，在后端服务接口还没有具备之前，可以通过mock(模拟)数据来进行开发。使用mock数据可以让前端开发人员独立于后端开发人员工作，加快开发速度。在没有真实数据的情况下，mock数据可以帮助开发者更快地看到UI的呈现效果和交互逻辑。</p><p>本文通过vue3+vite+axios+mock来介绍如何实现Vue.js的前端应用从接口获取模拟数据。</p><h2 id="一、安装相关组件"><a href="#一、安装相关组件" class="headerlink" title="一、安装相关组件"></a>一、安装相关组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br><span class="line">npm install mockjs vite-plugin-mock -D</span><br></pre></td></tr></table></figure><p> 其中<code>axios</code> 是一个基于 Promise 非常强大且灵活的 HTTP 客户端，适用于 Vue.js 应用程序中的数据获取和后端交互。它可以简化 HTTP 请求的处理，并提供丰富的功能来满足不同的需求。我们用axios来实现与接口服务的http请求。</p><p><code>Mock.js</code> 是一个用于生成随机数据的 JavaScript 库，它主要用于前端开发过程中模拟后端接口数据。Mock.js 提供了一套简洁易用的 API，可以帮助开发者快速生成符合特定规则的假数据，从而在没有后端支持的情况下进行前端开发和测试。</p><p><code>vite-plugin-mock</code> 是一个专为 Vite 设计的插件，用于在 Vite 项目中模拟数据。它简化了使用 Mock.js 的过程，让开发者能够更加方便地管理模拟数据。</p><p>简单来说，就是mock.js提供mock数据，通过vite-plugin-mock，将管理mock发布成服务，通过axios通过http请求接口的方式获取mock数据。</p><p>安装相关组件后，在package.json中看到相关的组件信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"mocktest"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"module"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"vite"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"vite --mode test"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vite build"</span>,</span><br><span class="line">    <span class="string">"preview"</span>: <span class="string">"vite preview"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"axios"</span>: <span class="string">"^1.7.5"</span>,</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"^3.4.29"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@vitejs/plugin-vue"</span>: <span class="string">"^5.0.5"</span>,</span><br><span class="line">    <span class="string">"mockjs"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="string">"vite"</span>: <span class="string">"^5.3.1"</span>,</span><br><span class="line">    <span class="string">"vite-plugin-mock"</span>: <span class="string">"^3.0.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、在vite-config-js中配置vite-plugin-mock插件"><a href="#二、在vite-config-js中配置vite-plugin-mock插件" class="headerlink" title="二、在vite.config.js中配置vite-plugin-mock插件"></a>二、在vite.config.js中配置vite-plugin-mock插件</h2><p>● viteMockServe的相关配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, URL &#125; <span class="keyword">from</span> <span class="string">'node:url'</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; viteMockServe &#125; <span class="keyword">from</span> <span class="string">'vite-plugin-mock'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    <span class="comment">// mock 数据的 dev环境</span></span><br><span class="line">    viteMockServe(&#123;</span><br><span class="line">      <span class="comment">// supportTs: true, // 是否开启支持ts</span></span><br><span class="line">      mockPath: <span class="string">'mock'</span>, <span class="comment">// 设置mockPath为根目录下的mock目录</span></span><br><span class="line">      localEnabled: <span class="literal">true</span>, <span class="comment">// 设置是否监视mockPath对应的文件夹内文件中的更改</span></span><br><span class="line">      prodEnabled: <span class="literal">false</span>, <span class="comment">// 设置是否启用生产环境的mock服务</span></span><br><span class="line">      watchFiles: <span class="literal">true</span>, <span class="comment">// 是否监视文件更改</span></span><br><span class="line">      logger: <span class="literal">true</span>  <span class="comment">//是否在控制台显示请求日志</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: fileURLToPath(<span class="keyword">new</span> URL(<span class="string">'./src'</span>, <span class="keyword">import</span>.meta.url))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在viteMockServe中指定了mockPath为mock也就是根目录下的mock目录，在该目录下的mock服务都会被发布成mock服务。</p><h2 id="三、实现mock服务"><a href="#三、实现mock服务" class="headerlink" title="三、实现mock服务"></a>三、实现mock服务</h2><p>在根目录下新建mock目录在mock目录下新建mock文件实现mock服务，如app.js、user.js</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240824/1-mock%E7%9B%AE%E5%BD%95.png" alt="mock目录"></p><p>app.js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [&#123;</span><br><span class="line">    url: <span class="string">'/mock/api/getApiInfo'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    response: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        title: <span class="string">'mock api test.'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/api/category'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    response: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            code: <span class="number">200</span>,</span><br><span class="line">            data: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">1</span>,</span><br><span class="line">                    title: <span class="string">'JAVA'</span>,</span><br><span class="line">                    href: <span class="string">'/category/java'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">2</span>,</span><br><span class="line">                    title: <span class="string">'SpringBoot'</span>,</span><br><span class="line">                    href: <span class="string">'/category/SpringBoot'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">3</span>,</span><br><span class="line">                    title: <span class="string">'MySql'</span>,</span><br><span class="line">                    href: <span class="string">'/category/MySql'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">4</span>,</span><br><span class="line">                    title: <span class="string">'随笔'</span>,</span><br><span class="line">                    href: <span class="string">'/category/live'</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在app.js中我们并没有用mock生产数据，只是实现了mock服务放到了mock文件目录通过viteMockServe发布出来，后面可以通过axios调用获取。<br>user.js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Mock生成模拟数据</span></span><br><span class="line"><span class="keyword">const</span> userdata = Mock.mock(&#123;</span><br><span class="line">  <span class="string">'list|10'</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'@cname'</span>,</span><br><span class="line">      <span class="string">'age|18-60'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'email'</span>: <span class="string">'@email'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/mock/api/getUserInfo'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    response: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        data: userdata</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在user.js中，我们通过Mock生成模拟的用户列表数据</p><h2 id="四、调用api接口请求mock数据"><a href="#四、调用api接口请求mock数据" class="headerlink" title="四、调用api接口请求mock数据"></a>四、调用api接口请求mock数据</h2><h3 id="方法一、直接使用axios-请求mock-数据"><a href="#方法一、直接使用axios-请求mock-数据" class="headerlink" title="方法一、直接使用axios 请求mock 数据"></a>方法一、直接使用axios 请求mock 数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br></pre></td></tr></table></figure><p>在方法中通过axios.get()方法直接获取请求数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> getData() &#123;</span><br><span class="line">         <span class="keyword">await</span> axios.get(<span class="string">'/mock/api/getApiInfo'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.msg = res.data.title</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="方法二、对axios进行封装统一请求mock数据"><a href="#方法二、对axios进行封装统一请求mock数据" class="headerlink" title="方法二、对axios进行封装统一请求mock数据"></a>方法二、对axios进行封装统一请求mock数据</h3><p>建立一个service.js对axios进行封装，让后通过service.js来统一请求mock数据，这样做的好处是在切到真实接口的时候可以更加灵活<br>service.js的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> api_rul = <span class="string">''</span>  <span class="comment">//mock 接口地址可以为空字符串，真实接口配置为真实的接口地址。</span></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: api_rul,</span><br><span class="line">    timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>通过一个统一的调用接口文件请求mock数据<br>如mockapi.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">'@/utils/service'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>  <span class="title">getCategory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service(&#123;</span><br><span class="line">        url: <span class="string">'/api/category'</span>,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        params: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>  <span class="title">getUserInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service(&#123;</span><br><span class="line">        url: <span class="string">'/mock/api/getUserInfo'</span>,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        params: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在methods中进行方法的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：通过封装后的get方法获取数据</span></span><br><span class="line">    getUserInfo()</span><br><span class="line">    &#123;</span><br><span class="line">      getUserInfo().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.userinfo = res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    getCategory()</span><br><span class="line">    &#123;</span><br><span class="line">      getCategory().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.categorys = res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在vue的组件中具体的调用和展示代码如下：<br>HelloWorld.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    人员列表</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">"(user) in userinfo.list"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">        &#123;&#123; user.id &#125;&#125; : &#123;&#123; user.name &#125;&#125;  &#123;&#123; user.age &#125;&#125;  &#123;&#123; user.email &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    目录</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">"(category) in categorys"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">        &#123;&#123; category.id &#125;&#125; : &#123;&#123; category.title &#125;&#125;  &#123;&#123; category.href &#125;&#125; </span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script &gt;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCategory,getUserInfo &#125; <span class="keyword">from</span> <span class="string">'../api/mockapi'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span><br><span class="line">      userinfo: &#123;&#125;,</span><br><span class="line">      categorys: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getData()</span><br><span class="line">    <span class="keyword">this</span>.getUserInfo()</span><br><span class="line">    <span class="keyword">this</span>.getCategory()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 方法一：直接axios请求调用获取mock数据</span></span><br><span class="line">    <span class="keyword">async</span> getData() &#123;</span><br><span class="line">         <span class="keyword">await</span> axios.get(<span class="string">'/mock/api/getApiInfo'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.msg = res.data.title</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 方法二：通过封装后的get方法获取数据</span></span><br><span class="line">    getUserInfo()</span><br><span class="line">    &#123;</span><br><span class="line">      getUserInfo().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.userinfo = res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    getCategory()</span><br><span class="line">    &#123;</span><br><span class="line">      getCategory().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">          <span class="keyword">this</span>.categorys = res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>整个工程的目录结构说明如下：</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240824/2-mocktest%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt="mocktest工程目录"></p><h2 id="五、实际运行效果"><a href="#五、实际运行效果" class="headerlink" title="五、实际运行效果"></a>五、实际运行效果</h2><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2024/20240824/3-mock%E6%95%88%E6%9E%9C.png" alt="mock效果"><br>可以看到分别用两种方式获取mock数据的效果，其中人员列表中的数据是mock生成的模拟数。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注微信公众号,一起学习、成长！</center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在用Vue.js开发前端应用时通常要与后端服务进行交互，例如通过API接口获取数据，在后端服务接口还没有具备之前，可以通过mock(模拟)数据来进行开发。使用mock数据可以让前端开发人员独立于后端开发人员工作，加快开发速度。在没有真实数据的情况下，mock数据可以帮助开发
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
</feed>
