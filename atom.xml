<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieJava&#39;s blog</title>
  
  <subtitle>记录最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiejava.gitee.io/"/>
  <updated>2023-01-06T13:04:38.672Z</updated>
  <id>https://xiejava.gitee.io/</id>
  
  <author>
    <name>XieJava</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AI机器学习时序序列特征提取实现分类预测实战</title>
    <link href="https://xiejava.gitee.io/posts/9421a9eb/"/>
    <id>https://xiejava.gitee.io/posts/9421a9eb/</id>
    <published>2023-01-06T13:02:35.000Z</published>
    <updated>2023-01-06T13:04:38.672Z</updated>
    
    <content type="html"><![CDATA[<p>最近有位做医疗项目的同学咨询有一批人员的身高、体重、性别、年龄、心电图、是否有心脏病等数据是否可以根据这些数据预测某个人是否有心脏病的迹象。这当然是可以的，AI机器学习不就是干这事的吗？这是一个典型的分类算法。根据这些人体特征来判断是否存在潜在的疾病。问题是如何对心电图进行特征提取，提取出相关的特征，让模型进行学习和训练。</p><p>拿到数据后，第一步，我们首先来看一下数据。</p><h2 id="一、数据探索"><a href="#一、数据探索" class="headerlink" title="一、数据探索"></a>一、数据探索</h2><h3 id="1、读入数据"><a href="#1、读入数据" class="headerlink" title="1、读入数据"></a>1、读入数据</h3><p>导入numpy、pandas、matplotlib三大件，读入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">df=pd.read_csv(<span class="string">'data_csv.csv'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d59efafd2b064078997cbb41a57d75ee.png" alt="在这里插入图片描述"></p><p>数据集中有age年龄、ismale性别、Weight身高、Height体重、HRTrend心电图、label是否有心脏病（1，是有心脏病、0是无心脏病）<br>这里看到主要的几个关键性的指标。HRTrend是csv中载入的时候数据是文本字符串格式，还有nan及\n等字符串，我们要将这些数据进行清洗规则化，将其转化为数组。</p><h3 id="2、数据处理"><a href="#2、数据处理" class="headerlink" title="2、数据处理"></a>2、数据处理</h3><p>先拿一个样本数据来看看数据的情况。对它进行相应的处理，包括去掉回车换行符、去多余空格、然后以空格作为分隔形成数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HRTrend_Data=df[<span class="string">'HRTrend'</span>][<span class="number">1</span>][<span class="number">1</span>:len(df[<span class="string">'HRTrend'</span>][<span class="number">1</span>])<span class="number">-1</span>]</span><br><span class="line">HRTrend_Data=HRTrend_Data.replace(<span class="string">'\n'</span>,<span class="string">''</span>) <span class="comment">#替换掉换行符</span></span><br><span class="line">HRTrend_Data=HRTrend_Data.replace(<span class="string">'nan'</span>,str(<span class="number">0</span>))   <span class="comment">#将nan补0</span></span><br><span class="line">HRTrend_Data=re.sub(<span class="string">' +'</span>, <span class="string">' '</span>, HRTrend_Data).strip() <span class="comment">#去掉多余的空格</span></span><br><span class="line">HRTrend_Data=np.asarray([float(s) <span class="keyword">for</span> s <span class="keyword">in</span> HRTrend_Data.split(<span class="string">' '</span>)])  <span class="comment">#将字符串通过空格分隔，转换成数组</span></span><br><span class="line">pd.DataFrame(HRTrend_Data).plot()</span><br><span class="line">HRTrend_Data</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bc77af3d2bf749abaa9b72e48cb0cf26.png" alt="在这里插入图片描述"></p><p>这个图形不是很规则不平滑，看数据是因为异常值太多，后面的数据都是0，这些0都是因为数据为Non补充进来的，有可能是应为数据采集的时候某个点位没有采集到。我们需要将这些异常值给处理掉。<br>对于中间为0的，我们可以通过采用前值填充或者后值填充（也就是用前面的值或后面的值来替代为0的值），后面全部为0的部分要去掉。应为会影响到一些关键性的特征，如均值、50%的值、70%的值等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_HRTrend1=pd.DataFrame(HRTrend_Data)</span><br><span class="line">df_HRTrend1.describe()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8a7ad090da6a46789a3f789c0a950671.png" alt="在这里插入图片描述"></p><p>可以看到，这些异常值将会很大程度的影响一些关键特征，所以我们要处理异常值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HRTrend_Data=np.trim_zeros(HRTrend_Data)  <span class="comment">#去掉首尾的0</span></span><br><span class="line">df_data1=pd.DataFrame(HRTrend_Data)</span><br><span class="line">df_data1.replace(to_replace=<span class="number">0</span>, method=<span class="string">'ffill'</span>,inplace=<span class="literal">True</span>)  <span class="comment">#用前值替换掉中间的异常0</span></span><br><span class="line">df_data1.plot()</span><br><span class="line">df_data1.describe()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ba9f27cf3d754a4ba180fb2e643fc18c.png" alt="在这里插入图片描述"></p><p>把刚对一个样本处理的过程写成一个函数，应用到所有的样本数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procdata</span><span class="params">(df_dataclumn)</span>:</span></span><br><span class="line">    ary_data=df_dataclumn[<span class="number">1</span>:len(df_dataclumn)<span class="number">-1</span>]</span><br><span class="line">    ary_data=ary_data.replace(<span class="string">'\n'</span>,<span class="string">''</span>)</span><br><span class="line">    ary_data=ary_data.replace(<span class="string">'nan'</span>,str(<span class="number">0</span>))</span><br><span class="line">    ary_data=re.sub(<span class="string">' +'</span>, <span class="string">' '</span>, ary_data).strip()</span><br><span class="line">    ary_data=np.asarray([float(s) <span class="keyword">for</span> s <span class="keyword">in</span> ary_data.split(<span class="string">' '</span>)])</span><br><span class="line">    ary_data=np.trim_zeros(ary_data)</span><br><span class="line">    df_data=pd.DataFrame(ary_data)</span><br><span class="line">    df_data.replace(to_replace=<span class="number">0</span>, method=<span class="string">'ffill'</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    ary_data=df_data.values</span><br><span class="line">    <span class="keyword">return</span> ary_data</span><br><span class="line"></span><br><span class="line">df[<span class="string">'HRTrend'</span>]=df[<span class="string">'HRTrend'</span>].map(procdata)</span><br><span class="line">df[<span class="string">'Weight'</span>].replace(to_replace=<span class="number">0</span>, method=<span class="string">'ffill'</span>,inplace=<span class="literal">True</span>) <span class="comment">#去异常值</span></span><br><span class="line">df[<span class="string">'Height'</span>].replace(to_replace=<span class="number">0</span>, method=<span class="string">'ffill'</span>,inplace=<span class="literal">True</span>) <span class="comment">#去异常值</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>找前六个样本看看效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">3</span>,figsize=(<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">        axes[x,y].plot(df[<span class="string">'HRTrend'</span>][i])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9648dfde1c3f48f1b957fe9edc6c99f0.png" alt="在这里插入图片描述"></p><h2 id="二、特征工程及模型训练"><a href="#二、特征工程及模型训练" class="headerlink" title="二、特征工程及模型训练"></a>二、特征工程及模型训练</h2><h3 id="方法一：通过描叙统计提取时序特征并进行模型训练"><a href="#方法一：通过描叙统计提取时序特征并进行模型训练" class="headerlink" title="方法一：通过描叙统计提取时序特征并进行模型训练"></a>方法一：通过描叙统计提取时序特征并进行模型训练</h3><ul><li>特征提取</li></ul><p>有量纲时序特征提取包括以内容。<br><img src="https://img-blog.csdnimg.cn/0024b33924104484a274bd0eec6e8d20.png" alt="在这里插入图片描述"></p><p>可以看到，大部分内容都可以通过describe()获取。可以写个函数方法来获取相关的特征值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdescribefeatures</span><span class="params">(data)</span>:</span></span><br><span class="line">    df_feature=pd.DataFrame(data)</span><br><span class="line">    df_feature=df_feature.describe().T</span><br><span class="line">    range=df_feature[<span class="string">'max'</span>][<span class="number">0</span>]-df_feature[<span class="string">'min'</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> range,df_feature[<span class="string">'count'</span>][<span class="number">0</span>],df_feature[<span class="string">'mean'</span>][<span class="number">0</span>],df_feature[<span class="string">'std'</span>][<span class="number">0</span>],df_feature[<span class="string">'min'</span>][<span class="number">0</span>],df_feature[<span class="string">'25%'</span>][<span class="number">0</span>],df_feature[<span class="string">'50%'</span>][<span class="number">0</span>],df_feature[<span class="string">'75%'</span>][<span class="number">0</span>],df_feature[<span class="string">'max'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">HRTrend_np=np.array(df[<span class="string">'HRTrend'</span>])</span><br><span class="line">HRTrend_features_ary=[getdescribefeatures(d) <span class="keyword">for</span> d <span class="keyword">in</span> HRTrend_np]</span><br><span class="line">df_HRTrend_features=pd.DataFrame(HRTrend_features_ary,columns=[<span class="string">'HRTrend'</span>+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(HRTrend_features_ary[<span class="number">0</span>]))])</span><br><span class="line">df_HRTrend_features</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9ed477289f10486c871c8c6b2995f697.png" alt="在这里插入图片描述"></p><p>将心电图提出的统计信息特征与年龄、性别、身高、体重等特征合并，形成特征集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data=df[[<span class="string">'age'</span>,<span class="string">'ismale'</span>,<span class="string">'Weight'</span>,<span class="string">'Height'</span>,<span class="string">'label'</span>]].join(df_HRTrend_features)</span><br></pre></td></tr></table></figure><p>预留15个样本做最后的预测看效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_train_data=df_data[<span class="number">0</span>:len(df_data)<span class="number">-15</span>]    <span class="comment">#训练数据</span></span><br><span class="line">df_predict_data=df_data[len(df_data)<span class="number">-15</span>:len(df_data)]  <span class="comment">#用于预测的数据</span></span><br></pre></td></tr></table></figure><ul><li>模型训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> recall_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">x_tt, x_validation, y_tt, y_validation = train_test_split(x, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 将训练集再切分为训练集和测试集</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_tt, y_tt, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将模型的名字和模型函数作为元组添加到列表当中存储；</span></span><br><span class="line">models = []</span><br><span class="line">models.append((<span class="string">"KNN"</span>,KNeighborsClassifier(n_neighbors=<span class="number">3</span>))) <span class="comment">#指定邻居个数</span></span><br><span class="line">models.append((<span class="string">"SVM Classifier"</span>,SVC(C=<span class="number">1000</span>)))</span><br><span class="line"><span class="comment">#可以通过参数C来控制精度，C越大要求精度越高；  C——错分点的惩罚度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环调用所有模型进行训练、预测</span></span><br><span class="line"><span class="keyword">for</span> clf_name, clf <span class="keyword">in</span> models:</span><br><span class="line">    clf.fit(x_train, y_train)</span><br><span class="line">    xy_lst = [(x_train, y_train), (x_validation, y_validation), (x_test, y_test)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(xy_lst)):</span><br><span class="line">        x_part = xy_lst[i][<span class="number">0</span>]  <span class="comment"># 为遍历中的第0部分</span></span><br><span class="line">        y_part = xy_lst[i][<span class="number">1</span>]  <span class="comment"># 为遍历中的第1部分</span></span><br><span class="line">        y_pred = clf.predict(x_part)</span><br><span class="line">        print(i)  <span class="comment"># i是下标，0表示训练集，1表示验证集，2表示测试集</span></span><br><span class="line">        print(clf_name, <span class="string">"ACC:"</span>, accuracy_score(y_part, y_pred))</span><br><span class="line">        print(clf_name, <span class="string">"REC:"</span>, recall_score(y_part, y_pred))</span><br><span class="line">        print(clf_name, <span class="string">"F-score:"</span>, f1_score(y_part, y_pred))</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://img-blog.csdnimg.cn/5be3d9218fc54368acece8f3c70f10c6.png" alt="在这里插入图片描述"></p><p>SVM分类模型的效果要稍好于KNN的模型，但整体效果还不是很好。应该是提取的特征还是不够。我们来试下通过tsfresh提取时序特征并进行模型训练。</p><h3 id="方法二：通过tsfresh提取时序特征并进行模型训练"><a href="#方法二：通过tsfresh提取时序特征并进行模型训练" class="headerlink" title="方法二：通过tsfresh提取时序特征并进行模型训练"></a>方法二：通过tsfresh提取时序特征并进行模型训练</h3><ul><li>特征提取</li></ul><p>tsfresh可以自动提取各种时间特征，可以参考官方文档，一般的取最大、最小、偏度、峰度等统计指标这些都自动化集成了。<br><a href="https://tsfresh.readthedocs.io/en/latest/text/introduction.html" target="_blank" rel="noopener">https://tsfresh.readthedocs.io/en/latest/text/introduction.html</a><br><img src="https://img-blog.csdnimg.cn/97af24b2fe5743e4a4a534536f8b04ea.png" alt="在这里插入图片描述"></p><p>通过tsfresh提取时序特征代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tsfresh <span class="keyword">import</span> extract_features</span><br><span class="line"><span class="keyword">from</span> tsfresh <span class="keyword">import</span> select_features</span><br><span class="line">dfx_HRTrend=pd.DataFrame()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">    df_i=pd.DataFrame(df[<span class="string">'HRTrend'</span>][i],columns=[<span class="string">'HRTrend'</span>])</span><br><span class="line">    df_i[<span class="string">'id'</span>]=i</span><br><span class="line">    df_i[<span class="string">'time'</span>]=np.array(range(<span class="number">1</span>,len(df_i)+<span class="number">1</span>))</span><br><span class="line">    df_i[<span class="string">'label'</span>]=df[<span class="string">'label'</span>][i]</span><br><span class="line">    dfx_HRTrend=pd.concat(objs=[dfx_HRTrend,df_i])</span><br><span class="line"></span><br><span class="line">dfx_xtracted_features = extract_features(dfx_HRTrend,column_id=<span class="string">"id"</span>, column_sort=<span class="string">"time"</span>)</span><br><span class="line">dfx_xtracted_features</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/399e9d00ceb3441eba393e0132bf52d7.png" alt="在这里插入图片描述"></p><p>可以看到tsfresh自动提取了1574colums的特征，但是我们要选取与标签有相关性的特征。tsfresh可以自动做到这一点，通过tsfresh的select_features传入特征和标签来选择与标签有相关性的特征，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tsfresh.utilities.dataframe_functions <span class="keyword">import</span> impute</span><br><span class="line">impute(dfx_xtracted_features)</span><br><span class="line">df_HRTrend_features = select_features(dfx_xtracted_features, df[<span class="string">'label'</span>])</span><br><span class="line">df_HRTrend_features</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e5a63ecd8df94a96ac24a8baf9806a7a.png" alt="在这里插入图片描述"></p><p>通过特征选择自动选取了有相关性的143个特征，比前面缩减了很多，有利于提高模型训练的效率和精度。<br>我们再来看一下模型训练的效果。<br>同样将心电图通过tsfresh提出的时序特征与年龄、性别、身高、体重等特征合并，形成特征集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data=df[[<span class="string">'age'</span>,<span class="string">'ismale'</span>,<span class="string">'Weight'</span>,<span class="string">'Height'</span>,<span class="string">'label'</span>]].join(df_HRTrend_features)</span><br></pre></td></tr></table></figure><p>预留15个样本做最后的预测看效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_train_data=df_data[<span class="number">0</span>:len(df_data)<span class="number">-15</span>]    <span class="comment">#训练数据</span></span><br><span class="line">df_predict_data=df_data[len(df_data)<span class="number">-15</span>:len(df_data)]  <span class="comment">#用于预测的数据</span></span><br></pre></td></tr></table></figure><p>模型训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> recall_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">x_tt, x_validation, y_tt, y_validation = train_test_split(x, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 将训练集再切分为训练集和测试集</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_tt, y_tt, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将模型的名字和模型函数作为元组添加到列表当中存储；</span></span><br><span class="line">models = []</span><br><span class="line">models.append((<span class="string">"KNN"</span>,KNeighborsClassifier(n_neighbors=<span class="number">3</span>))) <span class="comment">#指定邻居个数</span></span><br><span class="line">models.append((<span class="string">"SVM Classifier"</span>,SVC(C=<span class="number">1000</span>)))</span><br><span class="line"><span class="comment">#可以通过参数C来控制精度，C越大要求精度越高；  C——错分点的惩罚度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环调用所有模型进行训练、预测</span></span><br><span class="line"><span class="keyword">for</span> clf_name, clf <span class="keyword">in</span> models:</span><br><span class="line">    clf.fit(x_train, y_train)</span><br><span class="line">    xy_lst = [(x_train, y_train), (x_validation, y_validation), (x_test, y_test)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(xy_lst)):</span><br><span class="line">        x_part = xy_lst[i][<span class="number">0</span>]  <span class="comment"># 为遍历中的第0部分</span></span><br><span class="line">        y_part = xy_lst[i][<span class="number">1</span>]  <span class="comment"># 为遍历中的第1部分</span></span><br><span class="line">        y_pred = clf.predict(x_part)</span><br><span class="line">        print(i)  <span class="comment"># i是下标，0表示训练集，1表示验证集，2表示测试集</span></span><br><span class="line">        print(clf_name, <span class="string">"ACC:"</span>, accuracy_score(y_part, y_pred))</span><br><span class="line">        print(clf_name, <span class="string">"REC:"</span>, recall_score(y_part, y_pred))</span><br><span class="line">        print(clf_name, <span class="string">"F-score:"</span>, f1_score(y_part, y_pred))</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://img-blog.csdnimg.cn/0e3b19d3f6304f5fbe649ba25021aca1.png" alt="在这里插入图片描述"></p><p>可以看到不管是KNN模型和SVM的模型都取得了不错的效果。</p><h2 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h2><p>最后我们来看一下，用预留的15个样本预测的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pre_test_y=df_predict_data[<span class="string">'label'</span>]</span><br><span class="line">pre_test_x=df_predict_data.drop(columns=<span class="string">'label'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clf_name, clf <span class="keyword">in</span> models:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pre_test_x.index:</span><br><span class="line">        y_predict=clf.predict(pre_test_x.loc[[i]])</span><br><span class="line">        predict_result=<span class="string">'预测错误！'</span></span><br><span class="line">        <span class="keyword">if</span> y_predict==pre_test_y.loc[[i]].values:</span><br><span class="line">            predict_result=<span class="string">'预测正确！'</span></span><br><span class="line">        print(<span class="string">'第'</span>+str(i)+<span class="string">'个样本'</span>+clf_name+<span class="string">' 预测y='</span>+str(y_predict)+<span class="string">'--实际 y='</span>+str(pre_test_y.loc[[i]].values)+<span class="string">' - '</span>+predict_result)</span><br><span class="line">    print(<span class="string">'-'</span>*<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>先是通过描叙统计提取时序特征并进行模型训练后模型预测的结果：<br><img src="https://img-blog.csdnimg.cn/bfe84fba45424bc5accc4a297161ff35.png" alt="在这里插入图片描述"></p><p>还是有不少预测错误了。<br>再来看通过tsfresh提取时序特征并进行模型训练后模型预测的结果：<br><img src="https://img-blog.csdnimg.cn/a0312fd8471940b3b92974507a83bcfb.png" alt="在这里插入图片描述"></p><p>可以看到预留的15个样本都预测正确，取得了不错的效果！</p><p>本文通过心电图分类模型介绍了从数据处理、时序特征提取、模型训练和效果评估。验证了对于小数据量，通过tsfresh提取时序特征，往往能够取得很好的效果。</p><p>全部源代码及数据集见：<a href="https://download.csdn.net/download/fullbug/87369380" target="_blank" rel="noopener">https://download.csdn.net/download/fullbug/87369380</a></p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有位做医疗项目的同学咨询有一批人员的身高、体重、性别、年龄、心电图、是否有心脏病等数据是否可以根据这些数据预测某个人是否有心脏病的迹象。这当然是可以的，AI机器学习不就是干这事的吗？这是一个典型的分类算法。根据这些人体特征来判断是否存在潜在的疾病。问题是如何对心电图进行
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="AI机器学习" scheme="https://xiejava.gitee.io/tags/AI%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Django+Celery+Flower实现异步和定时任务及其监控告警</title>
    <link href="https://xiejava.gitee.io/posts/c2fa9556/"/>
    <id>https://xiejava.gitee.io/posts/c2fa9556/</id>
    <published>2023-01-06T13:00:15.000Z</published>
    <updated>2023-01-06T13:02:03.149Z</updated>
    
    <content type="html"><![CDATA[<p>用Django框架进行web开发非常的快捷方便，但Django框架请求/响应是同步的。但我们在实际项目中经常会碰到一些耗时的不能立即返回请求结果任务如：数据爬取、发邮件等，如果常时间等待对用户体验不是很好，在这种情况下就需要实现异步实现，马上返回响应请求，但真正的耗时任务在后台异步执行。Django框架本身无法实现异步响应但可以通过Celery很快的实现异步和定时任务。本文将介绍如何通过Django+Celery+Flower实现异步和定时任务及其任务的监控告警。</p><p>常见的任务有两类，一类是异步任务，一类是定时任务（定时执行或按一定周期执行）。Celery都能很好的支持。</p><p>Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理， 如果你的业务场景中需要用到异步任务，就可以考虑使用celery， 举几个实例场景中可用的例子:</p><ul><li>异步任务：将耗时的操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音频处理等等</li><li>做一个定时任务，比如每天定时执行爬虫爬取指定内容</li></ul><p>Celery 在执行任务时需要通过一个消息中间件（Broker）来接收和发送任务消息，以及存储任务结果， 一般使用rabbitMQ、Redis或其他DB。</p><p>本文使用redis作为消息中间件和结果存储，在后面的通过数据库监控任务执行案例将介绍用到数据库作为结果存储。</p><h2 id="一、在Django中引入Celary"><a href="#一、在Django中引入Celary" class="headerlink" title="一、在Django中引入Celary"></a>一、在Django中引入Celary</h2><h3 id="1、安装库"><a href="#1、安装库" class="headerlink" title="1、安装库"></a>1、安装库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install redis</span><br><span class="line">pip install eventlet  <span class="comment">#在windows环境下需要安装eventlet包</span></span><br></pre></td></tr></table></figure><h3 id="2、引入celary"><a href="#2、引入celary" class="headerlink" title="2、引入celary"></a>2、引入celary</h3><p>在主项目目录下，新建celary.py文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统环境变量，否则在启动celery时会报错</span></span><br><span class="line"><span class="comment"># taskproject 是当前项目名</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'taskproject.settings'</span>)</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line">celery_app = Celery(<span class="string">'taskproject'</span>)</span><br><span class="line">celery_app.config_from_object(<span class="string">'django.conf:settings'</span>)</span><br><span class="line">celery_app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bb5250fc5af445e9b80984b4ff899220.png" alt="在这里插入图片描述"></p><p>在主目录的<strong>init</strong>.py中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'celery_app'</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/78510f4664bf461f86875b46f38cb68e.png" alt="在这里插入图片描述"></p><h3 id="3、在settings-py中设置celery的相关参数"><a href="#3、在settings-py中设置celery的相关参数" class="headerlink" title="3、在settings.py中设置celery的相关参数"></a>3、在settings.py中设置celery的相关参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###----Celery redis 配置-----###</span></span><br><span class="line"><span class="comment"># Broker配置，使用Redis作为消息中间件</span></span><br><span class="line">BROKER_URL = <span class="string">'redis://:redispassword@127.0.0.1:6379/0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BACKEND配置，使用redis</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:redispassword@127.0.0.1:6379/1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT=[<span class="string">'json'</span>]</span><br><span class="line">CELERY_TASK_SERIALIZER=<span class="string">'json'</span></span><br><span class="line"><span class="comment"># 结果序列化方案</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务结果过期时间，秒</span></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区配置</span></span><br><span class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3d3c6bcf67964ae7b1828119ea7ccf3d.png" alt="在这里插入图片描述"></p><p>这时候Celery的基本配置完成了，可以实现并添加任务了。</p><h2 id="二、实现异步任务"><a href="#二、实现异步任务" class="headerlink" title="二、实现异步任务"></a>二、实现异步任务</h2><h3 id="1、创建tasks-py"><a href="#1、创建tasks-py" class="headerlink" title="1、创建tasks.py"></a>1、创建tasks.py</h3><p>在子应用下建立各自对应的任务文件tasks.py(<code>必须是tasks.py这个名字，不允许修改</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(x)):</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        logger.info(<span class="string">'this is task1 '</span>+str(i))</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scheduletask1</span><span class="params">()</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    logger.info(<span class="string">'this is scheduletask '</span>+now.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在tasks.py中我们定义了两个任务，这两个任务要用@shared_task装饰起来，否则celery无法管理。<br><img src="https://img-blog.csdnimg.cn/00b1edc1f06c415e8a91d2fb44436d24.png" alt="在这里插入图片描述"></p><p>为了放便执行我们通过views把这两个任务通过函数方法调用起来，用URL进行发布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">views.py</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> tasks</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runtask</span><span class="params">(request)</span>:</span></span><br><span class="line">    x=request.GET.get(<span class="string">'x'</span>)</span><br><span class="line">    tasks.task1.delay(x)</span><br><span class="line">    content= &#123;<span class="string">'200'</span>: <span class="string">'run task1 success!---'</span>+str(x)&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runscheduletask</span><span class="params">(request)</span>:</span></span><br><span class="line">    tasks.scheduletask1.delay()</span><br><span class="line">    content= &#123;<span class="string">'200'</span>: <span class="string">'success！'</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(content)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/499b4fdabd3241d08ff639cca15483bb.png" alt="在这里插入图片描述"></p><p>在urls中加入路由进行发布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> taskapp <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'task'</span>, views.runtask),</span><br><span class="line">    path(<span class="string">'runscheduletask'</span>, views.runscheduletask),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e5a24935c0d5465cb713356dc884752d.png" alt="在这里插入图片描述"></p><p>在项目的主urls中加入子项目的urls<br><img src="https://img-blog.csdnimg.cn/9952643c8c074d5cba141987095b29ac.png" alt="在这里插入图片描述"></p><h3 id="2、启动celery"><a href="#2、启动celery" class="headerlink" title="2、启动celery"></a>2、启动celery</h3><blockquote><p>在启动celery之前，先要启动redis服务，因为celery在settings中配置要用到redis作为消息中间件和结果存储。<br>windows环境下启动redis的命令为redis-server.exe redis.windows.conf</p></blockquote><p>在控制台启动celery的worker</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cb1fae5568954d2fbd9fb515d16ffe37.png" alt="在这里插入图片描述"></p><p>启动django访问url调用任务，看异步效果<br><img src="https://img-blog.csdnimg.cn/48f8e177034340248efaab1b4dea5f84.png" alt="在这里插入图片描述"></p><h3 id="3、查看任务"><a href="#3、查看任务" class="headerlink" title="3、查看任务"></a>3、查看任务</h3><p>控制台查看异步任务执行的情况，可以看web的url很快返回响应结果，后台控制台一直在执行异步任务。<br><img src="https://img-blog.csdnimg.cn/323c620a2e87415780873f1a548c92a0.png" alt="在这里插入图片描述"></p><h2 id="三、实现定时任务"><a href="#三、实现定时任务" class="headerlink" title="三、实现定时任务"></a>三、实现定时任务</h2><p>Celery实现定时任务也很方便</p><h3 id="1、定义调度器"><a href="#1、定义调度器" class="headerlink" title="1、定义调度器"></a>1、定义调度器</h3><p>在settings.py中加入定时任务的定义就可以实现定时任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'every_5_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.scheduletask1'</span>,</span><br><span class="line">        <span class="comment"># 每5秒执行一次</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'args'</span>: ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里这个scheduletask1是前面tasks.py中定义的任务，当然也可以定义多个定时任务，如加一个task1，task1是有参数的，可以在’args’: ()中传入参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'every_5_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.scheduletask1'</span>,</span><br><span class="line">        <span class="comment"># 每5秒执行一次</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'args'</span>: ()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'every_10_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.task1'</span>,</span><br><span class="line">        <span class="comment"># 每10秒执行一次,task1的参数是5</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">'args'</span>: ([<span class="number">5</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d30130f1d6454682bb182b1f347174cb.png" alt="在这里插入图片描述"></p><p>这里定义了task1是10秒执行一次，传入的参数是5。</p><h3 id="2、启动beat"><a href="#2、启动beat" class="headerlink" title="2、启动beat"></a>2、启动beat</h3><p>需要保持worker进程，另外开一个控制台启动beat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="3、查看任务-1"><a href="#3、查看任务-1" class="headerlink" title="3、查看任务"></a>3、查看任务</h3><p>启动任务后看控制台打印的日志task1和scheduletask1都按计划定时执行了。<br><img src="https://img-blog.csdnimg.cn/49200e8a8cdf458b8ea928a77b64a439.png" alt="在这里插入图片描述"></p><h2 id="三、通过数据库配置定时任务"><a href="#三、通过数据库配置定时任务" class="headerlink" title="三、通过数据库配置定时任务"></a>三、通过数据库配置定时任务</h2><p>虽然通过settings.py的配置可以实现定时任务的配置，做为实际项目中可能还是不够实用，更加工程化的做法是将定时任务的配置放到数据库里通过界面来配置。同样Celery对此也提供了很好的支持，这需要安装django-celery-beat插件。以下将介绍使用过程。</p><h3 id="1、安装djiango-celery-beat"><a href="#1、安装djiango-celery-beat" class="headerlink" title="1、安装djiango-celery-beat"></a>1、安装djiango-celery-beat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-beat</span><br></pre></td></tr></table></figure><h3 id="2、在APP中注册djiango-celery-beat"><a href="#2、在APP中注册djiango-celery-beat" class="headerlink" title="2、在APP中注册djiango-celery-beat"></a>2、在APP中注册djiango-celery-beat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">....</span><br><span class="line"><span class="string">'django_celery_beat'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3、在settings-py中设置调度器及时区"><a href="#3、在settings-py中设置调度器及时区" class="headerlink" title="3、在settings.py中设置调度器及时区"></a>3、在settings.py中设置调度器及时区</h3><p>在settings.py中屏蔽到原来的调度器，加入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CELERYBEAT_SCHEDULER = <span class="string">'django_celery_beat.schedulers.DatabaseScheduler'</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c48970948fcc44e4a73378459fad28d3.png" alt="在这里插入图片描述"></p><p>在setings.py中设置好语言、时区等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="4、进行数据库迁移"><a href="#4、进行数据库迁移" class="headerlink" title="4、进行数据库迁移"></a>4、进行数据库迁移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate django_celery_beat</span><br></pre></td></tr></table></figure><h3 id="5、分别启动woker和beta"><a href="#5、分别启动woker和beta" class="headerlink" title="5、分别启动woker和beta"></a>5、分别启动woker和beta</h3><p>在两个控制台分别启动woker和beta</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="6、启动django服务，访问admin的web管理端"><a href="#6、启动django服务，访问admin的web管理端" class="headerlink" title="6、启动django服务，访问admin的web管理端"></a>6、启动django服务，访问admin的web管理端</h3><p>访问 <a href="http://localhost:8000/admin/" target="_blank" rel="noopener">http://localhost:8000/admin/</a> 可以看到周期任务的管理菜单，管理定时任务非常方便。<br><img src="https://img-blog.csdnimg.cn/f7379eedb03a4f4e97fb3f111e4b65b0.png" alt="在这里插入图片描述"></p><h3 id="7、配置定时任务"><a href="#7、配置定时任务" class="headerlink" title="7、配置定时任务"></a>7、配置定时任务</h3><p>点击“间隔”<br><img src="https://img-blog.csdnimg.cn/7b41207a4c9c4f9db9cdbffb9347d77c.png" alt="在这里插入图片描述"></p><p>点击“增加间隔”来增加定时任务的配置，增加一个5秒执行一次的定时器。<br><img src="https://img-blog.csdnimg.cn/0c8da1a050ee49c0a18a6b39fccb5c86.png" alt="在这里插入图片描述"></p><p>看到有个每5秒的定时器<br><img src="https://img-blog.csdnimg.cn/1d98930dc7c94e1795827f5c17b0a4cb.png" alt="在这里插入图片描述"></p><p>这时可以用这个定时器去新建调度任务了。选择周期性任务，点击“增加周期性任务”<br><img src="https://img-blog.csdnimg.cn/105ffe5e5e264567989db855dea179e5.png" alt="在这里插入图片描述"></p><p>填入任务名，选择需要定时执行的任务<br><img src="https://img-blog.csdnimg.cn/dffb17bacd6547c3943b9621b5a1ef1e.png" alt="在这里插入图片描述"></p><p>因为task1需要参数，在后面参数设置中进行参数的设置。<br><img src="https://img-blog.csdnimg.cn/4140582cb0bb45d7b668b55b2820ebc8.png" alt="在这里插入图片描述"></p><p>保存后可以看到新加了一条“每5秒执行一次task1”的调度任务。<br><img src="https://img-blog.csdnimg.cn/2aabbfcf63554599bd8bd24322744b5e.png" alt="在这里插入图片描述"></p><h3 id="8、查看调度效果"><a href="#8、查看调度效果" class="headerlink" title="8、查看调度效果"></a>8、查看调度效果</h3><p>在woker和beta的控制台都可以看到有定时任务执行的信息，说明任务被成功调度执行了。<br><img src="https://img-blog.csdnimg.cn/33f1439495a64f4ba8c6c738e6caa0b1.png" alt="在这里插入图片描述"></p><h2 id="四、通过django的web界面监控任务执行情况"><a href="#四、通过django的web界面监控任务执行情况" class="headerlink" title="四、通过django的web界面监控任务执行情况"></a>四、通过django的web界面监控任务执行情况</h2><p>在控制台监控任务执行情况，还不是很方便，最好是能够通过web界面看到任务的执行情况，如有多少任务在执行，有多少任务执行失败了等。这个Celery也是可以做到了，就是将任务执行结果写到数据库中，通过web界面显示出来。这里要用到django-celery-results插件。通过插件可以使用Django的orm作为结果存储，这样的好处在于我们可以直接通过django的数据查看到任务状态，同时为可以制定更多的操作，下面介绍如何使用orm作为结果存储。</p><h3 id="1、安装django-celery-results"><a href="#1、安装django-celery-results" class="headerlink" title="1、安装django-celery-results"></a>1、安装django-celery-results</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-results</span><br></pre></td></tr></table></figure><h3 id="2、配置settings-py，注册app"><a href="#2、配置settings-py，注册app" class="headerlink" title="2、配置settings.py，注册app"></a>2、配置settings.py，注册app</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">...,</span><br><span class="line"><span class="string">'django_celery_results'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3、修改backend配置，将Redis改为django-db"><a href="#3、修改backend配置，将Redis改为django-db" class="headerlink" title="3、修改backend配置，将Redis改为django-db"></a>3、修改backend配置，将Redis改为django-db</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BACKEND配置，使用redis</span></span><br><span class="line"><span class="comment">#CELERY_RESULT_BACKEND = 'redis://:12345678@127.0.0.1:6379/1'</span></span><br><span class="line"><span class="comment"># 使用使用django orm 作为结果存储</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'django-db'</span>  <span class="comment">#使用django orm 作为结果存储</span></span><br></pre></td></tr></table></figure><h3 id="4、迁移数据库"><a href="#4、迁移数据库" class="headerlink" title="4、迁移数据库"></a>4、迁移数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate django_celery_results</span><br></pre></td></tr></table></figure><p>可以看到创建了django_celery_results相关的表<br><img src="https://img-blog.csdnimg.cn/fd7eea7697e741688d4aa1317dd2fdfa.png" alt="在这里插入图片描述"></p><h3 id="5、查看任务"><a href="#5、查看任务" class="headerlink" title="5、查看任务"></a>5、查看任务</h3><p>启动django服务后，执行异步和定时任务，就可以在管理界面看到任务的执行情况，执行了哪些任务，哪些任务执行失败了等。<br><img src="https://img-blog.csdnimg.cn/1995ffd304c3440b96c34de13885a542.png" alt="在这里插入图片描述"></p><h2 id="五、通过Flower监控任务执行情况"><a href="#五、通过Flower监控任务执行情况" class="headerlink" title="五、通过Flower监控任务执行情况"></a>五、通过Flower监控任务执行情况</h2><p>如果不想通django的管理界面监控任务的执行，还可以通过Flower插件来进行任务的监控。FLower的界面更加丰富，可以监控的信息更全。以下介绍通过Flower来进行任务监控。</p><h3 id="1、安装flower"><a href="#1、安装flower" class="headerlink" title="1、安装flower"></a>1、安装flower</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flower</span><br></pre></td></tr></table></figure><h3 id="2、启动flower"><a href="#2、启动flower" class="headerlink" title="2、启动flower"></a>2、启动flower</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject flower --port<span class="number">-5566</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/66ad267b5a1045e8a19d94cb075dca3c.png" alt="在这里插入图片描述"></p><h3 id="3、使用flower进行任务监控"><a href="#3、使用flower进行任务监控" class="headerlink" title="3、使用flower进行任务监控"></a>3、使用flower进行任务监控</h3><p><img src="https://img-blog.csdnimg.cn/42aef4e96372459f920532fc18048547.png" alt="在这里插入图片描述"></p><p>点击失败的我们可以看到执行失败的详情，这里是故意给task1的参数传了个‘a’字符，导致它执行报错了。可以看到任务执行的报错信息也展示出来了。<br><img src="https://img-blog.csdnimg.cn/0ef30804b9fc467aa83e64d43a9560a1.png" alt="在这里插入图片描述"></p><h2 id="六、实现任务异常自动邮件告警"><a href="#六、实现任务异常自动邮件告警" class="headerlink" title="六、实现任务异常自动邮件告警"></a>六、实现任务异常自动邮件告警</h2><p>虽然可以通过界面来监控了，但是我们想要得更多，人不可能天天盯着界面看吧，如果能实现任务执行失败就自动发邮件告警就好了。这个Celery当然也是没有问题的。<br>通过钩子程序在异常的时候触发邮件通知。</p><h3 id="1、加入钩子程序"><a href="#1、加入钩子程序" class="headerlink" title="1、加入钩子程序"></a>1、加入钩子程序</h3><p>对tasks.py的改造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Task</span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHookTask</span><span class="params">(Task)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_success</span><span class="params">(self, retval, task_id, args, kwargs)</span>:</span></span><br><span class="line">        info=<span class="string">f'任务成功-- 0task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , successful !'</span></span><br><span class="line">        logger.info(info)</span><br><span class="line">        send_mail(<span class="string">'celery任务监控'</span>, info, <span class="string">'sendmail@qq.com'</span>, [<span class="string">'tomail@qq.com'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_failure</span><span class="params">(self, exc, task_id, args, kwargs, einfo)</span>:</span></span><br><span class="line">        info=<span class="string">f'任务失败-- task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , failed ! erros: <span class="subst">&#123;exc&#125;</span>'</span></span><br><span class="line">        logger.info(info)</span><br><span class="line">        send_mail(<span class="string">'celery任务监控异常'</span>, info, <span class="string">'sendmail@qq.com'</span>, [<span class="string">'tomail@qq.com'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_retry</span><span class="params">(self, exc, task_id, args, kwargs, einfo)</span>:</span></span><br><span class="line">        logger.info(<span class="string">f'task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , retry !  erros: <span class="subst">&#123;exc&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task(base=MyHookTask, bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">(self,x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(x)):</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        logger.info(<span class="string">'this is task1 '</span>+str(i))</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scheduletask1</span><span class="params">()</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    logger.info(<span class="string">'this is scheduletask '</span>+now.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aed81f9565e0408c8669f2c0291f80b5.png" alt="在这里插入图片描述"></p><h3 id="2、重启服务"><a href="#2、重启服务" class="headerlink" title="2、重启服务"></a>2、重启服务</h3><p>将work和beta服务关掉，在两个控制台分别重新启动woker和beta</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="3、验证效果"><a href="#3、验证效果" class="headerlink" title="3、验证效果"></a>3、验证效果</h3><p>在任务成功或失败的时候发邮件通知。<br><img src="https://img-blog.csdnimg.cn/0c9e08e1c6f34f22b2a7cca6747cfe37.png" alt="在这里插入图片描述"></p><p>任务执行成功通知<br><img src="https://img-blog.csdnimg.cn/3572a9741e5d4ced9571e78adfcbfd7e.png" alt="在这里插入图片描述"></p><p>任务执行异常告警通知<br><img src="https://img-blog.csdnimg.cn/71b93b3c246f465688bbfcdc89b2b850.png" alt="在这里插入图片描述"></p><p>Django如何发送邮件见 <a href="https://blog.csdn.net/fullbug/article/details/128495415" target="_blank" rel="noopener">https://blog.csdn.net/fullbug/article/details/128495415</a></p><p>至此，本文通过几个简单的应用介绍了Django+Celery+Flower实现异步和定时任务及其监控告警。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用Django框架进行web开发非常的快捷方便，但Django框架请求/响应是同步的。但我们在实际项目中经常会碰到一些耗时的不能立即返回请求结果任务如：数据爬取、发邮件等，如果常时间等待对用户体验不是很好，在这种情况下就需要实现异步实现，马上返回响应请求，但真正的耗时任务在
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>通过Django发送邮件</title>
    <link href="https://xiejava.gitee.io/posts/73474fe7/"/>
    <id>https://xiejava.gitee.io/posts/73474fe7/</id>
    <published>2022-12-30T06:57:46.000Z</published>
    <updated>2022-12-30T07:06:58.893Z</updated>
    
    <content type="html"><![CDATA[<p>通过Django发送邮件非常的简单，在Python中已经内置了一个smtplib邮件发送模块，Django在此基础上进行了简单地封装，我们可以在Django的环境中方便的发送邮件。大部分邮件发送成功主要是邮件的参数配置，本文以常用的126邮箱和QQ邮箱为例介绍Django发送邮件的配置，其他提供smtp邮件服务的邮箱都是一样的。</p><h2 id="一、Django邮件配置"><a href="#一、Django邮件配置" class="headerlink" title="一、Django邮件配置"></a>一、Django邮件配置</h2><p>用Django发送邮件需要告诉你的邮件服务器相应的参数配置，需要在settings.py中进行配置好。<br>默认情况下，使用配置文件中的<code>EMAIL_HOST</code>和<code>EMAIL_PORT</code>设置SMTP服务器主机和端口，<code>EMAIL_HOST_USER</code>和<br><code>EMAIL_HOST_PASSWORD</code>是用户名和密码。如果设置了EMAIL_USE_TLS和EMAIL_USE_SSL，它们将控制是否使用相应的加密链接。<br>典型的配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.126.com'</span>      <span class="comment">#126邮箱的邮箱服务地址</span></span><br><span class="line">EMAIL_PORT = <span class="number">25</span>          <span class="comment">#端口，大部分都是默认25</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'yourmail@126.com'</span>    <span class="comment">#这里是你的邮箱账号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'yourpassword'</span>   <span class="comment">#注意这里不能用你邮箱账号的密码，而要用申请的设备授权码。</span></span><br></pre></td></tr></table></figure><p>这里要注意的两个地方，一个是EMAIL_PORT端口、一个是EMAIL_HOST_PASSWORD密码。<br>端口一般默认是25，但有些邮箱改了默认端口或需要用加密链接465、578端口，可以从邮件服务商查到。<br>密码以前可以用邮箱账号密码，但这几年随着安全要求的提高，大部分主要的邮件服务提供商都要用申请的授权码进一步加强安全系数。<br>这里介绍这些关键的信息如何在邮件服务商获取。</p><blockquote><p> <code>注意EMAIL_HOST_PASSWORD这里不能用你邮箱账号的密码，而要用申请的设备授权码。</code></p></blockquote><h3 id="126邮箱"><a href="#126邮箱" class="headerlink" title="126邮箱"></a>126邮箱</h3><p>进入到邮箱配置界面，点击“POP3/SMTP/IMAP”，注意要开启SMTP。<br><img src="https://img-blog.csdnimg.cn/01e56aa8fcd4445d83f7d4363176c4d4.png" alt="126邮箱配置界面"></p><p>授权码是用于登录第三方邮件客户端的专用密码，点击”新增授权密码”，降会弹出一个账号安全验证，扫描后可以快速的发短信。<br><img src="https://img-blog.csdnimg.cn/e832aa92deae43348df02688c1df1a38.png" alt="账号安全验证界面"></p><p>用你的注册手机发完短信后点击”我已发送”就会弹出一个授权码的窗口，要把这个授权码记下来，这个窗口只显示一次。<br><img src="https://img-blog.csdnimg.cn/c7b70b42ca7f4dcb9f5c7cfbc175e642.png" alt="授权码显示界面"></p><h3 id="QQ邮箱"><a href="#QQ邮箱" class="headerlink" title="QQ邮箱"></a>QQ邮箱</h3><p>进入到QQ邮箱WEB界面后点击“设置”，点击“邮件设置”的“账户”页签拉到“账户安全”处就可以看到相关的SMTP服务信息</p><p><img src="https://img-blog.csdnimg.cn/0930d68e01c8495fa3c61882e941793b.png" alt="QQ邮箱配置界面"></p><p>点击“生成授权码”，将弹出验证密保的界面。<br><img src="https://img-blog.csdnimg.cn/70d5db3bcfee4daf8bb8fb199f8093fd.png" alt="验证密保界面"><br>根据提示发送短信后，点击我已发送，将会弹出生成授权码的界面显示授权码。<br><img src="https://img-blog.csdnimg.cn/a1779932a52544ee80fd34074eb57faf.png" alt="授权码生成界面"></p><p>如果需要SSL加密方式，可以进一步查看服务商的SMTP服务说明<br>如QQ邮箱的服务说明 <a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331" target="_blank" rel="noopener">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331</a><br><img src="https://img-blog.csdnimg.cn/a8a2c3710e6844cdb132a2e29a064568.png" alt="服务说明界面"></p><p>看到使用SSL，端口号是465或587</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.qq.com'</span>  <span class="comment">#QQ邮箱的smtp服务器</span></span><br><span class="line">EMAIL_PORT = <span class="number">465</span>           <span class="comment">#端口为465或587</span></span><br><span class="line">EMAIL_USE_SSL = <span class="literal">True</span>    <span class="comment">#SSL加密方式设置为True</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'yourmail@qq.com'</span>     <span class="comment">#这里是你的邮箱账号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'yourpassword'</span>   <span class="comment">#注意这里不能用你邮箱账号的密码，而要用申请的设备授权码。</span></span><br></pre></td></tr></table></figure><h2 id="二、测试发送邮件"><a href="#二、测试发送邮件" class="headerlink" title="二、测试发送邮件"></a>二、测试发送邮件</h2><p>可以用django的环境在shell中测试。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line">from django.core.mail import send_mail</span><br><span class="line">send_mail(<span class="string">'test'</span>,<span class="string">'this is test mail'</span>,<span class="string">'yourmail@qq.com'</span>,[<span class="string">'yourmail@126.com'</span>,<span class="string">'yormail@qq.com'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/85b59a9da2ad450793807d3e4260e8f6.png" alt="在这里插入图片描述"></p><p>如果反回1就表示发送成功了, 查收邮件到达。</p><p>如果发送不成功，请仔细核对邮箱服务的相关配置，一般来说与django无关。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过Django发送邮件非常的简单，在Python中已经内置了一个smtplib邮件发送模块，Django在此基础上进行了简单地封装，我们可以在Django的环境中方便的发送邮件。大部分邮件发送成功主要是邮件的参数配置，本文以常用的126邮箱和QQ邮箱为例介绍Django发
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Django" scheme="https://xiejava.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>安全托管与重保安全服务</title>
    <link href="https://xiejava.gitee.io/posts/5381000/"/>
    <id>https://xiejava.gitee.io/posts/5381000/</id>
    <published>2022-12-28T06:48:37.000Z</published>
    <updated>2022-12-28T06:51:52.682Z</updated>
    
    <content type="html"><![CDATA[<p>近年来，高新技术数字经济快速发展，数字化转型成为各个行业高质量发展的重要引擎和创新路径。网络安全作为数字化建设的安全基石，却面临着网络安全人才缺口不断攀升的直接挑战。各安全公司依托自己网络安全经验的人才优势向客户提供各类安全服务，最常见的就是安全托管和重保安全。</p><p>安全托管服务与重保安全服务都是为客户提供安全服务，这两者有啥区别呢？</p><h2 id="一、安全托管服务"><a href="#一、安全托管服务" class="headerlink" title="一、安全托管服务"></a>一、安全托管服务</h2><p><strong>安全托管服务（Managed Security Service，MSS）</strong>，是由Gartner于2011年提出，简单来讲，即网络安全厂商通过自身的安全运营服务，包括人员、工具、平台等，为其用户提供7*24小时的安全托管服务。MSS安全托管服务最直接的目的，就是解决用户自身安全能力不足的问题，将专业的事情交给专业的人来做。说白了其实就是企业将自身的安全运营外包给有能力的安全厂商，解决自身安全运营能力不足的问题。</p><h2 id="二、重保安全服务"><a href="#二、重保安全服务" class="headerlink" title="二、重保安全服务"></a>二、重保安全服务</h2><p><strong>重保安全服务（Cybersecurity in Important Period, CIP）</strong>，是指在特殊时期（如HVV等）、重要活动（如两会等）、重大节日（如国庆等）期间为用户构建全方面的重要敏感时期的安全保障服务。保障网络基础设施、重点网站和业务系统安全，提供全方位的安全防守建设咨询以及事前、事中、事后的全面安全建设托管服务，确保企业客户的业务系统能够在重大活动期间安全平稳运行。</p><h2 id="三、安全托管服务与重保安全服务的区别"><a href="#三、安全托管服务与重保安全服务的区别" class="headerlink" title="三、安全托管服务与重保安全服务的区别"></a>三、安全托管服务与重保安全服务的区别</h2><p>从安全托管服务与重保安全服务的概念和定义上，个人理解安全托管服务与重保安全服务还是有所区别的。</p><p>一般来说，<strong>安全托管服务(MSS)服务侧重于管理和运营</strong>，以保障企业IT业务稳定运行为目的，主要是日常的安全运营。而<strong>重保安全更接近实战化</strong>主要侧重于重保期间的防护值守，有重点的企业客户的业务系统能够在重大活动期间安全平稳运行。</p><p>拿平时我们见到社会安保来类比，日常安全运营就是我们平时看到的日常治安巡逻；重保就是比如国庆期间、两会其间有针对性的加大安保防范力度如特警武装上岗执勤、某些重要场所限制人流、加强舆情监控等必要的防控手段。</p><ul><li><strong>从具体的服务内容来看：</strong></li></ul><p>安全托管服务主要是日常安全运营相关的内容如：资产的定期梳理、暴露面的检测、定期的漏扫、漏扫后的安全加固整改、安全监测、事件协助处置、安全策略定期优化等。</p><p>重保安全服务主要是针对重保时期有重点的安全保障更贴近实战化如：准备阶段的资产清查、暴露面识别、暴露面收敛等；重保初期的重点系统（或靶标系统）专项加固、情报收集、攻击阻断演练等；重保阶段的安全事件分析、响应处置、溯源反制、防守报告等。</p><ul><li><strong>从人员配置来看：</strong></li></ul><p>重保安全服务的人员配置不管是从人员数量还是个人网络安全专业水平来看都要比安全托管服务的高。一般来说重保安全服务的核心人员都会要求有攻防对抗能力。可以想像一下普通安保人员与武装特警的区别。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近年来，高新技术数字经济快速发展，数字化转型成为各个行业高质量发展的重要引擎和创新路径。网络安全作为数字化建设的安全基石，却面临着网络安全人才缺口不断攀升的直接挑战。各安全公司依托自己网络安全经验的人才优势向客户提供各类安全服务，最常见的就是安全托管和重保安全。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>认识XDR-扩展威胁检测与响应平台</title>
    <link href="https://xiejava.gitee.io/posts/160ef42d/"/>
    <id>https://xiejava.gitee.io/posts/160ef42d/</id>
    <published>2022-10-13T11:30:54.000Z</published>
    <updated>2022-10-13T11:37:12.680Z</updated>
    
    <content type="html"><![CDATA[<p>近年安全圈XDR的概念非常火，是近几年热点的安全技术之一，究竟什么是XDR，XDR核心能力是什么？能够解决什么问题，XDR与EDR、NDR关系和区别又是什么？让我们带着这些问题一起来认识一下XDR。</p><h1 id="一、什么是XDR"><a href="#一、什么是XDR" class="headerlink" title="一、什么是XDR"></a>一、什么是XDR</h1><p>XDR 于 2018 年由 Palo Alto 首席技术官 Nir Zuk 提出，2020-2021 年连续入选 Gartner 端点安全、安全运营技术成熟度曲线，目前处于创新启动期。</p><p>XDR全名是<strong>Extended Detection and Response（扩展检测和响应）</strong>，因为缩写与EDR重名了，所以就取了Extended第二个字母X，缩成了XDR。</p><p>Gartner给出的XDR定义为：XDR是一种基于SaaS的、绑定于特定供应商的安全威胁检测和事件响应工具，它将多个安全产品集成到一个统一了所有许可安全组件的内聚安全运营系统中。</p><p>通常情况下，可以认为XDR是一个融合了多种安全检测、响应能力的平台框架，只要是为了解决威胁检测与响应的问题能力模块，都可以往里装。它需要将多个安全产品能力有机的结合在一起，有统一的数据格式、策略、交互界面。相对于EDR（端点的检测与响应）和NDR（网络的检测与响应）来说，特别的强调X的概念，也就是可以扩展（Extended）的检测与响应。这里X覆盖了云、网、端、威胁情报等，EDR和NDR及其他的检测设备都可以作为XDR的能力模块为XDR提供数据来源和检测手段。</p><h1 id="二、XDR解决什么问题"><a href="#二、XDR解决什么问题" class="headerlink" title="二、XDR解决什么问题"></a>二、XDR解决什么问题</h1><p>近期， Gartner正式发布了2022安全运营技术成熟度曲线（Hype Cycle），正如大家所预测的那样，XDR终于站上了Peak of Inflated Expectations的顶端，成为安全运营体系中最炙手可热的技术之一，具体如下图所示：<br><img src="https://img-blog.csdnimg.cn/8267fb595e88455ea6d478b3ea5baa46.png#pic_center" alt="2022安全运营技术成熟度曲线"></p><p>那么在企业安全运营过程中究竟有什么困惑，XDR又能解决什么问题呢？</p><h2 id="1、安全运营的困惑"><a href="#1、安全运营的困惑" class="headerlink" title="1、安全运营的困惑"></a>1、安全运营的困惑</h2><ul><li><strong>单兵作战/数据孤岛</strong></li></ul><p>企业虽然有了SIEM/SOC等日志类数据分析平台，或是IDS、IPS、WAF、防火墙、EDR等单点安全设备，但前者无法理解下游检测设备告警，数据多而不准，安全误报多；后者获取的数据又有限，不同设备数据还无法紧密集成，最后变成了真实风险看不到，出现威胁防不了。</p><ul><li><strong>告警疲劳，误报多</strong></li></ul><p>安全人员每天都会收到来自不同安全设备的上万条威胁告警，而头疼的是，绝大多数（90%以上）都并非真实威胁，所以安全人员不是身体在处理误报的路上，就是精神在遭受误报的折磨，压力非常之大。</p><ul><li><strong>全局态势不可见</strong></li></ul><p>企业虽然买了一堆的安全设备，这些设备都产生了相应的告警，但是没有形成统一的全局的安全风险态势，对于安全主管来说要重点防范哪些地方，企业的安全建设还有哪些短板，这些都不可以知不可见。</p><ul><li><strong>响应处置能力弱</strong></li></ul><p>发生网络安全事件以后，无法有效溯源，快速的处置，尤其是多设备的联动处置，大多还停留在手工处置的阶段，处置效率先对比较低，不及时。</p><h2 id="2、XDR的作用"><a href="#2、XDR的作用" class="headerlink" title="2、XDR的作用"></a>2、XDR的作用</h2><p>XDR通过统一的交互框架、统一的数据标准、统一的数据存储方式进行安全数据采集、安全威胁集中分析、安全事件统一处置、响应编排。</p><p>XDR的核心作用在于能够跨越不同数据源与IT架构，集中汇集云、网、端、威胁情报等多源安全数据/工具。通过大数据与人工智能、用户行为分析等智能分析手段，对安全数据/事件进行关联分析，还原攻击路径，达到对整个攻击面的全面可视，解决安全孤岛的问题。基于动态更新的事件库与预置处置场景将产出的告警进行自动化编排与分诊，实现自动化响应。解决安全运营过程中数据孤岛、告警疲劳、全局态势不可见、响应处置能力弱的问题，更重要的是将企业安全运营水平和标准化产品挂钩，而非依赖不稳定的个人技术水平。</p><p><img src="https://img-blog.csdnimg.cn/688c91e5881d4e7bb938d660720fb8b0.png#pic_center" alt="XDR的作用"></p><h1 id="三、XDR与EDR、NDR的区别"><a href="#三、XDR与EDR、NDR的区别" class="headerlink" title="三、XDR与EDR、NDR的区别"></a>三、XDR与EDR、NDR的区别</h1><p>EDR从端点侧做威胁检测，确实能检测到攻击的准确信息，但是端点检测这种方式需要在用户主机上安装检测agent程序，无法覆盖用户所有的资产。并且端点检测的部署成本相比网络检测也更高，对于端点的操作系统、硬件配置、网络情况都有要求。</p><p>NDR从网络侧做威胁检测，检测到的更多都是攻击的特征或者攻击意图，此时攻击很有可能并未真正发生，或者并未造成严重后果。如果全部转化为威胁事件，则会造成告警风暴，给运营带来困难。</p><p>所以EDR的特点是检测的深但是覆盖面窄，而NDR的特点是检测的浅但是覆盖面广。</p><p>XDR则结合了这两者的全部优点，对于重点资产可采用端点检测方式，对于其他资产可采用网络检测方式。XDR平台会将这两种能力检测到的原始事件信息进行自动化关联，最终可将这些疑似的攻击信息，关联分析形成精准的威胁告警事件。</p><h1 id="四、XDR的架构和核心能力"><a href="#四、XDR的架构和核心能力" class="headerlink" title="四、XDR的架构和核心能力"></a>四、XDR的架构和核心能力</h1><h2 id="1、XDR的架构"><a href="#1、XDR的架构" class="headerlink" title="1、XDR的架构"></a>1、XDR的架构</h2><p>因为XDR是一个融合了多种安全检测、响应能力的平台框架，XDR的架构其关键组件包括前端组件（感应器，主要负责数据采集及检测）和后端平台组件（主要负责数据的汇聚、分析、威胁检测、响应处置）</p><p><img src="https://img-blog.csdnimg.cn/12a6d67ea8354eb6ae19c3307dbc5cbd.png#pic_center" alt="XDR的架构"><br>XDR前端组件，由生成安全遥测数据的“触角”（感应器）组成，这些触角包括但不限于EDR（终端检测与响应-Endpoint Detection and Response)、EPP(终端防护平台-Endpoint Protection Platforms)、NDR（流量检测与响应平台-Network Detection and Response)、SSE（安全服务边缘-Security Services Edge)、CWPP(云工作负载安全防护平台-Cloud Workload Protection Platforms)、蜜罐、邮件安全。</p><p>而XDR的后端平台，则是吸收所有关键位置的遥测数据、日志、威胁上下文信息，之后再对所有的数据进行关联、高级分析、从而完成威胁检测、调查分析、攻击溯源、工具编排、自动化响应等工作。</p><p>从整体架构上<strong>XDR可以看成是融合了各安全能力组件（EDR、NDR等）+SDC（安全数据中心）+SIEM/SA（安全信息事件管理/态势感知）+SOAR（安全编排与自动化响应）形成的一个安全运营系统</strong>。</p><h2 id="2、核心能力"><a href="#2、核心能力" class="headerlink" title="2、核心能力"></a>2、核心能力</h2><p>XDR核心能力包括数据集成、检测技术、可视化、编排响应技术。</p><ul><li><strong>安全数据全面集成</strong></li></ul><p>对不同安全设备的数据进行全面的采集包括：内部（资产、脆弱性）、外部（流量、日志）以及云端威胁情报接入等相关安全数据的全面采集，汇聚、分析。</p><ul><li><strong>安全威胁深度检测</strong></li></ul><p>对多源安全告警进行关联分析、规则分析、情报分析、机器学习等，发现潜伏的高级持续性威胁，提升告警检出率和准确率。</p><ul><li><strong>安全态势集中展示</strong></li></ul><p>告警可视、事件可视、攻击可视，从多安全事件、攻击方向、攻击趋势、影响范围等多维度多视角进行态势可视化呈现。</p><ul><li><strong>安全事件快速处置</strong></li></ul><p>通过可视化剧本编排，快速实现人员、流程、工具的有效协同，对接联动安全防护设备，在安全事件发生时自动下发阻断策略，并在必要时下发通知预警，及时完成安全闭环。</p><p>   XDR成熟度模型如下：<br><img src="https://img-blog.csdnimg.cn/3b14d884dc884e3a8f70e6b8811eac81.png#pic_center" alt="XDR成熟度模型"></p><h1 id="五、XDR应用场景"><a href="#五、XDR应用场景" class="headerlink" title="五、XDR应用场景"></a>五、XDR应用场景</h1><p>XDR集中汇集云、网、端、威胁情报等多源安全数据/工具，解决安全运营过程中数据孤岛、告警疲劳、全局态势不可见、响应处置能力弱的问题。可以有效应用于企业常态化安全运营及重保攻防实战对抗场景。</p><p><img src="https://img-blog.csdnimg.cn/4a48e9f6edf546e083b4d1d47ae9725a.png#pic_center" alt="XDR威胁检测联动响应示意图"></p><ul><li><strong>日常安全运营场景</strong></li></ul><p>日常安全运营，通过XDR提升安全运营的威胁检测能力和响应效率。<br>精准响应：更好的检测效果及响应能力，解决原有海量告警导致事件难以有效检测、溯源深度不足导致响应效果差的问题，有效应对攻防对抗加剧带来新的安全风险。<br>风险管理：从被动事件响应转向有计划的风险管理，预防重大安全事件。<br>处置闭环：采用简单有效的方式开展安全分析、管理、处置工作，实现事件处置的有效闭环管控。<br>态势可见：安全态势统一呈现，安全运营有地放矢，哪里不足补哪里。</p><ul><li><strong>攻防实战对抗场景</strong></li></ul><p>攻防实战，通过XDR实现异构可扩展的威胁检测响应能力，进行快速响应、加固优化安全措施、攻击反制。<br>检测深度：更精准的高级威胁检测和安全事件溯源能力。<br>检测广度：拥有丰富的数据，包括事件完整的上下文信息、原始报文等供客户深度挖掘；全方位的的威胁数据采集，全面的威胁检测分析，全局的态势呈现。<br>敏捷响应：可进行快速响应、加固优化安全措施、攻击反制。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近年安全圈XDR的概念非常火，是近几年热点的安全技术之一，究竟什么是XDR，XDR核心能力是什么？能够解决什么问题，XDR与EDR、NDR关系和区别又是什么？让我们带着这些问题一起来认识一下XDR。&lt;/p&gt;
&lt;h1 id=&quot;一、什么是XDR&quot;&gt;&lt;a href=&quot;#一、什么是
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Django自定义manage.py命令实现hexo博客迁移</title>
    <link href="https://xiejava.gitee.io/posts/32650d1c/"/>
    <id>https://xiejava.gitee.io/posts/32650d1c/</id>
    <published>2022-07-27T08:39:24.000Z</published>
    <updated>2022-07-27T09:07:02.433Z</updated>
    
    <content type="html"><![CDATA[<p>实现了hexo的md文件格式解析，通过什么方式怎么来迁移hexo的博客到django的博客呢？开始想到的是通过Django的manage.py的shell命令，通过shell可以执行写好的python脚本进行hexo的md文件格式解析并入库。后来想想为啥不直接自定义一个manage.py的命令直接进行迁移呢？就如我们新建Django工程迁移数据库一样，执行python manage.py migrate来迁移数据库。我们可以定义python manage.py xxx来执行的迁移hexo博客。</p><p>自定义Django-admin命令分三步：创建management文件夹、编写命令代码、测试验证</p><h2 id="一、创建management文件夹"><a href="#一、创建management文件夹" class="headerlink" title="一、创建management文件夹"></a>一、创建management文件夹</h2><p>自定义的Django-admin管理命令本质上是一个python脚本文件，它的存放路径必须遵循一定的规范，一般位于app/management/commands目录。整个文件夹的布局如下所示：<br><code>注意app要在setting中注册</code><br>在blog/management/commands包下面创建transblog.py文件<br><img src="https://img-blog.csdnimg.cn/1d10e4be2b5646d2bb3fc10642dc7b7b.png#pic_center" alt="在这里插入图片描述"></p><p>这里有两个要注意的地方:</p><blockquote><p>1、app要在setting中注册。如blog在setting中注册了所以可以在blog/management/commands包下面创建transblog.py文件，api和common都没有在setting中注册所以在这两个目录下创建的不会作为管理命令生效。<br>2、创建的management/commands是Python包，不是单纯的目录，区别就是目录里必须有<strong>init</strong>.py文件，空文件都可以。</p></blockquote><h2 id="二、编写命令代码"><a href="#二、编写命令代码" class="headerlink" title="二、编写命令代码"></a>二、编写命令代码</h2><p>创建命令管理文件后就可以在该文件中编写命令代码了。<br>每一个自定义的管理命令本质是一个Command类, 它继承了Django的Basecommand或其子类, 主要通过重写handle()方法实现自己的业务逻辑代码，而add_arguments()则用于帮助处理命令行的参数，如果运行命令时不需要额外参数，可以不写这个方法。<br>transblog.py的参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    :author: XieJava</span></span><br><span class="line"><span class="string">    :url: http://ishareread.com</span></span><br><span class="line"><span class="string">    :copyright: © 2021 XieJava &lt;xiejava@ishareread.com&gt;</span></span><br><span class="line"><span class="string">    :license: MIT, see LICENSE for more details.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost,BlogCategory,Tag</span><br><span class="line"><span class="keyword">from</span> utils.parseblog <span class="keyword">import</span> parseblog</span><br><span class="line"><span class="keyword">from</span> django.core.management.base <span class="keyword">import</span> BaseCommand</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">    help=<span class="string">'读取指定目录的.md文件解析至ishareblog'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_arguments</span><span class="params">(self, parser)</span>:</span></span><br><span class="line">        parser.add_argument(<span class="string">'--path'</span>,help=<span class="string">'输入.md文件的目录'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'--file'</span>,help=<span class="string">'输入.md文件的路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        inputfile = input(<span class="string">'请输入指定的目录路径或.md文件路径:'</span>)</span><br><span class="line">        <span class="keyword">if</span> inputfile.find(<span class="string">'.md'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">            self.transblogbyfile(inputfile)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.transblogbypath(inputfile)</span><br><span class="line">        <span class="keyword">if</span> options[<span class="string">'path'</span>]:</span><br><span class="line">            self.transblogbypath(options[<span class="string">'path'</span>])</span><br><span class="line">        <span class="keyword">if</span> options[<span class="string">'file'</span>]:</span><br><span class="line">            self.transblogbyfile(options[<span class="string">'file'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="string">'''读取目录解析md文件并写入数据库'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transblogbypath</span><span class="params">(self,filepath=<span class="string">''</span>,)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            files = os.listdir(filepath)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file.find(<span class="string">'.md'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                    blog_file = os.path.join(filepath, file)</span><br><span class="line">                    self.transblogbyfile(blog_file)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'请确认输入是否正确。'</span>,e)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''读取md文件入库'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transblogbyfile</span><span class="params">(self,blogfile=<span class="string">''</span>)</span>:</span></span><br><span class="line">        blog_info = parseblog(blogfile)</span><br><span class="line">        filename=os.path.basename(blogfile)</span><br><span class="line">        <span class="comment">#判断是否存在相同的title</span></span><br><span class="line">        qs=BlogPost.objects.filter(title=blog_info[<span class="string">'title'</span>])</span><br><span class="line">        <span class="keyword">if</span> len(qs)==<span class="number">0</span>:</span><br><span class="line">            category = <span class="literal">None</span></span><br><span class="line">            tag_objs = []</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'categories'</span> <span class="keyword">in</span> blog_info:</span><br><span class="line">                categories=blog_info[<span class="string">'categories'</span>]</span><br><span class="line">                <span class="keyword">if</span> len(categories)&gt;<span class="number">0</span>:</span><br><span class="line">                    category_title = categories[<span class="number">0</span>]</span><br><span class="line">                    category_qs=BlogCategory.objects.filter(title=category_title)</span><br><span class="line">                    <span class="keyword">if</span> len(category_qs)&gt;<span class="number">0</span>:</span><br><span class="line">                        category=category_qs[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'tags'</span> <span class="keyword">in</span> blog_info:</span><br><span class="line">                tags=blog_info[<span class="string">'tags'</span>]</span><br><span class="line">                <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">                    tag_obj,b=Tag.objects.get_or_create(tag=tag)</span><br><span class="line">                    print(tag_obj.id)</span><br><span class="line">                    tag_objs.append(tag_obj)</span><br><span class="line">            blog = BlogPost()</span><br><span class="line">            blog.title = blog_info[<span class="string">'title'</span>]</span><br><span class="line">            blog.content = blog_info[<span class="string">'content'</span>]</span><br><span class="line">            blog.isShow = <span class="number">1</span> <span class="comment">#默认显示</span></span><br><span class="line">            blog.summary=blog.content[<span class="number">0</span>:<span class="number">200</span>] <span class="comment">#默认提取内容的前200个字作为摘要</span></span><br><span class="line">            blog.category=category</span><br><span class="line">            blog.blogSource = filename</span><br><span class="line">            blog.pubTime=blog_info[<span class="string">'date'</span>]</span><br><span class="line">            blog.save()</span><br><span class="line">            <span class="keyword">if</span> len(tag_objs)&gt;<span class="number">0</span>:</span><br><span class="line">                blog.tags.add(*tag_objs)</span><br><span class="line">            print(filename + <span class="string">'读取解析入库成功！'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(blog_info[<span class="string">'title'</span>]+<span class="string">'已经存在！'</span>)</span><br></pre></td></tr></table></figure><p>代码很简单，就是根据读取命令行的参数，这个参数就是需要迁移hexo的.md文件的目录或文件路径，读取目录或文件路径进行文件的解析，并写入到数据库。<br>.md文件的解析参考:<a href="https://blog.csdn.net/fullbug/article/details/126007706" target="_blank" rel="noopener">Python二十行代码实现hexo的md文件格式解析</a></p><h2 id="三、测试验证"><a href="#三、测试验证" class="headerlink" title="三、测试验证"></a>三、测试验证</h2><p>命令代码写完后就可以进行测试了。<br>在命令行输入<code>python manage.py</code> 可以看到自定义的transblog已经加入到管理命令了<br><img src="https://img-blog.csdnimg.cn/0b77c9bace944cb5a771ac4da6bb2fa2.png#pic_center" alt="transblog已经加入到管理命令"></p><p>输入 <code>python manage.py transblog -h</code><br>会提示命令的参数和用法：<br><img src="https://img-blog.csdnimg.cn/589f23f74da647888b9a2607b68fcd64.png#pic_center" alt="管理命令帮助"></p><p>如执行 <code>python manage.py transblog</code> 会提示”请输入指定的目录路径或.md文件路径:”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) PS D:\Python\study\pythonproject\ishareblog\ishareblog&gt; python manage.py transblog</span><br><span class="line">请输入指定的目录路径或.md文件路径:</span><br></pre></td></tr></table></figure><p>我们输入需要迁移的.md文件或路径<br>如：E:\CloudStation\personal\xiejavablog\myhexo\myblog\source_posts\2022-07-27-Python二十行代码实现hexo的md文件格式解析.md<br>不出意外的情况下控制台会打印“XXXX.md读取解析入库成功！”的信息<br><img src="https://img-blog.csdnimg.cn/93af5466f7f0497285dfa3852b527e39.png#pic_center" alt="执行效果"></p><p>访问博客，可以看到文章已经迁移过来了<br><img src="https://img-blog.csdnimg.cn/e558541002124378bd43b67b5390dfa8.png#pic_center" alt="执行效果"><br>全部代码仓库：<a href="https://gitee.com/ishareblog/ishareblog" target="_blank" rel="noopener">https://gitee.com/ishareblog/ishareblog</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现了hexo的md文件格式解析，通过什么方式怎么来迁移hexo的博客到django的博客呢？开始想到的是通过Django的manage.py的shell命令，通过shell可以执行写好的python脚本进行hexo的md文件格式解析并入库。后来想想为啥不直接自定义一个ma
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="https://xiejava.gitee.io/tags/Hexo/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python二十行代码实现hexo的md文件格式解析</title>
    <link href="https://xiejava.gitee.io/posts/f47f6214/"/>
    <id>https://xiejava.gitee.io/posts/f47f6214/</id>
    <published>2022-07-27T01:41:35.000Z</published>
    <updated>2022-07-27T09:08:31.732Z</updated>
    
    <content type="html"><![CDATA[<p>最近用django+Vue实现了一个博客应用，原来的hexo的博客用着也挺好，想继续留着用，于是就想将hexo生成的.md的博客内容文件解析后直接写到django的博客数据库里做同步显示。</p><p>hexo生成的.md文件内容主要分两部分，一部分是博客的信息、一部分是博客内容，博客信息包括标题、目录、标签、发布日期等，博客内容就是具体博客写的内容主体了。<br><img src="https://img-blog.csdnimg.cn/855e166cf7454b24b89f03c05c5f57b1.png#pic_center" alt="hexo生成的.md文件内容"></p><p>其中博客信息通过”—“来区分，夹在两个”—“块之间。博客的信息是yaml来描叙的需要解析并提取出相应的字段及内容，博客内容就更简单了直接是markdown描叙的不需要再解析了。<br>这里要做的事情就是提取两个”—“符号之间的内容，并解析相应的字段，提取两个”—“符号后面的内容作为博客的内容，形成字典，便于后面的入库。</p><p>代码示例如下：<br>yaml的解析可以直接用Python的PyYAML库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyYAML</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    :author: XieJava</span></span><br><span class="line"><span class="string">    :url: http://ishareread.com</span></span><br><span class="line"><span class="string">    :copyright: © 2021 XieJava &lt;xiejava@ishareread.com&gt;</span></span><br><span class="line"><span class="string">    :license: MIT, see LICENSE for more details.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="string">'''将md文件转成blog对象'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseblog</span><span class="params">(blog_md_file)</span>:</span></span><br><span class="line">    <span class="comment">#读md文件</span></span><br><span class="line">    md_f = open(blog_md_file, <span class="string">"r"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    md_f_str=md_f.read()</span><br><span class="line">    <span class="comment">#解析两个---之间的内容</span></span><br><span class="line">    pattern=<span class="string">'---'</span></span><br><span class="line">    blog_data=&#123;&#125;</span><br><span class="line">    pattern_list=list(pattern_search(md_f_str, pattern))</span><br><span class="line">    <span class="keyword">if</span> len(pattern_list)&gt;=<span class="number">2</span>:</span><br><span class="line">        blog_info_str=md_f_str[pattern_list[<span class="number">0</span>]+len(pattern):pattern_list[<span class="number">1</span>]]</span><br><span class="line">        blog_data=yaml.load(blog_info_str,Loader=yaml.SafeLoader)</span><br><span class="line">        blog_data[<span class="string">'content'</span>]=md_f_str[pattern_list[<span class="number">1</span>]+len(pattern):]</span><br><span class="line">    md_f.close()</span><br><span class="line">    <span class="keyword">return</span> blog_data</span><br><span class="line"></span><br><span class="line"><span class="string">'''分割符号匹配检索'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pattern_search</span><span class="params">(string,pattern)</span>:</span></span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index&lt;len(string)-len(pattern):</span><br><span class="line">        index=string.find(pattern,index,len(string))</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">yield</span> index</span><br><span class="line">        index+=len(pattern)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    blog_data=parseblog(<span class="string">'E:\\CloudStation\\personal\\xiejavablog\\myhexo\\myblog\\source\\_posts\\2022-07-19-Vue3解析markdown解析并实现代码高亮显示.md'</span>)</span><br><span class="line">    print(blog_data)</span><br></pre></td></tr></table></figure><p>效果：<br>可以看到hexo的md文件正确解析出来，形成字典。后续可以直接进行入库操作了。<br><img src="https://img-blog.csdnimg.cn/a48c43438d004e2aafbb8e5b21d9bd6a.png#pic_center" alt="解析效果"><br>Python的库还是很丰富实用的，用Python二十行代码就实现hexo的md文件格式解析。</p><p>源代码仓库：<a href="https://gitee.com/ishareblog/ishareblog" target="_blank" rel="noopener">https://gitee.com/ishareblog/ishareblog</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近用django+Vue实现了一个博客应用，原来的hexo的博客用着也挺好，想继续留着用，于是就想将hexo生成的.md的博客内容文件解析后直接写到django的博客数据库里做同步显示。&lt;/p&gt;
&lt;p&gt;hexo生成的.md文件内容主要分两部分，一部分是博客的信息、一部分是
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="https://xiejava.gitee.io/tags/Hexo/"/>
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django+Vue快速实现博客网站</title>
    <link href="https://xiejava.gitee.io/posts/15ee23ea/"/>
    <id>https://xiejava.gitee.io/posts/15ee23ea/</id>
    <published>2022-07-26T09:18:33.000Z</published>
    <updated>2022-07-26T09:20:05.930Z</updated>
    
    <content type="html"><![CDATA[<p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。对于博客网站来说是典型的CMS应用。本文介绍通过Django+Vue的博客模版快速实现一个可用的博客网站。</p><p>这里用的博客模板是Gblog是一款nice的基于 vue 的博客模板。界面简洁轻快，非常适合用作个人博客。<a href="https://gitee.com/fengziy/Gblog" target="_blank" rel="noopener">https://gitee.com/fengziy/Gblog</a> 后台的接口和管理界面就通过Django框架来实现了。</p><p>这里数据库用mysql，接口框架主要用到的是Django的djangorestframework，内容编辑器用的是markdown通过django-mdedior库实现。</p><h2 id="一、依赖库"><a href="#一、依赖库" class="headerlink" title="一、依赖库"></a>一、依赖库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">asgiref==3.5.2</span><br><span class="line">Django==4.0.6</span><br><span class="line">django-cors-headers==3.13.0</span><br><span class="line">django-filter==22.1</span><br><span class="line">django-mdeditor==0.1.20</span><br><span class="line">djangorestframework==3.13.1</span><br><span class="line">mysqlclient==2.1.1</span><br><span class="line">Pillow==9.2.0</span><br><span class="line">pytz==2022.1</span><br><span class="line">sqlparse==0.4.2</span><br><span class="line">tzdata==2022.1</span><br></pre></td></tr></table></figure><h2 id="二、工程目录组织结构"><a href="#二、工程目录组织结构" class="headerlink" title="二、工程目录组织结构"></a>二、工程目录组织结构</h2><p><img src="https://img-blog.csdnimg.cn/a0d4613e40ac45f595f005d186264d74.png#pic_center" alt="工程目录组织结构"></p><h2 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h2><h3 id="1、模型"><a href="#1、模型" class="headerlink" title="1、模型"></a>1、模型</h3><p>模型很简单，根据Gblog前台要显示的内容包括有‘文章分类’、‘文章标签’、‘博客文章’、‘站点信息’、‘社交信息’、‘聚焦’，模型定义分别如下：<br>这里要说明的是因为博客文章内容准备用markdown编写，所以引入了mdeditor <code>from mdeditor.fields import MDTextField</code><br>内容字段<code>content=MDTextField(verbose_name=&#39;内容&#39;)</code><br>模型代码示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> common.basemodel <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> mdeditor.fields <span class="keyword">import</span> MDTextField</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="string">'''文章分类'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategory</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title=models.CharField(max_length=<span class="number">50</span>,verbose_name=<span class="string">'分类名称'</span>,default=<span class="string">''</span>)</span><br><span class="line">    href=models.CharField(max_length=<span class="number">100</span>,verbose_name=<span class="string">'分类路径'</span>,default=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'文章分类'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'文章分类'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''文章标签'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    tag=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标签'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tag</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'标签'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'标签'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''博客文章'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'文章标题'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(BlogCategory, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'文章分类'</span>, on_delete=models.DO_NOTHING)</span><br><span class="line">    isTop=models.BooleanField(default=<span class="literal">False</span>,verbose_name=<span class="string">'是否置顶'</span>)</span><br><span class="line">    isHot=models.BooleanField(default=<span class="literal">False</span>,verbose_name=<span class="string">'是否热门'</span>)</span><br><span class="line">    summary=models.CharField(max_length=<span class="number">500</span>,verbose_name=<span class="string">'内容摘要'</span>,default=<span class="string">''</span>)</span><br><span class="line">    content=MDTextField(verbose_name=<span class="string">'内容'</span>)</span><br><span class="line">    viewsCount= models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"查看数"</span>)</span><br><span class="line">    commentsCount=models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"评论数"</span>)</span><br><span class="line">    tags=models.ManyToManyField(to=Tag, related_name=<span class="string">"tag_post"</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>,verbose_name=<span class="string">"标签"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tag_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">','</span>.join([i.tag <span class="keyword">for</span> i <span class="keyword">in</span> self.tags.all()])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'博客文章'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'博客文章'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''站点信息'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'站点名称'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    avatar=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点图标'</span>)</span><br><span class="line">    slogan=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点标语'</span>)</span><br><span class="line">    domain=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点域名'</span>)</span><br><span class="line">    notice=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点备注'</span>)</span><br><span class="line">    desc=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'站点信息'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'站点信息'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''社交信息'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Social</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    icon=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'图标'</span>)</span><br><span class="line">    color=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'颜色'</span>)</span><br><span class="line">    href=models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'社交信息'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'社交信息'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''聚焦'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Focus</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    img=models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'聚焦'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'聚焦'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''友链'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    siteName=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'友链站点名称'</span>)</span><br><span class="line">    path=models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'地址路径'</span>)</span><br><span class="line">    desc=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.siteName</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'友链'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'友链'</span></span><br></pre></td></tr></table></figure><h3 id="2、admin管理"><a href="#2、admin管理" class="headerlink" title="2、admin管理"></a>2、admin管理</h3><p>实际上只要把模型注册到admin就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="meta">@admin.register(BlogCategory)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategoryAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    admin.site.site_title=<span class="string">"ishareblog后台"</span></span><br><span class="line">    admin.site.site_header=<span class="string">"ishareblog后台"</span></span><br><span class="line">    admin.site.index_title=<span class="string">"ishareblog管理"</span></span><br><span class="line"></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(BlogPost)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'category'</span>,<span class="string">'isTop'</span>,<span class="string">'isHot'</span>]</span><br><span class="line">    search_fields = (<span class="string">'title'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Site)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>,<span class="string">'slogan'</span>,<span class="string">'domain'</span>,<span class="string">'desc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Social)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Focus)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoucusAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'img'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Friend)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoucusAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'siteName'</span>,<span class="string">'path'</span>,<span class="string">'desc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Tag)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>,<span class="string">'tag'</span>]</span><br></pre></td></tr></table></figure><h3 id="3、接口"><a href="#3、接口" class="headerlink" title="3、接口"></a>3、接口</h3><p>前端是Vue模板展示的，所以要为前端Vue提供相应的接口。通过djangorestframework将模型通过restful接口提供是非常easy的。</p><h4 id="1）首先将需要暴露的模型通过序列化类序列化"><a href="#1）首先将需要暴露的模型通过序列化类序列化" class="headerlink" title="1）首先将需要暴露的模型通过序列化类序列化"></a>1）首先将需要暴露的模型通过序列化类序列化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">serializers.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategoryModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model=BlogCategory</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Tag</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    create_time = serializers.DateTimeField(format=<span class="string">"%Y-%m-%d %H:%M:%S"</span>, required=<span class="literal">False</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    update_time = serializers.DateTimeField(format=<span class="string">"%Y-%m-%d %H:%M:%S"</span>, required=<span class="literal">False</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.CharField(max_length=<span class="number">32</span>, source=<span class="string">'category.id'</span>)</span><br><span class="line">    pubTime=update_time</span><br><span class="line">    category=BlogCategoryModelSerializer()</span><br><span class="line">    tags=serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多对多，钩子函数序列化,必须是以get_开头的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_tags</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        tags = obj.tags.all()</span><br><span class="line">        tag = TagModelSerializer(tags, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> tag.data</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model=BlogPost</span><br><span class="line">        fields=<span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Site</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Social</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FocusModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Focus</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Friend</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><h4 id="2）将序列化的对象通过视图类提供接口"><a href="#2）将序列化的对象通过视图类提供接口" class="headerlink" title="2）将序列化的对象通过视图类提供接口"></a>2）将序列化的对象通过视图类提供接口</h4><p>custommodelviewset.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomModelViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#CreateModelMixin-&gt;create</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">201</span>,msg=<span class="string">"OK"</span>, status=status.HTTP_201_CREATED,headers=headers)</span><br><span class="line">    <span class="comment">#ListModelMixin-&gt;list</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#RetrieveModelMixin-&gt;retrieve</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br><span class="line">    <span class="comment">#UpdateModelMixin-&gt;update</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        partial = kwargs.pop(<span class="string">'partial'</span>, <span class="literal">False</span>)</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance, data=request.data, partial=partial)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_update(serializer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> getattr(instance, <span class="string">'_prefetched_objects_cache'</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># If 'prefetch_related' has been applied to a queryset, we need to</span></span><br><span class="line">            <span class="comment"># forcibly invalidate the prefetch cache on the instance.</span></span><br><span class="line">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#DestroyModelMixin-&gt;destroy</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        self.perform_destroy(instance)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=[], code=<span class="number">204</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, status</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</span><br><span class="line"><span class="keyword">from</span> api.myfilter <span class="keyword">import</span> BlogPostFilter</span><br><span class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogCategory, BlogPost,Site,Social,Focus,Friend,Tag</span><br><span class="line"><span class="keyword">from</span> api.mypage <span class="keyword">import</span> MyPage</span><br><span class="line"><span class="keyword">from</span> common.custommodelviewset <span class="keyword">import</span> CustomModelViewSet</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategoryViewset</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = BlogCategory.objects.all()</span><br><span class="line">    serializer_class = BlogCategoryModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogsView</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = BlogPost.objects.order_by(<span class="string">'-isTop'</span>,<span class="string">'-update_time'</span>)</span><br><span class="line">    serializer_class = BlogPostModelSerializer</span><br><span class="line">    pagination_class = MyPage</span><br><span class="line">    filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">    filterset_class = BlogPostFilter</span><br><span class="line">    <span class="comment">#搜索</span></span><br><span class="line">    search_fields=(<span class="string">'title'</span>,)</span><br><span class="line">    <span class="comment">#排序</span></span><br><span class="line">    ordering_fields = (<span class="string">'isTop'</span>, <span class="string">'update_time'</span>)</span><br><span class="line">    <span class="comment">#自定义获取详情接口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self,request,*args, **kwargs)</span>:</span></span><br><span class="line">        instance=self.get_object()</span><br><span class="line">        instance.viewsCount+=<span class="number">1</span></span><br><span class="line">        instance.save()</span><br><span class="line">        serializer=self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data,code=<span class="number">200</span>,msg=<span class="string">"success"</span>,status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteView</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = Site.objects.all()</span><br><span class="line">    serializer_class = SiteModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialView</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = Social.objects.all()</span><br><span class="line">    serializer_class = SocialModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FocusView</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = Focus.objects.all()</span><br><span class="line">    serializer_class = FocusModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Friend.objects.all()</span><br><span class="line">    serializer_class = FriendModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Tag.objects.all()</span><br><span class="line">    serializer_class = TagModelSerializer</span><br></pre></td></tr></table></figure><h4 id="3）通过路由来实现接口地址和视图的绑定和访问"><a href="#3）通过路由来实现接口地址和视图的绑定和访问" class="headerlink" title="3）通过路由来实现接口地址和视图的绑定和访问"></a>3）通过路由来实现接口地址和视图的绑定和访问</h4><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    :author: XieJava</span></span><br><span class="line"><span class="string">    :url: http://ishareread.com</span></span><br><span class="line"><span class="string">    :copyright: © 2021 XieJava &lt;xiejava@ishareread.com&gt;</span></span><br><span class="line"><span class="string">    :license: MIT, see LICENSE for more details.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">blogcategory_list=views.BlogCategoryViewset.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">blogcategory_detail=views.BlogCategoryViewset.as_view(&#123; <span class="string">'get'</span>: <span class="string">'retrieve'</span>,&#125;)</span><br><span class="line">blog_list=views.BlogsView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">blog_detail=views.BlogsView.as_view(&#123; <span class="string">'get'</span>: <span class="string">'retrieve'</span>,&#125;)</span><br><span class="line">site_list=views.SiteView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">site_detail=views.SiteView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,&#125;)</span><br><span class="line">social_list=views.SocialView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">social_detail=views.SocialView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,&#125;)</span><br><span class="line">focus_list=views.FocusView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">focus_detail=views.FocusView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>&#125;)</span><br><span class="line">friend_list=views.FriendView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">friend_detail=views.FriendView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>&#125;)</span><br><span class="line">tags_list=views.TagView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line"><span class="comment"># router=DefaultRouter()</span></span><br><span class="line"><span class="comment"># router.register('blogs',views.BlogsView)</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'category/'</span>,blogcategory_list),</span><br><span class="line">    path(<span class="string">'category/&lt;pk&gt;/'</span>,blogcategory_detail),</span><br><span class="line">    path(<span class="string">'post/list'</span>,blog_list),</span><br><span class="line">    path(<span class="string">'post/&lt;pk&gt;'</span>,blog_detail),</span><br><span class="line">    path(<span class="string">'social/'</span>,social_list),</span><br><span class="line">    path(<span class="string">'site/&lt;pk&gt;'</span>,site_detail),</span><br><span class="line">    path(<span class="string">'focus/list'</span>,focus_list),</span><br><span class="line">    path(<span class="string">'comment/'</span>,blog_list),</span><br><span class="line">    path(<span class="string">'friend/'</span>,friend_list),</span><br><span class="line">    path(<span class="string">'tags/'</span>,tags_list),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="4）自定义接口返回格式"><a href="#4）自定义接口返回格式" class="headerlink" title="4）自定义接口返回格式"></a>4）自定义接口返回格式</h4><p>接口需要根据Glog定义的格式进行定义和返回，这里就需要自定义接口返回格式。<br>具体实现参见：<a href="https://xiejava.blog.csdn.net/article/details/125773730" target="_blank" rel="noopener">https://xiejava.blog.csdn.net/article/details/125773730</a><br>–自定义返回响应类customresponse.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomResponse</span><span class="params">(Response)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,data=None,code=None,msg=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 status=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 template_name=None, headers=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 exception=False, content_type=None,**kwargs)</span>:</span></span><br><span class="line">        super().__init__(<span class="literal">None</span>, status=status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(data, Serializer):</span><br><span class="line">            msg = (</span><br><span class="line">                <span class="string">'You passed a Serializer instance as data, but '</span></span><br><span class="line">                <span class="string">'probably meant to pass serialized `.data` or '</span></span><br><span class="line">                <span class="string">'`.error`. representation.'</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> AssertionError(msg)</span><br><span class="line">        self.data=&#123;<span class="string">'code'</span>:code,<span class="string">'msg'</span>:msg,<span class="string">'data'</span>:data&#125;</span><br><span class="line">        self.data.update(kwargs)</span><br><span class="line">        self.template_name=template_name</span><br><span class="line">        self.exception=exception</span><br><span class="line">        self.content_type=content_type</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> headers:</span><br><span class="line">            <span class="keyword">for</span> name, value <span class="keyword">in</span> headers.items():</span><br><span class="line">                self[name] = value</span><br></pre></td></tr></table></figure><p>–翻页实现类mypage.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">8</span> <span class="comment">#每页显示数量</span></span><br><span class="line">    max_page_size = <span class="number">50</span> <span class="comment">#每页最大显示数量。</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span> <span class="comment">#每页数量的参数名称</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span>  <span class="comment">#页码的参数名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#自定义分页器的返回参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        ret_data = dict()</span><br><span class="line">        ret_data[<span class="string">'items'</span>] = data</span><br><span class="line">        <span class="comment"># 加入自定义分页信息</span></span><br><span class="line">        ret_data[<span class="string">'total'</span>] = self.page.paginator.count</span><br><span class="line">        ret_data[<span class="string">'hasNextPage'</span>] = self.get_next_link()</span><br><span class="line">        ret_data[<span class="string">'size'</span>] = self.page_size</span><br><span class="line">        ret_data[<span class="string">'page'</span>] = self.page.number</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=ret_data,code=<span class="number">200</span>,msg=<span class="string">"OK"</span>,status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>全部代码：<br>后台代码：<a href="https://gitee.com/xiejava/ishareblog" target="_blank" rel="noopener">https://gitee.com/xiejava/ishareblog</a><br>前台代码：<a href="https://gitee.com/xiejava/Gblog" target="_blank" rel="noopener">https://gitee.com/xiejava/Gblog</a></p><h2 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h2><h3 id="1、后台管理"><a href="#1、后台管理" class="headerlink" title="1、后台管理"></a>1、后台管理</h3><p>管理界面<br><img src="https://img-blog.csdnimg.cn/eb834ee5e4ea4be49e4fa7d4adb2e6db.png#pic_center" alt="管理界面"><br>博客文章列表<br><img src="https://img-blog.csdnimg.cn/6d4ff80a5ec1497f8187f9ea26e326bd.png#pic_center" alt="博客文章列表"><br>文章内容编辑，支持markdown<br><img src="https://img-blog.csdnimg.cn/2467bec82fd84a2cae47bc4a7f61c5d1.png#pic_center" alt="文章内容编辑，支持markdown"><br>分类管理<br><img src="https://img-blog.csdnimg.cn/7421334028a3408bb79991c72daebcfc.png#pic_center" alt="文章分类"><br>标签管理<br><img src="https://img-blog.csdnimg.cn/6d26689942e04db4ab5302ba3f726668.png#pic_center" alt="标签管理"><br>社交信息<br><img src="https://img-blog.csdnimg.cn/5f2e1ae1071f4061a584f9bdaa6b1ae1.png#pic_center" alt="社交信息"></p><h3 id="2、接口"><a href="#2、接口" class="headerlink" title="2、接口"></a>2、接口</h3><p>接口清单<br><img src="https://img-blog.csdnimg.cn/44b477f4c25e4a29a18921705c1e8bc8.png#pic_center" alt="接口清单"><br>文章列表接口，支持翻页<br><img src="https://img-blog.csdnimg.cn/b066c988f0d44d34a865e29b9fac0553.png#pic_center" alt="文章列表接口"></p><p>文章详情接口<br><img src="https://img-blog.csdnimg.cn/5e15677117454dccad723d163e9b3b26.png#pic_center" alt="文章详情接口"></p><h3 id="3、前台展现"><a href="#3、前台展现" class="headerlink" title="3、前台展现"></a>3、前台展现</h3><p><img src="https://img-blog.csdnimg.cn/2921705f22d7475cb161cc320acca0db.png#pic_center" alt="前台展现"></p><p>文章列表<br><img src="https://img-blog.csdnimg.cn/35d536c30fdf49b4965257895863ea8f.png#pic_center" alt="文章列表"><br>文章详情，支持markdown显示及目录<br><img src="https://img-blog.csdnimg.cn/97b5db037f6f4272bac5a0d70fa67f18.png#pic_center" alt="文章详情"></p><p>社交信息<br><img src="https://img-blog.csdnimg.cn/d143df3884914dbe9a4b866669a58147.png#pic_center" alt="社交信息"></p><p>博客效果地址：<a href="http://blog.ishareread.com" target="_blank" rel="noopener">http://blog.ishareread.com</a></p><p>后续考虑<br>1、django原生admin的管理界面还是简陋了一点，后续可能会用其他管理界面的UI给换掉<br>2、现在有了一个hexo的博客了，后续可能会考虑实现hexo生成的博客内容直接同步到django的博客，或者django博客编辑的内容直接生成hexo的.md文件<br>有兴趣的话可以关注本博客</p><hr><p>博客：<a href="http://xiejava.ishareread.com" target="_blank" rel="noopener">http://xiejava.ishareread.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。对于博客网站来说是典型的CMS应用。本文介绍通过Dja
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3解析markdown解析并实现代码高亮显示</title>
    <link href="https://xiejava.gitee.io/posts/e37e6718/"/>
    <id>https://xiejava.gitee.io/posts/e37e6718/</id>
    <published>2022-07-19T03:07:00.000Z</published>
    <updated>2022-07-19T03:11:20.895Z</updated>
    
    <content type="html"><![CDATA[<p>Vue实现博客前端，需要实现markdown的解析，如果有代码则需要实现代码的高亮。<br>Vue的markdown解析库有很多，如markdown-it、vue-markdown-loader、marked、vue-markdown等。这些库都大同小异。这里选用的是marked，代码高亮的库选用的是highlight.js。</p><p>具体实现步骤如下：</p><h2 id="一、安装依赖库"><a href="#一、安装依赖库" class="headerlink" title="一、安装依赖库"></a>一、安装依赖库</h2><p>在vue项目下打开命令窗口，并输入以下命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install marked -save    <span class="comment">// marked 用于将markdown转换成html</span></span><br><span class="line">npm install highlight.js -save   <span class="comment">//用于代码高亮显示</span></span><br></pre></td></tr></table></figure><p>命令执行完后可以在控制台或package.json文件中看到有安装的版本号<br><img src="https://img-blog.csdnimg.cn/fd7bdbb898a04806928bb4f3e70cf974.png#pic_center" alt="package.json文件中看到有安装的版本号"></p><h2 id="二、在main-js文件中引入highlight-js及样式并创建一个自定义的全局指令"><a href="#二、在main-js文件中引入highlight-js及样式并创建一个自定义的全局指令" class="headerlink" title="二、在main.js文件中引入highlight.js及样式并创建一个自定义的全局指令"></a>二、在main.js文件中引入highlight.js及样式并创建一个自定义的全局指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">'highlight.js'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'highlight.js/styles/atom-one-dark.css'</span> <span class="comment">//样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建v-highlight全局指令</span></span><br><span class="line">Vue.directive(<span class="string">'highlight'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> blocks = el.querySelectorAll(<span class="string">'pre code'</span>);</span><br><span class="line">  blocks.forEach(<span class="function">(<span class="params">block</span>)=&gt;</span>&#123;</span><br><span class="line">    hljs.highlightBlock(block)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就可以在vue组件中使用v-highlight引用代码高亮的方法了。</p><h2 id="三、在Vue组件中应用marked解析及实现代码高亮"><a href="#三、在Vue组件中应用marked解析及实现代码高亮" class="headerlink" title="三、在Vue组件中应用marked解析及实现代码高亮"></a>三、在Vue组件中应用marked解析及实现代码高亮</h2><p>代码示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 正文输出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entry-content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-highlight</span> <span class="attr">v-html</span>=<span class="string">"article"</span>  <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 将marked 引入</span></span><br><span class="line">  <span class="keyword">import</span> &#123; marked &#125;<span class="keyword">from</span> <span class="string">'marked'</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">'articles'</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span>&#123;</span><br><span class="line">              article:<span class="string">''</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          getPostDetail() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'getPostDetail()'</span>+<span class="keyword">this</span>.id)</span><br><span class="line">            fetchPostDetail(<span class="keyword">this</span>.id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">this</span>.postdetail=res.data</span><br><span class="line">               <span class="comment">// 调用marked()方法，将markdown转换成html</span></span><br><span class="line">               <span class="keyword">this</span>.article= marked(<span class="keyword">this</span>.postdetail.content);</span><br><span class="line">               <span class="built_in">console</span>.log(res.data)</span><br><span class="line">              &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(err)</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">          <span class="comment">//调用获取文章内容的接口方法</span></span><br><span class="line">          <span class="keyword">this</span>.getPostDetail()</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、显示效果"><a href="#四、显示效果" class="headerlink" title="四、显示效果"></a>四、显示效果</h2><p>markdown解析及代码高亮显示效果<br><img src="https://img-blog.csdnimg.cn/83cb847638e64e4d97e6c6c2c48344dd.png#pic_center" alt="在这里插入图片描述"></p><p>示例中引用的样式是 <code>import &#39;highlight.js/styles/atom-one-dark.css&#39;</code><br>实际highlight.js/styles中提供了很多样式，可以根据自己的喜好选用。</p><p><img src="https://img-blog.csdnimg.cn/fdbe160b27234608af51d045eb8106be.png#pic_center" alt="代码高亮样式"></p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue实现博客前端，需要实现markdown的解析，如果有代码则需要实现代码的高亮。&lt;br&gt;Vue的markdown解析库有很多，如markdown-it、vue-markdown-loader、marked、vue-markdown等。这些库都大同小异。这里选用的是mar
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Python3.9环境安装mysqlclient报python setup.py egg_info did not run successfully错避坑</title>
    <link href="https://xiejava.gitee.io/posts/7435f815/"/>
    <id>https://xiejava.gitee.io/posts/7435f815/</id>
    <published>2022-07-16T03:07:00.000Z</published>
    <updated>2022-07-19T03:07:48.830Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL是常用的开源数据库，Python环境下django框架连接MySQL数据库用的是mysqlclient库，今天在用pip安装mysqlclient库时报错，特记录一下，避免后续继续踩坑。</p><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><p>操作系统：CentOS Linux 7.2<br>Python版本：Python 3.9.13<br>pip版本：pip 22.1.2</p><h1 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h1><p>执行<code>pip3 install mysqlclient==2.1.1</code> 报错<br>报错信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Using cached http://mirrors.aliyun.com/pypi/packages/50/5f/eac919b88b9df39bbe4a855f136d58f80d191cfea34a3dcf96bf5d8ace0a/mysqlclient-2.1.1.tar.gz (88 kB)</span><br><span class="line">  Preparing metadata (setup.py) ... error</span><br><span class="line">  error: subprocess-exited-with-error</span><br><span class="line">  </span><br><span class="line">  × python setup.py egg_info did not run successfully.</span><br><span class="line">  │ <span class="built_in">exit</span> code: 1</span><br><span class="line">  ╰─&gt; [16 lines of output]</span><br><span class="line">      /bin/sh: mysql_config: <span class="built_in">command</span> not found</span><br><span class="line">      /bin/sh: mariadb_config: <span class="built_in">command</span> not found</span><br><span class="line">      /bin/sh: mysql_config: <span class="built_in">command</span> not found</span><br><span class="line">      Traceback (most recent call last):</span><br><span class="line">        File <span class="string">"&lt;string&gt;"</span>, line 2, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        File <span class="string">"&lt;pip-setuptools-caller&gt;"</span>, line 34, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        File <span class="string">"/tmp/pip-install-i1nt_asj/mysqlclient_1b92535d58cd440b8797686ac8bc9882/setup.py"</span>, line 15, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">          metadata, options = get_config()</span><br><span class="line">        File <span class="string">"/tmp/pip-install-i1nt_asj/mysqlclient_1b92535d58cd440b8797686ac8bc9882/setup_posix.py"</span>, line 70, <span class="keyword">in</span> get_config</span><br><span class="line">          libs = mysql_config(<span class="string">"libs"</span>)</span><br><span class="line">        File <span class="string">"/tmp/pip-install-i1nt_asj/mysqlclient_1b92535d58cd440b8797686ac8bc9882/setup_posix.py"</span>, line 31, <span class="keyword">in</span> mysql_config</span><br><span class="line">          raise OSError(<span class="string">"&#123;&#125; not found"</span>.format(_mysql_config_path))</span><br><span class="line">      OSError: mysql_config not found</span><br><span class="line">      mysql_config --version</span><br><span class="line">      mariadb_config --version</span><br><span class="line">      mysql_config --libs</span><br><span class="line">      [end of output]</span><br><span class="line">  </span><br><span class="line">  note: This error originates from a subprocess, and is likely not a problem with pip.</span><br><span class="line">error: metadata-generation-failed</span><br><span class="line"></span><br><span class="line">× Encountered error <span class="keyword">while</span> generating package metadata.</span><br><span class="line">╰─&gt; See above <span class="keyword">for</span> output.</span><br><span class="line"></span><br><span class="line">note: This is an issue with the package mentioned above, not pip.</span><br><span class="line">hint: See above <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5e642c3acb114075a118e98f710722f8.png#pic_center" alt="mysqlclient报错"></p><h1 id="避坑："><a href="#避坑：" class="headerlink" title="避坑："></a>避坑：</h1><p><strong>从报错信息看是找不到mysql_config</strong><br>通过<code>whereis mysql_config</code>命令查看mysql_config<br>发现mysql_confg没有<br><strong>执行<code>yum install mysql-devel</code> 安装mysql-devel</strong><br>执行whereis mysql_config命令查看mysql_config这时mysql_config有了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_config: /usr/bin/mysql_config /usr/share/man/man1/mysql_config.1.gz</span><br></pre></td></tr></table></figure><p>再次执行pip安装命令安装成功！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pip3 install mysqlclient==2.1.1</span><br><span class="line"></span><br><span class="line">Looking <span class="keyword">in</span> indexes: http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">Collecting mysqlclient==2.1.1</span><br><span class="line">  Using cached http://mirrors.aliyun.com/pypi/packages/50/5f/eac919b88b9df39bbe4a855f136d58f80d191cfea34a3dcf96bf5d8ace0a/mysqlclient-2.1.1.tar.gz (88 kB)</span><br><span class="line">  Preparing metadata (setup.py) ... <span class="keyword">done</span></span><br><span class="line">Using legacy <span class="string">'setup.py install'</span> <span class="keyword">for</span> mysqlclient, since package <span class="string">'wheel'</span> is not installed.</span><br><span class="line">Installing collected packages: mysqlclient</span><br><span class="line">  Running setup.py install <span class="keyword">for</span> mysqlclient ... <span class="keyword">done</span></span><br><span class="line">Successfully installed mysqlclient-2.1.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL是常用的开源数据库，Python环境下django框架连接MySQL数据库用的是mysqlclient库，今天在用pip安装mysqlclient库时报错，特记录一下，避免后续继续踩坑。&lt;/p&gt;
&lt;h1 id=&quot;环境说明：&quot;&gt;&lt;a href=&quot;#环境说明：&quot; cl
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django加入markdown编辑器及markdown上传图片不回显避坑</title>
    <link href="https://xiejava.gitee.io/posts/462af16b/"/>
    <id>https://xiejava.gitee.io/posts/462af16b/</id>
    <published>2022-07-15T15:29:21.000Z</published>
    <updated>2022-07-15T15:40:10.374Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说一个CMS系统如博客系统都需要一个好的富文本编辑器，现在大家更多的是选择MarkDown编辑器来编辑内容。Django作为python的主流web开发框架当然少不了markdown的插件。本文介绍如何在Django框架中引入markdown编辑器及在使用markdown时的注意事项。</p><p>在Django框架中引入markdown编辑器主要是通过安装引入Django-mdeditor库来实现。<br>Django-mdeditor 是基于 Editor.md 的一个 django Markdown 文本编辑插件应用。<br>其官方下载地址见 <a href="https://pypi.org/project/django-mdeditor/" target="_blank" rel="noopener">https://pypi.org/project/django-mdeditor/</a><br>根据官方指导文档</p><h1 id="一、安装使用"><a href="#一、安装使用" class="headerlink" title="一、安装使用"></a>一、安装使用</h1><h2 id="1、安装django-mdeditor"><a href="#1、安装django-mdeditor" class="headerlink" title="1、安装django-mdeditor"></a>1、安装django-mdeditor</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-mdeditor</span><br></pre></td></tr></table></figure><h2 id="2、在-settings-配置文件-INSTALLED-APPS-中添加-mdeditor"><a href="#2、在-settings-配置文件-INSTALLED-APPS-中添加-mdeditor" class="headerlink" title="2、在 settings 配置文件 INSTALLED_APPS 中添加 mdeditor"></a>2、在 settings 配置文件 INSTALLED_APPS 中添加 mdeditor</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'django_filters'</span>,<span class="comment">#注册条件查询</span></span><br><span class="line">    <span class="comment"># 注册markdown的应用</span></span><br><span class="line">    <span class="string">'mdeditor'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3、针对django3-0-修改-frame-配置"><a href="#3、针对django3-0-修改-frame-配置" class="headerlink" title="3、针对django3.0+修改 frame 配置"></a>3、针对django3.0+修改 frame 配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_FRAME_OPTIONS = <span class="string">'SAMEORIGIN'</span>  <span class="comment"># django 3.0 + 默认为 deny</span></span><br></pre></td></tr></table></figure><h2 id="4、在-settings-中添加媒体文件的路径配置"><a href="#4、在-settings-中添加媒体文件的路径配置" class="headerlink" title="4、在 settings 中添加媒体文件的路径配置"></a>4、在 settings 中添加媒体文件的路径配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'uploads'</span>)</span><br></pre></td></tr></table></figure><p>在你项目根目录下创建 uploads/editor 目录，用于存放上传的图片。</p><h2 id="5、在项目的根-urls-py-中添加扩展url和媒体文件url"><a href="#5、在项目的根-urls-py-中添加扩展url和媒体文件url" class="headerlink" title="5、在项目的根 urls.py 中添加扩展url和媒体文件url:"></a>5、在项目的根 urls.py 中添加扩展url和媒体文件url:</h2><p>注意是在项目的根 urls.py 中添加扩展url和媒体文件url，而不是在其他项目应用的urls.py中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'mdeditor/'</span>, include(<span class="string">'mdeditor.urls'</span>))</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="comment"># static files (images, css, javascript, etc.)</span></span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h2 id="6、在项目model中应用markdown"><a href="#6、在项目model中应用markdown" class="headerlink" title="6、在项目model中应用markdown"></a>6、在项目model中应用markdown</h2><p>示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''博客文章'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'文章标题'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(BlogCategory, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'文章分类'</span>, on_delete=models.DO_NOTHING)</span><br><span class="line">    isTop=models.BooleanField(default=<span class="literal">False</span>,verbose_name=<span class="string">'是否置顶'</span>)</span><br><span class="line">    isHot=models.BooleanField(default=<span class="literal">False</span>,verbose_name=<span class="string">'是否热门'</span>)</span><br><span class="line">    summary=models.CharField(max_length=<span class="number">500</span>,verbose_name=<span class="string">'内容摘要'</span>,default=<span class="string">''</span>)</span><br><span class="line">    content=MDTextField(verbose_name=<span class="string">'内容'</span>)</span><br><span class="line">    viewsCount= models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"查看数"</span>)</span><br><span class="line">    commentsCount=models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"评论数"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'博客文章'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'博客文章'</span></span><br></pre></td></tr></table></figure><p>见 <code>content=MDTextField(verbose_name=&#39;内容&#39;)</code> 表示博客文章的内容是MDTextField</p><h2 id="7、向-admin-py-中注册model"><a href="#7、向-admin-py-中注册model" class="headerlink" title="7、向 admin.py 中注册model:"></a>7、向 admin.py 中注册model:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="meta">@admin.register(BlogPost)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'category'</span>,<span class="string">'isTop'</span>,<span class="string">'isHot'</span>]</span><br></pre></td></tr></table></figure><h2 id="8、迁移创建数据表"><a href="#8、迁移创建数据表" class="headerlink" title="8、迁移创建数据表"></a>8、迁移创建数据表</h2><p>运行 <code>python manage.py makemigrations</code> 和 <code>python manage.py migrate</code> 来创建你的model 数据库表，可以看到默认创建的content字段是longtext类型的<br><img src="https://img-blog.csdnimg.cn/a963a9ee98dc437fbb9605d56c48d798.png#pic_center" alt="默认创建的content字段是longtext类型的"></p><h2 id="9、测试验证"><a href="#9、测试验证" class="headerlink" title="9、测试验证"></a>9、测试验证</h2><p>启动应用，访问<a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a> 点击新增博客文章，可以看到内容字段是markdown编辑器输入了。<br><img src="https://img-blog.csdnimg.cn/a82339a899c144b9bf49772cd4f807d3.png#pic_center" alt="markdown编辑器"></p><p>至此django应用中就可以使用markdown编辑器了。</p><h1 id="二、markdown上传图片不回显避坑"><a href="#二、markdown上传图片不回显避坑" class="headerlink" title="二、markdown上传图片不回显避坑"></a>二、markdown上传图片不回显避坑</h1><p>按照以上步骤配置django-mdeditor,markdown编辑器可以正常使用，但是这里有个大坑，就是有些浏览器在上传图片后上传的图片不回显！<br>我就碰到了这样的情况。<br><img src="https://img-blog.csdnimg.cn/63771e4b65b4499992aec3b425c6af46.png#pic_center" alt="上传图片后上传的图片不回显"></p><p>在添加图片界面选择本地上传图片后发现后台接口调到了 <code>/mdeditor/uploads/?guid=1657867564930</code> 接口并且返回了200，但是上传的图片地址不回显，提交报“错误：图片地址不能为空。” 这就奇了怪了。<br>打开浏览器的调试工具，发现报了一个错，<code>Uncaught SyntaxError: Unexpected token 下 in JSON at position 141</code><br><img src="https://img-blog.csdnimg.cn/8d48982eb41846c3a25fc5271208531b.png#pic_center" alt="浏览器的调试工具，发现报了一个错"></p><p>点击详情，具体应该是获取的JSON无法解析。<br><img src="https://img-blog.csdnimg.cn/9179dac6e320410b905175da624a6baa.png#pic_center" alt="JSON无法解析"></p><p>这个JSON为什么无法解析呢？开始进一步调试，这个JSON是上传时调用的后台上传方法返回的。所以来看看是不是后台上传接口返回的JSON串有什么问题。找到/mdeditor/uploads路由所对应的源码<br><img src="https://img-blog.csdnimg.cn/cf8943365d794104a583f1b1613c3c6e.png#pic_center" alt="/mdeditor/uploads路由所对应的源码"></p><p>UploadView的源代码，就是返回一个成功的json报文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'success'</span>: <span class="number">1</span>,</span><br><span class="line">                     <span class="string">'message'</span>: <span class="string">"上传成功！"</span>,</span><br><span class="line">                     <span class="string">'url'</span>: os.path.join(settings.MEDIA_URL,</span><br><span class="line">                                         MDEDITOR_CONFIGS[<span class="string">'image_folder'</span>],</span><br><span class="line">                                         file_full_name)&#125;)</span><br></pre></td></tr></table></figure><p>实际打断点debug也是正常返回上传成功的json报文。<br><img src="https://img-blog.csdnimg.cn/9fae1d59d9194aed8856bb01b83bbf73.png#pic_center" alt="打断点debug也是正常返回上传成功的json报文"></p><p>这就有点奇怪了，接口返回了正常的json报文怎么就解析不了了呢？接着继续调前台js代码，看究竟是什么原因。<br><img src="https://img-blog.csdnimg.cn/d01ac2d8b19d421c91a6bce58fd3c383.png#pic_center" alt="json串里多了几个字“下载视频”!"></p><p>发现js获取的json串里多了几个字“下载视频”! 这是什么鬼？实在是没有地方有返回“下载视频”这几个字啊？看js代码是通过iframe来处理请求的，再来看看iframe的内容，发现iframe里确实有“下载视频”<br><img src="https://img-blog.csdnimg.cn/acc72d33e03746ef896058f625640bb9.png#pic_center" alt="iframe里确实有“下载视频”"><br>原来是有个chrome浏览器插件，擅自给加了“下载视频”的内容。再来看浏览器装了些啥插件。原来是有个迅雷插件，应该就是这个插件搞的鬼了，罪魁祸首就是它了！<br><img src="https://img-blog.csdnimg.cn/74175c998960443fb81d20e3f294f4a6.png#pic_center" alt="罪魁祸首迅雷插件"></p><p>把这个迅雷插件删除或停用，果然一切正常！可以正常回显！！！<br><img src="https://img-blog.csdnimg.cn/f53ad6f543fa4036b9858398d83752f3.png#pic_center" alt="可以正常回显"></p><p>显示插入的图片<br><img src="https://img-blog.csdnimg.cn/f7e7c7d586f34aae940edcb094f34254.png#pic_center" alt="显示插入的图片"></p><p>所以，碰到markdown上传图片不回显的情况，先看下自己的浏览器是不是开启了迅雷插件应用，如果开启了迅雷插件应用先停用或删除！</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般来说一个CMS系统如博客系统都需要一个好的富文本编辑器，现在大家更多的是选择MarkDown编辑器来编辑内容。Django作为python的主流web开发框架当然少不了markdown的插件。本文介绍如何在Django框架中引入markdown编辑器及在使用markdo
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django的restframework接口框架自定义返回数据格式</title>
    <link href="https://xiejava.gitee.io/posts/1dea176f/"/>
    <id>https://xiejava.gitee.io/posts/1dea176f/</id>
    <published>2022-07-14T01:30:59.000Z</published>
    <updated>2022-07-14T01:32:38.211Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离是大趋势的背景下，前端获取数据都是通过调用后台的接口来获取数据微服务的应用越来越多。Django是Python进行web应用开发常用的web框架，用Django框架进行web应用框架减少了很多工作，通常用很少量的代码就可以实现数据的增、删、改、查的业务应用，同样用Django的restframework的框架对外发布接口也是非常的简单方便，几行代码就可以将数据对象通过接口的方式提供服务。因为在实际开发过程中接口的返回数据有一定的格式，本文介绍通过自定义Response返回对象来自定义接口返回数据格式。</p><p>以下示例将数据对象Friend通过restframework框架进行接口发布。<br>只要定义Friend数据对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    siteName=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'友链站点名称'</span>)</span><br><span class="line">    path=models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'地址路径'</span>)</span><br><span class="line">    desc=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.siteName</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'友链'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'友链'</span></span><br></pre></td></tr></table></figure><p>定义一个序列化类将返回的字段序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Friend</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><p>定义一个接口视图类获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Friend.objects.all()</span><br><span class="line">    serializer_class = FriendModelSerializer</span><br></pre></td></tr></table></figure><p>定义接口路由就可以通过httprestfull的接口进行访问了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">friend_list=views.FriendView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'friend/'</span>,friend_list),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接口访问效果如下：<br><a href="http://localhost:8000/api/friend/" target="_blank" rel="noopener">http://localhost:8000/api/friend/</a><br><img src="https://img-blog.csdnimg.cn/f20a9ebcb04b4df98dc490a07f513ed6.png#pic_center" alt="httprestfull的接口"></p><p>但是在项目中经常会碰到接口格式变化的情况，restframework框架默认的返回数据格式不满足应用的需求。比如一般的接口都会有接口返回的code、msg、data，code用来标识接口返回代码比如200是正常，msg用来记录异常或其信息，data用来返回具体的数据。<br>通过restframework接口自定义返回数据格式也是很简单方便的。<br>先自定义Response返回对象，在返回对象中自定义数据返回的格式，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomResponse</span><span class="params">(Response)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,data=None,code=None,msg=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 status=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 template_name=None, headers=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 exception=False, content_type=None,**kwargs)</span>:</span></span><br><span class="line">        super().__init__(<span class="literal">None</span>, status=status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(data, Serializer):</span><br><span class="line">            msg = (</span><br><span class="line">                <span class="string">'You passed a Serializer instance as data, but '</span></span><br><span class="line">                <span class="string">'probably meant to pass serialized `.data` or '</span></span><br><span class="line">                <span class="string">'`.error`. representation.'</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> AssertionError(msg)</span><br><span class="line">        <span class="comment">#自定义返回格式</span></span><br><span class="line">        self.data=&#123;<span class="string">'code'</span>:code,<span class="string">'msg'</span>:msg,<span class="string">'data'</span>:data&#125;</span><br><span class="line">        self.data.update(kwargs)</span><br><span class="line">        self.template_name=template_name</span><br><span class="line">        self.exception=exception</span><br><span class="line">        self.content_type=content_type</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> headers:</span><br><span class="line">            <span class="keyword">for</span> name, value <span class="keyword">in</span> headers.items():</span><br><span class="line">                self[name] = value</span><br></pre></td></tr></table></figure><p>在接口接口视图类获取数据返回时，使用该自定义的Response返回对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Friend.objects.all()</span><br><span class="line">    serializer_class = FriendModelSerializer</span><br><span class="line">    <span class="comment">#自定义list方法，自定义Response返回</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>接口访问效果如下：<br>可以看到返回数据格式中增加了code,msg 数据放到了data节点<br><img src="https://img-blog.csdnimg.cn/57a2ae5b3cac4f81a65092b26fd37bd0.png#pic_center" alt="自定义数据返回格式"></p><p>列表数据通常接口要提供翻页功能，在接口中要有总页数、当前页、是否有下一页的信息。<br>可以自定义一个分页器，在分页器中自定义需要返回的分页参数<br>参考示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">8</span> <span class="comment">#每页显示数量</span></span><br><span class="line">    max_page_size = <span class="number">50</span> <span class="comment">#每页最大显示数量。</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span> <span class="comment">#每页数量的参数名称</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span>  <span class="comment">#页码的参数名称</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment">#自定义分页器的返回参数</span></span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=data,code=<span class="number">200</span>,msg=<span class="string">"OK"</span>,status=status.HTTP_200_OK, count=self.page.paginator.count,next=self.get_next_link(),previous=self.get_previous_link(),size=self.page_size,page=self.page.number)</span><br></pre></td></tr></table></figure><p>在接口接口视图类获取数据返回时，如果有分页器则使用该分页器自定义的Response返回对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Friend.objects.all()</span><br><span class="line">    serializer_class = FriendModelSerializer</span><br><span class="line">    pagination_class = MyPage</span><br><span class="line">    <span class="comment">#自定义list方法，自定义Response返回</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="comment">#如果有分页器，则进行分页后返回</span></span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>接口访问效果如下：<br>可以看到接口中自定义增加了分页信息。<br><img src="https://img-blog.csdnimg.cn/d7e5395ba3aa4d7ba13bf1a331c776c7.png#pic_center" alt="接口中自定义增加了分页信息"></p><p>但是有时候可能希望分页的信息数据要放在data节点里面，这样也是可以做到的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">8</span> <span class="comment">#每页显示数量</span></span><br><span class="line">    max_page_size = <span class="number">50</span> <span class="comment">#每页最大显示数量。</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span> <span class="comment">#每页数量的参数名称</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span>  <span class="comment">#页码的参数名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#自定义分页器的返回参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        ret_data = dict()</span><br><span class="line">        ret_data[<span class="string">'items'</span>] = data</span><br><span class="line">        <span class="comment"># 加入自定义分页信息</span></span><br><span class="line">     ret_data[<span class="string">'total'</span>] = self.page.paginator.count</span><br><span class="line">        ret_data[<span class="string">'hasNextPage'</span>] = self.get_next_link()</span><br><span class="line">        ret_data[<span class="string">'size'</span>] = self.page_size</span><br><span class="line">        ret_data[<span class="string">'page'</span>] = self.page.number</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=ret_data,code=<span class="number">200</span>,msg=<span class="string">"OK"</span>,status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>接口访问效果如下：<br>可以看到接口中自定义增加了分页信息，分页的信息数据放在data节点里面了<br><img src="https://img-blog.csdnimg.cn/2c702bb72da242f48d27986887308b3a.png#pic_center" alt="自定义增加了分页信息，分页的信息数据放在data节点里面"><br>至此，本文介绍了通过Django的restframework接口框架自定义Response返回对象来自定义返回数据格式。Django的restframework接口框架使用简单方便，拿来即用，能够很大程度上减少代码开发量。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前后端分离是大趋势的背景下，前端获取数据都是通过调用后台的接口来获取数据微服务的应用越来越多。Django是Python进行web应用开发常用的web框架，用Django框架进行web应用框架减少了很多工作，通常用很少量的代码就可以实现数据的增、删、改、查的业务应用，同样
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Vue3引入vue-router路由并通过vue-wechat-title设置页面title</title>
    <link href="https://xiejava.gitee.io/posts/5b619f34/"/>
    <id>https://xiejava.gitee.io/posts/5b619f34/</id>
    <published>2022-07-03T08:36:53.000Z</published>
    <updated>2022-07-03T08:42:17.937Z</updated>
    
    <content type="html"><![CDATA[<p>对于用类似Vue前后端分离技术架构的单页应用页面之间的跳转没有非前后端分离那么来得直接，甚至连设置跳转页面的Title都要费一番周折，本文介绍Vue3引入vue-router路由并设置页面Title，通过vue-router实现页面的路由，通过vue-wechat-title来设置页面的title。</p><h1 id="一、用vue-router库实现路由管理"><a href="#一、用vue-router库实现路由管理" class="headerlink" title="一、用vue-router库实现路由管理"></a>一、用vue-router库实现路由管理</h1><p>vue-router是Vue.js官方推荐的路由管理库。它和Vue.js的核心深度集成，让构建单页应用变得轻松容易。使用Vue.js和vue-router库创建单页应用非常的简单：使用Vue.js开发，整个应用已经被拆分成了独立的组件；使用vue-router库，可以把路由映射到各个组件，并把各个组件渲染到正确的地方。下面就来介绍如何安装引入vue-router库并实现路由管理</p><h2 id="1、安装vue-router库"><a href="#1、安装vue-router库" class="headerlink" title="1、安装vue-router库"></a>1、安装vue-router库</h2><p>使用如下命令安装vue-router库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -save -vue-router</span><br></pre></td></tr></table></figure><p>也可以通过  <code>npm install -save vue-router@4</code> 来指定版本号@4表示版本是4<br>安装成功后，可以在控制台看到了安装成功的信息和版本号<br><img src="https://img-blog.csdnimg.cn/a88149cfdb574bf7a3733fe0577845dd.png#pic_center" alt="控制台看到了安装成功的信息和版本号"><br>除此之外也可以在工程中的package.json中看到依赖的库中包含有vue-router及版本号。<br><img src="https://img-blog.csdnimg.cn/d637a853a2a644da8dd59bf035847d5e.png#pic_center" alt="package.json中看到依赖的库中包含有vue-router及版本号"></p><h2 id="2、在router文件夹下创建router-js"><a href="#2、在router文件夹下创建router-js" class="headerlink" title="2、在router文件夹下创建router.js"></a>2、在router文件夹下创建router.js</h2><p>在工程的src目录下建立router文件夹 在router文件夹下创建router.js，该文件是Vue路由管理的核心文件，所有的各组件的路由在该文件中进行配置。<br>参考代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">"vue-router"</span>; <span class="comment">//引入vue-router组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span>;           <span class="comment">//引入需要路由管理的页面组件HelloWorld</span></span><br><span class="line"><span class="keyword">import</span> siteLogin <span class="keyword">from</span> <span class="string">'@/views/user/login'</span>;                 <span class="comment">//引入需要路由管理的页面组件login</span></span><br><span class="line"><span class="keyword">import</span> userInfo <span class="keyword">from</span> <span class="string">"@/views/user/userinfo"</span>;               <span class="comment">//引入需要路由管理的页面组件userinfo</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history:createWebHistory(),</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/'</span>,              <span class="comment">//路由的路径</span></span><br><span class="line">            name:<span class="string">'Home'</span>,           <span class="comment">//路由的名称</span></span><br><span class="line">            component:HelloWorld,  <span class="comment">//路由的组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/login'</span>,</span><br><span class="line">            name:<span class="string">'Login'</span>,</span><br><span class="line">            component:siteLogin,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/userinfo'</span>,</span><br><span class="line">            name:<span class="string">'UserInfo'</span>,</span><br><span class="line">            component:userInfo,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>代码组织结构如下：<br><img src="https://img-blog.csdnimg.cn/eda7b7f81435458cb8de37a96be17126.png#pic_center" alt="代码组织结构如下"></p><h2 id="3、在App-vue中加入路由视图"><a href="#3、在App-vue中加入路由视图" class="headerlink" title="3、在App.vue中加入路由视图"></a>3、在App.vue中加入路由视图</h2><p>在App.vue中加入<code>&lt;router-view /&gt;</code><br>App.vue示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h2 id="4、在项目的main-js中引入路由"><a href="#4、在项目的main-js中引入路由" class="headerlink" title="4、在项目的main.js中引入路由"></a>4、在项目的main.js中引入路由</h2><p>参考代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"@/router/router"</span>;  <span class="comment">//引入路由，会去找router下的router.js的配置文件</span></span><br><span class="line">createApp(App).use(router).mount(<span class="string">'#app'</span>)  <span class="comment">//创建应用的时候应用路由</span></span><br></pre></td></tr></table></figure><h2 id="5、验证效果"><a href="#5、验证效果" class="headerlink" title="5、验证效果"></a>5、验证效果</h2><p>为了显示更清楚，将默认创建的src\components\HelloWorld.vue内容稍加调整</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div &gt;</span><br><span class="line">    第一个路由组件Home</span><br><span class="line">    &lt;p&gt;&#123;&#123; name &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'HelloWorld',</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      name:"Hello World!"</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;!-- Add <span class="string">"scoped"</span> attribute to limit CSS to <span class="keyword">this</span> component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>如果上面的步骤没有遗漏，在终端输入 npm run serve 将前端服务启动起来，在浏览器访问localhost:8080可以看到如下页面：<br><img src="https://img-blog.csdnimg.cn/f15b1b6eb060427bbfe0a1c058bbfc97.png#pic_center" alt="localhost:8080"><br>访问localhost:8080/login<br><img src="https://img-blog.csdnimg.cn/3c6dabe9159e4a0f848fcfd0f4cc9f9e.png#pic_center" alt="访问localhost:8080/login"><br>访问localhost:8080/userinfo<br><img src="https://img-blog.csdnimg.cn/690f79f60f134aa5974ae2aef9701c78.png#pic_center" alt="访问localhost:8080/userinfo"><br>可以看到访问不同的URL路由到了不同的Vue页面，上述login.vue和userinfo.vue示例代码没有给出，大家可以自行随便实现。</p><h1 id="二、用vue-wechat-title实现页面title的设置"><a href="#二、用vue-wechat-title实现页面title的设置" class="headerlink" title="二、用vue-wechat-title实现页面title的设置"></a>二、用vue-wechat-title实现页面title的设置</h1><p>在上面实现了不同页面的路由管理，但是访问不同的URL看到的页面title所有的页面都是一样的，如何设置不同页面不同的页面Title呢？比较方便的做法是用vue-wechat-title来实现。<br>同样首先要安装vue-wechat-title库</p><h2 id="1、安装vue-wechat-title库"><a href="#1、安装vue-wechat-title库" class="headerlink" title="1、安装vue-wechat-title库"></a>1、安装vue-wechat-title库</h2><p>使用如下命令安装vue-wechat-title库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-wechat-title -save</span><br></pre></td></tr></table></figure><p>安装完成后在工程中的package.json中看到依赖的库中包含有vue-wechat-title及版本号<br><img src="https://img-blog.csdnimg.cn/c3852a50f59e4249ba1e5000335819d0.png#pic_center" alt="package.json中看到依赖的库中包含有vue-wechat-title及版本号"></p><h2 id="2、在router文件夹下的router-js中增加title的配置"><a href="#2、在router文件夹下的router-js中增加title的配置" class="headerlink" title="2、在router文件夹下的router.js中增加title的配置"></a>2、在router文件夹下的router.js中增加title的配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">"vue-router"</span>; <span class="comment">//引入vue-router组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span>;           <span class="comment">//引入需要路由管理的页面组件HelloWorld</span></span><br><span class="line"><span class="keyword">import</span> siteLogin <span class="keyword">from</span> <span class="string">'@/views/user/login'</span>;                 <span class="comment">//引入需要路由管理的页面组件login</span></span><br><span class="line"><span class="keyword">import</span> userInfo <span class="keyword">from</span> <span class="string">"@/views/user/userinfo"</span>;               <span class="comment">//引入需要路由管理的页面组件userinfo</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history:createWebHistory(),</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/'</span>,              <span class="comment">//路由的路径</span></span><br><span class="line">            name:<span class="string">'Home'</span>,           <span class="comment">//路由的名称</span></span><br><span class="line">            meta:&#123;</span><br><span class="line">                title: <span class="string">'首页'</span>       <span class="comment">//title配置</span></span><br><span class="line">            &#125;,</span><br><span class="line">            component:HelloWorld,  <span class="comment">//路由的组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/login'</span>,</span><br><span class="line">            name:<span class="string">'Login'</span>,</span><br><span class="line">            meta:&#123;</span><br><span class="line">                title:<span class="string">'登录'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            component:siteLogin,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/userinfo'</span>,</span><br><span class="line">            name:<span class="string">'UserInfo'</span>,</span><br><span class="line">            meta:&#123;</span><br><span class="line">                title: <span class="string">'用户信息'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            component:userInfo,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>主要是在路由配置时设置了<code>meta:{title:&#39;xxxx&#39;}</code>如下图：<img src="https://img-blog.csdnimg.cn/f51d76a7abc14c27a1ea4ae0ac88dec1.png#pic_center" alt="router.js中增加title的配置"></p><h2 id="3、在App-vue页面中使用"><a href="#3、在App-vue页面中使用" class="headerlink" title="3、在App.vue页面中使用"></a>3、在App.vue页面中使用</h2><p>App.vue代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>  v-wechat-title=<span class="string">"$route.meta.title"</span>&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>主要是在<code>&lt;div id=&quot;app&quot;  v-wechat-title=&quot;$route.meta.title&quot;&gt;</code> 加入了<code>v-wechat-title=&quot;$route.meta.title&quot;</code></p><h2 id="4、在main-js中引用vue-wechat-title"><a href="#4、在main-js中引用vue-wechat-title" class="headerlink" title="4、在main.js中引用vue-wechat-title"></a>4、在main.js中引用vue-wechat-title</h2><p>在main.js中引用vue-wechat-title的时候有个坑，如果按照一般的引用会报错<br>mian.js代码示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"@/router/router"</span>;  <span class="comment">//引入路由，会去找router下的router.js的配置文件</span></span><br><span class="line"><span class="keyword">import</span> VueWechatTitle <span class="keyword">from</span> <span class="string">'vue-wechat-title'</span>; <span class="comment">//引入VueWechatTitle</span></span><br><span class="line">createApp(App).use(router,VueWechatTitle).mount(<span class="string">'#app'</span>)  <span class="comment">//创建应用的时候应用路由</span></span><br></pre></td></tr></table></figure><p>在终端输入 npm run serve 将前端服务启动起来会报错！<br><font color=Red>Uncaught TypeError: Cannot read properties of undefined (reading ‘deep’)</font></p><p>原因是在挂载app示例前，vue-wechat-title还没有加载好，一定要先应用再挂载app<br>将createApp(App).use(router,VueWechatTitle).mount(‘#app’)删除或注释掉。改用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app=createApp(App);</span><br><span class="line">app.use(VueWechatTitle);</span><br><span class="line">app.use(router);</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>main.js的参考示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"@/router/router"</span>;  <span class="comment">//引入路由，会去找router下的router.js的配置文件</span></span><br><span class="line"><span class="keyword">import</span> VueWechatTitle <span class="keyword">from</span> <span class="string">'vue-wechat-title'</span>; <span class="comment">//引入VueWechatTitle</span></span><br><span class="line"><span class="comment">//createApp(App).use(router,VueWechatTitle).mount('#app')  //指令定义在 mount('#app')之后，导致自定义指令未挂载到，会报错</span></span><br><span class="line"><span class="keyword">const</span> app=createApp(App);</span><br><span class="line">app.use(VueWechatTitle);</span><br><span class="line">app.use(router);</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="5、验证效果-1"><a href="#5、验证效果-1" class="headerlink" title="5、验证效果"></a>5、验证效果</h2><p>在终端输入 npm run serve 将前端服务启动起来<br>看到访问不同的URL会显示不同的title<br><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br><img src="https://img-blog.csdnimg.cn/d316421152e0479992022673d788b6c2.png#pic_center" alt="http://localhost:8080/的title"><br><a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a><br><img src="https://img-blog.csdnimg.cn/120ac7089ff74334867b640fdc552707.png#pic_center" alt="login的title登录"><br><a href="http://localhost:8080/userinfo" target="_blank" rel="noopener">http://localhost:8080/userinfo</a><br><img src="https://img-blog.csdnimg.cn/e86940b5e72d4385878f8eade5920759.png#pic_center" alt="userinfo的title用户信息"></p><p>本文通过以上实例实现了Vue3引入vue-router路由并设置页面Title，通过vue-router实现页面的路由，通过vue-wechat-title来设置页面的title都还比较方便。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于用类似Vue前后端分离技术架构的单页应用页面之间的跳转没有非前后端分离那么来得直接，甚至连设置跳转页面的Title都要费一番周折，本文介绍Vue3引入vue-router路由并设置页面Title，通过vue-router实现页面的路由，通过vue-wechat-titl
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue快速入门</title>
    <link href="https://xiejava.gitee.io/posts/9277bcaa/"/>
    <id>https://xiejava.gitee.io/posts/9277bcaa/</id>
    <published>2022-07-03T02:02:07.000Z</published>
    <updated>2022-07-03T02:31:18.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是Vue"><a href="#一、什么是Vue" class="headerlink" title="一、什么是Vue"></a>一、什么是Vue</h2><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>1、独立版本<br>直接下载并用<code>&lt;script&gt;</code>标签引入<br>官网下载地址：<a href="https://cn.vuejs.org/js/vue.js" target="_blank" rel="noopener">https://cn.vuejs.org/js/vue.js</a><br>2、使用CDN<br>和独立版本类似，与独立版本的区别就是不用下载到本地应用，直接引用CDN加速以后的地址。缺点是如果是内网封闭环境不能用，国内CDN也不稳定，国外的CDN有时无法访问。如官网的<br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</code> 就无法访问。<br>几个比较稳定的CDN<br>Staticfile CDN（国内） : <a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a><br>unpkg：<a href="https://unpkg.com/vue@2.6.14/dist/vue.min.js。" target="_blank" rel="noopener">https://unpkg.com/vue@2.6.14/dist/vue.min.js。</a><br>cdnjs : <a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a><br>3、命令行工具<br>Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了开箱即用的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。更多详情可查阅 Vue CLI 的文档。</p><h2 id="三、第一个Vue"><a href="#三、第一个Vue" class="headerlink" title="三、第一个Vue"></a>三、第一个Vue</h2><p>程序员学一门新的语音或框架，都是从hello world！开始的。来看一下Vue的hello world!<br>将vue.min.js下载到本地，在vue.min.js的目录下新建一个hellovue.html的文件，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=<span class="string">"vue.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="app"&gt;</span></span><br><span class="line"><span class="regexp">  &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>用浏览器打开，hello Vue! 成功的展现出来，第一个Vue就这么简单。<br><img src="https://img-blog.csdnimg.cn/30813985cd8b4dd183b83769da5758f1.png#pic_center" alt="hello Vue!"></p><p>在这里我们通过<code>&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</code>引入了本地的vue.min.js，就可以用vue框架了。<br>通过<code>&lt;div id=&quot;app&quot;&gt;</code>构建了一个DOM元素div标签元素，id为app，`{{message}}` 是占位符，类似于大多数的模板语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>在javascript代码中，定义了一个Vue对象，对象中构造了el和data两个参数。el是元素选择器，通过<code>#app</code>选择了<code>id=&quot;app&quot;</code>的div，data用来定义数据属性，这里定义了<code>massage:&#39;hellow Vue!&#39;</code>,通过`{{message}}`将数据hellow Vue显示输出。<br>可以用chrome浏览器的开发者工具打开控制台看到app.message的值为’hellow Vue!’。<br><img src="https://img-blog.csdnimg.cn/16b706a93fd64ddf92a84e98aaecb9c1.png#pic_center" alt="chrome浏览器的开发者工具调试"></p><p>可以通过修改这个变量的值而改变显示在浏览器的值。<br><img src="https://img-blog.csdnimg.cn/fa964684d0414f688fb8b47c667de5fd.png#pic_center" alt="修改值"></p><h2 id="四、常用基本语法"><a href="#四、常用基本语法" class="headerlink" title="四、常用基本语法"></a>四、常用基本语法</h2><p>模板语法<br>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。<br>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。<br>结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上</p><h3 id="插值文本"><a href="#插值文本" class="headerlink" title="插值文本"></a>插值文本</h3><p>数据绑定最常见的形式就是使用 `{{xxx}}`（双大括号）的文本插值：<br>正如我们的第一的Vue通过`{{ message }}`将文本值插入到占位符进行数据绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="绑定输出html"><a href="#绑定输出html" class="headerlink" title="绑定输出html"></a>绑定输出html</h3><p>使用v-html 指令用于输出 html 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app2:v-html指令输出html代码</span><br><span class="line">&lt;div id=<span class="string">"app2"</span>&gt;</span><br><span class="line">    &lt;div v-html=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app2 = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#app2',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    message: '&lt;b&gt;Hello Vue!&lt;/</span>b&gt;<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>效果如下图所示：<br><img src="https://img-blog.csdnimg.cn/4d2866a052e44a0e981edf2cb02f93bd.png#pic_center" alt="v-html"></p><p>如果不用v-html插入，将<code>&lt;div id=&quot;app2&quot;&gt;</code>标签内容改成用文本插入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app2"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下，直接将html代码给显示出来了。<br><img src="https://img-blog.csdnimg.cn/b5da200f7fba41008b10e330e201951b.png#pic_center" alt="直接显示HTML代码"></p><h3 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h3><p>HTML 属性中的值应使用 v-bind 指令。<br>如插入绑定 a 标签的href属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app3:v-bind指令绑定属性值</span><br><span class="line">&lt;div id=<span class="string">"app3"</span>&gt;</span><br><span class="line">    &lt;a target=<span class="string">"_blank"</span> v-bind:href=<span class="string">"url"</span>&gt;click me go to myblog&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app3'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">'http://xiejava.ishareread.com/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/baf17428d00746e98423c7ae951cc632.png#pic_center" alt="绑定属性"></p><h3 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h3><p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，可以用 v-bind 来绑定设置样式属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app4:v-band:<span class="class"><span class="keyword">class</span>指令绑定样式</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span></span>=<span class="string">"app4"</span>&gt;</span><br><span class="line">  &lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; 'active': isActive &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">var app4=new Vue(</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp"> el: '#app4',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    isActive:true</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>定义样式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/75b0ed8a42dc4f6a86e5bb5fb5246e61.png#pic_center" alt="v-band:class"></p><h3 id="插值Javascript表达式"><a href="#插值Javascript表达式" class="headerlink" title="插值Javascript表达式"></a>插值Javascript表达式</h3><p>vue.js插值支持javascript表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app5:vue.js插值的javascript表达式支持</span><br><span class="line">&lt;div id=<span class="string">"app5"</span>&gt;</span><br><span class="line">    &#123;&#123;<span class="number">5</span>+<span class="number">5</span>&#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;&#123; message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;&#125;</span><br><span class="line">    &lt;div v-bind:id=<span class="string">"'list-' + id"</span>&gt;xiejava&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app5'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">    message: <span class="string">'XIEJAVA'</span>,</span><br><span class="line">    id : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/8c77649827624c29913b8f1463a3679a.png#pic_center" alt="vue.js插值支持javascript表达式"></p><p>常用语句</p><h3 id="v-if-v-else-（条件语句）"><a href="#v-if-v-else-（条件语句）" class="headerlink" title="v-if v-else （条件语句）"></a>v-if v-else （条件语句）</h3><p>条件判断使用 v-if 指令，可以用 v-else 指令给 v-if 添加一个 “else” 块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app6:v-<span class="keyword">if</span>条件语句</span><br><span class="line">&lt;div id=<span class="string">"app6"</span>&gt;</span><br><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">"ok"</span>&gt;YES&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-else&gt;NO&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app6 = new Vue(&#123;</span></span><br><span class="line"><span class="regexp"> el:"#app6",</span></span><br><span class="line"><span class="regexp"> data:&#123;</span></span><br><span class="line"><span class="regexp"> ok:false,</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp"> &#125;);</span></span><br></pre></td></tr></table></figure><p> 效果如下：<br><img src="https://img-blog.csdnimg.cn/5376029a58ea4efa9d28a89c1d4a8645.png#pic_center" alt="v-if v-else （条件语句）"></p><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><p>循环使用 v-for 指令，v-for 可以绑定数据到数组来渲染一个列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app7"</span>&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"code in codes"</span>&gt;</span><br><span class="line">      &#123;&#123; code.name &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ol&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">var app7=new Vue(</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp"> el: '#app7',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    codes: [</span></span><br><span class="line"><span class="regexp">      &#123; name: 'java' &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; name: 'python' &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; name: 'php' &#125;</span></span><br><span class="line"><span class="regexp">    ]</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/c3fa12b69fb044d49541837216b8c1a4.png#pic_center" alt="for循环语句"></p><h3 id="v-on绑定事件"><a href="#v-on绑定事件" class="headerlink" title="v-on绑定事件"></a>v-on绑定事件</h3><p>事件监听可以使用 v-on 指令进行绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app8"</span>&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">"counter += 1"</span>&gt;+<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;加了 &#123;&#123; counter &#125;&#125; 次1。&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app8=new Vue(</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp"> el: '#app8',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    counter:0</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/448b65dc439f480aa86bd23a6ba1ecba.png#pic_center" alt="v-on绑定事件"></p><p><strong>以上全部示例代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.staticfile.org/vue/2.2.2/vue.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">app1:hello Vue!</span></span><br><span class="line"><span class="regexp">&lt;div id="app1"&gt;</span></span><br><span class="line"><span class="regexp">  &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">app2:v-html指令输出html代码</span><br><span class="line">&lt;div id=<span class="string">"app2"</span>&gt;</span><br><span class="line">    &lt;div v-html=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app3:v-bind指令绑定属性值</span></span><br><span class="line"><span class="regexp">&lt;div id="app3"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a target="_blank" v-bind:href="url"&gt;click me go to myblog&lt;/</span>a&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app4:v-band:class指令绑定样式</span></span><br><span class="line"><span class="regexp">&lt;div id="app4"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div v-bind:class="&#123; 'active': isActive &#125;"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app5:vue.js插值的javascript表达式支持</span></span><br><span class="line"><span class="regexp">&lt;div id="app5"&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123;5+5&#125;&#125;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span></span><br><span class="line"><span class="regexp">    &lt;div v-bind:id="'list-' + id"&gt;xiejava&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app6:v-if条件语句</span></span><br><span class="line"><span class="regexp">&lt;div id="app6"&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-if="ok"&gt;YES&lt;/</span>div&gt;</span><br><span class="line">&lt;div v-<span class="keyword">else</span>&gt;NO&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">app7:<span class="keyword">for</span>循环语句</span><br><span class="line">&lt;div id=<span class="string">"app7"</span>&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"code in codes"</span>&gt;</span><br><span class="line">      &#123;&#123; code.name &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ol&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app8:v-on绑定事件</span></span><br><span class="line"><span class="regexp">&lt;div id="app8"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button v-on:click="counter += 1"&gt;+1&lt;/</span>button&gt;</span><br><span class="line">  &lt;p&gt;加了 &#123;&#123; counter &#125;&#125; 次<span class="number">1</span>。&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> app1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app1'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app2'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'&lt;b&gt;Hello Vue!&lt;/b&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app3'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">'http://xiejava.ishareread.com/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app4=<span class="keyword">new</span> Vue(</span><br><span class="line">&#123;</span><br><span class="line"> el: <span class="string">'#app4'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    isActive:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app5'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">    message: <span class="string">'XIEJAVA'</span>,</span><br><span class="line">    id : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> el:<span class="string">"#app6"</span>,</span><br><span class="line"> data:&#123;</span><br><span class="line"> ok:<span class="literal">false</span>,</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app7=<span class="keyword">new</span> Vue(</span><br><span class="line">&#123;</span><br><span class="line"> el: <span class="string">'#app7'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    codes: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'java'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'python'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'php'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app8=<span class="keyword">new</span> Vue(</span><br><span class="line">&#123;</span><br><span class="line"> el: <span class="string">'#app8'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">.active &#123;</span></span><br><span class="line"><span class="regexp">width: 100px;</span></span><br><span class="line"><span class="regexp">height: 100px;</span></span><br><span class="line"><span class="regexp">background: red;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>通过上面的快速入门，基本了解什么是VUE、VUE的安装及基本的使用，常用的语法。后面还要更深入的学习VUE的组件、路由、后台接口调用等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是Vue&quot;&gt;&lt;a href=&quot;#一、什么是Vue&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Vue&quot;&gt;&lt;/a&gt;一、什么是Vue&lt;/h2&gt;&lt;p&gt;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Vue" scheme="https://xiejava.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm在用Django开发时debug模式启动失败显示can&#39;t find &#39;__main__&#39; module的解决方法</title>
    <link href="https://xiejava.gitee.io/posts/aebdf141/"/>
    <id>https://xiejava.gitee.io/posts/aebdf141/</id>
    <published>2022-06-06T00:56:51.000Z</published>
    <updated>2022-06-06T00:58:34.976Z</updated>
    
    <content type="html"><![CDATA[<p>初次用Django开发web应用，在试图用Pycharm进行debug的时候，出现了一个奇怪的问题。以正常模式启动或者在terminal启动都没有问题。但是以debug模式启动时，显示<code>can&#39;t find &#39;__main__&#39; module”</code>报错。在网上找了很久都没有看到解决方法，最后在某乎上看到一篇文章，在启动时加上<code>--noreload</code>参数，既可以debug模式启动。</p><p><strong>报错信息：</strong><br><img src="https://img-blog.csdnimg.cn/f7a094b8e85c45dc841fdc4ff77a8698.png#pic_center" alt="报错信息"><br><strong>解决方法：</strong><br>在启动时加上 <code>--noreload</code> 参数可以正常启动调试<br><img src="https://img-blog.csdnimg.cn/3ade987b7c1040d7b504eb36871a7b37.png#pic_center" alt="加入不重新加载参数"></p><p>debug启动正常也可以调试了。<br><img src="https://img-blog.csdnimg.cn/c4993ebff26a4d80a43538bb8fcb9e71.png#pic_center" alt="debug正常启动"></p><p>踩过的坑记录一下，希望能帮到碰到同样问题的人。</p><p>感谢大佬的文章 <a href="https://zhuanlan.zhihu.com/p/443763989" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/443763989</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初次用Django开发web应用，在试图用Pycharm进行debug的时候，出现了一个奇怪的问题。以正常模式启动或者在terminal启动都没有问题。但是以debug模式启动时，显示&lt;code&gt;can&amp;#39;t find &amp;#39;__main__&amp;#39; modul
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python使用BeautifulSoup4修改网页内容实战</title>
    <link href="https://xiejava.gitee.io/posts/1ca32c3a/"/>
    <id>https://xiejava.gitee.io/posts/1ca32c3a/</id>
    <published>2022-05-18T13:45:28.000Z</published>
    <updated>2022-05-18T13:54:53.495Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个小项目，需要爬取页面上相应的资源数据后，保存到本地，然后将原始的HTML源文件保存下来，对HTML页面的内容进行修改将某些标签整个给替换掉。</p><p>对于这类需要对HTML进行操作的需求，最方便的莫过于<strong>BeautifulSoup4</strong>的库了。</p><p>样例的HTML代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"videoslide"</span> <span class="attr">href</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/1381824922.JPG"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/1381824922_zy_compress.JPG"</span> <span class="attr">data-zy-media-id</span>=<span class="string">"zy_location_201310151613422786"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第一张_1381824798.JPG"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"zy_image_201310151613169945"</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第一张_1381824798_zy_compress.JPG"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第二张_1381824796.jpg"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"zy_image_201310151613163009"</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第二张_1381824796_zy_compress.jpg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第三张.jpg"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"zy_image_201312311838584446"</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第三张_zy_compress.jpg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里主要包括了<code>&lt;a &gt;</code>标签，<code>&lt;a &gt;</code>标签里面嵌入了<code>&lt;img &gt;</code>标签，其中有<code>&lt;a class=&quot;videoslide&quot;&gt;</code>的标识该标签实际是可以播放动画的。需要根据<code>class=&quot;videoslide&quot;</code> 来判断将整个<code>&lt;a &gt;</code>标签换成播放器的<code>&lt;video &gt;</code>标签，将没有<code>class=&quot;videoslide&quot;</code> 的<code>&lt;a &gt;</code>标签换成<code>&lt;figure&gt;</code>标签。</p><p>也就是将带有的<code>&lt;a class=&quot;videoslide&quot; ...&gt;&lt;img ... /&gt;&lt;/a&gt;</code>标签换成 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">poster</span>=<span class="string">"视频链接的图片地址.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"视频文件的静态地址.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> /&gt;</span></span><br><span class="line">    您的浏览器不支持H5视频，请使用Chrome/Firefox/Edge浏览器。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>&lt;a ....&gt;&lt;img .../&gt;&lt;/a&gt;</code>标签换成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt; <span class="attr">img</span> <span class="attr">src</span>=<span class="string">"图片地址_compressed.jpg"</span> <span class="attr">data-zy-media-id</span>=<span class="string">"图片地址.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>文字说明（如果有）<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里通过BeautifulSoup4 的select()方法找到标签，通过get()方法获取标签及标签属性值，通过replaceWith来替换标签，具体代码如下：<br>首先安装BeautifulSoup4的库，BeautifulSoup4库依赖于lxml库，所以也需要安装lxml库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><p>具体代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">htmlstr=<span class="string">'&lt;html&gt;&lt;body&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;a class="videoslide" href="http://www.test.com/wp-content/uploads/1020/1381824922.JPG"&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;img src="http://www.test.com/wp-content/uploads/1020/1381824922_zy_compress.JPG" data-zy-media-id="zy_location_201310151613422786"/&gt;&lt;/a&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;a href="http://www.test.com/wp-content/uploads/1020/第一张_1381824798.JPG"&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;img data-zy-media-id="zy_image_201310151613169945" src="http://www.test.com/wp-content/uploads/1020/第一张_1381824798_zy_compress.JPG"/&gt;&lt;/a&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;a href="http://www.test.com/wp-content/uploads/1020/第二张_1381824796.jpg"&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;img data-zy-media-id="zy_image_201310151613163009" src="http://www.test.com/wp-content/uploads/1020/第二张_1381824796_zy_compress.jpg"/&gt;&lt;/a&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;a href="http://www.test.com/wp-content/uploads/1020/第三张.jpg"&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;img data-zy-media-id="zy_image_201312311838584446" src="http://www.test.com/wp-content/uploads/1020/第三张_zy_compress.jpg"/&gt;&lt;/a&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procHtml</span><span class="params">(htmlstr)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(htmlstr, <span class="string">'lxml'</span>)</span><br><span class="line">    a_tags=soup.select(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> a_tag <span class="keyword">in</span> a_tags:</span><br><span class="line">        a_tag_src = a_tag.get(<span class="string">'href'</span>)</span><br><span class="line">        a_tag_filename = os.path.basename(a_tag_src)</span><br><span class="line">        a_tag_path = os.path.join(<span class="string">'src'</span>, a_tag_filename)</span><br><span class="line">        a_tag[<span class="string">'href'</span>]=a_tag_path</span><br><span class="line">        next_tag=a_tag.next</span><br><span class="line">        <span class="comment">#判断是视频还是图片，如果a标签带了class="videoslide" 是视频否则是图片</span></span><br><span class="line">        <span class="keyword">if</span> a_tag.get(<span class="string">'class'</span>) <span class="keyword">and</span> <span class="string">'videoslide'</span>==a_tag.get(<span class="string">'class'</span>)[<span class="number">0</span>]:</span><br><span class="line">            <span class="comment"># 处理视频文件</span></span><br><span class="line">            media_id = next_tag.get(<span class="string">'data-zy-media-id'</span>)</span><br><span class="line">            <span class="keyword">if</span> media_id:</span><br><span class="line">                media_url = <span class="string">'http://www.test.com/travel/show_media/'</span> + str(media_id)+<span class="string">'.mp4'</span></span><br><span class="line">                media_filename = os.path.basename(media_url)</span><br><span class="line">                media_path = os.path.join(<span class="string">'src'</span>, media_filename)</span><br><span class="line">                <span class="comment"># 将div.video标签替换a标签</span></span><br><span class="line">                video_html = <span class="string">'&lt;div class=\"video\"&gt;&lt;video controls width = \"100%\" poster = \"'</span> + a_tag_path + <span class="string">'\" &gt;&lt;source src = \"'</span> + media_path + <span class="string">'\" type = \"video/mp4\" /&gt; 您的浏览器不支持H5视频，请使用Chrome / Firefox / Edge浏览器。 &lt;/video&gt;&lt;/div&gt;'</span></span><br><span class="line">                video_soup = BeautifulSoup(video_html, <span class="string">'lxml'</span>)</span><br><span class="line">                a_tag.replaceWith(video_soup.div)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#获取图片信息</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'img'</span>==next_tag.name:</span><br><span class="line">                img_src=next_tag.get(<span class="string">'src'</span>)</span><br><span class="line">                <span class="comment"># 判断是否路径是否为本地资源 data:image和file:</span></span><br><span class="line">                <span class="keyword">if</span> img_src.find(<span class="string">'data:image'</span>) == <span class="number">-1</span> <span class="keyword">and</span> img_src.find(<span class="string">'file:'</span>) == <span class="number">-1</span>:</span><br><span class="line">                    img_filename = os.path.basename(img_src)</span><br><span class="line">                    img_path = os.path.join(<span class="string">'src'</span>, img_filename)</span><br><span class="line">                    <span class="comment"># 将&lt;figure&gt;&lt;img&gt;标签替换a标签</span></span><br><span class="line">                    figcaption=<span class="string">''</span></span><br><span class="line">                    figure_html=<span class="string">'&lt;figure&gt;&lt;img src=\"'</span>+img_path+<span class="string">'\" data-zy-media-id=\"'</span>+a_tag_path+<span class="string">'\"&gt;&lt;figcaption&gt;'</span>+figcaption+<span class="string">'&lt;/figcaption&gt;&lt;/figure&gt;'</span></span><br><span class="line">                    figure_soup = BeautifulSoup(figure_html, <span class="string">'lxml'</span>)</span><br><span class="line">                    a_tag.replaceWith(figure_soup.figure)</span><br><span class="line">    html_content = soup.contents[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> html_content</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pro_html_str=procHtml(htmlstr)</span><br><span class="line">    print(pro_html_str)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">""</span> <span class="attr">poster</span>=<span class="string">"src\1381824922.JPG"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"src\zy_location_201310151613422786.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>/&gt;</span> 您的浏览器不支持H5视频，请使用Chrome / Firefox / Edge浏览器。 </span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"src\第一张_1381824798.JPG"</span> <span class="attr">src</span>=<span class="string">"src\第一张_1381824798_zy_compress.JPG"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"src\第二张_1381824796.jpg"</span> <span class="attr">src</span>=<span class="string">"src\第二张_1381824796_zy_compress.jpg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"src\第三张.jpg"</span> <span class="attr">src</span>=<span class="string">"src\第三张_zy_compress.jpg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有个小项目，需要爬取页面上相应的资源数据后，保存到本地，然后将原始的HTML源文件保存下来，对HTML页面的内容进行修改将某些标签整个给替换掉。&lt;/p&gt;
&lt;p&gt;对于这类需要对HTML进行操作的需求，最方便的莫过于&lt;strong&gt;BeautifulSoup4&lt;/stron
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="https://xiejava.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>网络安全设备-认识运维安全管理与审计系统（堡垒机）</title>
    <link href="https://xiejava.gitee.io/posts/9c723d09/"/>
    <id>https://xiejava.gitee.io/posts/9c723d09/</id>
    <published>2022-05-11T02:09:49.000Z</published>
    <updated>2022-05-11T02:11:45.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是运维安全管理与审计系统"><a href="#一、什么是运维安全管理与审计系统" class="headerlink" title="一、什么是运维安全管理与审计系统"></a>一、什么是运维安全管理与审计系统</h2><p>运维安全管理与审计系统（俗称 “堡垒机”）：是采用新一代智能运维技术框架，基于认证、授权、访问、审计的管理流程设计理念，实现对企事业IT中心的网络设备、数据库、安全设备、主机系统、中间件等资源统一运维管理和审计；通过集中化运维管控、运维过程实时监管、运维访问合规性控制、运维过程图形化审计等功能，为企事业IT中心运维构建一套事前预防、事中监控、事后审计完善的安全管理体系。</p><p>简单的说，运维安全管理与审计系统（堡垒机）就是用来控制哪些人可以登录哪些资产（事先防范和控制），以及录像记录登录资产后做了什么事情（事中监控和事后溯源）的系统。其核心是<strong>可控及审计</strong>。可控是指权限可控、行为可控。权限可控指可以方便的设置、回收运维操作人员的权限；行为可控，比如需要集中禁用某个危险命令；可审计，指有权限操作的人员对资产的所有操作都有记录，能够被监控和审计。</p><h2 id="二、为什么需要运维安全管理与审计系统"><a href="#二、为什么需要运维安全管理与审计系统" class="headerlink" title="二、为什么需要运维安全管理与审计系统"></a>二、为什么需要运维安全管理与审计系统</h2><p>当企业的IT资产越来越多，当参与运维的岗位越来越多样性，运维团队达到一定的规模，不同的人员如运维人员、开发人员、第三方代维、厂商支撑人员需要控制访问不同的资产及权限，如果没有一套好的机制，就会产生混乱。无法有效的做到“哪些人允许以什么样的身份访问哪些设备”，更加没有办法知道“哪些人登录设备后做了哪些事情”，出了问题以后无法回溯。<br><img src="https://img-blog.csdnimg.cn/61d6f515885d4c74ae6d342ac0ab4015.png#pic_center" alt="运维混乱"><br>运维安全管理与审计系统（堡垒机）是从跳板机（也叫前置机）的概念演变过来的。早在2000年左右，一些中大型企业为了能对运维人员的远程登录进行集中管理，会在机房部署一台跳板机。跳板机其实就是一台unix/linux/windows操作系统的服务器，所有运维人员都需要先远程登录跳板机，然后再从跳板机登录其他服务器中进行运维操作。<br><img src="https://img-blog.csdnimg.cn/00cc957a3657410288d824c41fe4cd68.png#pic_center" alt="跳板机"><br>跳板机解决了远程登录集中管理访问的问题，但跳板机并没有实现对运维人员操作行为的控制和审计，使用跳板机过程中还是会有误操作、违规操作导致的操作事故，一旦出现操作事故很难快速定位原因和责任人。此外，跳板机存在严重的安全风险，一旦跳板机系统被攻入，则将后端资源风险完全暴露无遗。同时，对于个别资源（如telnet）可以通过跳板机来完成一定的内控，但是对于更多更特殊的资源（ftp、rdp等）来讲就显得力不从心了。</p><p>人们逐渐认识到跳板机的不足，进而需要更新、更好的安全技术理念来实现运维操作管理。需要一种能满足角色管理与授权审批、信息资源访问控制、操作记录和审计、系统变更和维护控制要求，并生成一些统计报表配合管理规范来不断提升IT内控的合规性的产品。在这些理念的指导下，2005年前后，运维安全管理与审计系统（堡垒机）开始以一个独立的产品形态被广泛部署，有效地降低了运维操作风险，使得运维操作管理变得更简单、更安全。<br><img src="https://img-blog.csdnimg.cn/4cc408b9ee8046e689f8072a4b644d91.png#pic_center" alt="在这里插入图片描述"></p><p>运维安全管理与审计系统（堡垒机）承担了运维人员在运维过程中唯一的入口，通过精细化授权以明确“哪些人以什么身份访问了哪些设备”，从而让运维混乱变得有序起来，堡垒机不仅可以明确每一个运维人员的访问路径，还可以将每一次访问及操作过程变得可以“审计”，就像飞机中的黑匣子，汽车上的行车记录仪，能够做到针对运维人员的每次一操作均可以录像、全程审计，一但出了问题，可以追踪溯源。</p><p>运维安全管理与审计系统的目标可以概括为5W，主要是为了降低运维风险。具体如下：</p><ul><li>审计：你做了什么？（What） </li><li>授权：你能做哪些？（Which） </li><li>账号：你要去哪？（Where） </li><li>认证：你是谁？（Who）</li><li>来源：访问时间？（When）</li></ul><p>运维安全管理与审计系统实现：</p><ul><li>事前预防：建立“自然人-资源-资源账号”关系，实现统一认证和授权 </li><li>事中控制：建立“自然人-操作-资源”关系，实现操作审计和控制</li><li>事后审计：建立“自然人-资源-审计日志”关系，实现事后溯源和责任界定</li></ul><h2 id="三、运维安全管理与审计系统原理"><a href="#三、运维安全管理与审计系统原理" class="headerlink" title="三、运维安全管理与审计系统原理"></a>三、运维安全管理与审计系统原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>运维安全管理与审计系统（堡垒机），主要采用4A管理模型，对IT运维操作进行访问控制和行为审计的合规性管控系统，主要用来解决企业IT运维部门账号管理混乱，身份冒用、滥用，授权控制不明确，操作行为不规范，事件责任无法定位等问题。<br><strong>4A 是指认证 Authentication、授权 Authorization、账号 Account、审计 Audit</strong>，中文名称为统一安全管理平台解决方案。即将身份认证、授权、记账和审计定义为网络安全的四大组成部分，从而确立了身份认证在整个网络安全系统中的地位与作用。<br>具体来说：</p><ul><li>集中认证 (authentication) 管理<br>可以根据用户应用的实际需要，为用户提供不同强度的认证方式，既可以保持原有的静态口令方式，又可以提供具有双因子认证方式的高强度认证（一次性口令、数字证书、动态口令），而且还能够集成现有其它如生物特征等新型的认证方式。不仅可以实现用户认证的统一管理，并且能够为用户提供统一的认证门户，实现企业信息资源访问的单点登录。</li><li>集中权限 (authorization) 管理<br>可以对用户的资源访问权限进行集中控制。它既可以实现对 B/S、C/S 应用系统资源的访问权限控制，也可以实现对数据库、主机及网络设备的操作的权限控制，资源控制类型既包括 B/S 的 URL、C/S 的功能模块，也包括数据库的数据、记录及主机、网络设备的操作命令、IP 地址及端口。</li><li>集中帐号（account）管理<br>为用户提供统一集中的帐号管理，支持管理的资源包括主流的操作系统、网络设备和应用系统；不仅能够实现被管理资源帐号的创建、删除及同步等帐号管理生命周期所包含的基本功能，而且也可以通过平台进行帐号密码策略，密码强度、生存周期的设定。</li><li>集中审计 (audit) 管理<br>将用户所有的操作日志集中记录管理和分析，不仅可以对用户行为进行监控，并且可以通过集中的审计数据进行数据挖掘，以便于事后的安全事故责任的认定。</li></ul><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><p>实现的技术架构如下：<br><img src="https://img-blog.csdnimg.cn/7e0d1a91a53e42acb6080966f67cb1f9.png#pic_center" alt="堡垒机技术架构"></p><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><p>主要核心功能包括：<br><strong>1、访问控制</strong><br>通过对访问资源的严格控制，堡垒机可以确保运维人员在其账号有效权限、期限内合法访问操作资源，降低操作风险，以实现安全监管目的，保障运维操作人员的安全、合法合规、可控制性。<br><strong>2、账号管理</strong><br>当运维人员在使用堡垒机时，无论是使用云主机还是局域网的主机，都可以同步导入堡垒机进行账号集中管理与密码的批量修改，并可一键批量设置SSH秘钥对等。<br><strong>3、资源授权</strong><br>支持云主机、局域网主机等多种形式的主机资源授权，并且堡垒机采用基于角色的访问控制模型，能够对用户、资源、功能作用进行细致化的授权管理，解决人员众多、权限交叉、资产繁琐、各类权限复制等众多运维人员遇到的运维难题。<br><strong>4、指令审核</strong><br>对运维人员的账号使用情况，包括登录、资源访问、资源使用等。针对敏感指令，堡垒机可以对非法操作进行阻断响应或触发审核的操作情况，审核未通过的敏感指令，堡垒机将进行拦截。<br><strong>5、审计录像</strong><br>除了可以提供安全层面外，还可以利用堡垒机的事前权限授权、事中敏感指令拦截外，以及堡垒机事后运维审计的特性。运维人员在堡垒机中所进行的运维操作均会以日志的形式记录，管理者即通过日志对微云人员的操作进行安全审计录像。<br><strong>6、身份认证</strong><br>为运维人员提供不同强度的认证方式，既可以保持原有的静态口令方式，还可以提供微信、短信等认证方式。堡垒机不仅可以实现用户认证的统一管理，还能为运维人员提供统一一致的认证门户，实现企业的信息资源访问的单点登录。<br><strong>7、操作审计</strong><br>将运维人员所有操作日志集中管理与分析，不仅可以对用户行为进行监控与拦截，还可以通过集中的安全审计数据进行数据挖掘，以便于运维人员对安全事故的操作审计认定。</p><h2 id="四、运维安全管理与审计系统部署方式"><a href="#四、运维安全管理与审计系统部署方式" class="headerlink" title="四、运维安全管理与审计系统部署方式"></a>四、运维安全管理与审计系统部署方式</h2><h3 id="1、单机部署"><a href="#1、单机部署" class="headerlink" title="1、单机部署"></a>1、单机部署</h3><p>堡垒机主要都是旁路部署，旁挂在交换机旁边，只要能访问所有设备即可。<br>部署特点：<br>旁路部署，逻辑串联。<br>不影响现有网络结构。<br><img src="https://img-blog.csdnimg.cn/893c5d5192bd4839b0f37c19972b0c2f.png#pic_center" alt="单机部署"></p><h3 id="2、HA高可靠部署"><a href="#2、HA高可靠部署" class="headerlink" title="2、HA高可靠部署"></a>2、HA高可靠部署</h3><p>旁路部署两台堡垒机，中间有心跳线连接，同步数据。对外提供一个虚拟IP。用户通过堡垒机虚拟IP进行访问，堡垒机自动进行会话负载分配和数据同步、冗余存储。<br>部署特点：<br>两台硬件堡垒机，一主一备/提供VIP。<br>当主机出现故障时，备机自动接管服务。<br><img src="https://img-blog.csdnimg.cn/428a3252913d4633bfdfe5ea58c07486.png#pic_center" alt="HA高可靠部署"></p><h2 id="五、常见运维安全管理与审计系统产品"><a href="#五、常见运维安全管理与审计系统产品" class="headerlink" title="五、常见运维安全管理与审计系统产品"></a>五、常见运维安全管理与审计系统产品</h2><h3 id="商用"><a href="#商用" class="headerlink" title="商用"></a>商用</h3><p>奇安信[运维安全管理与审计系统]：<a href="https://www.qianxin.com/product/detail/pid/385" target="_blank" rel="noopener">https://www.qianxin.com/product/detail/pid/385</a><br>亚信安全[信磐堡垒机]：<a href="https://www.asiainfo-sec.com/product/detail-27.html" target="_blank" rel="noopener">https://www.asiainfo-sec.com/product/detail-27.html</a><br>绿盟[绿盟运维安全管理系统]：<a href="https://www.nsfocus.com.cn/html/2019/212_0926/20.html" target="_blank" rel="noopener">https://www.nsfocus.com.cn/html/2019/212_0926/20.html</a><br>启明星辰[堡垒机]：<a href="https://www.venustech.com.cn/new_type/blj/" target="_blank" rel="noopener">https://www.venustech.com.cn/new_type/blj/</a></p><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>麒麟堡垒机：<a href="http://www.secvpn.com.cn/" target="_blank" rel="noopener">http://www.secvpn.com.cn/</a><br>飞致JumpServer堡垒机：<a href="https://fit2cloud.com/jumpserver/index.html" target="_blank" rel="noopener">https://fit2cloud.com/jumpserver/index.html</a></p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是运维安全管理与审计系统&quot;&gt;&lt;a href=&quot;#一、什么是运维安全管理与审计系统&quot; class=&quot;headerlink&quot; title=&quot;一、什么是运维安全管理与审计系统&quot;&gt;&lt;/a&gt;一、什么是运维安全管理与审计系统&lt;/h2&gt;&lt;p&gt;运维安全管理与审计系统（俗称
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络信息安全之信息系统安全保障</title>
    <link href="https://xiejava.gitee.io/posts/61446357/"/>
    <id>https://xiejava.gitee.io/posts/61446357/</id>
    <published>2022-04-29T06:39:23.000Z</published>
    <updated>2022-04-29T06:58:02.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、信息系统安全保障相关概念"><a href="#一、信息系统安全保障相关概念" class="headerlink" title="一、信息系统安全保障相关概念"></a>一、信息系统安全保障相关概念</h2><p>信息系统是用于采集、处理、存储、传输、分发和部署信息的整个基础设施、组织结构、人员和组件的总和。随着当前社会信息化程度的不断提高，各类信息系统越来越成为其所从属的组织机构生存和发展的关键因素，信息系统的安全风险也成为组织风险的一部分。同时，信息系统受来自于组织内部与外部环境的约束，信息系统的安全保障除了要充分分析信息系统本身的技术、业务、管理等特性，还要考虑这些约束条件所产生的要求。为了保障组织机构完成使命，系统安全管理人员必须针对信息系统面临的各种各样的风险制定相应的策略。</p><p>信息系统安全保障是在信息系统的整个生命周期中，通过对信息系统的风险分析，制定并执行相应的安全保障策略，从技术、管理、工程和人员等方面提出信息安全保障要求，确保信息系统的保密性、完整性和可用性，把安全风险降到可接受的程度，从而保障系统能够顺利实现组织机构的使命。</p><p>信息系统安全保障工作就是针对信息系统在运行环境中所面临的各种风险，制定信息安全保障策略体系，在策略指导下，设计并实现信息安全保障架构或模型，采取技术、管理等安全保障措施，将风险降至预定可接受的程度，从而保障其使命要求。策略体系是组织机构在对风险、资产和使命综合理解的基础上所做出的指导文件。策略体系的制定，反映了组织机构对信息系统安全保障及其目标的理解，它的制定和贯彻执行对组织机构信息系统安全保障起着纲领性的指导作用。<br><img src="https://img-blog.csdnimg.cn/cf12dd4422694467ab47e9df821cf441.png#pic_center" alt="信息系统安全概念和关系" title="信息系统安全概念和关系"></p><p>信息系统安全保障工作的基础和前提是风险管理。信息安全策略必须以风险管理为基础，针对可能存在的各种威胁和自身存在的弱点，采取有针对性的防范措施。</p><h2 id="二、信息系统安全保障模型"><a href="#二、信息系统安全保障模型" class="headerlink" title="二、信息系统安全保障模型"></a>二、信息系统安全保障模型</h2><p>信息系统安全保障模型包含保障要素、生命周期和安全特征3个方面。<br><img src="https://img-blog.csdnimg.cn/8628a0d24f8546279025e516ff5821d5.png#pic_center" alt="信息系统安全保障模型" title="信息系统安全保障模型"></p><p>信息系统安全保障模型的主要思路是以风险和策略为基础，在整个信息系统的生命周期中实施技术、管理、工程和人员保障要素。通过信息系统安全保障实现信息安全的安全特征：信息的保密性、完整性和可用性特征，从而达到保障组织机构执行其使命的根本目的。</p><p>模型特点：</p><ul><li>将风险和策略作为信息系统安全保障的基础和核心。</li><li>强调信息系统安全保障应贯穿于整个信息系统生命周期的全过程。</li><li>强调综合保障的观念。通过综合技术、管理、工程和人员要素来保障信息系统安全。</li></ul><h3 id="1、基于信息系统生命周期的信息安全保障"><a href="#1、基于信息系统生命周期的信息安全保障" class="headerlink" title="1、基于信息系统生命周期的信息安全保障"></a>1、基于信息系统生命周期的信息安全保障</h3><p>信息系统的生命周期层面和保障要素层面不是相互孤立的，而是相互关联、密不可分的。<br><img src="https://img-blog.csdnimg.cn/9c35a3d5b9f84a1ba76d13d505998e89.png#pic_center" alt="信息系统安全保障生命周期的安全保障要素" title="信息系统安全保障生命周期的安全保障要素"></p><p>在信息系统生命周期模型中，将信息系统的整个生命周期抽象成计划组织、开发采购、实施交付、运行维护和废弃5个阶段，加上在运行维护阶段的变更产生的反馈，形成信息系统生命周期完整的闭环结构。在信息系统生命周期中的任何时间点上，都需要综合信息系统安全保障的技术、管理、工程和人员保障要素。</p><ul><li>计划组织阶段 ：根据组织机构的业务要求、法律法规的要求、系统所存在的风险等因素，产生了信息系统安全保障需求。在此阶段，信息安全策略应加入信息系统建设和使用的决策中。从信息系统建设开始，就应该综合考虑系统的安全保障要求，确保信息系统建设和信息系统安全保障建设同步规划、同步实施。也就是我们平时讲的信息系统和安全保障要“三同步”–同步规划、同步建设、同步使用。</li><li>开发采购阶段：此阶段是计划组织阶段的细化和具体体现。在此阶段中，进行系统安全需求分析、系统安全体系设计以及相关预算申请和项目准备等活动。在此阶段，应克服传统拘泥于具体技术的片面性，要综合考虑系统的风险和安全策略，将信息系统安全保障作为一个个整体，进行系统地设计，建立信息系统安全保障整体规划和全局视野。组织机构可根据具体要求，对系统整体的技术、管理安全保障规划或设计进行评估，以保证对信息系统的整体规划满足组织机构的建设要求和相关国家与行业的要求。</li><li>实施交付阶段：在此阶段，组织机构可通过对承建方进行信息安全服务资格要求和人员专业资格要求以确保施工组织的服务能力；组织机构还可通过信息系统安全保障工程保障对实施施工过程进行监理和评估,最终确保所交付系统的安全性。</li><li>运行维护阶段：信息系统进人运行维护阶段后，对信息系统的管理、运行维护和使用人员的能力等方面进行综合保障,是信息系统得以安全正常运行的根本保证。</li><li>变更：信息系统投入运行后并不是- - 成不变的，它随着业务和需求的变更、外界环境的变更产生新的要求或增强原有的要求，重新进人信息系统组织计划阶段(即规划阶段)。</li><li>废弃阶段：当信息系统不再满足业务要求时，信息系统进入废弃阶段，在这个阶段，需要考虑信息安全销毁等要素。</li></ul><p>这样，通过在信息系统生命周期所有阶段融人信息系统安全保障概念，确保了信息系统的持续动态安全保障。</p><h3 id="2、信息安全保障要素"><a href="#2、信息安全保障要素" class="headerlink" title="2、信息安全保障要素"></a>2、信息安全保障要素</h3><h4 id="1）信息安全技术"><a href="#1）信息安全技术" class="headerlink" title="1）信息安全技术"></a>1）信息安全技术</h4><p>信息安全技术体系包括以下几个方面。</p><ul><li>密码技术：密码技术及应用涵盖了数据处理过程的各个环节，如数据加密、密码分析、数字签名、身份识别、秘密分享等。通过以密码学为核心的信息安全理论与技术保证数据的机密性和完整性等要求。<br>访问控制技术：在为用户对系统资源提供最大限度共享的基础上，对用户的访问权进行管理，防止对信息的非授权篡改和滥用。访问控制对经过身份鉴别后的合法用户提供所需要的且经过授权的服务,拒绝用户越权的服务请求，保证用户在系统安全策略下有序工作。</li><li>审计和监控技术：审计是事后认定违反安全规则行为的分析技术，在检测违反安全规则方面、准确发现系统发生的事件以及对事件发生的事后分析方面，审计都发挥着巨大的作用。审计技术的发展，来源于对访问的跟踪，这些访问包括对保存在计算机系统中敏感及重要信息的访问和对计算机系统资源的访问。网络安全监控包括主动监控和被动监控。它依赖于在任何给定时间内网络组件和检测器记录下已经发生的事情，接收日志信息，并对它进行分析。</li><li>网络安全技术：这些技术包括网络协议安全、防火墙技术、人侵检测系统/人侵防御系统( Intrusion Detection System/Intrusion Prevention System, IDS/IPS )安全管理平台( Security Operations Center， SOC )、统一威胁管理( Unified Threat Management, UTM )等。网络安全技术主要是保护网络的安全，防止入侵攻击行为的发生。防火墙是一个位于可信网络和不可信网络之间的边界防护系统。防病毒网关防止基于HTTP/FTP/SMTP/POP3/HTTPS等网络协议侵人网络内部的病毒进行过滤。人侵检测系统是一种对网络传输进行即时监视，在发现可疑传输时发出警报措施的网络安全设备。人侵防御系统是监视网络传输行为的安全技术，它能够即时地中断、调整或隔离一些异常或是具有伤害性的网络传输行为。</li><li>操作系统与数据库安全技术：操作系统安全技术主要包括身份鉴别、访问控制 、文件系统安全、安全审计等方面。数据库安全技术包括数据库的安全特性和安全功能，数据库完整性要求和备份恢复，以及数据库安全防护、安全监控和安全审计等。</li><li>安全漏洞与恶意代码：包括安全漏洞的成因、分类、发掘方法，以及如何修复等;以及恶意代码的加载、隐藏和自我保护技术,恶意代码的检测原理及清除方法等。</li><li>软件安全开发：包括软件安全开发模型、软件安全开发关键阶段的安全控制措施等内容。</li></ul><h4 id="2）信息安全管理"><a href="#2）信息安全管理" class="headerlink" title="2）信息安全管理"></a>2）信息安全管理</h4><p>信息安全管理体系，是组织在整体或特定范围内建立信息安全方针和目标，以及完成这些目标所用方法的体系。基于对业务风险的认识、ISMS包括建立、实施、操作、监视、复查、维护和改进信息安全等一系列的管 理活动，并且表现为组织结构、策略方针、计划活动、目标与原则、人员与责任、过程与方法、资源等诸多要素的集合。</p><p>风险管理是指以风险为主线进行信息安全的管理，它的实施目标就是要依据安全标准和信息系统的安全需求，对信息、信息载体、信息环境进行安全管理，以达到安全目标。</p><p>风险管理贯穿于整个信息系统生命周期，包括对象确立、风险评估、风险控制、审核批准、监控与审查、沟通与咨询等6个方面的内容。其中，对象确立、风险评估、风险控制和审核批准是信息安全风险管理的4个基本步骤，监控与审查、沟通与咨询则贯穿于这4个基本步骤中。</p><h4 id="3）信息安全工程"><a href="#3）信息安全工程" class="headerlink" title="3）信息安全工程"></a>3）信息安全工程</h4><p>信息安全工程涉及系统和应用的开发、集成、操作、管理、维护和进化以及产品的开发、交付和升级。</p><p>系统安全工程能力成熟模型(Systems Security Engineering Capability Maturity Model，SSE-CMM)描述了一个组织的系统安全工程过程必须包含的基本特征。这些特征是完善的安全工程保证，也是系统安全工程实施的度量标准，同时还是一个易于理解的评估系统安全工程实施的框架。</p><h4 id="4）信息安全人才"><a href="#4）信息安全人才" class="headerlink" title="4）信息安全人才"></a>4）信息安全人才</h4><p>信息安全保障诸要素中，人是最关键也是最活跃的要素。网络攻防对抗，最终较量的是攻防两端的人，而不是设备。对组织机构来说，应建立一个完整的信息安全人才体系。<br>信息安全人才体系应包括以下方面。</p><ul><li>所有员工：需要进行信息安全保障意识教育，具体可以采用内部培训、在组织机构网站上发布相关信息等措施来增强所有员工的安全意识。</li><li>涉及信息系统的岗位和职责的员工：需要进行相应的信息安全保障的基本技能培训。</li><li>信息安全专业人员：应建立更全面、更专业的信息安全保障知识和经验。</li></ul><p>本文节选自：<br>《信息安全技术 信息系统安全保障评估框架：简介和一般模型》GB_T 20274.1 200<br>《CISP培训教材》</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、信息系统安全保障相关概念&quot;&gt;&lt;a href=&quot;#一、信息系统安全保障相关概念&quot; class=&quot;headerlink&quot; title=&quot;一、信息系统安全保障相关概念&quot;&gt;&lt;/a&gt;一、信息系统安全保障相关概念&lt;/h2&gt;&lt;p&gt;信息系统是用于采集、处理、存储、传输、分发和
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>安全运营之漏洞管理</title>
    <link href="https://xiejava.gitee.io/posts/a937cbf5/"/>
    <id>https://xiejava.gitee.io/posts/a937cbf5/</id>
    <published>2022-04-25T07:38:05.000Z</published>
    <updated>2022-04-25T07:45:24.917Z</updated>
    
    <content type="html"><![CDATA[<p>1947年冯·诺依曼建立计算机系统结构理论时认为，计算机系统也有天生的类似基因的缺陷，也可能在使用和发展过程中产生意想不到的问题。20世纪七八十年代，早期黑客的出现和第一个计算机病毒的产生，软件漏洞逐渐引起人们的关注。在各种产品、主机、网络和复杂信息系统中，安全漏洞以不同形式存在，而且数量逐年增加，利用漏洞造成的各类安全事件层出不穷。攻击行为或网络安全事件的发生正越来越多地受到利益驱动的影响，这种“黑色产业链”的兴起，导致越来越多的网络终端受害，大量机密信息被窃取，敏感数据信息在互联网上传播，并在黑市中待价而沽。工业控制领域以及新技术新应用的安全漏洞，特别是基础核心系统的安全漏洞已经成为危害国家经济和发展安全的重要因素。在安全运营过程中一个最重要的工作就是漏洞管理。</p><h2 id="一、什么是安全漏洞"><a href="#一、什么是安全漏洞" class="headerlink" title="一、什么是安全漏洞"></a>一、什么是安全漏洞</h2><p><strong>安全漏洞（Vulnerability）也被称为脆弱性</strong>。<br>根据国标-信息安全技术-安全漏洞标识与描述规范[GB/T 28458-2012]对安全漏洞的定义，安全漏洞是计算机信息系统在需求、设计、实现、配置运行等过程中，有意或无意产生的缺陷。这些缺陷以不同形式存在于计算机信息系统的各个层次和环节之中，一旦被恶意主体所利用，就会对计算机信息系统的安全造成损害，从而影响计算机信息系统的正常运行，危害信息产品或系统及信息的安全属性。</p><p>有时漏洞也被称作错误( Error)、缺陷 ( Fault)、 弱点( Weakness )或是故障( Failure )等，这些术语很容易引起混淆。在许多情况下，人们习惯于将错误、缺陷、弱点都简单地称为漏洞。需要指出的是，严格地说，错误、缺陷、弱点和故障并不等于漏洞。错误、缺陷和弱点是产生漏洞的条件，漏洞被利用后必然会破坏安全属性，但不一定能引起产品或系统故障。</p><h2 id="二、安全漏洞标识与描述"><a href="#二、安全漏洞标识与描述" class="headerlink" title="二、安全漏洞标识与描述"></a>二、安全漏洞标识与描述</h2><p>以下为国标-信息安全技术-安全漏洞标识与描述规范[GB/T 28458-2012] 对安全漏洞标识与描述的定义：<br>安全漏洞描述项包括标识号、名称、发布时间、发布单位、类别、等级、影响系统等必须的描述项，并可更具需要扩充（但不限于）相关编号、利用方法、解决方案建议、其他描述等描述项。<br><img src="https://img-blog.csdnimg.cn/d260bdaf3a0a4d4cb2ec59ad888e3f84.png#pic_center" alt="安全漏洞描述"></p><p><strong>标识号</strong><br>CVD-YYYY-NNNNNN格式为标识号。CVD为Common V ulnerabilities Description 的缩写；YYYY为4位十进制数字，表示产生本安全漏洞的年份；NNNNNN为6位十进制数字,表示当年内产生的安全漏洞的序号。<br><strong>名称</strong><br>安全漏洞标题，概括性描述安全漏洞信息的短语,例如InternetExplorer8.0缓冲区溢出漏洞。<br><strong>发布时间</strong><br>安全漏洞信息发布日期。<br><strong>发布单位</strong><br>发布安全漏洞的单位全称。<br><strong>类别</strong><br>安全漏洞所属分类，说明安全漏洞分类归属的信息。<br><strong>等级</strong><br>安全漏洞危害级别，说明安全漏洞能够造成的危害程度。<br><strong>影响系统</strong><br>安全漏洞所影响系统的信息，例如厂商、产品名称和版本号等。<br><strong>相关编号</strong><br>安全漏洞的其他相关编号,例如Bugtraq编号、CVE编号等。<br><strong>利用方法</strong><br>安全漏洞利用的方法，例如安全漏洞攻击方案或利用代码。<br><strong>解决方案建议</strong><br>安全漏洞的解决方案，例如补丁信息等。<br><strong>其他描述</strong><br>安全漏洞描述需要说明的其他相关信息，例如安全漏洞产生的具体原因。</p><h2 id="三、安全漏洞的分类分级"><a href="#三、安全漏洞的分类分级" class="headerlink" title="三、安全漏洞的分类分级"></a>三、安全漏洞的分类分级</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>网络安全漏洞分类是基于漏洞产生或触发的技术原因对漏洞进行划分，分类如下：<br><img src="https://img-blog.csdnimg.cn/e53981eba89a4ebe891147f241ede159.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="安全漏洞分类"></p><h3 id="分级"><a href="#分级" class="headerlink" title="分级"></a>分级</h3><p>网络安全漏洞分级是指采用分级的方式对网络安全漏洞潜在危害的程度进行描述，包括技术分级<br>和综合分级两种分级方式，每种方式均分为超危（严重）、高危、中危和低危四个等级,具体内容如下:<br><strong>超危（严重）</strong>：漏洞可以非常容易地对目标对象造成特别严重后果；<br><strong>高危</strong>：漏洞可以容易地对目标对象造成严重后果；<br><strong>中危</strong>：漏洞可以对目标对象造成一般后果，或者比较困难地对目标造成严重后果；<br><strong>低危</strong>：漏洞可以对目标对象造成轻微后果，或者比较困难地对目标对象造成一般严重后果，或<br>者非常困难地对目标对象造成严重后果。</p><h2 id="四、安全漏洞的生命周期"><a href="#四、安全漏洞的生命周期" class="headerlink" title="四、安全漏洞的生命周期"></a>四、安全漏洞的生命周期</h2><p>依据信息安全漏洞从产生到消亡的整个过程，信息安全漏洞生命周期分以下几个阶段：<br>a)漏洞的发现：通过人工或者自动的方法分析、挖掘漏洞的过程，并且该漏洞可以被验证和重现。<br>b)漏洞的利用：利用漏洞对计算机信息系统的保密性、完整性和可用性造成损害的过程。<br>c)漏洞的修复：通过补丁、升级版本或配置策略等对漏洞进行修补的过程，使得该漏洞不能够被<br>恶意主体所利用。<br>d)漏洞的公开：通过公开渠道(如网站、邮件列表等)公布漏洞信息的过程。</p><h2 id="五、安全漏洞的闭环管理"><a href="#五、安全漏洞的闭环管理" class="headerlink" title="五、安全漏洞的闭环管理"></a>五、安全漏洞的闭环管理</h2><p>根据漏洞生命周期中漏洞所处的不同状态，将漏洞管理行为对应为<strong>预防</strong>、<strong>收集</strong>、<strong>消减</strong>和<strong>发布</strong>等活动。<br><img src="https://img-blog.csdnimg.cn/006685a6190342bdba1455d3c8d79a83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="漏洞生命周期"></p><p>预防是指通过各种安全手段提高信息系统的安全水平，避免漏洞的产生和恶意利用。<br>收集是针对已发现的漏洞进行信息的及时跟踪与获取。<br>消减是指在漏洞被发现后积极采取补救措施,最大限度减少漏洞带来的损失。<br>发布是指在遵循一定的发布策略的前提下,对漏洞及其修复信息进行发布。<br>用户、厂商和漏洞管理组织可以根据漏洞的状态及管理活动建立符合自身特点的漏洞处理策略和处理流程。<br>对于企业组织安全运营来说可以参考以下漏洞处理流程：<br><img src="https://img-blog.csdnimg.cn/584faf04081b40ac8ac23dd93634d00a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="漏洞处理流程"></p><h3 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h3><p>一般由渗透测试工程师通过漏洞扫描工具或渗透测试发现系统漏洞，提交渗透测试报告。由安全工程师进行漏洞验证，确定系统漏洞是否真实存在。</p><h3 id="漏洞录入"><a href="#漏洞录入" class="headerlink" title="漏洞录入"></a>漏洞录入</h3><p>在漏洞验证完成后，安全工程师需要根据企业内部的漏洞等级划分标准，将存在的漏洞录入漏洞管理系统。</p><h3 id="漏洞分发"><a href="#漏洞分发" class="headerlink" title="漏洞分发"></a>漏洞分发</h3><p>漏洞管理系统根据漏洞所影响的业务系统、主机IP等匹配到系统负责部门和修复人。通知系统负责人进行修复加固等。</p><h3 id="漏洞跟进及修复"><a href="#漏洞跟进及修复" class="headerlink" title="漏洞跟进及修复"></a>漏洞跟进及修复</h3><p>根据漏洞等级设定的时效性，设置修复计划时间，漏洞复验时间，在漏洞管理系统中进行管理和跟进。漏洞修复人修复完成后提交安全工程师进行漏洞复验，验证漏洞是否确实已经修复。如果漏洞在目前的技术条件下确实无法修复，提交系统负责进行风险确认，采取其他规避风险的措施，如调整访控策略、下线等。</p><h3 id="漏洞修复周期"><a href="#漏洞修复周期" class="headerlink" title="漏洞修复周期"></a>漏洞修复周期</h3><p>漏洞修复周期，包括漏洞的验证、评估、分发、复验、修复和关闭的各个环节。漏洞的修复周期，会根据漏洞等级确定。<br>参考如下：</p><table><thead><tr><th>漏洞等级</th><th>漏洞确认时间</th><th>漏洞修复时间</th></tr></thead><tbody><tr><td>超危（严重）</td><td>12小时</td><td>24小时</td></tr><tr><td>高危</td><td>24小时</td><td>3*24小时</td></tr><tr><td>中危</td><td>36小时</td><td>7*24小时</td></tr><tr><td>低危</td><td>72小时</td><td>14*24小时</td></tr></tbody></table><h3 id="漏洞数据分析"><a href="#漏洞数据分析" class="headerlink" title="漏洞数据分析"></a>漏洞数据分析</h3><p>对于漏洞管理整个流程来说，漏洞缓解或已解决后，关闭工单不是最终的目的，需要对漏洞数据进行分析，持续运营，可以从以下几个方面考虑：<br>1）统计一段时间内，外网系统出现的次数最多的Top10漏洞排名，分析漏洞出现的原因；<br>如外网系统中出现多次SQL注入漏洞，可以检查WAF的规则库是否及时更新？规则是否生效？此外网系统是否在WAF的防护之内？对外的系统为何不做严格的字符过滤机制等。<br>2）统计一段时间内，自主开发系统中漏洞数量最多的Top10系统排名，分析造成的原因；<br>如弱口令次数过多，是安全意识宣传不够？研发人员不重视？<br>3）哪些供应商的开发的系统漏洞数量最多？分析存在的原因；<br>是否需要约谈供应商沟通，是安全开发能力的问题，还是研发安全意识不够？<br>4）哪些框架被利用造成的漏洞过多？<br>是情报问题？还是应急响应机制的原因？是否可以替换为其他框架？</p><hr><p>参考资料<br>信息安全技术 安全漏洞分类 GBT 33561-2017<br>信息安全技术 安全漏洞标识与描述规范 GB∕T 28458-2012<br>信息安全技术 安全漏洞等级划分指南 GB∕T 30279-2013<br>信息安全技术 信息安全漏洞管理规范 GB/T 30276-2013<br>安惞《浅谈企业内部安全漏洞的运营（一）：规范化》</p><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1947年冯·诺依曼建立计算机系统结构理论时认为，计算机系统也有天生的类似基因的缺陷，也可能在使用和发展过程中产生意想不到的问题。20世纪七八十年代，早期黑客的出现和第一个计算机病毒的产生，软件漏洞逐渐引起人们的关注。在各种产品、主机、网络和复杂信息系统中，安全漏洞以不同形
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络信息安全之基于时间的安全模型（PDR和PPDR模型）</title>
    <link href="https://xiejava.gitee.io/posts/5156b28b/"/>
    <id>https://xiejava.gitee.io/posts/5156b28b/</id>
    <published>2022-04-23T02:18:07.000Z</published>
    <updated>2022-04-23T02:19:59.063Z</updated>
    
    <content type="html"><![CDATA[<p>基于时间的安全模型是基于”<strong>任何安全防护措施都是基于时间的，超过该时间段，这种防护措施是可能被攻破的</strong>“这样的前提。该模型主要给出了信息系统的攻防时间表。攻击时间指的是在系统采取某种防守措施，通过不同的攻击手段来计算攻破该防守措施所需要的时间。防守时间指的是，对于某种固定攻击手法，通过采取不同的安全防护措施，来计算该防护措施所能坚守的时间。</p><p>基于时间的安全模型主要包括PDR和后来改进的PPDR模型，PDR模型是源自美国国际互联网安全系统公司ISS提出的自适应网络安全模型ANSM（AdaptiveNetwork Security Model），是一个可量化、可数学证明、基于时间的安全模型。美国ISS公司（后被IBM收购）提出的。PPDR模型是PDR的模型上发展起来的，也称P2DR，加入的P是Policy策略。</p><h2 id="一、PDR模型"><a href="#一、PDR模型" class="headerlink" title="一、PDR模型"></a>一、PDR模型</h2><p>保护-检测-响应( Protection-Detection-Response, PDR )模型是信息安全保障工作中常用的模型，是最早体现主动防御思想的一种网络安全模型，其思想是承认信息系统中漏洞的存在，正视信息系统面临的威胁，通过采取适度防护、加强检测工作、落实对安全事件的响应、建立对威胁的防护来保障系统的安全。<br>模型图如下图所示：<br><img src="https://img-blog.csdnimg.cn/bec7ca0d344442959d2cbf53b6d64eed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="PDR模型"></p><p>P-protection，保护就是采用一切可能的措施来保护网络、系统以及信息的安全。通常采用的技术及方法主要包括加密、认证、访问控制、防火墙及防病毒等。</p><p>D-detect，检测可以了解和评估网络和系统的安全状态，为安全防护和安全响应提供依据。常用的检测技术主要包括入侵检测、漏洞检测及网络扫描等技术。</p><p> R-response，应急响应在安全模型中占有重要地位，是解决安全问题的最有效办法。解决安全问题就是解决紧急响应和异常处理问题，因此，建立应急响应机制，形成快速安全响应的能力，对网络和系统至关重要。</p><p>PDR模型直观、实用，建立了一个所谓的基于时间的可证明的安全模型，定义了防护时间Pt(攻击者发起攻击时，保护系统不被攻破的时间)、检测时间Dt(从发起攻击到检测到攻击的时间)和响应时间Rt(从发现攻击到做出有效响应的时间)3个概念，并给出了评定系统安全的计算方式，<strong>当Pt&gt;Dt+Rt时，即认为系统是安全的</strong>，也就是说，如果在攻击者攻破系统之前发现并阻止了攻击的行为，那么系统就是安全的。</p><p>局限性：系统的Pt、Dt、Rt 很难准确定义，面对不同攻击者和不同种类的攻击，这些时间都是变化的，其实还是不能有效证明-一个系统是否安全。并且该模型对系统的安全隐患和安全措施采取相对固定的前提假设，难于适应网络安全环境的快速变化。</p><h2 id="二、PPDR模型"><a href="#二、PPDR模型" class="headerlink" title="二、PPDR模型"></a>二、PPDR模型</h2><p>策略-保护检测-响应模型( Policy-Protection-Detection-Response, PPDR )是在PDR模型的基础_上发展出来的模型，也称为P2DR模型。模型的核心思想是所有的防护、检测、响应都是依据安全策略实施的，模型包括4个主要部分: Policy (策略)、Protection ( 保护)、Detection(检测)和Response(响应)。<br>模型图如下图所示：<br><img src="https://img-blog.csdnimg.cn/4d73862be0024fbb81811491c43b56ab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="PPDR模型"></p><p>策略（Policy）：模型的核心，所有的防护、检测和响应都是依据安全策略实施的。安全策略一般由总体安全策略和具体安全策略两部分组成。<br>保护（Protection）：保护是根据系统可能出现的安全问题而采取的预防措施，这些措施通过传统的静态安全技术实现。采用的防护技术通常包括数据加密、身份认证、访问控制、授权和虚拟专用网(VPN)技术、防火墙、安全扫描和数据备份等。<br>检测（Detection）：当攻击者穿透防护系统时，检测功能就发挥作用，与防护系统形成互补。检测是动态响应的依据。<br>响应（Response）：系统一旦检测到人侵，响应系统就开始工作，进行事件处理。响应包括应急响应和恢复处理，恢复处理又包括系统恢复和信息恢复。</p><p>PPDR模型是在整体的安全策略的控制和指导下，在综合运用防护工具(如防火墙、操作系统身份认证、加密等)的同时，利用检测工具(如漏洞评估、人侵检测等)了解和评估系统的安全状态，通过适当的反应将系统调整到“最安全”和“风险最低”的状态。保护、检测和响应组成了一个完整的、动态的安全循环，在安全策略的指导下保证信息系统的安全。</p><p>该理论的最基本原理就是信息安全相关的所有活动，不管是攻击行为、防护行为、检测行为和响应行为等都要消耗时间,因此可以用时间来衡量一个体系的安全性和安全能力。假设系统的防护、检测和反应时间分别是Pt、Dt和Rt。系统被对手成功攻击后的时间为暴露时间(Et)，那么PPDR模型就可以用典型的数学公式来表达安全的要求：如果Pt&gt;Dt+Rt,那么系统是安全的。</p><p>P2DR模型中的数学法则：<br>假设S系统的防护、检测和反应的时间分别是<br>• Pt（防护时间、有效防御攻击的时间）<br>• Dt（检测时间、发起攻击到检测到的时间）<br>• Rt（反应时间、检测到攻击到处理完成时间）<br> 假设系统被对手成功攻击后的时间为<br>• Et（暴露时间）<br>则该系统防护、检测和反应的时间关系如下：<br>• 如果Pt＞Dt＋Rt，那么S是安全的；<br>• 如果Pt＜Dt＋Rt，那么Et＝（Dt＋Rt）－Pt。</p><p>PPDR给出了安全的全新定义：“<strong>及时的检测和响应就是安全</strong>”，”<strong>及时的检测和恢复就是安全</strong>”。这样的定义给出了解决安全问题的明确方向:提高系统的防护时间Pt，降低检测时间Dt和响应时间Rt。</p><p>与PDR模型相比，PPDR模型更强调控制和对抗，即强调系统安全的动态性，并且以安全检测、漏洞监测和自适应填充“安全间隙”为循环来提高网络安全。值得指出的是，在PPDR模型中，考虑了管理因素,它强调安全管理的持续性、安全策略的动态性，以实时监视网络活动、发现威胁和弱点来调整和填补网络漏洞。另外，该模型强调检测的重要性，通过经常对信息系统的评估把握系统风险点，及时弱化甚至消除系统的安全漏洞。但该模型忽略了内在的变化因素，如人员的流动、人员的素质和策略贯彻的不稳定性。系统本身安全能力的增强、系统和整个网络的优化，以及人员在系统中最重要角色的素质提升，都是该安全系统没有考虑到的问题。</p><table><thead><tr><th></th><th>PDR</th><th>PPDR</th></tr></thead><tbody><tr><td>意义</td><td>最早体现主动防御思想的一种网络安全模型</td><td>是动态网络是安全体系的代表模型，动态安全模型的雏形。</td></tr><tr><td>组成</td><td>保护-检测-响应( Protection-Detection-Response, PDR )</td><td>策略-保护检测-响应模型( Policy-Protection-Detection-Response, PPDR )</td></tr><tr><td>特点</td><td>PDR模型建立了一个所谓的基于时间的可证明的安全模型，定义了:防护时间Pt (黑客发起攻击时，保护系统不被攻破的时间)、检测时间Dt (从发起攻击到检测到攻击的时间)和响应时间Rt (从发现攻击到作出有效响应的时间)。当Pt&gt;Dt+Rt时，即认为系统是安全的，也就是说，如果在黑客攻破系统之前发现并阻止了黑客的行为，那么系统就是安全的。</td><td>给出了安全一个全新的定义：“及时的检测和响应就是安全”，“及时的检测和恢复就是安全”。而且，这样的定义为安全问题的解决给出了明确的方向：提高系统的防护时间Pt，降低检测时间.Dt和响应时间Rt。</td></tr><tr><td>局限性</td><td>系统的Pt、Dt、Rt 很难准确定义，面对不同攻击者和不同种类的攻击，这些时间都是变化的，其实还是不能有效证明一个系统是否安全。并且该模型对系统的安全隐患和安全措施采取相对固定的前提假设，难于适应网络安全环境的快速变化</td><td>忽略了内在的变化因素，如人员的流动、人员的素质和策略贯彻的不稳定性。系统本身安全能力的增强、系统和整个网络的优化，以及人员在系统中最重要角色的素质提升，都是该安全系统没有考虑到的问题。</td></tr></tbody></table><p>不管是PDR还是PPDR，总体来说还是局限于从技术上考虑信息安全问题。随着信息化的发展，人们越来越意识到信息安全涉及面非常广，除了技术，管理、制度、人员和法律等方面也是信息安全必须考虑的因素，就像一个由多块木块构成的“木桶”，木桶的容量由最短的那块板决定。在处理信息安全问题时，必须全面考虑各方面的因素，任何一个方面的遗漏都有可能形成“短板”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于时间的安全模型是基于”&lt;strong&gt;任何安全防护措施都是基于时间的，超过该时间段，这种防护措施是可能被攻破的&lt;/strong&gt;“这样的前提。该模型主要给出了信息系统的攻防时间表。攻击时间指的是在系统采取某种防守措施，通过不同的攻击手段来计算攻破该防守措施所需要的时间。
      
    
    </summary>
    
    
      <category term="技术" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://xiejava.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
