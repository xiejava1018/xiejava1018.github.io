<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习英语，你认为“长期”的坚持是多长，“大量”的阅读又是多少？</title>
      <link href="/posts/a9bec41d/"/>
      <url>/posts/a9bec41d/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230302/LearnEnglish.png" alt="English" title="English"><br>今天在豆瓣上翻到我在2020年4月发的一篇文章《<a href="https://book.douban.com/review/12481861/" target="_blank" rel="noopener">看完全套149本《书虫》是种什么样的体验</a>》。有豆友留言在问“现在英语怎么样了”？顿时感觉脸上火辣辣的，被啪啪打脸！</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230302/%E8%B1%86%E7%93%A3%E5%9B%9E%E5%A4%8D.png" alt="豆瓣回复" title="豆瓣回复"></p><p>到今天2023年3月了，快三年了，自己的英语又回到了原点。在我学习英语的生涯中又添加了一次英语学习失败的经历。陷入了第N+1轮的从坚持到放弃，从放弃到开始的魔咒。</p><p>终究还是把英语学习看得太轻了！对于英语的学习，我经历过《<a href="https://book.douban.com/review/10294018/" target="_blank" rel="noopener">坚持了330天，我终于放弃了背单词</a>》、《<a href="https://book.douban.com/review/12481861/" target="_blank" rel="noopener">看完全套149本《书虫》是种什么样的体验</a>》、《<a href="https://book.douban.com/review/12484676/" target="_blank" rel="noopener">英语学渣的我是如何撸完这本英文原著的</a>》。经历了1年的背单词的过程，半年的看完全套书虫，半年撸完10本英文原著（见豆列《<a href="https://www.douban.com/doulist/118432400/" target="_blank" rel="noopener">我读过的英文读本</a>》）。</p><p>关于学习英语这件事，大家都知道需要“长期”的坚持，“大量”的阅读应用。那么你认为长期的坚持是多长，大量的阅读是多少呢？我前前后后花了两年的时间，完成了149本书虫，看完了上十本英文原著，我觉得我已经很努力了，很能坚持了。当我试图在网上寻找这个答案时，发现自己认为花了两年的时间很长，人家已经坚持了七八上十年了；自己嘚瑟看完了全套书虫，人家不但晒完了全套书虫还晒完了哈利波特系列、床头灯系列后每年还坚持撸完二三十本原著。你所谓的“坚持”和“大量”，在人家眼里那只能是渣渣！学英语的路上，总能遇到比你厉害的人却还比你更努力！</p><p>学习这件事，真的没有捷径，谁更用功谁功夫深。好在已经有大量的人已经验证过，英语这个技能是可以通过“长期”的坚持和“大量”的应用可以习得的，我们应该笃信这个事情。<strong>“长期”的坚持是多长，”大量”的阅读是多少，最终只能通过效果来验证</strong>。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230302/%E5%AD%A6%E4%B9%A0%E6%8B%90%E7%82%B9.png" alt="学习拐点" title="学习拐点"></p><p>知识和能力的习得与积累是有复利效应的。所以，应该要相信自己能够通过“长期”和“大量”的积累和复利获得成功和成长，实现自己的英语应用的自由。有人通过自己的长期坚持和大量的积累成功的突破了拐点，实现了自己的目标。自己还没有成功，说明坚持得不久，积累得不够，在拐点到来之前就慢慢的放弃了，如果继续放弃那以前花费的时间精力只能是变成沉默成本不会有任何效果了。实现英语阅读自由只能是梦想了。</p><p><strong>革命尚未成功，同志仍需努力！梦想还是要有的，现在开始继续坚持英语学习吧！</strong></p><hr><center> <br><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/fullbug%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“fullbug”微信公众号" title="“fullbug”微信公众号"> </p><p>关注：微信公众号,一起学习成长！</center></p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全评估之漏洞扫描、基线检查、渗透测试</title>
      <link href="/posts/78efec46/"/>
      <url>/posts/78efec46/</url>
      
        <content type="html"><![CDATA[<p>为保证业务系统运营的安全稳定，在业务系统上线前需要开展三同步检查，针对新业务系统上线、新版本上线、项目验收前开展安全评估。可以帮助其在技术层面了解系统存在的安全漏洞。今天就来了解一下安全评估之漏洞扫描、基线检查、渗透测试。</p><p>安全评估的内容主要涉及主机漏洞扫描、安全基线检查、渗透测试三个方面：</p><h2 id="主机漏洞扫描"><a href="#主机漏洞扫描" class="headerlink" title="主机漏洞扫描"></a>主机漏洞扫描</h2><p>主机漏洞扫描一般是采用漏洞扫描工具，根据其内置的弱点测试方法，从网络侧对被评估对象进行一系列的检查，从而发现弱点。发现其存在的不安全漏洞后进行人工分析和确认，针对每个漏洞的整改意见完成报告的输出。被评估对象系统的管理人员根据扫描的结果以及修复建议修复网络安全漏洞，在黑客攻击前进行防范。被评估对象系统的管理人员对这些漏洞进行修复后，安服工程师会对漏洞扫描报告中每个漏洞进行漏洞复测，并输出复测报告。使用户更加全面的了解全网的安全状态，提高对安全漏洞的认识和管理能力，并通过对漏洞的修补加强应用系统抵御恶意入侵的能力。</p><h2 id="安全基线检查"><a href="#安全基线检查" class="headerlink" title="安全基线检查"></a>安全基线检查</h2><p>安全基线检查是通过采用安全检查设备以及人工检查两种方法从对应目标的安全合规性等方面开展对系统的全量安全基线检查，从而发现其基线的不合规项。其次在发现基线不合规项之后由安服工程师进行人工二次确认，依据工信部基线安全标准，针对性提供每个基线不合规项的整改建议，并完成基线不合规项报告输出。评估对象系统的管理人员可根据输出报告对基线不合规项进行基线整改。整改完成后，安服工程师会对按照工信部基线安全标准对所涉及不合规项进行安全基线复测，并输出复测报告。确保系统安全性得到提升，建立系统基础的安全防御体系。</p><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><p>渗透测试主要是模拟黑客的攻击手法，通过自动化漏洞扫描工具结合手工测试的方式对系统进行无害化的安全评估。渗透测试包含应用安全测试和业务安全测试两部分，应用安全测试包括但不限于如下内容：</p><table><thead><tr><th>序号</th><th>应用安全检查项</th><th>检查项说明</th></tr></thead><tbody><tr><td>1</td><td>注入类攻击</td><td>注入攻击漏洞，例如SQL，OS以及LOAP注入，这些攻击发生在当不可信的数据作为命令或者查询语句的一部分，被发送给解释器的时候，攻击者发送的恶意数据可以欺骗解释器，以执行计划外的命令或者访问未授权的数据。</td></tr><tr><td>2</td><td>跨站脚本（XSS）</td><td>当应用程序收到含有不可信的数据，在没有进行适当的验证和转义的情况下，就将它发送给一个网页浏览器，这就会产生跨站脚本攻击（简称XSS）。XSS允许攻击者在受害者的浏览器上执行脚本，从而劫持用户会话、危害网站、或者将用户转向恶意网站。</td></tr><tr><td>3</td><td>失效的身份认证和会话管理</td><td>与身份认证和会话管理相关的应用程序功能往往得不到正确的实现，这就导致了攻击者破坏密码、秘钥、会话令牌或攻击其他的漏洞去冒充其他用户的身份</td></tr><tr><td>4</td><td>不安全的直接对象引用</td><td>当开发人员暴露一个对内部实现对象的引用时，例如，一个文件、目录或数据库秘钥，就会产生一个不安全的直接对象引用，在没有访问控制检测或者其他保护时，攻击者会操作这些引用去访问未授权数据。</td></tr><tr><td>5</td><td>跨站请求伪造</td><td>一个跨站请求伪造攻击迫使登陆用户的浏览器将伪造的HTTP请求，包括该用户的会话cookie和其他认证信息，发送到一个存在漏洞的web应用程序，这就允许了攻击者迫使用户浏览器向存在漏洞的应用程序发送请求，而这些请求会被应用程序认为是用户的合法请求。</td></tr><tr><td>6</td><td>安全配置错误</td><td>好的安全需要对应用程序、框架、应用程序服务器、web服务器、数据库服务器和平台，定义和执行安全配置。由于许多设置的默认值并不是安全的，因此，必须定义、实施和维护所有这些设置。这包括了对所有的软件保持及时地更新，包括所有应用程序的库文件。</td></tr><tr><td>7</td><td>不安全的加密存储</td><td>许多web应用程序并没有使用恰当的加密措施或Hash算法保护敏刚数据，比如信用卡、身份证等等。攻击者可能利用这种弱保护数据实行身份盗窃、信用卡诈骗或其他犯罪。</td></tr><tr><td>8</td><td>没有限制URL访问</td><td>许多web应用程序在显示受保护的链接和按钮之前会检测URL访问权限。但是，当这些页面被访问是，应用程序也需要执行类似的访问控制检测，否则攻击者将可以伪造这些URL去访问隐藏的页面</td></tr><tr><td>9</td><td>传输层的保护不足</td><td>应用程序时常没有进行身份认证，加密措施，甚至没有保护敏感网络数据的保密性和完整性。而当进行保护时，应用程序有时采用弱算法，使用过期或者无效的证书，或不正确地使用这些技术。</td></tr><tr><td>10</td><td>未验证的重定向和转发</td><td>WEB应用程序经常将用户重新定向和转发到其他网页和网站，并且利用不可信的数据去判定目的页面，如果没有得到适当验证，攻击者可以重定向受害用户到钓鱼软件或恶意网站，或者使用转发去访问未授权的页面</td></tr></tbody></table><p>业务安全测试包括但不限于如下内容：</p><table><thead><tr><th>序号</th><th>业务安全检查项</th><th>检查项说明</th></tr></thead><tbody><tr><td>1</td><td>身份认证管理</td><td>该项测试主要针对身份认证环节，以及在非授权情况下访问一些授权用户才能访问的页面，或进行授权用户的操作。</td></tr><tr><td>2</td><td>业务一致性</td><td>该项测试主要针对办理业务过程中用户的身份与用户办理的业务是否相关联一直的安全测试</td></tr><tr><td>3</td><td>业务授权安全</td><td>该项测试主要针对于是否存在非授权情况下访问一些授权用户才能访问的页面，或进行授权用户的操作。</td></tr><tr><td>4</td><td>用户输入合法性验证</td><td>Web应用程序没有对用户输入数据的合法性进行判断，就会使应用程序存在安全隐患。从而容易受到跨站脚本及SQL注入等攻击</td></tr><tr><td>5</td><td>误操作回退</td><td>手动进行误操作尝试，看系统是否能够正确回滚。例如，交易操作，在购买未完成时异常退出，看系统是否能够自动释放被购买物的锁定状态。又例如办理操作，如话费套餐变更，更改过程出错或异常退出是否能正确回滚到办理之前的状态</td></tr><tr><td>6</td><td>验证码机制</td><td>验证码控制是一种由WEB应用程序生成的随机数，以确保用户提交的请求不是由bot生成。</td></tr><tr><td>7</td><td>业务数据篡改</td><td>该项测试主要针对于办理业务过程中用户浏览器端传递至服务端的字段篡改测试。</td></tr><tr><td>8</td><td>业务流乱序</td><td>该项测试主要针对业务的处理流程是否有正常的顺序，确保不会通过技术手段绕过某些重要流程步骤。</td></tr><tr><td>9</td><td>信息正确呈现</td><td>对于用户提交的请求，是否能够返回用户需要的页面信息。</td></tr><tr><td>10</td><td>业务接口恶意调用</td><td>1.对于敏感的业务接口，是否预先有身份认证机制？查看此类可能被恶意大规模调用的业务接口，如用户登录模块、密码找回、密码重置等等。<br>2.对于具有查询展示办理功能的业务皆苦，如果不需要身份认证是否有强制验证码机制防止机器人程序等自动化大规模的恶意调用。</td></tr></tbody></table><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给两年后2025年的自己</title>
      <link href="/posts/c33148ad/"/>
      <url>/posts/c33148ad/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/3831eb63ced044ebac973cee16a83668.png#pic_center" alt="致未来"></p><p>2025年的我应该是实现了架子鼓演奏自由，可以轻松的驾驭并享受架子鼓演奏带来的愉悦和快乐。可以很自信的在抖音或B站上上传自己平时很惬意的架子鼓日常练习，不用再担心有人说”节奏不稳、勉强还行”了。技巧应该很熟了，什么重轻音、滚奏、双踩都不在话下了，16分节奏型速度在120以上那都是小case，可以挑战一些有难度的歌曲了。可以很有底气的说我会打架子鼓！要不要来表演一段？</p><p>2025年的我应该是实现了英语阅读的自由，可以享受在英语文献中获取知识带来的快乐，可以不带字幕的看懂大部分的美剧大片了。不用再忍受看一页原版英语小说还要不停的翻英汉字典，搞得阅读兴趣全无了。应该可以畅快的看懂英文的计算机相关的技术文档了，可以尝试翻译英文技术文档了。</p><p>2025年的我技术能力水平应该更高了，心智更加成熟，思考更加有深度了，更加乐意写技术文章做技术分享了。CSDN账号的粉丝应该是到了10W，可以小小的嘚瑟一下了！</p><p>2025年的我还没有达到财富自由，上班还是在上班，但心态没有这么累了，应该是在享受工作了。开了多年的老爷车应该是换了，换成了新能源的混动车，偶尔可以开着新车去旅行，感受不一样的风景了。</p><p><strong>如今的各种不如意，都是来自于过去的不努力！</strong></p><p><strong>2025年的我，要感谢现在努力的自己！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全之认识挖矿木马</title>
      <link href="/posts/2f88a4b/"/>
      <url>/posts/2f88a4b/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是挖矿木马？"><a href="#一、什么是挖矿木马？" class="headerlink" title="一、什么是挖矿木马？"></a>一、什么是挖矿木马？</h2><p>比特币是以区块链技术为基础的虚拟加密货币，比特币具有匿名性和难以追踪的特点，经过十余年的发展，已成为网络黑产最爱使用的交易媒介。大多数勒索病毒在加密受害者数据后，会勒索代价高昂的比特币。比特币在2021年曾达到1枚6.4万美元的天价，比特币的获得需要高性能计算机（又称矿机，一般配置顶级CPU和GPU）按特定算法计算，计算的过程被形象的称为“挖矿”。</p><p>矿机价格昂贵，为生产比特币，有人不惜重金购置大量矿机组成网络集群挖矿。挖矿又非常耗电，因此矿场往往会寻找偏僻地区的小水电、小火电而建，因为电费便宜，有人为节约成本偷电挖矿。</p><p>当数字加密币市值暴涨时，挖矿业务会水涨船高，高端CPU、GPU、高端显卡、大容量硬盘被炒上天价还卖断货。目前，我国政府宣布要实现碳达峰碳中和的目标，严重耗能的虚拟加密币相关生产、交易被认定为非法，我国境内所有（生产加密货币的）矿场必须关闭。</p><p>因挖矿需要大量财力投入，从一开始，就有人想到利用木马控制他人的计算机组建僵尸网络集群挖矿的办法，这就是所谓“挖矿木马”。</p><p>不法分子通过各种非法手段将矿机程序植入受害者的计算机中，利用受害者计算机的运算能力进行挖矿活动，从而获取非法收益。这类非法侵入用户计算机的矿机程序被称作挖矿木马病毒。</p><h2 id="二、挖矿木马的主要入侵方式"><a href="#二、挖矿木马的主要入侵方式" class="headerlink" title="二、挖矿木马的主要入侵方式"></a>二、挖矿木马的主要入侵方式</h2><p>挖矿木马常见的攻击方式及攻击后果可以参考下图：<br><img src="https://img-blog.csdnimg.cn/7ac1cf3704184141943ff79cd989b930.png" alt="挖矿木马的主要入侵方式"></p><h3 id="1、漏洞攻击"><a href="#1、漏洞攻击" class="headerlink" title="1、漏洞攻击"></a>1、漏洞攻击</h3><p>利用系统漏洞快速获取相关服务器权限，植入挖矿木马是目前最为普遍的传播方式之一。常见的漏洞包括Windows系统漏洞、服务器组件插件漏洞、中间件漏洞、Web漏洞等。例如传播较广的WannaMine挖矿家族，利用了永恒之蓝漏洞在内网蠕虫式传播，给不少公司和机构带来巨大损失。</p><h3 id="2、弱口令爆破"><a href="#2、弱口令爆破" class="headerlink" title="2、弱口令爆破"></a>2、弱口令爆破</h3><p>弱口令指的是仅包含简单口令、有规律的键盘组合或历次泄漏过的密码，攻击者通常会针对redis、ssh、3389、mssql、IPC$等服务进行爆破弱口令攻击。爆破成功后，尝试获取系统权限，植入挖矿木马并设置持久化。</p><h3 id="3、伪装正常软件"><a href="#3、伪装正常软件" class="headerlink" title="3、伪装正常软件"></a>3、伪装正常软件</h3><p>攻击者将挖矿木马伪装为游戏软件、娱乐社交软件、安全软件、游戏外挂等进行传播，欺骗用户下载并执行。由于多数游戏对显卡、CPU等硬件性能要求较高，故挖矿木马通常伪装成游戏辅助外挂，通过社交群、网盘等渠道传播，感染大量机器。</p><h2 id="三、挖矿木马的安全危害"><a href="#三、挖矿木马的安全危害" class="headerlink" title="三、挖矿木马的安全危害"></a>三、挖矿木马的安全危害</h2><p>挖矿木马攻击，就是发生率较高，极可能造成业务系统中断的威胁事件，挖矿木马最明显的影响是大量消耗系统资源，使系统其他软件或服务运行缓慢，性能变差。主要安全危害包括业务故障、资源损耗及其他的安全威胁。</p><h3 id="1、业务故障"><a href="#1、业务故障" class="headerlink" title="1、业务故障"></a>1、业务故障</h3><p>挖矿木马会占用CPU进行超频运算，从而占用主机大量的CPU资源，导致设备性能不足，业务访问缓慢，设备过载宕机重启，异常网络链接等问题，严重影响服务器上的其他应用的正常运行，最终会影响业务系统工作运行。</p><h3 id="2、资源损耗"><a href="#2、资源损耗" class="headerlink" title="2、资源损耗"></a>2、资源损耗</h3><p>挖矿木马的挖矿活动会使设备各器件高速运行，产生大量热能，增加电能消耗，加速设备器件老化等问题，造成资源损耗浪费。</p><h3 id="3、安全威胁"><a href="#3、安全威胁" class="headerlink" title="3、安全威胁"></a>3、安全威胁</h3><p>挖矿木马作为一款应用程序，在服务器中运行，其拥有服务器权限，对服务器主机产生安全威胁。部分挖矿木马还具备蠕虫化的特点，在主机被成功入侵之后，挖矿木马还会向内网渗透，并在被入侵的服务器上持久化驻留以获取最大收益。</p><h2 id="四、挖矿木马的检测手段"><a href="#四、挖矿木马的检测手段" class="headerlink" title="四、挖矿木马的检测手段"></a>四、挖矿木马的检测手段</h2><h3 id="1、挖矿主机指纹识别"><a href="#1、挖矿主机指纹识别" class="headerlink" title="1、挖矿主机指纹识别"></a>1、挖矿主机指纹识别</h3><p>通过主机探测平台内置指纹知识库，如：Body特征、Header特征，对挖矿木马指纹进行识别，进而发现感染挖矿木马主机资产。</p><h3 id="2、挖矿主机端口识别"><a href="#2、挖矿主机端口识别" class="headerlink" title="2、挖矿主机端口识别"></a>2、挖矿主机端口识别</h3><p>通过研究分析目前主流的挖矿木马类型存在的通信端口，感染主机的标记端口等，形成挖矿木马常用端口知识库，并对资产开放端口进行聚合分析，探测这些端口的指纹信息进行识别和确认。</p><h3 id="3、挖矿主机协议检测"><a href="#3、挖矿主机协议检测" class="headerlink" title="3、挖矿主机协议检测"></a>3、挖矿主机协议检测</h3><p>通过挖矿木马的通信协议特征，对比分析网络资产开放的服务协议，定位存在挖矿木马感染风险的资产主机。</p><h3 id="4、IOC威胁情报关联检测"><a href="#4、IOC威胁情报关联检测" class="headerlink" title="4、IOC威胁情报关联检测"></a>4、IOC威胁情报关联检测</h3><p>通过大数据威胁情报，实时更新最新的挖矿木马情报。包括挖矿木马家族使用的C&amp;C域名、恶意文件hash、矿池域名和IP、挖矿木马使用的加密货币钱包地址等进行挖矿木马流量检测告警。</p><h3 id="5、挖矿木马行为特征检测"><a href="#5、挖矿木马行为特征检测" class="headerlink" title="5、挖矿木马行为特征检测"></a>5、挖矿木马行为特征检测</h3><p>通过网络流量检测分析引擎，对其挖矿木马通信的端口、协议、内容、行为特征、恶意文件检测等挖矿木马流量特征进行检测分析，定位出存在恶意挖矿行为的终端及主机。</p><h3 id="6、DNS流量检测挖矿域名"><a href="#6、DNS流量检测挖矿域名" class="headerlink" title="6、DNS流量检测挖矿域名"></a>6、DNS流量检测挖矿域名</h3><p>通过DNS威胁流量检测，基于域名分析算法结合威胁情报系统对C&amp;C域名、挖矿网站域名、DNS解析IP等进行聚类分析，进而发现内网存在的恶意挖矿行为。</p><h2 id="五、挖矿木马的清理"><a href="#五、挖矿木马的清理" class="headerlink" title="五、挖矿木马的清理"></a>五、挖矿木马的清理</h2><p>参考网上给出的腾讯安全专家撰写的《挖矿木马自助清理手册》的挖矿木马清理步骤和方法：</p><h3 id="1、及时隔离主机"><a href="#1、及时隔离主机" class="headerlink" title="1、及时隔离主机"></a>1、及时隔离主机</h3><p>部分带有蠕虫功能的挖矿木马在取得主机的控制权后，会继续对公网的其他主机，或者以当前主机作为跳板机对同一局域网内的其他主机进行横向渗透，所以在发现主机被植入挖矿木马后，在不影响业务正常运行的前提下，应该及时隔离受感染的主机，然后进行下一步分析和清除工作。</p><h3 id="2、阻断异常网络通信"><a href="#2、阻断异常网络通信" class="headerlink" title="2、阻断异常网络通信"></a>2、阻断异常网络通信</h3><p>挖矿木马不仅会连接矿池，还有可能会连接黑客的C2服务器，接收并执行C2指令、投递其他恶意木马，所以需要及时进行网络阻断。<br>（1）检查主机防火墙当前生效的iptables规则中是否存在业务范围之外的可疑地址和端口，它们可能是挖矿木马的矿池或C2地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure><p>（2）从iptables规则中清除可疑地址和端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>（3）阻断挖矿木马的网络通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s 可疑地址 -j DROP</span><br><span class="line">iptables -A OUTPUT -d 可疑地址 -j DROP</span><br></pre></td></tr></table></figure><h3 id="3、清除计划任务"><a href="#3、清除计划任务" class="headerlink" title="3、清除计划任务"></a>3、清除计划任务</h3><p>大部分挖矿木马会通过在受感染主机中写入计划任务实现持久化，如果仅仅只是清除挖矿进程，无法将其根除，到了预设的时间点，系统会通过计划任务从黑客的C2服务器重新下载并执行挖矿木马。<br>可以通过执行如下命令查看是否存在可疑定时任务，若有，则先保存相关记录用于后续分析，再进行删除：<br>查看系统当前用户的计划任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>查看系统特定用户的计划任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -u username -l</span><br></pre></td></tr></table></figure><p>查看其他计划任务文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/crontabcat /var/spool/croncat /etc/anacrontabcat /etc/cron.d/cat /etc/cron.daily/cat /etc/cron.hourly/cat /etc/cron.weekly/cat /etc/cron.monthly/cat /var/spool/cron/</span><br></pre></td></tr></table></figure><h3 id="4、清除启动项"><a href="#4、清除启动项" class="headerlink" title="4、清除启动项"></a>4、清除启动项</h3><p>除了计划任务，挖矿木马通过添加启动项同样能实现持久化。可以使用如下命令查看开机启动项中是否有异常的启动服务。<br>CentOS7以下版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig –list</span><br></pre></td></tr></table></figure><p>CentOS7及以上版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files</span><br></pre></td></tr></table></figure><p>如果发现有恶意启动项，可以通过如下命令进行关闭：<br>CentOS7以下版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig 服务名 off</span><br></pre></td></tr></table></figure><p>CentOS7及以上版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> 服务名</span><br></pre></td></tr></table></figure><p>另外，还需要仔细排查以下目录及文件，及时删除可疑的启动项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/systemd/system</span><br><span class="line">/usr/lib/systemd/system/multi-user.target.wants</span><br><span class="line">/etc/rc.local</span><br><span class="line">/etc/inittab</span><br><span class="line">/etc/rc0.d/</span><br><span class="line">/etc/rc1.d/</span><br><span class="line">/etc/rc2.d/</span><br><span class="line">/etc/rc3.d/</span><br><span class="line">/etc/rc4.d/</span><br><span class="line">/etc/rc5.d/</span><br><span class="line">/etc/rc6.d/</span><br><span class="line">/etc/rc.d/</span><br></pre></td></tr></table></figure><p>排查的时候，可以按照文件修改时间来排序，重点排查近期被创建服务项。</p><h3 id="5、清除预加载so"><a href="#5、清除预加载so" class="headerlink" title="5、清除预加载so"></a>5、清除预加载so</h3><p>通过配置/etc/ld.so.preload，可以自定义程序运行前优先加载的动态链接库，部分木马通过修改该文件，添加恶意so文件，从而实现挖矿进程的隐藏等恶意功能。<br>检查/etc/ld.so.preload（该文件默认为空），清除异常的动态链接库。</p><h3 id="6、清除SSH公钥"><a href="#6、清除SSH公钥" class="headerlink" title="6、清除SSH公钥"></a>6、清除SSH公钥</h3><p>挖矿木马通常还会在<del>/.ssh/authoruzed_keys文件中写入黑客的SSH公钥，这样子就算用户将挖矿木马清除得一干二净，黑客还是可以免密登陆该主机，这也是常见的保持服务器控制权的手段。<br>排查</del>/.ssh/authorized_keys文件，如果发现可疑的SSH公钥，直接删除。</p><h3 id="7、清除挖矿木马"><a href="#7、清除挖矿木马" class="headerlink" title="7、清除挖矿木马"></a>7、清除挖矿木马</h3><p>（1）清除挖矿进程<br>挖矿木马最大的特点就是会在用户不知情的情况下，利用主机的算力进行挖矿，从而消耗主机大量的CPU资源，所以，通过执行如下命令排查系统中占用大量CPU资源的进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -cps -ef</span><br></pre></td></tr></table></figure><p>确认相关进程为挖矿进程后，按照如下步骤将其清除：<br>获取并记录挖矿进程的文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /proc/<span class="variable">$PID</span>/exe</span><br></pre></td></tr></table></figure><p>杀死挖矿进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br></pre></td></tr></table></figure><p>删除挖矿进程对应的文件<br>（2）清除其它相关恶意进程<br>恶意进程与外部的C2服务器进行通信时，往往会开启端口进行监听。执行如下命令，查看服务器是否有未被授权的端口被监听。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp</span><br></pre></td></tr></table></figure><p>若有未授权进程，按照如下步骤将其清除：<br>获取并记录未授权进程的文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /proc/<span class="variable">$PID</span>/exe</span><br></pre></td></tr></table></figure><p>杀死未授权进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br></pre></td></tr></table></figure><p>删除未授权进程对应的文件<br>还可以通过如下命令排查近期新增的文件，清除相关木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /etc -ctime -2 （这里指定目录为/etc，获取近2天内的新增文件）lsof</span><br></pre></td></tr></table></figure><h3 id="8、风险排查、安全加固"><a href="#8、风险排查、安全加固" class="headerlink" title="8、风险排查、安全加固"></a>8、风险排查、安全加固</h3><p>对系统进行风险排查和安全加固，避免挖矿木马卷土重来。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>任何说30天快速学会架子鼓的都是骗人的!</title>
      <link href="/posts/ba190f8/"/>
      <url>/posts/ba190f8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/2023/20230218/%E9%AD%94%E9%B2%A8%E6%9E%B6%E5%AD%90%E9%BC%93.png" alt="架子鼓"></p><center>架子鼓</center>从去年的圣诞节报了架子鼓的班以后，过了一年多了，发现自己这个架子鼓还没有入门！！！<p>报班的时候感觉信心满满，这架子鼓不就是拿个鼓槌敲来敲去，这还不容易学？而且刷抖音、B站上大把的都是30天快速入门、一个月学会打《逆战》，看得我天真的认为我也能行。现实让我啪啪的打脸，过了一年多了，发现还没有入门，只会打简单的动次打次，敲最简单的《yellow》。</p><p>回顾一年多学习架子鼓的历程：</p><p>头三个月，才报完班，兴致满满，每周都想约老师上课，由于没有买鼓也没有去鼓房去练习，所以每次上课的时候总是被老师打击”你这个根本就没有练习啊”，或者是”你这上节课的内容还没有练熟啊”，硬着头皮去上课发现头半节课是在练习，后半节课老师匆匆讲一、两个知识点或教一、两个手法。由于完全是零基础老师讲时值，全音符、4分、8分、16分音符等乐理知识，听得得自己一头雾水；教手法是一听就会，一练就费。就这么稀里糊涂的上了大概7节课后，这个信心被打击得不行了，上课的兴趣没有那么大了。想想，这样下去也不是办法，关键是没有条件练习，既然想学好架子鼓，还是得自己买个鼓！于是花了近4千大洋买了个电鼓。</p><p>自己有了鼓以后果然兴致又大增。鼓刚到的几天，天天在家练。毕竟咱也是成熟的大人了，知道要学好一门乐器，师傅领进门，修行靠个人，需要自己花时间慢慢的练习。又碰上疫情不断，老师也不能上课。于是自己在B站上找架子鼓视频，今天看到一个新手小白必练节奏型，明天看到一个架子鼓新手快速入门。今天看到这个视频好，练了几天，明天发现另外一个视频可能更适合，又开始跟着这个视频练，练了几天后发现因为不成体系，东练一下西练一下啥都没有学会。又想去找老师线下教，把剩下的几节课上完，结果发现因为疫情原因，报名学鼓的地方老板已经搞不下去，教学点已经转让了。联系了几次老板，老板抱怨说”过了这么久我都已经撑不下去不搞了，你们怎么12节课都还没有学完？”后来根本就不理我们了。</p><p>开了个头，总得要学出个名堂来吧？回顾这段学鼓的历程，无疑是段失败的学鼓之路。总结一下，自己学鼓没有目标，不了解学习架子鼓的整个技能知识结构、像个无头苍蝇一样不知道如何有计划的学习和训练，想依赖老师确又没有按照老师的节奏来，把学乐器想得太简单了，不可能通过短短的12次课时就可能把架子鼓学会。人家30天入门、一个月打歌，那基本上都是有基础的，而且是每天都花了大量的时间在练习。个人认为正常情况零基础的学习者没有经过一两年有体系有计划的训练是很难流畅的打好一首中等难度的歌曲的。</p><p>痛定思痛，为了学好架子鼓，我开始思考并改变策略。不再无脑的跟B站那些免费的视频教程了，因为大部分免费的视频教程都有个很大的问题就是不成体系。为此我买了一本《成人零基础学架子鼓》的教材，详细了解要学习架子鼓的整体的体系框架，现在知道了学习架子鼓得知道基本的握槌击打方法、套鼓的组成及击打方式、4分、8分、16分、休止符、基本节奏型、还有前8后16、前16后8、切分、附点等等，这些都是需要一个个的去理解理会，通过不断的练习来熟练掌握的。有了这些基本功后才有可能通过组合应用到实战歌曲里面来完成打一首完整的歌曲。为了更好的掌握这些基本功的练习方法，我在抖音上花了499买了一套完整的视频教学课程，可以跟着课程将这些基本功及常用的技巧进行练习。剩下的就是抛弃速成的幻想，扎扎实实一步步的开始练习了。</p><p>今年的目标是扎扎实实的把基本功练好，拿下最初定下来的《大风吹》这首歌！</p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架子鼓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全保障之“三同步”</title>
      <link href="/posts/955b1d60/"/>
      <url>/posts/955b1d60/</url>
      
        <content type="html"><![CDATA[<blockquote><p>建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。<br>                                                                                                                                                               <p align='right'>–《网络安全法》第三十三条 </p></p></blockquote><p>信息系统的生命周期层面和安全保障要素层面不是相互孤立的，而是相互关联、密不可分的。<br><img src="https://img-blog.csdnimg.cn/9c35a3d5b9f84a1ba76d13d505998e89.png#pic_center" alt="信息系统安全保障生命周期的安全保障要素"><br>在信息系统生命周期模型中，将信息系统的整个生命周期抽象成计划组织、开发采购、实施交付、运行维护和废弃5个阶段，加上在运行维护阶段的变更产生的反馈，形成信息系统生命周期完整的闭环结构。在信息系统生命周期中的任何时间点上，都需要综合信息系统安全保障的技术、管理、工程和人员保障要素。从信息系统建设开始，就应该综合考虑系统的安全保障要求，确保信息系统建设和信息系统安全保障建设同步规划、同步实施。也就是我们平时讲的<strong>信息系统和安全保障要“三同步”–同步规划、同步建设、同步使用</strong>。</p><ul><li><strong>同步规划</strong></li></ul><p>关键信息基础设施运营者应：<br>a）同步分析安全需求，即在关键信息基础设施建设或改建之初，从本组织的职能或业务的角度分析对关键信息基础设施实施网络安全的需求，形成安全需求说明书。<br>b）同步定义安全要求，即基于网络安全需求说明书，定义关键信息基础设施的网络安全要求，形成网络安全功能和性能说明书。<br>c）确保安全需求说明书得到网络安全责任部门签字认可。</p><ul><li><strong>同步建设</strong></li></ul><p>关键信息基础设施运营者应：<br>a）同步设计安全体系结构，即基于已经定义的关键信息基础设施的网络安全要求，设计网络安全体系结构，明确系统内的各类信息安全组件，说明各组件提供的信息安全服务及可能的实现机制。<br>b）同步开展详细的安全设计，即根据安全保护等级选择基本安全措施，细化安全机制在关键信息基础设施中的具体实现。<br>c）在建设或改建过程中，按照GB/T 22239工程实施相应等级的要求，同步建设符合其等级要求的网络安全设施，包括自行软件开发。<br>d）建设完成后，组织对关键信息基础设施进行验收并将网络安全作为验收的重要内容。</p><ul><li><strong>同步使用</strong></li></ul><p>关键信息基础设施运营者应：<br>a）同步运行安全设施，确保安全设施保持启用状态。<br>b）按照GB/T 22239安全运维管理相应等级的要求进行安全运维。<br>c）关键信息基础设施及其运行环境发生明显变化时，评估其风险，及时升级安全设施并实施变更管理。<br>d）对安全设施同步实施配置管理，包括制定配置管理计划，制定、记录、维护基线配置，保留基线配置的历史版本，便于必要时恢复历史配置。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django+Celery+Flower实现异步和定时任务及其监控告警</title>
      <link href="/posts/c2fa9556/"/>
      <url>/posts/c2fa9556/</url>
      
        <content type="html"><![CDATA[<p>用Django框架进行web开发非常的快捷方便，但Django框架请求/响应是同步的。但我们在实际项目中经常会碰到一些耗时的不能立即返回请求结果任务如：数据爬取、发邮件等，如果常时间等待对用户体验不是很好，在这种情况下就需要实现异步实现，马上返回响应请求，但真正的耗时任务在后台异步执行。Django框架本身无法实现异步响应但可以通过Celery很快的实现异步和定时任务。本文将介绍如何通过Django+Celery+Flower实现异步和定时任务及其任务的监控告警。</p><p>常见的任务有两类，一类是异步任务，一类是定时任务（定时执行或按一定周期执行）。Celery都能很好的支持。</p><p>Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理， 如果你的业务场景中需要用到异步任务，就可以考虑使用celery， 举几个实例场景中可用的例子:</p><ul><li>异步任务：将耗时的操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音频处理等等</li><li>做一个定时任务，比如每天定时执行爬虫爬取指定内容</li></ul><p>Celery 在执行任务时需要通过一个消息中间件（Broker）来接收和发送任务消息，以及存储任务结果， 一般使用rabbitMQ、Redis或其他DB。</p><p>本文使用redis作为消息中间件和结果存储，在后面的通过数据库监控任务执行案例将介绍用到数据库作为结果存储。</p><h2 id="一、在Django中引入Celary"><a href="#一、在Django中引入Celary" class="headerlink" title="一、在Django中引入Celary"></a>一、在Django中引入Celary</h2><h3 id="1、安装库"><a href="#1、安装库" class="headerlink" title="1、安装库"></a>1、安装库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install redis</span><br><span class="line">pip install eventlet  <span class="comment">#在windows环境下需要安装eventlet包</span></span><br></pre></td></tr></table></figure><h3 id="2、引入celary"><a href="#2、引入celary" class="headerlink" title="2、引入celary"></a>2、引入celary</h3><p>在主项目目录下，新建celary.py文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统环境变量，否则在启动celery时会报错</span></span><br><span class="line"><span class="comment"># taskproject 是当前项目名</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'taskproject.settings'</span>)</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line">celery_app = Celery(<span class="string">'taskproject'</span>)</span><br><span class="line">celery_app.config_from_object(<span class="string">'django.conf:settings'</span>)</span><br><span class="line">celery_app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bb5250fc5af445e9b80984b4ff899220.png" alt="在这里插入图片描述"></p><p>在主目录的<strong>init</strong>.py中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'celery_app'</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/78510f4664bf461f86875b46f38cb68e.png" alt="在这里插入图片描述"></p><h3 id="3、在settings-py中设置celery的相关参数"><a href="#3、在settings-py中设置celery的相关参数" class="headerlink" title="3、在settings.py中设置celery的相关参数"></a>3、在settings.py中设置celery的相关参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###----Celery redis 配置-----###</span></span><br><span class="line"><span class="comment"># Broker配置，使用Redis作为消息中间件</span></span><br><span class="line">BROKER_URL = <span class="string">'redis://:redispassword@127.0.0.1:6379/0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BACKEND配置，使用redis</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:redispassword@127.0.0.1:6379/1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT=[<span class="string">'json'</span>]</span><br><span class="line">CELERY_TASK_SERIALIZER=<span class="string">'json'</span></span><br><span class="line"><span class="comment"># 结果序列化方案</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务结果过期时间，秒</span></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区配置</span></span><br><span class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3d3c6bcf67964ae7b1828119ea7ccf3d.png" alt="在这里插入图片描述"></p><p>这时候Celery的基本配置完成了，可以实现并添加任务了。</p><h2 id="二、实现异步任务"><a href="#二、实现异步任务" class="headerlink" title="二、实现异步任务"></a>二、实现异步任务</h2><h3 id="1、创建tasks-py"><a href="#1、创建tasks-py" class="headerlink" title="1、创建tasks.py"></a>1、创建tasks.py</h3><p>在子应用下建立各自对应的任务文件tasks.py(<code>必须是tasks.py这个名字，不允许修改</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(x)):</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        logger.info(<span class="string">'this is task1 '</span>+str(i))</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scheduletask1</span><span class="params">()</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    logger.info(<span class="string">'this is scheduletask '</span>+now.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在tasks.py中我们定义了两个任务，这两个任务要用@shared_task装饰起来，否则celery无法管理。<br><img src="https://img-blog.csdnimg.cn/00b1edc1f06c415e8a91d2fb44436d24.png" alt="在这里插入图片描述"></p><p>为了放便执行我们通过views把这两个任务通过函数方法调用起来，用URL进行发布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">views.py</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> tasks</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runtask</span><span class="params">(request)</span>:</span></span><br><span class="line">    x=request.GET.get(<span class="string">'x'</span>)</span><br><span class="line">    tasks.task1.delay(x)</span><br><span class="line">    content= &#123;<span class="string">'200'</span>: <span class="string">'run task1 success!---'</span>+str(x)&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runscheduletask</span><span class="params">(request)</span>:</span></span><br><span class="line">    tasks.scheduletask1.delay()</span><br><span class="line">    content= &#123;<span class="string">'200'</span>: <span class="string">'success！'</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(content)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/499b4fdabd3241d08ff639cca15483bb.png" alt="在这里插入图片描述"></p><p>在urls中加入路由进行发布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> taskapp <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'task'</span>, views.runtask),</span><br><span class="line">    path(<span class="string">'runscheduletask'</span>, views.runscheduletask),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e5a24935c0d5465cb713356dc884752d.png" alt="在这里插入图片描述"></p><p>在项目的主urls中加入子项目的urls<br><img src="https://img-blog.csdnimg.cn/9952643c8c074d5cba141987095b29ac.png" alt="在这里插入图片描述"></p><h3 id="2、启动celery"><a href="#2、启动celery" class="headerlink" title="2、启动celery"></a>2、启动celery</h3><blockquote><p>在启动celery之前，先要启动redis服务，因为celery在settings中配置要用到redis作为消息中间件和结果存储。<br>windows环境下启动redis的命令为redis-server.exe redis.windows.conf</p></blockquote><p>在控制台启动celery的worker</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cb1fae5568954d2fbd9fb515d16ffe37.png" alt="在这里插入图片描述"></p><p>启动django访问url调用任务，看异步效果<br><img src="https://img-blog.csdnimg.cn/48f8e177034340248efaab1b4dea5f84.png" alt="在这里插入图片描述"></p><h3 id="3、查看任务"><a href="#3、查看任务" class="headerlink" title="3、查看任务"></a>3、查看任务</h3><p>控制台查看异步任务执行的情况，可以看web的url很快返回响应结果，后台控制台一直在执行异步任务。<br><img src="https://img-blog.csdnimg.cn/323c620a2e87415780873f1a548c92a0.png" alt="在这里插入图片描述"></p><h2 id="三、实现定时任务"><a href="#三、实现定时任务" class="headerlink" title="三、实现定时任务"></a>三、实现定时任务</h2><p>Celery实现定时任务也很方便</p><h3 id="1、定义调度器"><a href="#1、定义调度器" class="headerlink" title="1、定义调度器"></a>1、定义调度器</h3><p>在settings.py中加入定时任务的定义就可以实现定时任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'every_5_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.scheduletask1'</span>,</span><br><span class="line">        <span class="comment"># 每5秒执行一次</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'args'</span>: ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里这个scheduletask1是前面tasks.py中定义的任务，当然也可以定义多个定时任务，如加一个task1，task1是有参数的，可以在’args’: ()中传入参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'every_5_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.scheduletask1'</span>,</span><br><span class="line">        <span class="comment"># 每5秒执行一次</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'args'</span>: ()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'every_10_seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 任务路径</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'taskapp.tasks.task1'</span>,</span><br><span class="line">        <span class="comment"># 每10秒执行一次,task1的参数是5</span></span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">'args'</span>: ([<span class="number">5</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d30130f1d6454682bb182b1f347174cb.png" alt="在这里插入图片描述"></p><p>这里定义了task1是10秒执行一次，传入的参数是5。</p><h3 id="2、启动beat"><a href="#2、启动beat" class="headerlink" title="2、启动beat"></a>2、启动beat</h3><p>需要保持worker进程，另外开一个控制台启动beat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="3、查看任务-1"><a href="#3、查看任务-1" class="headerlink" title="3、查看任务"></a>3、查看任务</h3><p>启动任务后看控制台打印的日志task1和scheduletask1都按计划定时执行了。<br><img src="https://img-blog.csdnimg.cn/49200e8a8cdf458b8ea928a77b64a439.png" alt="在这里插入图片描述"></p><h2 id="三、通过数据库配置定时任务"><a href="#三、通过数据库配置定时任务" class="headerlink" title="三、通过数据库配置定时任务"></a>三、通过数据库配置定时任务</h2><p>虽然通过settings.py的配置可以实现定时任务的配置，做为实际项目中可能还是不够实用，更加工程化的做法是将定时任务的配置放到数据库里通过界面来配置。同样Celery对此也提供了很好的支持，这需要安装django-celery-beat插件。以下将介绍使用过程。</p><h3 id="1、安装djiango-celery-beat"><a href="#1、安装djiango-celery-beat" class="headerlink" title="1、安装djiango-celery-beat"></a>1、安装djiango-celery-beat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-beat</span><br></pre></td></tr></table></figure><h3 id="2、在APP中注册djiango-celery-beat"><a href="#2、在APP中注册djiango-celery-beat" class="headerlink" title="2、在APP中注册djiango-celery-beat"></a>2、在APP中注册djiango-celery-beat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">....</span><br><span class="line"><span class="string">'django_celery_beat'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3、在settings-py中设置调度器及时区"><a href="#3、在settings-py中设置调度器及时区" class="headerlink" title="3、在settings.py中设置调度器及时区"></a>3、在settings.py中设置调度器及时区</h3><p>在settings.py中屏蔽到原来的调度器，加入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CELERYBEAT_SCHEDULER = <span class="string">'django_celery_beat.schedulers.DatabaseScheduler'</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c48970948fcc44e4a73378459fad28d3.png" alt="在这里插入图片描述"></p><p>在setings.py中设置好语言、时区等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="4、进行数据库迁移"><a href="#4、进行数据库迁移" class="headerlink" title="4、进行数据库迁移"></a>4、进行数据库迁移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate django_celery_beat</span><br></pre></td></tr></table></figure><h3 id="5、分别启动woker和beta"><a href="#5、分别启动woker和beta" class="headerlink" title="5、分别启动woker和beta"></a>5、分别启动woker和beta</h3><p>在两个控制台分别启动woker和beta</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="6、启动django服务，访问admin的web管理端"><a href="#6、启动django服务，访问admin的web管理端" class="headerlink" title="6、启动django服务，访问admin的web管理端"></a>6、启动django服务，访问admin的web管理端</h3><p>访问 <a href="http://localhost:8000/admin/" target="_blank" rel="noopener">http://localhost:8000/admin/</a> 可以看到周期任务的管理菜单，管理定时任务非常方便。<br><img src="https://img-blog.csdnimg.cn/f7379eedb03a4f4e97fb3f111e4b65b0.png" alt="在这里插入图片描述"></p><h3 id="7、配置定时任务"><a href="#7、配置定时任务" class="headerlink" title="7、配置定时任务"></a>7、配置定时任务</h3><p>点击“间隔”<br><img src="https://img-blog.csdnimg.cn/7b41207a4c9c4f9db9cdbffb9347d77c.png" alt="在这里插入图片描述"></p><p>点击“增加间隔”来增加定时任务的配置，增加一个5秒执行一次的定时器。<br><img src="https://img-blog.csdnimg.cn/0c8da1a050ee49c0a18a6b39fccb5c86.png" alt="在这里插入图片描述"></p><p>看到有个每5秒的定时器<br><img src="https://img-blog.csdnimg.cn/1d98930dc7c94e1795827f5c17b0a4cb.png" alt="在这里插入图片描述"></p><p>这时可以用这个定时器去新建调度任务了。选择周期性任务，点击“增加周期性任务”<br><img src="https://img-blog.csdnimg.cn/105ffe5e5e264567989db855dea179e5.png" alt="在这里插入图片描述"></p><p>填入任务名，选择需要定时执行的任务<br><img src="https://img-blog.csdnimg.cn/dffb17bacd6547c3943b9621b5a1ef1e.png" alt="在这里插入图片描述"></p><p>因为task1需要参数，在后面参数设置中进行参数的设置。<br><img src="https://img-blog.csdnimg.cn/4140582cb0bb45d7b668b55b2820ebc8.png" alt="在这里插入图片描述"></p><p>保存后可以看到新加了一条“每5秒执行一次task1”的调度任务。<br><img src="https://img-blog.csdnimg.cn/2aabbfcf63554599bd8bd24322744b5e.png" alt="在这里插入图片描述"></p><h3 id="8、查看调度效果"><a href="#8、查看调度效果" class="headerlink" title="8、查看调度效果"></a>8、查看调度效果</h3><p>在woker和beta的控制台都可以看到有定时任务执行的信息，说明任务被成功调度执行了。<br><img src="https://img-blog.csdnimg.cn/33f1439495a64f4ba8c6c738e6caa0b1.png" alt="在这里插入图片描述"></p><h2 id="四、通过django的web界面监控任务执行情况"><a href="#四、通过django的web界面监控任务执行情况" class="headerlink" title="四、通过django的web界面监控任务执行情况"></a>四、通过django的web界面监控任务执行情况</h2><p>在控制台监控任务执行情况，还不是很方便，最好是能够通过web界面看到任务的执行情况，如有多少任务在执行，有多少任务执行失败了等。这个Celery也是可以做到了，就是将任务执行结果写到数据库中，通过web界面显示出来。这里要用到django-celery-results插件。通过插件可以使用Django的orm作为结果存储，这样的好处在于我们可以直接通过django的数据查看到任务状态，同时为可以制定更多的操作，下面介绍如何使用orm作为结果存储。</p><h3 id="1、安装django-celery-results"><a href="#1、安装django-celery-results" class="headerlink" title="1、安装django-celery-results"></a>1、安装django-celery-results</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-results</span><br></pre></td></tr></table></figure><h3 id="2、配置settings-py，注册app"><a href="#2、配置settings-py，注册app" class="headerlink" title="2、配置settings.py，注册app"></a>2、配置settings.py，注册app</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">...,</span><br><span class="line"><span class="string">'django_celery_results'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3、修改backend配置，将Redis改为django-db"><a href="#3、修改backend配置，将Redis改为django-db" class="headerlink" title="3、修改backend配置，将Redis改为django-db"></a>3、修改backend配置，将Redis改为django-db</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BACKEND配置，使用redis</span></span><br><span class="line"><span class="comment">#CELERY_RESULT_BACKEND = 'redis://:12345678@127.0.0.1:6379/1'</span></span><br><span class="line"><span class="comment"># 使用使用django orm 作为结果存储</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'django-db'</span>  <span class="comment">#使用django orm 作为结果存储</span></span><br></pre></td></tr></table></figure><h3 id="4、迁移数据库"><a href="#4、迁移数据库" class="headerlink" title="4、迁移数据库"></a>4、迁移数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate django_celery_results</span><br></pre></td></tr></table></figure><p>可以看到创建了django_celery_results相关的表<br><img src="https://img-blog.csdnimg.cn/fd7eea7697e741688d4aa1317dd2fdfa.png" alt="在这里插入图片描述"></p><h3 id="5、查看任务"><a href="#5、查看任务" class="headerlink" title="5、查看任务"></a>5、查看任务</h3><p>启动django服务后，执行异步和定时任务，就可以在管理界面看到任务的执行情况，执行了哪些任务，哪些任务执行失败了等。<br><img src="https://img-blog.csdnimg.cn/1995ffd304c3440b96c34de13885a542.png" alt="在这里插入图片描述"></p><h2 id="五、通过Flower监控任务执行情况"><a href="#五、通过Flower监控任务执行情况" class="headerlink" title="五、通过Flower监控任务执行情况"></a>五、通过Flower监控任务执行情况</h2><p>如果不想通django的管理界面监控任务的执行，还可以通过Flower插件来进行任务的监控。FLower的界面更加丰富，可以监控的信息更全。以下介绍通过Flower来进行任务监控。</p><h3 id="1、安装flower"><a href="#1、安装flower" class="headerlink" title="1、安装flower"></a>1、安装flower</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flower</span><br></pre></td></tr></table></figure><h3 id="2、启动flower"><a href="#2、启动flower" class="headerlink" title="2、启动flower"></a>2、启动flower</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject flower --port<span class="number">-5566</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/66ad267b5a1045e8a19d94cb075dca3c.png" alt="在这里插入图片描述"></p><h3 id="3、使用flower进行任务监控"><a href="#3、使用flower进行任务监控" class="headerlink" title="3、使用flower进行任务监控"></a>3、使用flower进行任务监控</h3><p><img src="https://img-blog.csdnimg.cn/42aef4e96372459f920532fc18048547.png" alt="在这里插入图片描述"></p><p>点击失败的我们可以看到执行失败的详情，这里是故意给task1的参数传了个‘a’字符，导致它执行报错了。可以看到任务执行的报错信息也展示出来了。<br><img src="https://img-blog.csdnimg.cn/0ef30804b9fc467aa83e64d43a9560a1.png" alt="在这里插入图片描述"></p><h2 id="六、实现任务异常自动邮件告警"><a href="#六、实现任务异常自动邮件告警" class="headerlink" title="六、实现任务异常自动邮件告警"></a>六、实现任务异常自动邮件告警</h2><p>虽然可以通过界面来监控了，但是我们想要得更多，人不可能天天盯着界面看吧，如果能实现任务执行失败就自动发邮件告警就好了。这个Celery当然也是没有问题的。<br>通过钩子程序在异常的时候触发邮件通知。</p><h3 id="1、加入钩子程序"><a href="#1、加入钩子程序" class="headerlink" title="1、加入钩子程序"></a>1、加入钩子程序</h3><p>对tasks.py的改造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Task</span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHookTask</span><span class="params">(Task)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_success</span><span class="params">(self, retval, task_id, args, kwargs)</span>:</span></span><br><span class="line">        info=<span class="string">f'任务成功-- 0task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , successful !'</span></span><br><span class="line">        logger.info(info)</span><br><span class="line">        send_mail(<span class="string">'celery任务监控'</span>, info, <span class="string">'sendmail@qq.com'</span>, [<span class="string">'tomail@qq.com'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_failure</span><span class="params">(self, exc, task_id, args, kwargs, einfo)</span>:</span></span><br><span class="line">        info=<span class="string">f'任务失败-- task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , failed ! erros: <span class="subst">&#123;exc&#125;</span>'</span></span><br><span class="line">        logger.info(info)</span><br><span class="line">        send_mail(<span class="string">'celery任务监控异常'</span>, info, <span class="string">'sendmail@qq.com'</span>, [<span class="string">'tomail@qq.com'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_retry</span><span class="params">(self, exc, task_id, args, kwargs, einfo)</span>:</span></span><br><span class="line">        logger.info(<span class="string">f'task id:<span class="subst">&#123;task_id&#125;</span> , arg:<span class="subst">&#123;args&#125;</span> , retry !  erros: <span class="subst">&#123;exc&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task(base=MyHookTask, bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">(self,x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(x)):</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        logger.info(<span class="string">'this is task1 '</span>+str(i))</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scheduletask1</span><span class="params">()</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    logger.info(<span class="string">'this is scheduletask '</span>+now.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aed81f9565e0408c8669f2c0291f80b5.png" alt="在这里插入图片描述"></p><h3 id="2、重启服务"><a href="#2、重启服务" class="headerlink" title="2、重启服务"></a>2、重启服务</h3><p>将work和beta服务关掉，在两个控制台分别重新启动woker和beta</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject worker -l debug -P eventlet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A taskproject beat -l debug</span><br></pre></td></tr></table></figure><h3 id="3、验证效果"><a href="#3、验证效果" class="headerlink" title="3、验证效果"></a>3、验证效果</h3><p>在任务成功或失败的时候发邮件通知。<br><img src="https://img-blog.csdnimg.cn/0c9e08e1c6f34f22b2a7cca6747cfe37.png" alt="在这里插入图片描述"></p><p>任务执行成功通知<br><img src="https://img-blog.csdnimg.cn/3572a9741e5d4ced9571e78adfcbfd7e.png" alt="在这里插入图片描述"></p><p>任务执行异常告警通知<br><img src="https://img-blog.csdnimg.cn/71b93b3c246f465688bbfcdc89b2b850.png" alt="在这里插入图片描述"></p><p>Django如何发送邮件见 <a href="https://blog.csdn.net/fullbug/article/details/128495415" target="_blank" rel="noopener">https://blog.csdn.net/fullbug/article/details/128495415</a></p><p>至此，本文通过几个简单的应用介绍了Django+Celery+Flower实现异步和定时任务及其监控告警。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Django发送邮件</title>
      <link href="/posts/73474fe7/"/>
      <url>/posts/73474fe7/</url>
      
        <content type="html"><![CDATA[<p>通过Django发送邮件非常的简单，在Python中已经内置了一个smtplib邮件发送模块，Django在此基础上进行了简单地封装，我们可以在Django的环境中方便的发送邮件。大部分邮件发送成功主要是邮件的参数配置，本文以常用的126邮箱和QQ邮箱为例介绍Django发送邮件的配置，其他提供smtp邮件服务的邮箱都是一样的。</p><h2 id="一、Django邮件配置"><a href="#一、Django邮件配置" class="headerlink" title="一、Django邮件配置"></a>一、Django邮件配置</h2><p>用Django发送邮件需要告诉你的邮件服务器相应的参数配置，需要在settings.py中进行配置好。<br>默认情况下，使用配置文件中的<code>EMAIL_HOST</code>和<code>EMAIL_PORT</code>设置SMTP服务器主机和端口，<code>EMAIL_HOST_USER</code>和<br><code>EMAIL_HOST_PASSWORD</code>是用户名和密码。如果设置了EMAIL_USE_TLS和EMAIL_USE_SSL，它们将控制是否使用相应的加密链接。<br>典型的配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.126.com'</span>      <span class="comment">#126邮箱的邮箱服务地址</span></span><br><span class="line">EMAIL_PORT = <span class="number">25</span>          <span class="comment">#端口，大部分都是默认25</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'yourmail@126.com'</span>    <span class="comment">#这里是你的邮箱账号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'yourpassword'</span>   <span class="comment">#注意这里不能用你邮箱账号的密码，而要用申请的设备授权码。</span></span><br></pre></td></tr></table></figure><p>这里要注意的两个地方，一个是EMAIL_PORT端口、一个是EMAIL_HOST_PASSWORD密码。<br>端口一般默认是25，但有些邮箱改了默认端口或需要用加密链接465、578端口，可以从邮件服务商查到。<br>密码以前可以用邮箱账号密码，但这几年随着安全要求的提高，大部分主要的邮件服务提供商都要用申请的授权码进一步加强安全系数。<br>这里介绍这些关键的信息如何在邮件服务商获取。</p><blockquote><p> <code>注意EMAIL_HOST_PASSWORD这里不能用你邮箱账号的密码，而要用申请的设备授权码。</code></p></blockquote><h3 id="126邮箱"><a href="#126邮箱" class="headerlink" title="126邮箱"></a>126邮箱</h3><p>进入到邮箱配置界面，点击“POP3/SMTP/IMAP”，注意要开启SMTP。<br><img src="https://img-blog.csdnimg.cn/01e56aa8fcd4445d83f7d4363176c4d4.png" alt="126邮箱配置界面"></p><p>授权码是用于登录第三方邮件客户端的专用密码，点击”新增授权密码”，降会弹出一个账号安全验证，扫描后可以快速的发短信。<br><img src="https://img-blog.csdnimg.cn/e832aa92deae43348df02688c1df1a38.png" alt="账号安全验证界面"></p><p>用你的注册手机发完短信后点击”我已发送”就会弹出一个授权码的窗口，要把这个授权码记下来，这个窗口只显示一次。<br><img src="https://img-blog.csdnimg.cn/c7b70b42ca7f4dcb9f5c7cfbc175e642.png" alt="授权码显示界面"></p><h3 id="QQ邮箱"><a href="#QQ邮箱" class="headerlink" title="QQ邮箱"></a>QQ邮箱</h3><p>进入到QQ邮箱WEB界面后点击“设置”，点击“邮件设置”的“账户”页签拉到“账户安全”处就可以看到相关的SMTP服务信息</p><p><img src="https://img-blog.csdnimg.cn/0930d68e01c8495fa3c61882e941793b.png" alt="QQ邮箱配置界面"></p><p>点击“生成授权码”，将弹出验证密保的界面。<br><img src="https://img-blog.csdnimg.cn/70d5db3bcfee4daf8bb8fb199f8093fd.png" alt="验证密保界面"><br>根据提示发送短信后，点击我已发送，将会弹出生成授权码的界面显示授权码。<br><img src="https://img-blog.csdnimg.cn/a1779932a52544ee80fd34074eb57faf.png" alt="授权码生成界面"></p><p>如果需要SSL加密方式，可以进一步查看服务商的SMTP服务说明<br>如QQ邮箱的服务说明 <a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331" target="_blank" rel="noopener">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331</a><br><img src="https://img-blog.csdnimg.cn/a8a2c3710e6844cdb132a2e29a064568.png" alt="服务说明界面"></p><p>看到使用SSL，端口号是465或587</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.qq.com'</span>  <span class="comment">#QQ邮箱的smtp服务器</span></span><br><span class="line">EMAIL_PORT = <span class="number">465</span>           <span class="comment">#端口为465或587</span></span><br><span class="line">EMAIL_USE_SSL = <span class="literal">True</span>    <span class="comment">#SSL加密方式设置为True</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'yourmail@qq.com'</span>     <span class="comment">#这里是你的邮箱账号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'yourpassword'</span>   <span class="comment">#注意这里不能用你邮箱账号的密码，而要用申请的设备授权码。</span></span><br></pre></td></tr></table></figure><h2 id="二、测试发送邮件"><a href="#二、测试发送邮件" class="headerlink" title="二、测试发送邮件"></a>二、测试发送邮件</h2><p>可以用django的环境在shell中测试。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line">from django.core.mail import send_mail</span><br><span class="line">send_mail(<span class="string">'test'</span>,<span class="string">'this is test mail'</span>,<span class="string">'yourmail@qq.com'</span>,[<span class="string">'yourmail@126.com'</span>,<span class="string">'yormail@qq.com'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/85b59a9da2ad450793807d3e4260e8f6.png" alt="在这里插入图片描述"></p><p>如果反回1就表示发送成功了, 查收邮件到达。</p><p>如果发送不成功，请仔细核对邮箱服务的相关配置，一般来说与django无关。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全托管与重保安全服务</title>
      <link href="/posts/5381000/"/>
      <url>/posts/5381000/</url>
      
        <content type="html"><![CDATA[<p>近年来，高新技术数字经济快速发展，数字化转型成为各个行业高质量发展的重要引擎和创新路径。网络安全作为数字化建设的安全基石，却面临着网络安全人才缺口不断攀升的直接挑战。各安全公司依托自己网络安全经验的人才优势向客户提供各类安全服务，最常见的就是安全托管和重保安全。</p><p>安全托管服务与重保安全服务都是为客户提供安全服务，这两者有啥区别呢？</p><h2 id="一、安全托管服务"><a href="#一、安全托管服务" class="headerlink" title="一、安全托管服务"></a>一、安全托管服务</h2><p><strong>安全托管服务（Managed Security Service，MSS）</strong>，是由Gartner于2011年提出，简单来讲，即网络安全厂商通过自身的安全运营服务，包括人员、工具、平台等，为其用户提供7*24小时的安全托管服务。MSS安全托管服务最直接的目的，就是解决用户自身安全能力不足的问题，将专业的事情交给专业的人来做。说白了其实就是企业将自身的安全运营外包给有能力的安全厂商，解决自身安全运营能力不足的问题。</p><h2 id="二、重保安全服务"><a href="#二、重保安全服务" class="headerlink" title="二、重保安全服务"></a>二、重保安全服务</h2><p><strong>重保安全服务（Cybersecurity in Important Period, CIP）</strong>，是指在特殊时期（如HVV等）、重要活动（如两会等）、重大节日（如国庆等）期间为用户构建全方面的重要敏感时期的安全保障服务。保障网络基础设施、重点网站和业务系统安全，提供全方位的安全防守建设咨询以及事前、事中、事后的全面安全建设托管服务，确保企业客户的业务系统能够在重大活动期间安全平稳运行。</p><h2 id="三、安全托管服务与重保安全服务的区别"><a href="#三、安全托管服务与重保安全服务的区别" class="headerlink" title="三、安全托管服务与重保安全服务的区别"></a>三、安全托管服务与重保安全服务的区别</h2><p>从安全托管服务与重保安全服务的概念和定义上，个人理解安全托管服务与重保安全服务还是有所区别的。</p><p>一般来说，<strong>安全托管服务(MSS)服务侧重于管理和运营</strong>，以保障企业IT业务稳定运行为目的，主要是日常的安全运营。而<strong>重保安全更接近实战化</strong>主要侧重于重保期间的防护值守，有重点的企业客户的业务系统能够在重大活动期间安全平稳运行。</p><p>拿平时我们见到社会安保来类比，日常安全运营就是我们平时看到的日常治安巡逻；重保就是比如国庆期间、两会其间有针对性的加大安保防范力度如特警武装上岗执勤、某些重要场所限制人流、加强舆情监控等必要的防控手段。</p><ul><li><strong>从具体的服务内容来看：</strong></li></ul><p>安全托管服务主要是日常安全运营相关的内容如：资产的定期梳理、暴露面的检测、定期的漏扫、漏扫后的安全加固整改、安全监测、事件协助处置、安全策略定期优化等。</p><p>重保安全服务主要是针对重保时期有重点的安全保障更贴近实战化如：准备阶段的资产清查、暴露面识别、暴露面收敛等；重保初期的重点系统（或靶标系统）专项加固、情报收集、攻击阻断演练等；重保阶段的安全事件分析、响应处置、溯源反制、防守报告等。</p><ul><li><strong>从人员配置来看：</strong></li></ul><p>重保安全服务的人员配置不管是从人员数量还是个人网络安全专业水平来看都要比安全托管服务的高。一般来说重保安全服务的核心人员都会要求有攻防对抗能力。可以想像一下普通安保人员与武装特警的区别。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识XDR-扩展威胁检测与响应平台</title>
      <link href="/posts/160ef42d/"/>
      <url>/posts/160ef42d/</url>
      
        <content type="html"><![CDATA[<p>近年安全圈XDR的概念非常火，是近几年热点的安全技术之一，究竟什么是XDR，XDR核心能力是什么？能够解决什么问题，XDR与EDR、NDR关系和区别又是什么？让我们带着这些问题一起来认识一下XDR。</p><h1 id="一、什么是XDR"><a href="#一、什么是XDR" class="headerlink" title="一、什么是XDR"></a>一、什么是XDR</h1><p>XDR 于 2018 年由 Palo Alto 首席技术官 Nir Zuk 提出，2020-2021 年连续入选 Gartner 端点安全、安全运营技术成熟度曲线，目前处于创新启动期。</p><p>XDR全名是<strong>Extended Detection and Response（扩展检测和响应）</strong>，因为缩写与EDR重名了，所以就取了Extended第二个字母X，缩成了XDR。</p><p>Gartner给出的XDR定义为：XDR是一种基于SaaS的、绑定于特定供应商的安全威胁检测和事件响应工具，它将多个安全产品集成到一个统一了所有许可安全组件的内聚安全运营系统中。</p><p>通常情况下，可以认为XDR是一个融合了多种安全检测、响应能力的平台框架，只要是为了解决威胁检测与响应的问题能力模块，都可以往里装。它需要将多个安全产品能力有机的结合在一起，有统一的数据格式、策略、交互界面。相对于EDR（端点的检测与响应）和NDR（网络的检测与响应）来说，特别的强调X的概念，也就是可以扩展（Extended）的检测与响应。这里X覆盖了云、网、端、威胁情报等，EDR和NDR及其他的检测设备都可以作为XDR的能力模块为XDR提供数据来源和检测手段。</p><h1 id="二、XDR解决什么问题"><a href="#二、XDR解决什么问题" class="headerlink" title="二、XDR解决什么问题"></a>二、XDR解决什么问题</h1><p>近期， Gartner正式发布了2022安全运营技术成熟度曲线（Hype Cycle），正如大家所预测的那样，XDR终于站上了Peak of Inflated Expectations的顶端，成为安全运营体系中最炙手可热的技术之一，具体如下图所示：<br><img src="https://img-blog.csdnimg.cn/8267fb595e88455ea6d478b3ea5baa46.png#pic_center" alt="2022安全运营技术成熟度曲线"></p><p>那么在企业安全运营过程中究竟有什么困惑，XDR又能解决什么问题呢？</p><h2 id="1、安全运营的困惑"><a href="#1、安全运营的困惑" class="headerlink" title="1、安全运营的困惑"></a>1、安全运营的困惑</h2><ul><li><strong>单兵作战/数据孤岛</strong></li></ul><p>企业虽然有了SIEM/SOC等日志类数据分析平台，或是IDS、IPS、WAF、防火墙、EDR等单点安全设备，但前者无法理解下游检测设备告警，数据多而不准，安全误报多；后者获取的数据又有限，不同设备数据还无法紧密集成，最后变成了真实风险看不到，出现威胁防不了。</p><ul><li><strong>告警疲劳，误报多</strong></li></ul><p>安全人员每天都会收到来自不同安全设备的上万条威胁告警，而头疼的是，绝大多数（90%以上）都并非真实威胁，所以安全人员不是身体在处理误报的路上，就是精神在遭受误报的折磨，压力非常之大。</p><ul><li><strong>全局态势不可见</strong></li></ul><p>企业虽然买了一堆的安全设备，这些设备都产生了相应的告警，但是没有形成统一的全局的安全风险态势，对于安全主管来说要重点防范哪些地方，企业的安全建设还有哪些短板，这些都不可以知不可见。</p><ul><li><strong>响应处置能力弱</strong></li></ul><p>发生网络安全事件以后，无法有效溯源，快速的处置，尤其是多设备的联动处置，大多还停留在手工处置的阶段，处置效率先对比较低，不及时。</p><h2 id="2、XDR的作用"><a href="#2、XDR的作用" class="headerlink" title="2、XDR的作用"></a>2、XDR的作用</h2><p>XDR通过统一的交互框架、统一的数据标准、统一的数据存储方式进行安全数据采集、安全威胁集中分析、安全事件统一处置、响应编排。</p><p>XDR的核心作用在于能够跨越不同数据源与IT架构，集中汇集云、网、端、威胁情报等多源安全数据/工具。通过大数据与人工智能、用户行为分析等智能分析手段，对安全数据/事件进行关联分析，还原攻击路径，达到对整个攻击面的全面可视，解决安全孤岛的问题。基于动态更新的事件库与预置处置场景将产出的告警进行自动化编排与分诊，实现自动化响应。解决安全运营过程中数据孤岛、告警疲劳、全局态势不可见、响应处置能力弱的问题，更重要的是将企业安全运营水平和标准化产品挂钩，而非依赖不稳定的个人技术水平。</p><p><img src="https://img-blog.csdnimg.cn/688c91e5881d4e7bb938d660720fb8b0.png#pic_center" alt="XDR的作用"></p><h1 id="三、XDR与EDR、NDR的区别"><a href="#三、XDR与EDR、NDR的区别" class="headerlink" title="三、XDR与EDR、NDR的区别"></a>三、XDR与EDR、NDR的区别</h1><p>EDR从端点侧做威胁检测，确实能检测到攻击的准确信息，但是端点检测这种方式需要在用户主机上安装检测agent程序，无法覆盖用户所有的资产。并且端点检测的部署成本相比网络检测也更高，对于端点的操作系统、硬件配置、网络情况都有要求。</p><p>NDR从网络侧做威胁检测，检测到的更多都是攻击的特征或者攻击意图，此时攻击很有可能并未真正发生，或者并未造成严重后果。如果全部转化为威胁事件，则会造成告警风暴，给运营带来困难。</p><p>所以EDR的特点是检测的深但是覆盖面窄，而NDR的特点是检测的浅但是覆盖面广。</p><p>XDR则结合了这两者的全部优点，对于重点资产可采用端点检测方式，对于其他资产可采用网络检测方式。XDR平台会将这两种能力检测到的原始事件信息进行自动化关联，最终可将这些疑似的攻击信息，关联分析形成精准的威胁告警事件。</p><h1 id="四、XDR的架构和核心能力"><a href="#四、XDR的架构和核心能力" class="headerlink" title="四、XDR的架构和核心能力"></a>四、XDR的架构和核心能力</h1><h2 id="1、XDR的架构"><a href="#1、XDR的架构" class="headerlink" title="1、XDR的架构"></a>1、XDR的架构</h2><p>因为XDR是一个融合了多种安全检测、响应能力的平台框架，XDR的架构其关键组件包括前端组件（感应器，主要负责数据采集及检测）和后端平台组件（主要负责数据的汇聚、分析、威胁检测、响应处置）</p><p><img src="https://img-blog.csdnimg.cn/12a6d67ea8354eb6ae19c3307dbc5cbd.png#pic_center" alt="XDR的架构"><br>XDR前端组件，由生成安全遥测数据的“触角”（感应器）组成，这些触角包括但不限于EDR（终端检测与响应-Endpoint Detection and Response)、EPP(终端防护平台-Endpoint Protection Platforms)、NDR（流量检测与响应平台-Network Detection and Response)、SSE（安全服务边缘-Security Services Edge)、CWPP(云工作负载安全防护平台-Cloud Workload Protection Platforms)、蜜罐、邮件安全。</p><p>而XDR的后端平台，则是吸收所有关键位置的遥测数据、日志、威胁上下文信息，之后再对所有的数据进行关联、高级分析、从而完成威胁检测、调查分析、攻击溯源、工具编排、自动化响应等工作。</p><p>从整体架构上<strong>XDR可以看成是融合了各安全能力组件（EDR、NDR等）+SDC（安全数据中心）+SIEM/SA（安全信息事件管理/态势感知）+SOAR（安全编排与自动化响应）形成的一个安全运营系统</strong>。</p><h2 id="2、核心能力"><a href="#2、核心能力" class="headerlink" title="2、核心能力"></a>2、核心能力</h2><p>XDR核心能力包括数据集成、检测技术、可视化、编排响应技术。</p><ul><li><strong>安全数据全面集成</strong></li></ul><p>对不同安全设备的数据进行全面的采集包括：内部（资产、脆弱性）、外部（流量、日志）以及云端威胁情报接入等相关安全数据的全面采集，汇聚、分析。</p><ul><li><strong>安全威胁深度检测</strong></li></ul><p>对多源安全告警进行关联分析、规则分析、情报分析、机器学习等，发现潜伏的高级持续性威胁，提升告警检出率和准确率。</p><ul><li><strong>安全态势集中展示</strong></li></ul><p>告警可视、事件可视、攻击可视，从多安全事件、攻击方向、攻击趋势、影响范围等多维度多视角进行态势可视化呈现。</p><ul><li><strong>安全事件快速处置</strong></li></ul><p>通过可视化剧本编排，快速实现人员、流程、工具的有效协同，对接联动安全防护设备，在安全事件发生时自动下发阻断策略，并在必要时下发通知预警，及时完成安全闭环。</p><p>   XDR成熟度模型如下：<br><img src="https://img-blog.csdnimg.cn/3b14d884dc884e3a8f70e6b8811eac81.png#pic_center" alt="XDR成熟度模型"></p><h1 id="五、XDR应用场景"><a href="#五、XDR应用场景" class="headerlink" title="五、XDR应用场景"></a>五、XDR应用场景</h1><p>XDR集中汇集云、网、端、威胁情报等多源安全数据/工具，解决安全运营过程中数据孤岛、告警疲劳、全局态势不可见、响应处置能力弱的问题。可以有效应用于企业常态化安全运营及重保攻防实战对抗场景。</p><p><img src="https://img-blog.csdnimg.cn/4a48e9f6edf546e083b4d1d47ae9725a.png#pic_center" alt="XDR威胁检测联动响应示意图"></p><ul><li><strong>日常安全运营场景</strong></li></ul><p>日常安全运营，通过XDR提升安全运营的威胁检测能力和响应效率。<br>精准响应：更好的检测效果及响应能力，解决原有海量告警导致事件难以有效检测、溯源深度不足导致响应效果差的问题，有效应对攻防对抗加剧带来新的安全风险。<br>风险管理：从被动事件响应转向有计划的风险管理，预防重大安全事件。<br>处置闭环：采用简单有效的方式开展安全分析、管理、处置工作，实现事件处置的有效闭环管控。<br>态势可见：安全态势统一呈现，安全运营有地放矢，哪里不足补哪里。</p><ul><li><strong>攻防实战对抗场景</strong></li></ul><p>攻防实战，通过XDR实现异构可扩展的威胁检测响应能力，进行快速响应、加固优化安全措施、攻击反制。<br>检测深度：更精准的高级威胁检测和安全事件溯源能力。<br>检测广度：拥有丰富的数据，包括事件完整的上下文信息、原始报文等供客户深度挖掘；全方位的的威胁数据采集，全面的威胁检测分析，全局的态势呈现。<br>敏捷响应：可进行快速响应、加固优化安全措施、攻击反制。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django自定义manage.py命令实现hexo博客迁移</title>
      <link href="/posts/32650d1c/"/>
      <url>/posts/32650d1c/</url>
      
        <content type="html"><![CDATA[<p>实现了hexo的md文件格式解析，通过什么方式怎么来迁移hexo的博客到django的博客呢？开始想到的是通过Django的manage.py的shell命令，通过shell可以执行写好的python脚本进行hexo的md文件格式解析并入库。后来想想为啥不直接自定义一个manage.py的命令直接进行迁移呢？就如我们新建Django工程迁移数据库一样，执行python manage.py migrate来迁移数据库。我们可以定义python manage.py xxx来执行的迁移hexo博客。</p><p>自定义Django-admin命令分三步：创建management文件夹、编写命令代码、测试验证</p><h2 id="一、创建management文件夹"><a href="#一、创建management文件夹" class="headerlink" title="一、创建management文件夹"></a>一、创建management文件夹</h2><p>自定义的Django-admin管理命令本质上是一个python脚本文件，它的存放路径必须遵循一定的规范，一般位于app/management/commands目录。整个文件夹的布局如下所示：<br><code>注意app要在setting中注册</code><br>在blog/management/commands包下面创建transblog.py文件<br><img src="https://img-blog.csdnimg.cn/1d10e4be2b5646d2bb3fc10642dc7b7b.png#pic_center" alt="在这里插入图片描述"></p><p>这里有两个要注意的地方:</p><blockquote><p>1、app要在setting中注册。如blog在setting中注册了所以可以在blog/management/commands包下面创建transblog.py文件，api和common都没有在setting中注册所以在这两个目录下创建的不会作为管理命令生效。<br>2、创建的management/commands是Python包，不是单纯的目录，区别就是目录里必须有<strong>init</strong>.py文件，空文件都可以。</p></blockquote><h2 id="二、编写命令代码"><a href="#二、编写命令代码" class="headerlink" title="二、编写命令代码"></a>二、编写命令代码</h2><p>创建命令管理文件后就可以在该文件中编写命令代码了。<br>每一个自定义的管理命令本质是一个Command类, 它继承了Django的Basecommand或其子类, 主要通过重写handle()方法实现自己的业务逻辑代码，而add_arguments()则用于帮助处理命令行的参数，如果运行命令时不需要额外参数，可以不写这个方法。<br>transblog.py的参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    :author: XieJava</span></span><br><span class="line"><span class="string">    :url: http://ishareread.com</span></span><br><span class="line"><span class="string">    :copyright: © 2021 XieJava &lt;xiejava@ishareread.com&gt;</span></span><br><span class="line"><span class="string">    :license: MIT, see LICENSE for more details.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost,BlogCategory,Tag</span><br><span class="line"><span class="keyword">from</span> utils.parseblog <span class="keyword">import</span> parseblog</span><br><span class="line"><span class="keyword">from</span> django.core.management.base <span class="keyword">import</span> BaseCommand</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">    help=<span class="string">'读取指定目录的.md文件解析至ishareblog'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_arguments</span><span class="params">(self, parser)</span>:</span></span><br><span class="line">        parser.add_argument(<span class="string">'--path'</span>,help=<span class="string">'输入.md文件的目录'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'--file'</span>,help=<span class="string">'输入.md文件的路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        inputfile = input(<span class="string">'请输入指定的目录路径或.md文件路径:'</span>)</span><br><span class="line">        <span class="keyword">if</span> inputfile.find(<span class="string">'.md'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">            self.transblogbyfile(inputfile)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.transblogbypath(inputfile)</span><br><span class="line">        <span class="keyword">if</span> options[<span class="string">'path'</span>]:</span><br><span class="line">            self.transblogbypath(options[<span class="string">'path'</span>])</span><br><span class="line">        <span class="keyword">if</span> options[<span class="string">'file'</span>]:</span><br><span class="line">            self.transblogbyfile(options[<span class="string">'file'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="string">'''读取目录解析md文件并写入数据库'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transblogbypath</span><span class="params">(self,filepath=<span class="string">''</span>,)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            files = os.listdir(filepath)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file.find(<span class="string">'.md'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                    blog_file = os.path.join(filepath, file)</span><br><span class="line">                    self.transblogbyfile(blog_file)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'请确认输入是否正确。'</span>,e)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''读取md文件入库'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transblogbyfile</span><span class="params">(self,blogfile=<span class="string">''</span>)</span>:</span></span><br><span class="line">        blog_info = parseblog(blogfile)</span><br><span class="line">        filename=os.path.basename(blogfile)</span><br><span class="line">        <span class="comment">#判断是否存在相同的title</span></span><br><span class="line">        qs=BlogPost.objects.filter(title=blog_info[<span class="string">'title'</span>])</span><br><span class="line">        <span class="keyword">if</span> len(qs)==<span class="number">0</span>:</span><br><span class="line">            category = <span class="literal">None</span></span><br><span class="line">            tag_objs = []</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'categories'</span> <span class="keyword">in</span> blog_info:</span><br><span class="line">                categories=blog_info[<span class="string">'categories'</span>]</span><br><span class="line">                <span class="keyword">if</span> len(categories)&gt;<span class="number">0</span>:</span><br><span class="line">                    category_title = categories[<span class="number">0</span>]</span><br><span class="line">                    category_qs=BlogCategory.objects.filter(title=category_title)</span><br><span class="line">                    <span class="keyword">if</span> len(category_qs)&gt;<span class="number">0</span>:</span><br><span class="line">                        category=category_qs[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'tags'</span> <span class="keyword">in</span> blog_info:</span><br><span class="line">                tags=blog_info[<span class="string">'tags'</span>]</span><br><span class="line">                <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">                    tag_obj,b=Tag.objects.get_or_create(tag=tag)</span><br><span class="line">                    print(tag_obj.id)</span><br><span class="line">                    tag_objs.append(tag_obj)</span><br><span class="line">            blog = BlogPost()</span><br><span class="line">            blog.title = blog_info[<span class="string">'title'</span>]</span><br><span class="line">            blog.content = blog_info[<span class="string">'content'</span>]</span><br><span class="line">            blog.isShow = <span class="number">1</span> <span class="comment">#默认显示</span></span><br><span class="line">            blog.summary=blog.content[<span class="number">0</span>:<span class="number">200</span>] <span class="comment">#默认提取内容的前200个字作为摘要</span></span><br><span class="line">            blog.category=category</span><br><span class="line">            blog.blogSource = filename</span><br><span class="line">            blog.pubTime=blog_info[<span class="string">'date'</span>]</span><br><span class="line">            blog.save()</span><br><span class="line">            <span class="keyword">if</span> len(tag_objs)&gt;<span class="number">0</span>:</span><br><span class="line">                blog.tags.add(*tag_objs)</span><br><span class="line">            print(filename + <span class="string">'读取解析入库成功！'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(blog_info[<span class="string">'title'</span>]+<span class="string">'已经存在！'</span>)</span><br></pre></td></tr></table></figure><p>代码很简单，就是根据读取命令行的参数，这个参数就是需要迁移hexo的.md文件的目录或文件路径，读取目录或文件路径进行文件的解析，并写入到数据库。<br>.md文件的解析参考:<a href="https://blog.csdn.net/fullbug/article/details/126007706" target="_blank" rel="noopener">Python二十行代码实现hexo的md文件格式解析</a></p><h2 id="三、测试验证"><a href="#三、测试验证" class="headerlink" title="三、测试验证"></a>三、测试验证</h2><p>命令代码写完后就可以进行测试了。<br>在命令行输入<code>python manage.py</code> 可以看到自定义的transblog已经加入到管理命令了<br><img src="https://img-blog.csdnimg.cn/0b77c9bace944cb5a771ac4da6bb2fa2.png#pic_center" alt="transblog已经加入到管理命令"></p><p>输入 <code>python manage.py transblog -h</code><br>会提示命令的参数和用法：<br><img src="https://img-blog.csdnimg.cn/589f23f74da647888b9a2607b68fcd64.png#pic_center" alt="管理命令帮助"></p><p>如执行 <code>python manage.py transblog</code> 会提示”请输入指定的目录路径或.md文件路径:”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) PS D:\Python\study\pythonproject\ishareblog\ishareblog&gt; python manage.py transblog</span><br><span class="line">请输入指定的目录路径或.md文件路径:</span><br></pre></td></tr></table></figure><p>我们输入需要迁移的.md文件或路径<br>如：E:\CloudStation\personal\xiejavablog\myhexo\myblog\source_posts\2022-07-27-Python二十行代码实现hexo的md文件格式解析.md<br>不出意外的情况下控制台会打印“XXXX.md读取解析入库成功！”的信息<br><img src="https://img-blog.csdnimg.cn/93af5466f7f0497285dfa3852b527e39.png#pic_center" alt="执行效果"></p><p>访问博客，可以看到文章已经迁移过来了<br><img src="https://img-blog.csdnimg.cn/e558541002124378bd43b67b5390dfa8.png#pic_center" alt="执行效果"><br>全部代码仓库：<a href="https://gitee.com/ishareblog/ishareblog" target="_blank" rel="noopener">https://gitee.com/ishareblog/ishareblog</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python二十行代码实现hexo的md文件格式解析</title>
      <link href="/posts/f47f6214/"/>
      <url>/posts/f47f6214/</url>
      
        <content type="html"><![CDATA[<p>最近用django+Vue实现了一个博客应用，原来的hexo的博客用着也挺好，想继续留着用，于是就想将hexo生成的.md的博客内容文件解析后直接写到django的博客数据库里做同步显示。</p><p>hexo生成的.md文件内容主要分两部分，一部分是博客的信息、一部分是博客内容，博客信息包括标题、目录、标签、发布日期等，博客内容就是具体博客写的内容主体了。<br><img src="https://img-blog.csdnimg.cn/855e166cf7454b24b89f03c05c5f57b1.png#pic_center" alt="hexo生成的.md文件内容"></p><p>其中博客信息通过”—“来区分，夹在两个”—“块之间。博客的信息是yaml来描叙的需要解析并提取出相应的字段及内容，博客内容就更简单了直接是markdown描叙的不需要再解析了。<br>这里要做的事情就是提取两个”—“符号之间的内容，并解析相应的字段，提取两个”—“符号后面的内容作为博客的内容，形成字典，便于后面的入库。</p><p>代码示例如下：<br>yaml的解析可以直接用Python的PyYAML库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyYAML</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    :author: XieJava</span></span><br><span class="line"><span class="string">    :url: http://ishareread.com</span></span><br><span class="line"><span class="string">    :copyright: © 2021 XieJava &lt;xiejava@ishareread.com&gt;</span></span><br><span class="line"><span class="string">    :license: MIT, see LICENSE for more details.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="string">'''将md文件转成blog对象'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseblog</span><span class="params">(blog_md_file)</span>:</span></span><br><span class="line">    <span class="comment">#读md文件</span></span><br><span class="line">    md_f = open(blog_md_file, <span class="string">"r"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    md_f_str=md_f.read()</span><br><span class="line">    <span class="comment">#解析两个---之间的内容</span></span><br><span class="line">    pattern=<span class="string">'---'</span></span><br><span class="line">    blog_data=&#123;&#125;</span><br><span class="line">    pattern_list=list(pattern_search(md_f_str, pattern))</span><br><span class="line">    <span class="keyword">if</span> len(pattern_list)&gt;=<span class="number">2</span>:</span><br><span class="line">        blog_info_str=md_f_str[pattern_list[<span class="number">0</span>]+len(pattern):pattern_list[<span class="number">1</span>]]</span><br><span class="line">        blog_data=yaml.load(blog_info_str,Loader=yaml.SafeLoader)</span><br><span class="line">        blog_data[<span class="string">'content'</span>]=md_f_str[pattern_list[<span class="number">1</span>]+len(pattern):]</span><br><span class="line">    md_f.close()</span><br><span class="line">    <span class="keyword">return</span> blog_data</span><br><span class="line"></span><br><span class="line"><span class="string">'''分割符号匹配检索'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pattern_search</span><span class="params">(string,pattern)</span>:</span></span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index&lt;len(string)-len(pattern):</span><br><span class="line">        index=string.find(pattern,index,len(string))</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">yield</span> index</span><br><span class="line">        index+=len(pattern)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    blog_data=parseblog(<span class="string">'E:\\CloudStation\\personal\\xiejavablog\\myhexo\\myblog\\source\\_posts\\2022-07-19-Vue3解析markdown解析并实现代码高亮显示.md'</span>)</span><br><span class="line">    print(blog_data)</span><br></pre></td></tr></table></figure><p>效果：<br>可以看到hexo的md文件正确解析出来，形成字典。后续可以直接进行入库操作了。<br><img src="https://img-blog.csdnimg.cn/a48c43438d004e2aafbb8e5b21d9bd6a.png#pic_center" alt="解析效果"><br>Python的库还是很丰富实用的，用Python二十行代码就实现hexo的md文件格式解析。</p><p>源代码仓库：<a href="https://gitee.com/ishareblog/ishareblog" target="_blank" rel="noopener">https://gitee.com/ishareblog/ishareblog</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django+Vue快速实现博客网站</title>
      <link href="/posts/15ee23ea/"/>
      <url>/posts/15ee23ea/</url>
      
        <content type="html"><![CDATA[<p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。对于博客网站来说是典型的CMS应用。本文介绍通过Django+Vue的博客模版快速实现一个可用的博客网站。</p><p>这里用的博客模板是Gblog是一款nice的基于 vue 的博客模板。界面简洁轻快，非常适合用作个人博客。<a href="https://gitee.com/fengziy/Gblog" target="_blank" rel="noopener">https://gitee.com/fengziy/Gblog</a> 后台的接口和管理界面就通过Django框架来实现了。</p><p>这里数据库用mysql，接口框架主要用到的是Django的djangorestframework，内容编辑器用的是markdown通过django-mdedior库实现。</p><h2 id="一、依赖库"><a href="#一、依赖库" class="headerlink" title="一、依赖库"></a>一、依赖库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">asgiref==3.5.2</span><br><span class="line">Django==4.0.6</span><br><span class="line">django-cors-headers==3.13.0</span><br><span class="line">django-filter==22.1</span><br><span class="line">django-mdeditor==0.1.20</span><br><span class="line">djangorestframework==3.13.1</span><br><span class="line">mysqlclient==2.1.1</span><br><span class="line">Pillow==9.2.0</span><br><span class="line">pytz==2022.1</span><br><span class="line">sqlparse==0.4.2</span><br><span class="line">tzdata==2022.1</span><br></pre></td></tr></table></figure><h2 id="二、工程目录组织结构"><a href="#二、工程目录组织结构" class="headerlink" title="二、工程目录组织结构"></a>二、工程目录组织结构</h2><p><img src="https://img-blog.csdnimg.cn/a0d4613e40ac45f595f005d186264d74.png#pic_center" alt="工程目录组织结构"></p><h2 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h2><h3 id="1、模型"><a href="#1、模型" class="headerlink" title="1、模型"></a>1、模型</h3><p>模型很简单，根据Gblog前台要显示的内容包括有‘文章分类’、‘文章标签’、‘博客文章’、‘站点信息’、‘社交信息’、‘聚焦’，模型定义分别如下：<br>这里要说明的是因为博客文章内容准备用markdown编写，所以引入了mdeditor <code>from mdeditor.fields import MDTextField</code><br>内容字段<code>content=MDTextField(verbose_name=&#39;内容&#39;)</code><br>模型代码示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> common.basemodel <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> mdeditor.fields <span class="keyword">import</span> MDTextField</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="string">'''文章分类'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategory</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title=models.CharField(max_length=<span class="number">50</span>,verbose_name=<span class="string">'分类名称'</span>,default=<span class="string">''</span>)</span><br><span class="line">    href=models.CharField(max_length=<span class="number">100</span>,verbose_name=<span class="string">'分类路径'</span>,default=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'文章分类'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'文章分类'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''文章标签'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    tag=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标签'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tag</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'标签'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'标签'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''博客文章'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'文章标题'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(BlogCategory, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'文章分类'</span>, on_delete=models.DO_NOTHING)</span><br><span class="line">    isTop=models.BooleanField(default=<span class="literal">False</span>,verbose_name=<span class="string">'是否置顶'</span>)</span><br><span class="line">    isHot=models.BooleanField(default=<span class="literal">False</span>,verbose_name=<span class="string">'是否热门'</span>)</span><br><span class="line">    summary=models.CharField(max_length=<span class="number">500</span>,verbose_name=<span class="string">'内容摘要'</span>,default=<span class="string">''</span>)</span><br><span class="line">    content=MDTextField(verbose_name=<span class="string">'内容'</span>)</span><br><span class="line">    viewsCount= models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"查看数"</span>)</span><br><span class="line">    commentsCount=models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"评论数"</span>)</span><br><span class="line">    tags=models.ManyToManyField(to=Tag, related_name=<span class="string">"tag_post"</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>,verbose_name=<span class="string">"标签"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tag_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">','</span>.join([i.tag <span class="keyword">for</span> i <span class="keyword">in</span> self.tags.all()])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'博客文章'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'博客文章'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''站点信息'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'站点名称'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    avatar=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点图标'</span>)</span><br><span class="line">    slogan=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点标语'</span>)</span><br><span class="line">    domain=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点域名'</span>)</span><br><span class="line">    notice=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点备注'</span>)</span><br><span class="line">    desc=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'站点描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'站点信息'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'站点信息'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''社交信息'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Social</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    icon=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'图标'</span>)</span><br><span class="line">    color=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'颜色'</span>)</span><br><span class="line">    href=models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'社交信息'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'社交信息'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''聚焦'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Focus</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    img=models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'路径'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'聚焦'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'聚焦'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''友链'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    siteName=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'友链站点名称'</span>)</span><br><span class="line">    path=models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'地址路径'</span>)</span><br><span class="line">    desc=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.siteName</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'友链'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'友链'</span></span><br></pre></td></tr></table></figure><h3 id="2、admin管理"><a href="#2、admin管理" class="headerlink" title="2、admin管理"></a>2、admin管理</h3><p>实际上只要把模型注册到admin就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="meta">@admin.register(BlogCategory)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategoryAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    admin.site.site_title=<span class="string">"ishareblog后台"</span></span><br><span class="line">    admin.site.site_header=<span class="string">"ishareblog后台"</span></span><br><span class="line">    admin.site.index_title=<span class="string">"ishareblog管理"</span></span><br><span class="line"></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(BlogPost)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'category'</span>,<span class="string">'isTop'</span>,<span class="string">'isHot'</span>]</span><br><span class="line">    search_fields = (<span class="string">'title'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Site)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>,<span class="string">'slogan'</span>,<span class="string">'domain'</span>,<span class="string">'desc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Social)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Focus)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoucusAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'img'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Friend)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoucusAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'siteName'</span>,<span class="string">'path'</span>,<span class="string">'desc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Tag)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>,<span class="string">'tag'</span>]</span><br></pre></td></tr></table></figure><h3 id="3、接口"><a href="#3、接口" class="headerlink" title="3、接口"></a>3、接口</h3><p>前端是Vue模板展示的，所以要为前端Vue提供相应的接口。通过djangorestframework将模型通过restful接口提供是非常easy的。</p><h4 id="1）首先将需要暴露的模型通过序列化类序列化"><a href="#1）首先将需要暴露的模型通过序列化类序列化" class="headerlink" title="1）首先将需要暴露的模型通过序列化类序列化"></a>1）首先将需要暴露的模型通过序列化类序列化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">serializers.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategoryModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model=BlogCategory</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Tag</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    create_time = serializers.DateTimeField(format=<span class="string">"%Y-%m-%d %H:%M:%S"</span>, required=<span class="literal">False</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    update_time = serializers.DateTimeField(format=<span class="string">"%Y-%m-%d %H:%M:%S"</span>, required=<span class="literal">False</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.CharField(max_length=<span class="number">32</span>, source=<span class="string">'category.id'</span>)</span><br><span class="line">    pubTime=update_time</span><br><span class="line">    category=BlogCategoryModelSerializer()</span><br><span class="line">    tags=serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多对多，钩子函数序列化,必须是以get_开头的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_tags</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        tags = obj.tags.all()</span><br><span class="line">        tag = TagModelSerializer(tags, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> tag.data</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model=BlogPost</span><br><span class="line">        fields=<span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Site</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Social</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FocusModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Focus</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Friend</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><h4 id="2）将序列化的对象通过视图类提供接口"><a href="#2）将序列化的对象通过视图类提供接口" class="headerlink" title="2）将序列化的对象通过视图类提供接口"></a>2）将序列化的对象通过视图类提供接口</h4><p>custommodelviewset.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomModelViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#CreateModelMixin-&gt;create</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">201</span>,msg=<span class="string">"OK"</span>, status=status.HTTP_201_CREATED,headers=headers)</span><br><span class="line">    <span class="comment">#ListModelMixin-&gt;list</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#RetrieveModelMixin-&gt;retrieve</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br><span class="line">    <span class="comment">#UpdateModelMixin-&gt;update</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        partial = kwargs.pop(<span class="string">'partial'</span>, <span class="literal">False</span>)</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance, data=request.data, partial=partial)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_update(serializer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> getattr(instance, <span class="string">'_prefetched_objects_cache'</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># If 'prefetch_related' has been applied to a queryset, we need to</span></span><br><span class="line">            <span class="comment"># forcibly invalidate the prefetch cache on the instance.</span></span><br><span class="line">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#DestroyModelMixin-&gt;destroy</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        self.perform_destroy(instance)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=[], code=<span class="number">204</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, status</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</span><br><span class="line"><span class="keyword">from</span> api.myfilter <span class="keyword">import</span> BlogPostFilter</span><br><span class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogCategory, BlogPost,Site,Social,Focus,Friend,Tag</span><br><span class="line"><span class="keyword">from</span> api.mypage <span class="keyword">import</span> MyPage</span><br><span class="line"><span class="keyword">from</span> common.custommodelviewset <span class="keyword">import</span> CustomModelViewSet</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogCategoryViewset</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = BlogCategory.objects.all()</span><br><span class="line">    serializer_class = BlogCategoryModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogsView</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = BlogPost.objects.order_by(<span class="string">'-isTop'</span>,<span class="string">'-update_time'</span>)</span><br><span class="line">    serializer_class = BlogPostModelSerializer</span><br><span class="line">    pagination_class = MyPage</span><br><span class="line">    filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">    filterset_class = BlogPostFilter</span><br><span class="line">    <span class="comment">#搜索</span></span><br><span class="line">    search_fields=(<span class="string">'title'</span>,)</span><br><span class="line">    <span class="comment">#排序</span></span><br><span class="line">    ordering_fields = (<span class="string">'isTop'</span>, <span class="string">'update_time'</span>)</span><br><span class="line">    <span class="comment">#自定义获取详情接口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self,request,*args, **kwargs)</span>:</span></span><br><span class="line">        instance=self.get_object()</span><br><span class="line">        instance.viewsCount+=<span class="number">1</span></span><br><span class="line">        instance.save()</span><br><span class="line">        serializer=self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data,code=<span class="number">200</span>,msg=<span class="string">"success"</span>,status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteView</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = Site.objects.all()</span><br><span class="line">    serializer_class = SiteModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialView</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = Social.objects.all()</span><br><span class="line">    serializer_class = SocialModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FocusView</span><span class="params">(CustomModelViewSet)</span>:</span></span><br><span class="line">    queryset = Focus.objects.all()</span><br><span class="line">    serializer_class = FocusModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Friend.objects.all()</span><br><span class="line">    serializer_class = FriendModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Tag.objects.all()</span><br><span class="line">    serializer_class = TagModelSerializer</span><br></pre></td></tr></table></figure><h4 id="3）通过路由来实现接口地址和视图的绑定和访问"><a href="#3）通过路由来实现接口地址和视图的绑定和访问" class="headerlink" title="3）通过路由来实现接口地址和视图的绑定和访问"></a>3）通过路由来实现接口地址和视图的绑定和访问</h4><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    :author: XieJava</span></span><br><span class="line"><span class="string">    :url: http://ishareread.com</span></span><br><span class="line"><span class="string">    :copyright: © 2021 XieJava &lt;xiejava@ishareread.com&gt;</span></span><br><span class="line"><span class="string">    :license: MIT, see LICENSE for more details.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">blogcategory_list=views.BlogCategoryViewset.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">blogcategory_detail=views.BlogCategoryViewset.as_view(&#123; <span class="string">'get'</span>: <span class="string">'retrieve'</span>,&#125;)</span><br><span class="line">blog_list=views.BlogsView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">blog_detail=views.BlogsView.as_view(&#123; <span class="string">'get'</span>: <span class="string">'retrieve'</span>,&#125;)</span><br><span class="line">site_list=views.SiteView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">site_detail=views.SiteView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,&#125;)</span><br><span class="line">social_list=views.SocialView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">social_detail=views.SocialView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,&#125;)</span><br><span class="line">focus_list=views.FocusView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">focus_detail=views.FocusView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>&#125;)</span><br><span class="line">friend_list=views.FriendView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">friend_detail=views.FriendView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>&#125;)</span><br><span class="line">tags_list=views.TagView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line"><span class="comment"># router=DefaultRouter()</span></span><br><span class="line"><span class="comment"># router.register('blogs',views.BlogsView)</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'category/'</span>,blogcategory_list),</span><br><span class="line">    path(<span class="string">'category/&lt;pk&gt;/'</span>,blogcategory_detail),</span><br><span class="line">    path(<span class="string">'post/list'</span>,blog_list),</span><br><span class="line">    path(<span class="string">'post/&lt;pk&gt;'</span>,blog_detail),</span><br><span class="line">    path(<span class="string">'social/'</span>,social_list),</span><br><span class="line">    path(<span class="string">'site/&lt;pk&gt;'</span>,site_detail),</span><br><span class="line">    path(<span class="string">'focus/list'</span>,focus_list),</span><br><span class="line">    path(<span class="string">'comment/'</span>,blog_list),</span><br><span class="line">    path(<span class="string">'friend/'</span>,friend_list),</span><br><span class="line">    path(<span class="string">'tags/'</span>,tags_list),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="4）自定义接口返回格式"><a href="#4）自定义接口返回格式" class="headerlink" title="4）自定义接口返回格式"></a>4）自定义接口返回格式</h4><p>接口需要根据Glog定义的格式进行定义和返回，这里就需要自定义接口返回格式。<br>具体实现参见：<a href="https://xiejava.blog.csdn.net/article/details/125773730" target="_blank" rel="noopener">https://xiejava.blog.csdn.net/article/details/125773730</a><br>–自定义返回响应类customresponse.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomResponse</span><span class="params">(Response)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,data=None,code=None,msg=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 status=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 template_name=None, headers=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 exception=False, content_type=None,**kwargs)</span>:</span></span><br><span class="line">        super().__init__(<span class="literal">None</span>, status=status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(data, Serializer):</span><br><span class="line">            msg = (</span><br><span class="line">                <span class="string">'You passed a Serializer instance as data, but '</span></span><br><span class="line">                <span class="string">'probably meant to pass serialized `.data` or '</span></span><br><span class="line">                <span class="string">'`.error`. representation.'</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> AssertionError(msg)</span><br><span class="line">        self.data=&#123;<span class="string">'code'</span>:code,<span class="string">'msg'</span>:msg,<span class="string">'data'</span>:data&#125;</span><br><span class="line">        self.data.update(kwargs)</span><br><span class="line">        self.template_name=template_name</span><br><span class="line">        self.exception=exception</span><br><span class="line">        self.content_type=content_type</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> headers:</span><br><span class="line">            <span class="keyword">for</span> name, value <span class="keyword">in</span> headers.items():</span><br><span class="line">                self[name] = value</span><br></pre></td></tr></table></figure><p>–翻页实现类mypage.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">8</span> <span class="comment">#每页显示数量</span></span><br><span class="line">    max_page_size = <span class="number">50</span> <span class="comment">#每页最大显示数量。</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span> <span class="comment">#每页数量的参数名称</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span>  <span class="comment">#页码的参数名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#自定义分页器的返回参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        ret_data = dict()</span><br><span class="line">        ret_data[<span class="string">'items'</span>] = data</span><br><span class="line">        <span class="comment"># 加入自定义分页信息</span></span><br><span class="line">        ret_data[<span class="string">'total'</span>] = self.page.paginator.count</span><br><span class="line">        ret_data[<span class="string">'hasNextPage'</span>] = self.get_next_link()</span><br><span class="line">        ret_data[<span class="string">'size'</span>] = self.page_size</span><br><span class="line">        ret_data[<span class="string">'page'</span>] = self.page.number</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=ret_data,code=<span class="number">200</span>,msg=<span class="string">"OK"</span>,status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>全部代码：<br>后台代码：<a href="https://gitee.com/xiejava/ishareblog" target="_blank" rel="noopener">https://gitee.com/xiejava/ishareblog</a><br>前台代码：<a href="https://gitee.com/xiejava/Gblog" target="_blank" rel="noopener">https://gitee.com/xiejava/Gblog</a></p><h2 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h2><h3 id="1、后台管理"><a href="#1、后台管理" class="headerlink" title="1、后台管理"></a>1、后台管理</h3><p>管理界面<br><img src="https://img-blog.csdnimg.cn/eb834ee5e4ea4be49e4fa7d4adb2e6db.png#pic_center" alt="管理界面"><br>博客文章列表<br><img src="https://img-blog.csdnimg.cn/6d4ff80a5ec1497f8187f9ea26e326bd.png#pic_center" alt="博客文章列表"><br>文章内容编辑，支持markdown<br><img src="https://img-blog.csdnimg.cn/2467bec82fd84a2cae47bc4a7f61c5d1.png#pic_center" alt="文章内容编辑，支持markdown"><br>分类管理<br><img src="https://img-blog.csdnimg.cn/7421334028a3408bb79991c72daebcfc.png#pic_center" alt="文章分类"><br>标签管理<br><img src="https://img-blog.csdnimg.cn/6d26689942e04db4ab5302ba3f726668.png#pic_center" alt="标签管理"><br>社交信息<br><img src="https://img-blog.csdnimg.cn/5f2e1ae1071f4061a584f9bdaa6b1ae1.png#pic_center" alt="社交信息"></p><h3 id="2、接口"><a href="#2、接口" class="headerlink" title="2、接口"></a>2、接口</h3><p>接口清单<br><img src="https://img-blog.csdnimg.cn/44b477f4c25e4a29a18921705c1e8bc8.png#pic_center" alt="接口清单"><br>文章列表接口，支持翻页<br><img src="https://img-blog.csdnimg.cn/b066c988f0d44d34a865e29b9fac0553.png#pic_center" alt="文章列表接口"></p><p>文章详情接口<br><img src="https://img-blog.csdnimg.cn/5e15677117454dccad723d163e9b3b26.png#pic_center" alt="文章详情接口"></p><h3 id="3、前台展现"><a href="#3、前台展现" class="headerlink" title="3、前台展现"></a>3、前台展现</h3><p><img src="https://img-blog.csdnimg.cn/2921705f22d7475cb161cc320acca0db.png#pic_center" alt="前台展现"></p><p>文章列表<br><img src="https://img-blog.csdnimg.cn/35d536c30fdf49b4965257895863ea8f.png#pic_center" alt="文章列表"><br>文章详情，支持markdown显示及目录<br><img src="https://img-blog.csdnimg.cn/97b5db037f6f4272bac5a0d70fa67f18.png#pic_center" alt="文章详情"></p><p>社交信息<br><img src="https://img-blog.csdnimg.cn/d143df3884914dbe9a4b866669a58147.png#pic_center" alt="社交信息"></p><p>博客效果地址：<a href="http://blog.ishareread.com" target="_blank" rel="noopener">http://blog.ishareread.com</a></p><p>后续考虑<br>1、django原生admin的管理界面还是简陋了一点，后续可能会用其他管理界面的UI给换掉<br>2、现在有了一个hexo的博客了，后续可能会考虑实现hexo生成的博客内容直接同步到django的博客，或者django博客编辑的内容直接生成hexo的.md文件<br>有兴趣的话可以关注本博客</p><hr><p>博客：<a href="http://xiejava.ishareread.com" target="_blank" rel="noopener">http://xiejava.ishareread.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3解析markdown解析并实现代码高亮显示</title>
      <link href="/posts/e37e6718/"/>
      <url>/posts/e37e6718/</url>
      
        <content type="html"><![CDATA[<p>Vue实现博客前端，需要实现markdown的解析，如果有代码则需要实现代码的高亮。<br>Vue的markdown解析库有很多，如markdown-it、vue-markdown-loader、marked、vue-markdown等。这些库都大同小异。这里选用的是marked，代码高亮的库选用的是highlight.js。</p><p>具体实现步骤如下：</p><h2 id="一、安装依赖库"><a href="#一、安装依赖库" class="headerlink" title="一、安装依赖库"></a>一、安装依赖库</h2><p>在vue项目下打开命令窗口，并输入以下命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install marked -save    <span class="comment">// marked 用于将markdown转换成html</span></span><br><span class="line">npm install highlight.js -save   <span class="comment">//用于代码高亮显示</span></span><br></pre></td></tr></table></figure><p>命令执行完后可以在控制台或package.json文件中看到有安装的版本号<br><img src="https://img-blog.csdnimg.cn/fd7bdbb898a04806928bb4f3e70cf974.png#pic_center" alt="package.json文件中看到有安装的版本号"></p><h2 id="二、在main-js文件中引入highlight-js及样式并创建一个自定义的全局指令"><a href="#二、在main-js文件中引入highlight-js及样式并创建一个自定义的全局指令" class="headerlink" title="二、在main.js文件中引入highlight.js及样式并创建一个自定义的全局指令"></a>二、在main.js文件中引入highlight.js及样式并创建一个自定义的全局指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">'highlight.js'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'highlight.js/styles/atom-one-dark.css'</span> <span class="comment">//样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建v-highlight全局指令</span></span><br><span class="line">Vue.directive(<span class="string">'highlight'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> blocks = el.querySelectorAll(<span class="string">'pre code'</span>);</span><br><span class="line">  blocks.forEach(<span class="function">(<span class="params">block</span>)=&gt;</span>&#123;</span><br><span class="line">    hljs.highlightBlock(block)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就可以在vue组件中使用v-highlight引用代码高亮的方法了。</p><h2 id="三、在Vue组件中应用marked解析及实现代码高亮"><a href="#三、在Vue组件中应用marked解析及实现代码高亮" class="headerlink" title="三、在Vue组件中应用marked解析及实现代码高亮"></a>三、在Vue组件中应用marked解析及实现代码高亮</h2><p>代码示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 正文输出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entry-content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-highlight</span> <span class="attr">v-html</span>=<span class="string">"article"</span>  <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 将marked 引入</span></span><br><span class="line">  <span class="keyword">import</span> &#123; marked &#125;<span class="keyword">from</span> <span class="string">'marked'</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">'articles'</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span>&#123;</span><br><span class="line">              article:<span class="string">''</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          getPostDetail() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'getPostDetail()'</span>+<span class="keyword">this</span>.id)</span><br><span class="line">            fetchPostDetail(<span class="keyword">this</span>.id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">this</span>.postdetail=res.data</span><br><span class="line">               <span class="comment">// 调用marked()方法，将markdown转换成html</span></span><br><span class="line">               <span class="keyword">this</span>.article= marked(<span class="keyword">this</span>.postdetail.content);</span><br><span class="line">               <span class="built_in">console</span>.log(res.data)</span><br><span class="line">              &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(err)</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">          <span class="comment">//调用获取文章内容的接口方法</span></span><br><span class="line">          <span class="keyword">this</span>.getPostDetail()</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、显示效果"><a href="#四、显示效果" class="headerlink" title="四、显示效果"></a>四、显示效果</h2><p>markdown解析及代码高亮显示效果<br><img src="https://img-blog.csdnimg.cn/83cb847638e64e4d97e6c6c2c48344dd.png#pic_center" alt="在这里插入图片描述"></p><p>示例中引用的样式是 <code>import &#39;highlight.js/styles/atom-one-dark.css&#39;</code><br>实际highlight.js/styles中提供了很多样式，可以根据自己的喜好选用。</p><p><img src="https://img-blog.csdnimg.cn/fdbe160b27234608af51d045eb8106be.png#pic_center" alt="代码高亮样式"></p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3.9环境安装mysqlclient报python setup.py egg_info did not run successfully错避坑</title>
      <link href="/posts/7435f815/"/>
      <url>/posts/7435f815/</url>
      
        <content type="html"><![CDATA[<p>MySQL是常用的开源数据库，Python环境下django框架连接MySQL数据库用的是mysqlclient库，今天在用pip安装mysqlclient库时报错，特记录一下，避免后续继续踩坑。</p><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><p>操作系统：CentOS Linux 7.2<br>Python版本：Python 3.9.13<br>pip版本：pip 22.1.2</p><h1 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h1><p>执行<code>pip3 install mysqlclient==2.1.1</code> 报错<br>报错信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Using cached http://mirrors.aliyun.com/pypi/packages/50/5f/eac919b88b9df39bbe4a855f136d58f80d191cfea34a3dcf96bf5d8ace0a/mysqlclient-2.1.1.tar.gz (88 kB)</span><br><span class="line">  Preparing metadata (setup.py) ... error</span><br><span class="line">  error: subprocess-exited-with-error</span><br><span class="line">  </span><br><span class="line">  × python setup.py egg_info did not run successfully.</span><br><span class="line">  │ <span class="built_in">exit</span> code: 1</span><br><span class="line">  ╰─&gt; [16 lines of output]</span><br><span class="line">      /bin/sh: mysql_config: <span class="built_in">command</span> not found</span><br><span class="line">      /bin/sh: mariadb_config: <span class="built_in">command</span> not found</span><br><span class="line">      /bin/sh: mysql_config: <span class="built_in">command</span> not found</span><br><span class="line">      Traceback (most recent call last):</span><br><span class="line">        File <span class="string">"&lt;string&gt;"</span>, line 2, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        File <span class="string">"&lt;pip-setuptools-caller&gt;"</span>, line 34, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        File <span class="string">"/tmp/pip-install-i1nt_asj/mysqlclient_1b92535d58cd440b8797686ac8bc9882/setup.py"</span>, line 15, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">          metadata, options = get_config()</span><br><span class="line">        File <span class="string">"/tmp/pip-install-i1nt_asj/mysqlclient_1b92535d58cd440b8797686ac8bc9882/setup_posix.py"</span>, line 70, <span class="keyword">in</span> get_config</span><br><span class="line">          libs = mysql_config(<span class="string">"libs"</span>)</span><br><span class="line">        File <span class="string">"/tmp/pip-install-i1nt_asj/mysqlclient_1b92535d58cd440b8797686ac8bc9882/setup_posix.py"</span>, line 31, <span class="keyword">in</span> mysql_config</span><br><span class="line">          raise OSError(<span class="string">"&#123;&#125; not found"</span>.format(_mysql_config_path))</span><br><span class="line">      OSError: mysql_config not found</span><br><span class="line">      mysql_config --version</span><br><span class="line">      mariadb_config --version</span><br><span class="line">      mysql_config --libs</span><br><span class="line">      [end of output]</span><br><span class="line">  </span><br><span class="line">  note: This error originates from a subprocess, and is likely not a problem with pip.</span><br><span class="line">error: metadata-generation-failed</span><br><span class="line"></span><br><span class="line">× Encountered error <span class="keyword">while</span> generating package metadata.</span><br><span class="line">╰─&gt; See above <span class="keyword">for</span> output.</span><br><span class="line"></span><br><span class="line">note: This is an issue with the package mentioned above, not pip.</span><br><span class="line">hint: See above <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5e642c3acb114075a118e98f710722f8.png#pic_center" alt="mysqlclient报错"></p><h1 id="避坑："><a href="#避坑：" class="headerlink" title="避坑："></a>避坑：</h1><p><strong>从报错信息看是找不到mysql_config</strong><br>通过<code>whereis mysql_config</code>命令查看mysql_config<br>发现mysql_confg没有<br><strong>执行<code>yum install mysql-devel</code> 安装mysql-devel</strong><br>执行whereis mysql_config命令查看mysql_config这时mysql_config有了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_config: /usr/bin/mysql_config /usr/share/man/man1/mysql_config.1.gz</span><br></pre></td></tr></table></figure><p>再次执行pip安装命令安装成功！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pip3 install mysqlclient==2.1.1</span><br><span class="line"></span><br><span class="line">Looking <span class="keyword">in</span> indexes: http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">Collecting mysqlclient==2.1.1</span><br><span class="line">  Using cached http://mirrors.aliyun.com/pypi/packages/50/5f/eac919b88b9df39bbe4a855f136d58f80d191cfea34a3dcf96bf5d8ace0a/mysqlclient-2.1.1.tar.gz (88 kB)</span><br><span class="line">  Preparing metadata (setup.py) ... <span class="keyword">done</span></span><br><span class="line">Using legacy <span class="string">'setup.py install'</span> <span class="keyword">for</span> mysqlclient, since package <span class="string">'wheel'</span> is not installed.</span><br><span class="line">Installing collected packages: mysqlclient</span><br><span class="line">  Running setup.py install <span class="keyword">for</span> mysqlclient ... <span class="keyword">done</span></span><br><span class="line">Successfully installed mysqlclient-2.1.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django加入markdown编辑器及markdown上传图片不回显避坑</title>
      <link href="/posts/462af16b/"/>
      <url>/posts/462af16b/</url>
      
        <content type="html"><![CDATA[<p>一般来说一个CMS系统如博客系统都需要一个好的富文本编辑器，现在大家更多的是选择MarkDown编辑器来编辑内容。Django作为python的主流web开发框架当然少不了markdown的插件。本文介绍如何在Django框架中引入markdown编辑器及在使用markdown时的注意事项。</p><p>在Django框架中引入markdown编辑器主要是通过安装引入Django-mdeditor库来实现。<br>Django-mdeditor 是基于 Editor.md 的一个 django Markdown 文本编辑插件应用。<br>其官方下载地址见 <a href="https://pypi.org/project/django-mdeditor/" target="_blank" rel="noopener">https://pypi.org/project/django-mdeditor/</a><br>根据官方指导文档</p><h1 id="一、安装使用"><a href="#一、安装使用" class="headerlink" title="一、安装使用"></a>一、安装使用</h1><h2 id="1、安装django-mdeditor"><a href="#1、安装django-mdeditor" class="headerlink" title="1、安装django-mdeditor"></a>1、安装django-mdeditor</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-mdeditor</span><br></pre></td></tr></table></figure><h2 id="2、在-settings-配置文件-INSTALLED-APPS-中添加-mdeditor"><a href="#2、在-settings-配置文件-INSTALLED-APPS-中添加-mdeditor" class="headerlink" title="2、在 settings 配置文件 INSTALLED_APPS 中添加 mdeditor"></a>2、在 settings 配置文件 INSTALLED_APPS 中添加 mdeditor</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'django_filters'</span>,<span class="comment">#注册条件查询</span></span><br><span class="line">    <span class="comment"># 注册markdown的应用</span></span><br><span class="line">    <span class="string">'mdeditor'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3、针对django3-0-修改-frame-配置"><a href="#3、针对django3-0-修改-frame-配置" class="headerlink" title="3、针对django3.0+修改 frame 配置"></a>3、针对django3.0+修改 frame 配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_FRAME_OPTIONS = <span class="string">'SAMEORIGIN'</span>  <span class="comment"># django 3.0 + 默认为 deny</span></span><br></pre></td></tr></table></figure><h2 id="4、在-settings-中添加媒体文件的路径配置"><a href="#4、在-settings-中添加媒体文件的路径配置" class="headerlink" title="4、在 settings 中添加媒体文件的路径配置"></a>4、在 settings 中添加媒体文件的路径配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'uploads'</span>)</span><br></pre></td></tr></table></figure><p>在你项目根目录下创建 uploads/editor 目录，用于存放上传的图片。</p><h2 id="5、在项目的根-urls-py-中添加扩展url和媒体文件url"><a href="#5、在项目的根-urls-py-中添加扩展url和媒体文件url" class="headerlink" title="5、在项目的根 urls.py 中添加扩展url和媒体文件url:"></a>5、在项目的根 urls.py 中添加扩展url和媒体文件url:</h2><p>注意是在项目的根 urls.py 中添加扩展url和媒体文件url，而不是在其他项目应用的urls.py中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'mdeditor/'</span>, include(<span class="string">'mdeditor.urls'</span>))</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="comment"># static files (images, css, javascript, etc.)</span></span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h2 id="6、在项目model中应用markdown"><a href="#6、在项目model中应用markdown" class="headerlink" title="6、在项目model中应用markdown"></a>6、在项目model中应用markdown</h2><p>示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''博客文章'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'文章标题'</span>, unique = <span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(BlogCategory, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'文章分类'</span>, on_delete=models.DO_NOTHING)</span><br><span class="line">    isTop=models.BooleanField(default=<span class="literal">False</span>,verbose_name=<span class="string">'是否置顶'</span>)</span><br><span class="line">    isHot=models.BooleanField(default=<span class="literal">False</span>,verbose_name=<span class="string">'是否热门'</span>)</span><br><span class="line">    summary=models.CharField(max_length=<span class="number">500</span>,verbose_name=<span class="string">'内容摘要'</span>,default=<span class="string">''</span>)</span><br><span class="line">    content=MDTextField(verbose_name=<span class="string">'内容'</span>)</span><br><span class="line">    viewsCount= models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"查看数"</span>)</span><br><span class="line">    commentsCount=models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"评论数"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'博客文章'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'博客文章'</span></span><br></pre></td></tr></table></figure><p>见 <code>content=MDTextField(verbose_name=&#39;内容&#39;)</code> 表示博客文章的内容是MDTextField</p><h2 id="7、向-admin-py-中注册model"><a href="#7、向-admin-py-中注册model" class="headerlink" title="7、向 admin.py 中注册model:"></a>7、向 admin.py 中注册model:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="meta">@admin.register(BlogPost)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>,<span class="string">'category'</span>,<span class="string">'isTop'</span>,<span class="string">'isHot'</span>]</span><br></pre></td></tr></table></figure><h2 id="8、迁移创建数据表"><a href="#8、迁移创建数据表" class="headerlink" title="8、迁移创建数据表"></a>8、迁移创建数据表</h2><p>运行 <code>python manage.py makemigrations</code> 和 <code>python manage.py migrate</code> 来创建你的model 数据库表，可以看到默认创建的content字段是longtext类型的<br><img src="https://img-blog.csdnimg.cn/a963a9ee98dc437fbb9605d56c48d798.png#pic_center" alt="默认创建的content字段是longtext类型的"></p><h2 id="9、测试验证"><a href="#9、测试验证" class="headerlink" title="9、测试验证"></a>9、测试验证</h2><p>启动应用，访问<a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a> 点击新增博客文章，可以看到内容字段是markdown编辑器输入了。<br><img src="https://img-blog.csdnimg.cn/a82339a899c144b9bf49772cd4f807d3.png#pic_center" alt="markdown编辑器"></p><p>至此django应用中就可以使用markdown编辑器了。</p><h1 id="二、markdown上传图片不回显避坑"><a href="#二、markdown上传图片不回显避坑" class="headerlink" title="二、markdown上传图片不回显避坑"></a>二、markdown上传图片不回显避坑</h1><p>按照以上步骤配置django-mdeditor,markdown编辑器可以正常使用，但是这里有个大坑，就是有些浏览器在上传图片后上传的图片不回显！<br>我就碰到了这样的情况。<br><img src="https://img-blog.csdnimg.cn/63771e4b65b4499992aec3b425c6af46.png#pic_center" alt="上传图片后上传的图片不回显"></p><p>在添加图片界面选择本地上传图片后发现后台接口调到了 <code>/mdeditor/uploads/?guid=1657867564930</code> 接口并且返回了200，但是上传的图片地址不回显，提交报“错误：图片地址不能为空。” 这就奇了怪了。<br>打开浏览器的调试工具，发现报了一个错，<code>Uncaught SyntaxError: Unexpected token 下 in JSON at position 141</code><br><img src="https://img-blog.csdnimg.cn/8d48982eb41846c3a25fc5271208531b.png#pic_center" alt="浏览器的调试工具，发现报了一个错"></p><p>点击详情，具体应该是获取的JSON无法解析。<br><img src="https://img-blog.csdnimg.cn/9179dac6e320410b905175da624a6baa.png#pic_center" alt="JSON无法解析"></p><p>这个JSON为什么无法解析呢？开始进一步调试，这个JSON是上传时调用的后台上传方法返回的。所以来看看是不是后台上传接口返回的JSON串有什么问题。找到/mdeditor/uploads路由所对应的源码<br><img src="https://img-blog.csdnimg.cn/cf8943365d794104a583f1b1613c3c6e.png#pic_center" alt="/mdeditor/uploads路由所对应的源码"></p><p>UploadView的源代码，就是返回一个成功的json报文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'success'</span>: <span class="number">1</span>,</span><br><span class="line">                     <span class="string">'message'</span>: <span class="string">"上传成功！"</span>,</span><br><span class="line">                     <span class="string">'url'</span>: os.path.join(settings.MEDIA_URL,</span><br><span class="line">                                         MDEDITOR_CONFIGS[<span class="string">'image_folder'</span>],</span><br><span class="line">                                         file_full_name)&#125;)</span><br></pre></td></tr></table></figure><p>实际打断点debug也是正常返回上传成功的json报文。<br><img src="https://img-blog.csdnimg.cn/9fae1d59d9194aed8856bb01b83bbf73.png#pic_center" alt="打断点debug也是正常返回上传成功的json报文"></p><p>这就有点奇怪了，接口返回了正常的json报文怎么就解析不了了呢？接着继续调前台js代码，看究竟是什么原因。<br><img src="https://img-blog.csdnimg.cn/d01ac2d8b19d421c91a6bce58fd3c383.png#pic_center" alt="json串里多了几个字“下载视频”!"></p><p>发现js获取的json串里多了几个字“下载视频”! 这是什么鬼？实在是没有地方有返回“下载视频”这几个字啊？看js代码是通过iframe来处理请求的，再来看看iframe的内容，发现iframe里确实有“下载视频”<br><img src="https://img-blog.csdnimg.cn/acc72d33e03746ef896058f625640bb9.png#pic_center" alt="iframe里确实有“下载视频”"><br>原来是有个chrome浏览器插件，擅自给加了“下载视频”的内容。再来看浏览器装了些啥插件。原来是有个迅雷插件，应该就是这个插件搞的鬼了，罪魁祸首就是它了！<br><img src="https://img-blog.csdnimg.cn/74175c998960443fb81d20e3f294f4a6.png#pic_center" alt="罪魁祸首迅雷插件"></p><p>把这个迅雷插件删除或停用，果然一切正常！可以正常回显！！！<br><img src="https://img-blog.csdnimg.cn/f53ad6f543fa4036b9858398d83752f3.png#pic_center" alt="可以正常回显"></p><p>显示插入的图片<br><img src="https://img-blog.csdnimg.cn/f7e7c7d586f34aae940edcb094f34254.png#pic_center" alt="显示插入的图片"></p><p>所以，碰到markdown上传图片不回显的情况，先看下自己的浏览器是不是开启了迅雷插件应用，如果开启了迅雷插件应用先停用或删除！</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django的restframework接口框架自定义返回数据格式</title>
      <link href="/posts/1dea176f/"/>
      <url>/posts/1dea176f/</url>
      
        <content type="html"><![CDATA[<p>在前后端分离是大趋势的背景下，前端获取数据都是通过调用后台的接口来获取数据微服务的应用越来越多。Django是Python进行web应用开发常用的web框架，用Django框架进行web应用框架减少了很多工作，通常用很少量的代码就可以实现数据的增、删、改、查的业务应用，同样用Django的restframework的框架对外发布接口也是非常的简单方便，几行代码就可以将数据对象通过接口的方式提供服务。因为在实际开发过程中接口的返回数据有一定的格式，本文介绍通过自定义Response返回对象来自定义接口返回数据格式。</p><p>以下示例将数据对象Friend通过restframework框架进行接口发布。<br>只要定义Friend数据对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    siteName=models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'友链站点名称'</span>)</span><br><span class="line">    path=models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">'地址路径'</span>)</span><br><span class="line">    desc=models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">'描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.siteName</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'友链'</span></span><br><span class="line">        verbose_name_plural=<span class="string">'友链'</span></span><br></pre></td></tr></table></figure><p>定义一个序列化类将返回的字段序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Friend</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><p>定义一个接口视图类获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Friend.objects.all()</span><br><span class="line">    serializer_class = FriendModelSerializer</span><br></pre></td></tr></table></figure><p>定义接口路由就可以通过httprestfull的接口进行访问了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">friend_list=views.FriendView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,&#125;)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'friend/'</span>,friend_list),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接口访问效果如下：<br><a href="http://localhost:8000/api/friend/" target="_blank" rel="noopener">http://localhost:8000/api/friend/</a><br><img src="https://img-blog.csdnimg.cn/f20a9ebcb04b4df98dc490a07f513ed6.png#pic_center" alt="httprestfull的接口"></p><p>但是在项目中经常会碰到接口格式变化的情况，restframework框架默认的返回数据格式不满足应用的需求。比如一般的接口都会有接口返回的code、msg、data，code用来标识接口返回代码比如200是正常，msg用来记录异常或其信息，data用来返回具体的数据。<br>通过restframework接口自定义返回数据格式也是很简单方便的。<br>先自定义Response返回对象，在返回对象中自定义数据返回的格式，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomResponse</span><span class="params">(Response)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,data=None,code=None,msg=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 status=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 template_name=None, headers=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 exception=False, content_type=None,**kwargs)</span>:</span></span><br><span class="line">        super().__init__(<span class="literal">None</span>, status=status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(data, Serializer):</span><br><span class="line">            msg = (</span><br><span class="line">                <span class="string">'You passed a Serializer instance as data, but '</span></span><br><span class="line">                <span class="string">'probably meant to pass serialized `.data` or '</span></span><br><span class="line">                <span class="string">'`.error`. representation.'</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> AssertionError(msg)</span><br><span class="line">        <span class="comment">#自定义返回格式</span></span><br><span class="line">        self.data=&#123;<span class="string">'code'</span>:code,<span class="string">'msg'</span>:msg,<span class="string">'data'</span>:data&#125;</span><br><span class="line">        self.data.update(kwargs)</span><br><span class="line">        self.template_name=template_name</span><br><span class="line">        self.exception=exception</span><br><span class="line">        self.content_type=content_type</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> headers:</span><br><span class="line">            <span class="keyword">for</span> name, value <span class="keyword">in</span> headers.items():</span><br><span class="line">                self[name] = value</span><br></pre></td></tr></table></figure><p>在接口接口视图类获取数据返回时，使用该自定义的Response返回对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Friend.objects.all()</span><br><span class="line">    serializer_class = FriendModelSerializer</span><br><span class="line">    <span class="comment">#自定义list方法，自定义Response返回</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>接口访问效果如下：<br>可以看到返回数据格式中增加了code,msg 数据放到了data节点<br><img src="https://img-blog.csdnimg.cn/57a2ae5b3cac4f81a65092b26fd37bd0.png#pic_center" alt="自定义数据返回格式"></p><p>列表数据通常接口要提供翻页功能，在接口中要有总页数、当前页、是否有下一页的信息。<br>可以自定义一个分页器，在分页器中自定义需要返回的分页参数<br>参考示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">8</span> <span class="comment">#每页显示数量</span></span><br><span class="line">    max_page_size = <span class="number">50</span> <span class="comment">#每页最大显示数量。</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span> <span class="comment">#每页数量的参数名称</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span>  <span class="comment">#页码的参数名称</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment">#自定义分页器的返回参数</span></span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=data,code=<span class="number">200</span>,msg=<span class="string">"OK"</span>,status=status.HTTP_200_OK, count=self.page.paginator.count,next=self.get_next_link(),previous=self.get_previous_link(),size=self.page_size,page=self.page.number)</span><br></pre></td></tr></table></figure><p>在接口接口视图类获取数据返回时，如果有分页器则使用该分页器自定义的Response返回对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendView</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Friend.objects.all()</span><br><span class="line">    serializer_class = FriendModelSerializer</span><br><span class="line">    pagination_class = MyPage</span><br><span class="line">    <span class="comment">#自定义list方法，自定义Response返回</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="comment">#如果有分页器，则进行分页后返回</span></span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=serializer.data, code=<span class="number">200</span>, msg=<span class="string">"OK"</span>, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>接口访问效果如下：<br>可以看到接口中自定义增加了分页信息。<br><img src="https://img-blog.csdnimg.cn/d7e5395ba3aa4d7ba13bf1a331c776c7.png#pic_center" alt="接口中自定义增加了分页信息"></p><p>但是有时候可能希望分页的信息数据要放在data节点里面，这样也是可以做到的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> common.customresponse <span class="keyword">import</span> CustomResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">8</span> <span class="comment">#每页显示数量</span></span><br><span class="line">    max_page_size = <span class="number">50</span> <span class="comment">#每页最大显示数量。</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span> <span class="comment">#每页数量的参数名称</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span>  <span class="comment">#页码的参数名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#自定义分页器的返回参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        ret_data = dict()</span><br><span class="line">        ret_data[<span class="string">'items'</span>] = data</span><br><span class="line">        <span class="comment"># 加入自定义分页信息</span></span><br><span class="line">     ret_data[<span class="string">'total'</span>] = self.page.paginator.count</span><br><span class="line">        ret_data[<span class="string">'hasNextPage'</span>] = self.get_next_link()</span><br><span class="line">        ret_data[<span class="string">'size'</span>] = self.page_size</span><br><span class="line">        ret_data[<span class="string">'page'</span>] = self.page.number</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(data=ret_data,code=<span class="number">200</span>,msg=<span class="string">"OK"</span>,status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>接口访问效果如下：<br>可以看到接口中自定义增加了分页信息，分页的信息数据放在data节点里面了<br><img src="https://img-blog.csdnimg.cn/2c702bb72da242f48d27986887308b3a.png#pic_center" alt="自定义增加了分页信息，分页的信息数据放在data节点里面"><br>至此，本文介绍了通过Django的restframework接口框架自定义Response返回对象来自定义返回数据格式。Django的restframework接口框架使用简单方便，拿来即用，能够很大程度上减少代码开发量。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3引入vue-router路由并通过vue-wechat-title设置页面title</title>
      <link href="/posts/5b619f34/"/>
      <url>/posts/5b619f34/</url>
      
        <content type="html"><![CDATA[<p>对于用类似Vue前后端分离技术架构的单页应用页面之间的跳转没有非前后端分离那么来得直接，甚至连设置跳转页面的Title都要费一番周折，本文介绍Vue3引入vue-router路由并设置页面Title，通过vue-router实现页面的路由，通过vue-wechat-title来设置页面的title。</p><h1 id="一、用vue-router库实现路由管理"><a href="#一、用vue-router库实现路由管理" class="headerlink" title="一、用vue-router库实现路由管理"></a>一、用vue-router库实现路由管理</h1><p>vue-router是Vue.js官方推荐的路由管理库。它和Vue.js的核心深度集成，让构建单页应用变得轻松容易。使用Vue.js和vue-router库创建单页应用非常的简单：使用Vue.js开发，整个应用已经被拆分成了独立的组件；使用vue-router库，可以把路由映射到各个组件，并把各个组件渲染到正确的地方。下面就来介绍如何安装引入vue-router库并实现路由管理</p><h2 id="1、安装vue-router库"><a href="#1、安装vue-router库" class="headerlink" title="1、安装vue-router库"></a>1、安装vue-router库</h2><p>使用如下命令安装vue-router库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -save -vue-router</span><br></pre></td></tr></table></figure><p>也可以通过  <code>npm install -save vue-router@4</code> 来指定版本号@4表示版本是4<br>安装成功后，可以在控制台看到了安装成功的信息和版本号<br><img src="https://img-blog.csdnimg.cn/a88149cfdb574bf7a3733fe0577845dd.png#pic_center" alt="控制台看到了安装成功的信息和版本号"><br>除此之外也可以在工程中的package.json中看到依赖的库中包含有vue-router及版本号。<br><img src="https://img-blog.csdnimg.cn/d637a853a2a644da8dd59bf035847d5e.png#pic_center" alt="package.json中看到依赖的库中包含有vue-router及版本号"></p><h2 id="2、在router文件夹下创建router-js"><a href="#2、在router文件夹下创建router-js" class="headerlink" title="2、在router文件夹下创建router.js"></a>2、在router文件夹下创建router.js</h2><p>在工程的src目录下建立router文件夹 在router文件夹下创建router.js，该文件是Vue路由管理的核心文件，所有的各组件的路由在该文件中进行配置。<br>参考代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">"vue-router"</span>; <span class="comment">//引入vue-router组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span>;           <span class="comment">//引入需要路由管理的页面组件HelloWorld</span></span><br><span class="line"><span class="keyword">import</span> siteLogin <span class="keyword">from</span> <span class="string">'@/views/user/login'</span>;                 <span class="comment">//引入需要路由管理的页面组件login</span></span><br><span class="line"><span class="keyword">import</span> userInfo <span class="keyword">from</span> <span class="string">"@/views/user/userinfo"</span>;               <span class="comment">//引入需要路由管理的页面组件userinfo</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history:createWebHistory(),</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/'</span>,              <span class="comment">//路由的路径</span></span><br><span class="line">            name:<span class="string">'Home'</span>,           <span class="comment">//路由的名称</span></span><br><span class="line">            component:HelloWorld,  <span class="comment">//路由的组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/login'</span>,</span><br><span class="line">            name:<span class="string">'Login'</span>,</span><br><span class="line">            component:siteLogin,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/userinfo'</span>,</span><br><span class="line">            name:<span class="string">'UserInfo'</span>,</span><br><span class="line">            component:userInfo,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>代码组织结构如下：<br><img src="https://img-blog.csdnimg.cn/eda7b7f81435458cb8de37a96be17126.png#pic_center" alt="代码组织结构如下"></p><h2 id="3、在App-vue中加入路由视图"><a href="#3、在App-vue中加入路由视图" class="headerlink" title="3、在App.vue中加入路由视图"></a>3、在App.vue中加入路由视图</h2><p>在App.vue中加入<code>&lt;router-view /&gt;</code><br>App.vue示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h2 id="4、在项目的main-js中引入路由"><a href="#4、在项目的main-js中引入路由" class="headerlink" title="4、在项目的main.js中引入路由"></a>4、在项目的main.js中引入路由</h2><p>参考代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"@/router/router"</span>;  <span class="comment">//引入路由，会去找router下的router.js的配置文件</span></span><br><span class="line">createApp(App).use(router).mount(<span class="string">'#app'</span>)  <span class="comment">//创建应用的时候应用路由</span></span><br></pre></td></tr></table></figure><h2 id="5、验证效果"><a href="#5、验证效果" class="headerlink" title="5、验证效果"></a>5、验证效果</h2><p>为了显示更清楚，将默认创建的src\components\HelloWorld.vue内容稍加调整</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div &gt;</span><br><span class="line">    第一个路由组件Home</span><br><span class="line">    &lt;p&gt;&#123;&#123; name &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'HelloWorld',</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      name:"Hello World!"</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;!-- Add <span class="string">"scoped"</span> attribute to limit CSS to <span class="keyword">this</span> component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>如果上面的步骤没有遗漏，在终端输入 npm run serve 将前端服务启动起来，在浏览器访问localhost:8080可以看到如下页面：<br><img src="https://img-blog.csdnimg.cn/f15b1b6eb060427bbfe0a1c058bbfc97.png#pic_center" alt="localhost:8080"><br>访问localhost:8080/login<br><img src="https://img-blog.csdnimg.cn/3c6dabe9159e4a0f848fcfd0f4cc9f9e.png#pic_center" alt="访问localhost:8080/login"><br>访问localhost:8080/userinfo<br><img src="https://img-blog.csdnimg.cn/690f79f60f134aa5974ae2aef9701c78.png#pic_center" alt="访问localhost:8080/userinfo"><br>可以看到访问不同的URL路由到了不同的Vue页面，上述login.vue和userinfo.vue示例代码没有给出，大家可以自行随便实现。</p><h1 id="二、用vue-wechat-title实现页面title的设置"><a href="#二、用vue-wechat-title实现页面title的设置" class="headerlink" title="二、用vue-wechat-title实现页面title的设置"></a>二、用vue-wechat-title实现页面title的设置</h1><p>在上面实现了不同页面的路由管理，但是访问不同的URL看到的页面title所有的页面都是一样的，如何设置不同页面不同的页面Title呢？比较方便的做法是用vue-wechat-title来实现。<br>同样首先要安装vue-wechat-title库</p><h2 id="1、安装vue-wechat-title库"><a href="#1、安装vue-wechat-title库" class="headerlink" title="1、安装vue-wechat-title库"></a>1、安装vue-wechat-title库</h2><p>使用如下命令安装vue-wechat-title库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-wechat-title -save</span><br></pre></td></tr></table></figure><p>安装完成后在工程中的package.json中看到依赖的库中包含有vue-wechat-title及版本号<br><img src="https://img-blog.csdnimg.cn/c3852a50f59e4249ba1e5000335819d0.png#pic_center" alt="package.json中看到依赖的库中包含有vue-wechat-title及版本号"></p><h2 id="2、在router文件夹下的router-js中增加title的配置"><a href="#2、在router文件夹下的router-js中增加title的配置" class="headerlink" title="2、在router文件夹下的router.js中增加title的配置"></a>2、在router文件夹下的router.js中增加title的配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">"vue-router"</span>; <span class="comment">//引入vue-router组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span>;           <span class="comment">//引入需要路由管理的页面组件HelloWorld</span></span><br><span class="line"><span class="keyword">import</span> siteLogin <span class="keyword">from</span> <span class="string">'@/views/user/login'</span>;                 <span class="comment">//引入需要路由管理的页面组件login</span></span><br><span class="line"><span class="keyword">import</span> userInfo <span class="keyword">from</span> <span class="string">"@/views/user/userinfo"</span>;               <span class="comment">//引入需要路由管理的页面组件userinfo</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history:createWebHistory(),</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/'</span>,              <span class="comment">//路由的路径</span></span><br><span class="line">            name:<span class="string">'Home'</span>,           <span class="comment">//路由的名称</span></span><br><span class="line">            meta:&#123;</span><br><span class="line">                title: <span class="string">'首页'</span>       <span class="comment">//title配置</span></span><br><span class="line">            &#125;,</span><br><span class="line">            component:HelloWorld,  <span class="comment">//路由的组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/login'</span>,</span><br><span class="line">            name:<span class="string">'Login'</span>,</span><br><span class="line">            meta:&#123;</span><br><span class="line">                title:<span class="string">'登录'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            component:siteLogin,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/userinfo'</span>,</span><br><span class="line">            name:<span class="string">'UserInfo'</span>,</span><br><span class="line">            meta:&#123;</span><br><span class="line">                title: <span class="string">'用户信息'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            component:userInfo,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>主要是在路由配置时设置了<code>meta:{title:&#39;xxxx&#39;}</code>如下图：<img src="https://img-blog.csdnimg.cn/f51d76a7abc14c27a1ea4ae0ac88dec1.png#pic_center" alt="router.js中增加title的配置"></p><h2 id="3、在App-vue页面中使用"><a href="#3、在App-vue页面中使用" class="headerlink" title="3、在App.vue页面中使用"></a>3、在App.vue页面中使用</h2><p>App.vue代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>  v-wechat-title=<span class="string">"$route.meta.title"</span>&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>主要是在<code>&lt;div id=&quot;app&quot;  v-wechat-title=&quot;$route.meta.title&quot;&gt;</code> 加入了<code>v-wechat-title=&quot;$route.meta.title&quot;</code></p><h2 id="4、在main-js中引用vue-wechat-title"><a href="#4、在main-js中引用vue-wechat-title" class="headerlink" title="4、在main.js中引用vue-wechat-title"></a>4、在main.js中引用vue-wechat-title</h2><p>在main.js中引用vue-wechat-title的时候有个坑，如果按照一般的引用会报错<br>mian.js代码示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"@/router/router"</span>;  <span class="comment">//引入路由，会去找router下的router.js的配置文件</span></span><br><span class="line"><span class="keyword">import</span> VueWechatTitle <span class="keyword">from</span> <span class="string">'vue-wechat-title'</span>; <span class="comment">//引入VueWechatTitle</span></span><br><span class="line">createApp(App).use(router,VueWechatTitle).mount(<span class="string">'#app'</span>)  <span class="comment">//创建应用的时候应用路由</span></span><br></pre></td></tr></table></figure><p>在终端输入 npm run serve 将前端服务启动起来会报错！<br><font color=Red>Uncaught TypeError: Cannot read properties of undefined (reading ‘deep’)</font></p><p>原因是在挂载app示例前，vue-wechat-title还没有加载好，一定要先应用再挂载app<br>将createApp(App).use(router,VueWechatTitle).mount(‘#app’)删除或注释掉。改用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app=createApp(App);</span><br><span class="line">app.use(VueWechatTitle);</span><br><span class="line">app.use(router);</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>main.js的参考示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"@/router/router"</span>;  <span class="comment">//引入路由，会去找router下的router.js的配置文件</span></span><br><span class="line"><span class="keyword">import</span> VueWechatTitle <span class="keyword">from</span> <span class="string">'vue-wechat-title'</span>; <span class="comment">//引入VueWechatTitle</span></span><br><span class="line"><span class="comment">//createApp(App).use(router,VueWechatTitle).mount('#app')  //指令定义在 mount('#app')之后，导致自定义指令未挂载到，会报错</span></span><br><span class="line"><span class="keyword">const</span> app=createApp(App);</span><br><span class="line">app.use(VueWechatTitle);</span><br><span class="line">app.use(router);</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="5、验证效果-1"><a href="#5、验证效果-1" class="headerlink" title="5、验证效果"></a>5、验证效果</h2><p>在终端输入 npm run serve 将前端服务启动起来<br>看到访问不同的URL会显示不同的title<br><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br><img src="https://img-blog.csdnimg.cn/d316421152e0479992022673d788b6c2.png#pic_center" alt="http://localhost:8080/的title"><br><a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a><br><img src="https://img-blog.csdnimg.cn/120ac7089ff74334867b640fdc552707.png#pic_center" alt="login的title登录"><br><a href="http://localhost:8080/userinfo" target="_blank" rel="noopener">http://localhost:8080/userinfo</a><br><img src="https://img-blog.csdnimg.cn/e86940b5e72d4385878f8eade5920759.png#pic_center" alt="userinfo的title用户信息"></p><p>本文通过以上实例实现了Vue3引入vue-router路由并设置页面Title，通过vue-router实现页面的路由，通过vue-wechat-title来设置页面的title都还比较方便。</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue快速入门</title>
      <link href="/posts/9277bcaa/"/>
      <url>/posts/9277bcaa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是Vue"><a href="#一、什么是Vue" class="headerlink" title="一、什么是Vue"></a>一、什么是Vue</h2><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>1、独立版本<br>直接下载并用<code>&lt;script&gt;</code>标签引入<br>官网下载地址：<a href="https://cn.vuejs.org/js/vue.js" target="_blank" rel="noopener">https://cn.vuejs.org/js/vue.js</a><br>2、使用CDN<br>和独立版本类似，与独立版本的区别就是不用下载到本地应用，直接引用CDN加速以后的地址。缺点是如果是内网封闭环境不能用，国内CDN也不稳定，国外的CDN有时无法访问。如官网的<br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</code> 就无法访问。<br>几个比较稳定的CDN<br>Staticfile CDN（国内） : <a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a><br>unpkg：<a href="https://unpkg.com/vue@2.6.14/dist/vue.min.js。" target="_blank" rel="noopener">https://unpkg.com/vue@2.6.14/dist/vue.min.js。</a><br>cdnjs : <a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a><br>3、命令行工具<br>Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了开箱即用的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。更多详情可查阅 Vue CLI 的文档。</p><h2 id="三、第一个Vue"><a href="#三、第一个Vue" class="headerlink" title="三、第一个Vue"></a>三、第一个Vue</h2><p>程序员学一门新的语音或框架，都是从hello world！开始的。来看一下Vue的hello world!<br>将vue.min.js下载到本地，在vue.min.js的目录下新建一个hellovue.html的文件，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=<span class="string">"vue.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="app"&gt;</span></span><br><span class="line"><span class="regexp">  &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>用浏览器打开，hello Vue! 成功的展现出来，第一个Vue就这么简单。<br><img src="https://img-blog.csdnimg.cn/30813985cd8b4dd183b83769da5758f1.png#pic_center" alt="hello Vue!"></p><p>在这里我们通过<code>&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</code>引入了本地的vue.min.js，就可以用vue框架了。<br>通过<code>&lt;div id=&quot;app&quot;&gt;</code>构建了一个DOM元素div标签元素，id为app，`{{message}}` 是占位符，类似于大多数的模板语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>在javascript代码中，定义了一个Vue对象，对象中构造了el和data两个参数。el是元素选择器，通过<code>#app</code>选择了<code>id=&quot;app&quot;</code>的div，data用来定义数据属性，这里定义了<code>massage:&#39;hellow Vue!&#39;</code>,通过`{{message}}`将数据hellow Vue显示输出。<br>可以用chrome浏览器的开发者工具打开控制台看到app.message的值为’hellow Vue!’。<br><img src="https://img-blog.csdnimg.cn/16b706a93fd64ddf92a84e98aaecb9c1.png#pic_center" alt="chrome浏览器的开发者工具调试"></p><p>可以通过修改这个变量的值而改变显示在浏览器的值。<br><img src="https://img-blog.csdnimg.cn/fa964684d0414f688fb8b47c667de5fd.png#pic_center" alt="修改值"></p><h2 id="四、常用基本语法"><a href="#四、常用基本语法" class="headerlink" title="四、常用基本语法"></a>四、常用基本语法</h2><p>模板语法<br>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。<br>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。<br>结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上</p><h3 id="插值文本"><a href="#插值文本" class="headerlink" title="插值文本"></a>插值文本</h3><p>数据绑定最常见的形式就是使用 `{{xxx}}`（双大括号）的文本插值：<br>正如我们的第一的Vue通过`{{ message }}`将文本值插入到占位符进行数据绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="绑定输出html"><a href="#绑定输出html" class="headerlink" title="绑定输出html"></a>绑定输出html</h3><p>使用v-html 指令用于输出 html 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app2:v-html指令输出html代码</span><br><span class="line">&lt;div id=<span class="string">"app2"</span>&gt;</span><br><span class="line">    &lt;div v-html=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app2 = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#app2',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    message: '&lt;b&gt;Hello Vue!&lt;/</span>b&gt;<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>效果如下图所示：<br><img src="https://img-blog.csdnimg.cn/4d2866a052e44a0e981edf2cb02f93bd.png#pic_center" alt="v-html"></p><p>如果不用v-html插入，将<code>&lt;div id=&quot;app2&quot;&gt;</code>标签内容改成用文本插入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app2"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下，直接将html代码给显示出来了。<br><img src="https://img-blog.csdnimg.cn/b5da200f7fba41008b10e330e201951b.png#pic_center" alt="直接显示HTML代码"></p><h3 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h3><p>HTML 属性中的值应使用 v-bind 指令。<br>如插入绑定 a 标签的href属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app3:v-bind指令绑定属性值</span><br><span class="line">&lt;div id=<span class="string">"app3"</span>&gt;</span><br><span class="line">    &lt;a target=<span class="string">"_blank"</span> v-bind:href=<span class="string">"url"</span>&gt;click me go to myblog&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app3'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">'http://xiejava.ishareread.com/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/baf17428d00746e98423c7ae951cc632.png#pic_center" alt="绑定属性"></p><h3 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h3><p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，可以用 v-bind 来绑定设置样式属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app4:v-band:<span class="class"><span class="keyword">class</span>指令绑定样式</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span></span>=<span class="string">"app4"</span>&gt;</span><br><span class="line">  &lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; 'active': isActive &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">var app4=new Vue(</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp"> el: '#app4',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    isActive:true</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>定义样式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/75b0ed8a42dc4f6a86e5bb5fb5246e61.png#pic_center" alt="v-band:class"></p><h3 id="插值Javascript表达式"><a href="#插值Javascript表达式" class="headerlink" title="插值Javascript表达式"></a>插值Javascript表达式</h3><p>vue.js插值支持javascript表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app5:vue.js插值的javascript表达式支持</span><br><span class="line">&lt;div id=<span class="string">"app5"</span>&gt;</span><br><span class="line">    &#123;&#123;<span class="number">5</span>+<span class="number">5</span>&#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;&#123; message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;&#125;</span><br><span class="line">    &lt;div v-bind:id=<span class="string">"'list-' + id"</span>&gt;xiejava&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app5'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">    message: <span class="string">'XIEJAVA'</span>,</span><br><span class="line">    id : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/8c77649827624c29913b8f1463a3679a.png#pic_center" alt="vue.js插值支持javascript表达式"></p><p>常用语句</p><h3 id="v-if-v-else-（条件语句）"><a href="#v-if-v-else-（条件语句）" class="headerlink" title="v-if v-else （条件语句）"></a>v-if v-else （条件语句）</h3><p>条件判断使用 v-if 指令，可以用 v-else 指令给 v-if 添加一个 “else” 块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app6:v-<span class="keyword">if</span>条件语句</span><br><span class="line">&lt;div id=<span class="string">"app6"</span>&gt;</span><br><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">"ok"</span>&gt;YES&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-else&gt;NO&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app6 = new Vue(&#123;</span></span><br><span class="line"><span class="regexp"> el:"#app6",</span></span><br><span class="line"><span class="regexp"> data:&#123;</span></span><br><span class="line"><span class="regexp"> ok:false,</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp"> &#125;);</span></span><br></pre></td></tr></table></figure><p> 效果如下：<br><img src="https://img-blog.csdnimg.cn/5376029a58ea4efa9d28a89c1d4a8645.png#pic_center" alt="v-if v-else （条件语句）"></p><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><p>循环使用 v-for 指令，v-for 可以绑定数据到数组来渲染一个列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app7"</span>&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"code in codes"</span>&gt;</span><br><span class="line">      &#123;&#123; code.name &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ol&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">var app7=new Vue(</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp"> el: '#app7',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    codes: [</span></span><br><span class="line"><span class="regexp">      &#123; name: 'java' &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; name: 'python' &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; name: 'php' &#125;</span></span><br><span class="line"><span class="regexp">    ]</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/c3fa12b69fb044d49541837216b8c1a4.png#pic_center" alt="for循环语句"></p><h3 id="v-on绑定事件"><a href="#v-on绑定事件" class="headerlink" title="v-on绑定事件"></a>v-on绑定事件</h3><p>事件监听可以使用 v-on 指令进行绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app8"</span>&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">"counter += 1"</span>&gt;+<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;加了 &#123;&#123; counter &#125;&#125; 次1。&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app8=new Vue(</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp"> el: '#app8',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    counter:0</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/448b65dc439f480aa86bd23a6ba1ecba.png#pic_center" alt="v-on绑定事件"></p><p><strong>以上全部示例代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.staticfile.org/vue/2.2.2/vue.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">app1:hello Vue!</span></span><br><span class="line"><span class="regexp">&lt;div id="app1"&gt;</span></span><br><span class="line"><span class="regexp">  &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">app2:v-html指令输出html代码</span><br><span class="line">&lt;div id=<span class="string">"app2"</span>&gt;</span><br><span class="line">    &lt;div v-html=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app3:v-bind指令绑定属性值</span></span><br><span class="line"><span class="regexp">&lt;div id="app3"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a target="_blank" v-bind:href="url"&gt;click me go to myblog&lt;/</span>a&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app4:v-band:class指令绑定样式</span></span><br><span class="line"><span class="regexp">&lt;div id="app4"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div v-bind:class="&#123; 'active': isActive &#125;"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app5:vue.js插值的javascript表达式支持</span></span><br><span class="line"><span class="regexp">&lt;div id="app5"&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123;5+5&#125;&#125;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span></span><br><span class="line"><span class="regexp">    &lt;div v-bind:id="'list-' + id"&gt;xiejava&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app6:v-if条件语句</span></span><br><span class="line"><span class="regexp">&lt;div id="app6"&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-if="ok"&gt;YES&lt;/</span>div&gt;</span><br><span class="line">&lt;div v-<span class="keyword">else</span>&gt;NO&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">app7:<span class="keyword">for</span>循环语句</span><br><span class="line">&lt;div id=<span class="string">"app7"</span>&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"code in codes"</span>&gt;</span><br><span class="line">      &#123;&#123; code.name &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ol&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app8:v-on绑定事件</span></span><br><span class="line"><span class="regexp">&lt;div id="app8"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button v-on:click="counter += 1"&gt;+1&lt;/</span>button&gt;</span><br><span class="line">  &lt;p&gt;加了 &#123;&#123; counter &#125;&#125; 次<span class="number">1</span>。&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> app1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app1'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app2'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'&lt;b&gt;Hello Vue!&lt;/b&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app3'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">'http://xiejava.ishareread.com/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app4=<span class="keyword">new</span> Vue(</span><br><span class="line">&#123;</span><br><span class="line"> el: <span class="string">'#app4'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    isActive:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app5'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">    message: <span class="string">'XIEJAVA'</span>,</span><br><span class="line">    id : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> el:<span class="string">"#app6"</span>,</span><br><span class="line"> data:&#123;</span><br><span class="line"> ok:<span class="literal">false</span>,</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app7=<span class="keyword">new</span> Vue(</span><br><span class="line">&#123;</span><br><span class="line"> el: <span class="string">'#app7'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    codes: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'java'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'python'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'php'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app8=<span class="keyword">new</span> Vue(</span><br><span class="line">&#123;</span><br><span class="line"> el: <span class="string">'#app8'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">.active &#123;</span></span><br><span class="line"><span class="regexp">width: 100px;</span></span><br><span class="line"><span class="regexp">height: 100px;</span></span><br><span class="line"><span class="regexp">background: red;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>通过上面的快速入门，基本了解什么是VUE、VUE的安装及基本的使用，常用的语法。后面还要更深入的学习VUE的组件、路由、后台接口调用等。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm在用Django开发时debug模式启动失败显示can&#39;t find &#39;__main__&#39; module的解决方法</title>
      <link href="/posts/aebdf141/"/>
      <url>/posts/aebdf141/</url>
      
        <content type="html"><![CDATA[<p>初次用Django开发web应用，在试图用Pycharm进行debug的时候，出现了一个奇怪的问题。以正常模式启动或者在terminal启动都没有问题。但是以debug模式启动时，显示<code>can&#39;t find &#39;__main__&#39; module”</code>报错。在网上找了很久都没有看到解决方法，最后在某乎上看到一篇文章，在启动时加上<code>--noreload</code>参数，既可以debug模式启动。</p><p><strong>报错信息：</strong><br><img src="https://img-blog.csdnimg.cn/f7a094b8e85c45dc841fdc4ff77a8698.png#pic_center" alt="报错信息"><br><strong>解决方法：</strong><br>在启动时加上 <code>--noreload</code> 参数可以正常启动调试<br><img src="https://img-blog.csdnimg.cn/3ade987b7c1040d7b504eb36871a7b37.png#pic_center" alt="加入不重新加载参数"></p><p>debug启动正常也可以调试了。<br><img src="https://img-blog.csdnimg.cn/c4993ebff26a4d80a43538bb8fcb9e71.png#pic_center" alt="debug正常启动"></p><p>踩过的坑记录一下，希望能帮到碰到同样问题的人。</p><p>感谢大佬的文章 <a href="https://zhuanlan.zhihu.com/p/443763989" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/443763989</a> </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用BeautifulSoup4修改网页内容实战</title>
      <link href="/posts/1ca32c3a/"/>
      <url>/posts/1ca32c3a/</url>
      
        <content type="html"><![CDATA[<p>最近有个小项目，需要爬取页面上相应的资源数据后，保存到本地，然后将原始的HTML源文件保存下来，对HTML页面的内容进行修改将某些标签整个给替换掉。</p><p>对于这类需要对HTML进行操作的需求，最方便的莫过于<strong>BeautifulSoup4</strong>的库了。</p><p>样例的HTML代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"videoslide"</span> <span class="attr">href</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/1381824922.JPG"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/1381824922_zy_compress.JPG"</span> <span class="attr">data-zy-media-id</span>=<span class="string">"zy_location_201310151613422786"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第一张_1381824798.JPG"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"zy_image_201310151613169945"</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第一张_1381824798_zy_compress.JPG"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第二张_1381824796.jpg"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"zy_image_201310151613163009"</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第二张_1381824796_zy_compress.jpg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第三张.jpg"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"zy_image_201312311838584446"</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/wp-content/uploads/1020/第三张_zy_compress.jpg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里主要包括了<code>&lt;a &gt;</code>标签，<code>&lt;a &gt;</code>标签里面嵌入了<code>&lt;img &gt;</code>标签，其中有<code>&lt;a class=&quot;videoslide&quot;&gt;</code>的标识该标签实际是可以播放动画的。需要根据<code>class=&quot;videoslide&quot;</code> 来判断将整个<code>&lt;a &gt;</code>标签换成播放器的<code>&lt;video &gt;</code>标签，将没有<code>class=&quot;videoslide&quot;</code> 的<code>&lt;a &gt;</code>标签换成<code>&lt;figure&gt;</code>标签。</p><p>也就是将带有的<code>&lt;a class=&quot;videoslide&quot; ...&gt;&lt;img ... /&gt;&lt;/a&gt;</code>标签换成 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">poster</span>=<span class="string">"视频链接的图片地址.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"视频文件的静态地址.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> /&gt;</span></span><br><span class="line">    您的浏览器不支持H5视频，请使用Chrome/Firefox/Edge浏览器。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>&lt;a ....&gt;&lt;img .../&gt;&lt;/a&gt;</code>标签换成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt; <span class="attr">img</span> <span class="attr">src</span>=<span class="string">"图片地址_compressed.jpg"</span> <span class="attr">data-zy-media-id</span>=<span class="string">"图片地址.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>文字说明（如果有）<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里通过BeautifulSoup4 的select()方法找到标签，通过get()方法获取标签及标签属性值，通过replaceWith来替换标签，具体代码如下：<br>首先安装BeautifulSoup4的库，BeautifulSoup4库依赖于lxml库，所以也需要安装lxml库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><p>具体代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">htmlstr=<span class="string">'&lt;html&gt;&lt;body&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;a class="videoslide" href="http://www.test.com/wp-content/uploads/1020/1381824922.JPG"&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;img src="http://www.test.com/wp-content/uploads/1020/1381824922_zy_compress.JPG" data-zy-media-id="zy_location_201310151613422786"/&gt;&lt;/a&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;a href="http://www.test.com/wp-content/uploads/1020/第一张_1381824798.JPG"&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;img data-zy-media-id="zy_image_201310151613169945" src="http://www.test.com/wp-content/uploads/1020/第一张_1381824798_zy_compress.JPG"/&gt;&lt;/a&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;a href="http://www.test.com/wp-content/uploads/1020/第二张_1381824796.jpg"&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;img data-zy-media-id="zy_image_201310151613163009" src="http://www.test.com/wp-content/uploads/1020/第二张_1381824796_zy_compress.jpg"/&gt;&lt;/a&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;a href="http://www.test.com/wp-content/uploads/1020/第三张.jpg"&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;img data-zy-media-id="zy_image_201312311838584446" src="http://www.test.com/wp-content/uploads/1020/第三张_zy_compress.jpg"/&gt;&lt;/a&gt;'</span> \</span><br><span class="line">        <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procHtml</span><span class="params">(htmlstr)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(htmlstr, <span class="string">'lxml'</span>)</span><br><span class="line">    a_tags=soup.select(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> a_tag <span class="keyword">in</span> a_tags:</span><br><span class="line">        a_tag_src = a_tag.get(<span class="string">'href'</span>)</span><br><span class="line">        a_tag_filename = os.path.basename(a_tag_src)</span><br><span class="line">        a_tag_path = os.path.join(<span class="string">'src'</span>, a_tag_filename)</span><br><span class="line">        a_tag[<span class="string">'href'</span>]=a_tag_path</span><br><span class="line">        next_tag=a_tag.next</span><br><span class="line">        <span class="comment">#判断是视频还是图片，如果a标签带了class="videoslide" 是视频否则是图片</span></span><br><span class="line">        <span class="keyword">if</span> a_tag.get(<span class="string">'class'</span>) <span class="keyword">and</span> <span class="string">'videoslide'</span>==a_tag.get(<span class="string">'class'</span>)[<span class="number">0</span>]:</span><br><span class="line">            <span class="comment"># 处理视频文件</span></span><br><span class="line">            media_id = next_tag.get(<span class="string">'data-zy-media-id'</span>)</span><br><span class="line">            <span class="keyword">if</span> media_id:</span><br><span class="line">                media_url = <span class="string">'http://www.test.com/travel/show_media/'</span> + str(media_id)+<span class="string">'.mp4'</span></span><br><span class="line">                media_filename = os.path.basename(media_url)</span><br><span class="line">                media_path = os.path.join(<span class="string">'src'</span>, media_filename)</span><br><span class="line">                <span class="comment"># 将div.video标签替换a标签</span></span><br><span class="line">                video_html = <span class="string">'&lt;div class=\"video\"&gt;&lt;video controls width = \"100%\" poster = \"'</span> + a_tag_path + <span class="string">'\" &gt;&lt;source src = \"'</span> + media_path + <span class="string">'\" type = \"video/mp4\" /&gt; 您的浏览器不支持H5视频，请使用Chrome / Firefox / Edge浏览器。 &lt;/video&gt;&lt;/div&gt;'</span></span><br><span class="line">                video_soup = BeautifulSoup(video_html, <span class="string">'lxml'</span>)</span><br><span class="line">                a_tag.replaceWith(video_soup.div)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#获取图片信息</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'img'</span>==next_tag.name:</span><br><span class="line">                img_src=next_tag.get(<span class="string">'src'</span>)</span><br><span class="line">                <span class="comment"># 判断是否路径是否为本地资源 data:image和file:</span></span><br><span class="line">                <span class="keyword">if</span> img_src.find(<span class="string">'data:image'</span>) == <span class="number">-1</span> <span class="keyword">and</span> img_src.find(<span class="string">'file:'</span>) == <span class="number">-1</span>:</span><br><span class="line">                    img_filename = os.path.basename(img_src)</span><br><span class="line">                    img_path = os.path.join(<span class="string">'src'</span>, img_filename)</span><br><span class="line">                    <span class="comment"># 将&lt;figure&gt;&lt;img&gt;标签替换a标签</span></span><br><span class="line">                    figcaption=<span class="string">''</span></span><br><span class="line">                    figure_html=<span class="string">'&lt;figure&gt;&lt;img src=\"'</span>+img_path+<span class="string">'\" data-zy-media-id=\"'</span>+a_tag_path+<span class="string">'\"&gt;&lt;figcaption&gt;'</span>+figcaption+<span class="string">'&lt;/figcaption&gt;&lt;/figure&gt;'</span></span><br><span class="line">                    figure_soup = BeautifulSoup(figure_html, <span class="string">'lxml'</span>)</span><br><span class="line">                    a_tag.replaceWith(figure_soup.figure)</span><br><span class="line">    html_content = soup.contents[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> html_content</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pro_html_str=procHtml(htmlstr)</span><br><span class="line">    print(pro_html_str)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">""</span> <span class="attr">poster</span>=<span class="string">"src\1381824922.JPG"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"src\zy_location_201310151613422786.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>/&gt;</span> 您的浏览器不支持H5视频，请使用Chrome / Firefox / Edge浏览器。 </span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"src\第一张_1381824798.JPG"</span> <span class="attr">src</span>=<span class="string">"src\第一张_1381824798_zy_compress.JPG"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"src\第二张_1381824796.jpg"</span> <span class="attr">src</span>=<span class="string">"src\第二张_1381824796_zy_compress.jpg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-zy-media-id</span>=<span class="string">"src\第三张.jpg"</span> <span class="attr">src</span>=<span class="string">"src\第三张_zy_compress.jpg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全设备-认识运维安全管理与审计系统（堡垒机）</title>
      <link href="/posts/9c723d09/"/>
      <url>/posts/9c723d09/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是运维安全管理与审计系统"><a href="#一、什么是运维安全管理与审计系统" class="headerlink" title="一、什么是运维安全管理与审计系统"></a>一、什么是运维安全管理与审计系统</h2><p>运维安全管理与审计系统（俗称 “堡垒机”）：是采用新一代智能运维技术框架，基于认证、授权、访问、审计的管理流程设计理念，实现对企事业IT中心的网络设备、数据库、安全设备、主机系统、中间件等资源统一运维管理和审计；通过集中化运维管控、运维过程实时监管、运维访问合规性控制、运维过程图形化审计等功能，为企事业IT中心运维构建一套事前预防、事中监控、事后审计完善的安全管理体系。</p><p>简单的说，运维安全管理与审计系统（堡垒机）就是用来控制哪些人可以登录哪些资产（事先防范和控制），以及录像记录登录资产后做了什么事情（事中监控和事后溯源）的系统。其核心是<strong>可控及审计</strong>。可控是指权限可控、行为可控。权限可控指可以方便的设置、回收运维操作人员的权限；行为可控，比如需要集中禁用某个危险命令；可审计，指有权限操作的人员对资产的所有操作都有记录，能够被监控和审计。</p><h2 id="二、为什么需要运维安全管理与审计系统"><a href="#二、为什么需要运维安全管理与审计系统" class="headerlink" title="二、为什么需要运维安全管理与审计系统"></a>二、为什么需要运维安全管理与审计系统</h2><p>当企业的IT资产越来越多，当参与运维的岗位越来越多样性，运维团队达到一定的规模，不同的人员如运维人员、开发人员、第三方代维、厂商支撑人员需要控制访问不同的资产及权限，如果没有一套好的机制，就会产生混乱。无法有效的做到“哪些人允许以什么样的身份访问哪些设备”，更加没有办法知道“哪些人登录设备后做了哪些事情”，出了问题以后无法回溯。<br><img src="https://img-blog.csdnimg.cn/61d6f515885d4c74ae6d342ac0ab4015.png#pic_center" alt="运维混乱"><br>运维安全管理与审计系统（堡垒机）是从跳板机（也叫前置机）的概念演变过来的。早在2000年左右，一些中大型企业为了能对运维人员的远程登录进行集中管理，会在机房部署一台跳板机。跳板机其实就是一台unix/linux/windows操作系统的服务器，所有运维人员都需要先远程登录跳板机，然后再从跳板机登录其他服务器中进行运维操作。<br><img src="https://img-blog.csdnimg.cn/00cc957a3657410288d824c41fe4cd68.png#pic_center" alt="跳板机"><br>跳板机解决了远程登录集中管理访问的问题，但跳板机并没有实现对运维人员操作行为的控制和审计，使用跳板机过程中还是会有误操作、违规操作导致的操作事故，一旦出现操作事故很难快速定位原因和责任人。此外，跳板机存在严重的安全风险，一旦跳板机系统被攻入，则将后端资源风险完全暴露无遗。同时，对于个别资源（如telnet）可以通过跳板机来完成一定的内控，但是对于更多更特殊的资源（ftp、rdp等）来讲就显得力不从心了。</p><p>人们逐渐认识到跳板机的不足，进而需要更新、更好的安全技术理念来实现运维操作管理。需要一种能满足角色管理与授权审批、信息资源访问控制、操作记录和审计、系统变更和维护控制要求，并生成一些统计报表配合管理规范来不断提升IT内控的合规性的产品。在这些理念的指导下，2005年前后，运维安全管理与审计系统（堡垒机）开始以一个独立的产品形态被广泛部署，有效地降低了运维操作风险，使得运维操作管理变得更简单、更安全。<br><img src="https://img-blog.csdnimg.cn/4cc408b9ee8046e689f8072a4b644d91.png#pic_center" alt="在这里插入图片描述"></p><p>运维安全管理与审计系统（堡垒机）承担了运维人员在运维过程中唯一的入口，通过精细化授权以明确“哪些人以什么身份访问了哪些设备”，从而让运维混乱变得有序起来，堡垒机不仅可以明确每一个运维人员的访问路径，还可以将每一次访问及操作过程变得可以“审计”，就像飞机中的黑匣子，汽车上的行车记录仪，能够做到针对运维人员的每次一操作均可以录像、全程审计，一但出了问题，可以追踪溯源。</p><p>运维安全管理与审计系统的目标可以概括为5W，主要是为了降低运维风险。具体如下：</p><ul><li>审计：你做了什么？（What） </li><li>授权：你能做哪些？（Which） </li><li>账号：你要去哪？（Where） </li><li>认证：你是谁？（Who）</li><li>来源：访问时间？（When）</li></ul><p>运维安全管理与审计系统实现：</p><ul><li>事前预防：建立“自然人-资源-资源账号”关系，实现统一认证和授权 </li><li>事中控制：建立“自然人-操作-资源”关系，实现操作审计和控制</li><li>事后审计：建立“自然人-资源-审计日志”关系，实现事后溯源和责任界定</li></ul><h2 id="三、运维安全管理与审计系统原理"><a href="#三、运维安全管理与审计系统原理" class="headerlink" title="三、运维安全管理与审计系统原理"></a>三、运维安全管理与审计系统原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>运维安全管理与审计系统（堡垒机），主要采用4A管理模型，对IT运维操作进行访问控制和行为审计的合规性管控系统，主要用来解决企业IT运维部门账号管理混乱，身份冒用、滥用，授权控制不明确，操作行为不规范，事件责任无法定位等问题。<br><strong>4A 是指认证 Authentication、授权 Authorization、账号 Account、审计 Audit</strong>，中文名称为统一安全管理平台解决方案。即将身份认证、授权、记账和审计定义为网络安全的四大组成部分，从而确立了身份认证在整个网络安全系统中的地位与作用。<br>具体来说：</p><ul><li>集中认证 (authentication) 管理<br>可以根据用户应用的实际需要，为用户提供不同强度的认证方式，既可以保持原有的静态口令方式，又可以提供具有双因子认证方式的高强度认证（一次性口令、数字证书、动态口令），而且还能够集成现有其它如生物特征等新型的认证方式。不仅可以实现用户认证的统一管理，并且能够为用户提供统一的认证门户，实现企业信息资源访问的单点登录。</li><li>集中权限 (authorization) 管理<br>可以对用户的资源访问权限进行集中控制。它既可以实现对 B/S、C/S 应用系统资源的访问权限控制，也可以实现对数据库、主机及网络设备的操作的权限控制，资源控制类型既包括 B/S 的 URL、C/S 的功能模块，也包括数据库的数据、记录及主机、网络设备的操作命令、IP 地址及端口。</li><li>集中帐号（account）管理<br>为用户提供统一集中的帐号管理，支持管理的资源包括主流的操作系统、网络设备和应用系统；不仅能够实现被管理资源帐号的创建、删除及同步等帐号管理生命周期所包含的基本功能，而且也可以通过平台进行帐号密码策略，密码强度、生存周期的设定。</li><li>集中审计 (audit) 管理<br>将用户所有的操作日志集中记录管理和分析，不仅可以对用户行为进行监控，并且可以通过集中的审计数据进行数据挖掘，以便于事后的安全事故责任的认定。</li></ul><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><p>实现的技术架构如下：<br><img src="https://img-blog.csdnimg.cn/7e0d1a91a53e42acb6080966f67cb1f9.png#pic_center" alt="堡垒机技术架构"></p><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><p>主要核心功能包括：<br><strong>1、访问控制</strong><br>通过对访问资源的严格控制，堡垒机可以确保运维人员在其账号有效权限、期限内合法访问操作资源，降低操作风险，以实现安全监管目的，保障运维操作人员的安全、合法合规、可控制性。<br><strong>2、账号管理</strong><br>当运维人员在使用堡垒机时，无论是使用云主机还是局域网的主机，都可以同步导入堡垒机进行账号集中管理与密码的批量修改，并可一键批量设置SSH秘钥对等。<br><strong>3、资源授权</strong><br>支持云主机、局域网主机等多种形式的主机资源授权，并且堡垒机采用基于角色的访问控制模型，能够对用户、资源、功能作用进行细致化的授权管理，解决人员众多、权限交叉、资产繁琐、各类权限复制等众多运维人员遇到的运维难题。<br><strong>4、指令审核</strong><br>对运维人员的账号使用情况，包括登录、资源访问、资源使用等。针对敏感指令，堡垒机可以对非法操作进行阻断响应或触发审核的操作情况，审核未通过的敏感指令，堡垒机将进行拦截。<br><strong>5、审计录像</strong><br>除了可以提供安全层面外，还可以利用堡垒机的事前权限授权、事中敏感指令拦截外，以及堡垒机事后运维审计的特性。运维人员在堡垒机中所进行的运维操作均会以日志的形式记录，管理者即通过日志对微云人员的操作进行安全审计录像。<br><strong>6、身份认证</strong><br>为运维人员提供不同强度的认证方式，既可以保持原有的静态口令方式，还可以提供微信、短信等认证方式。堡垒机不仅可以实现用户认证的统一管理，还能为运维人员提供统一一致的认证门户，实现企业的信息资源访问的单点登录。<br><strong>7、操作审计</strong><br>将运维人员所有操作日志集中管理与分析，不仅可以对用户行为进行监控与拦截，还可以通过集中的安全审计数据进行数据挖掘，以便于运维人员对安全事故的操作审计认定。</p><h2 id="四、运维安全管理与审计系统部署方式"><a href="#四、运维安全管理与审计系统部署方式" class="headerlink" title="四、运维安全管理与审计系统部署方式"></a>四、运维安全管理与审计系统部署方式</h2><h3 id="1、单机部署"><a href="#1、单机部署" class="headerlink" title="1、单机部署"></a>1、单机部署</h3><p>堡垒机主要都是旁路部署，旁挂在交换机旁边，只要能访问所有设备即可。<br>部署特点：<br>旁路部署，逻辑串联。<br>不影响现有网络结构。<br><img src="https://img-blog.csdnimg.cn/893c5d5192bd4839b0f37c19972b0c2f.png#pic_center" alt="单机部署"></p><h3 id="2、HA高可靠部署"><a href="#2、HA高可靠部署" class="headerlink" title="2、HA高可靠部署"></a>2、HA高可靠部署</h3><p>旁路部署两台堡垒机，中间有心跳线连接，同步数据。对外提供一个虚拟IP。用户通过堡垒机虚拟IP进行访问，堡垒机自动进行会话负载分配和数据同步、冗余存储。<br>部署特点：<br>两台硬件堡垒机，一主一备/提供VIP。<br>当主机出现故障时，备机自动接管服务。<br><img src="https://img-blog.csdnimg.cn/428a3252913d4633bfdfe5ea58c07486.png#pic_center" alt="HA高可靠部署"></p><h2 id="五、常见运维安全管理与审计系统产品"><a href="#五、常见运维安全管理与审计系统产品" class="headerlink" title="五、常见运维安全管理与审计系统产品"></a>五、常见运维安全管理与审计系统产品</h2><h3 id="商用"><a href="#商用" class="headerlink" title="商用"></a>商用</h3><p>奇安信[运维安全管理与审计系统]：<a href="https://www.qianxin.com/product/detail/pid/385" target="_blank" rel="noopener">https://www.qianxin.com/product/detail/pid/385</a><br>亚信安全[信磐堡垒机]：<a href="https://www.asiainfo-sec.com/product/detail-27.html" target="_blank" rel="noopener">https://www.asiainfo-sec.com/product/detail-27.html</a><br>绿盟[绿盟运维安全管理系统]：<a href="https://www.nsfocus.com.cn/html/2019/212_0926/20.html" target="_blank" rel="noopener">https://www.nsfocus.com.cn/html/2019/212_0926/20.html</a><br>启明星辰[堡垒机]：<a href="https://www.venustech.com.cn/new_type/blj/" target="_blank" rel="noopener">https://www.venustech.com.cn/new_type/blj/</a></p><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>麒麟堡垒机：<a href="http://www.secvpn.com.cn/" target="_blank" rel="noopener">http://www.secvpn.com.cn/</a><br>飞致JumpServer堡垒机：<a href="https://fit2cloud.com/jumpserver/index.html" target="_blank" rel="noopener">https://fit2cloud.com/jumpserver/index.html</a></p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全之信息系统安全保障</title>
      <link href="/posts/61446357/"/>
      <url>/posts/61446357/</url>
      
        <content type="html"><![CDATA[<h2 id="一、信息系统安全保障相关概念"><a href="#一、信息系统安全保障相关概念" class="headerlink" title="一、信息系统安全保障相关概念"></a>一、信息系统安全保障相关概念</h2><p>信息系统是用于采集、处理、存储、传输、分发和部署信息的整个基础设施、组织结构、人员和组件的总和。随着当前社会信息化程度的不断提高，各类信息系统越来越成为其所从属的组织机构生存和发展的关键因素，信息系统的安全风险也成为组织风险的一部分。同时，信息系统受来自于组织内部与外部环境的约束，信息系统的安全保障除了要充分分析信息系统本身的技术、业务、管理等特性，还要考虑这些约束条件所产生的要求。为了保障组织机构完成使命，系统安全管理人员必须针对信息系统面临的各种各样的风险制定相应的策略。</p><p>信息系统安全保障是在信息系统的整个生命周期中，通过对信息系统的风险分析，制定并执行相应的安全保障策略，从技术、管理、工程和人员等方面提出信息安全保障要求，确保信息系统的保密性、完整性和可用性，把安全风险降到可接受的程度，从而保障系统能够顺利实现组织机构的使命。</p><p>信息系统安全保障工作就是针对信息系统在运行环境中所面临的各种风险，制定信息安全保障策略体系，在策略指导下，设计并实现信息安全保障架构或模型，采取技术、管理等安全保障措施，将风险降至预定可接受的程度，从而保障其使命要求。策略体系是组织机构在对风险、资产和使命综合理解的基础上所做出的指导文件。策略体系的制定，反映了组织机构对信息系统安全保障及其目标的理解，它的制定和贯彻执行对组织机构信息系统安全保障起着纲领性的指导作用。<br><img src="https://img-blog.csdnimg.cn/cf12dd4422694467ab47e9df821cf441.png#pic_center" alt="信息系统安全概念和关系" title="信息系统安全概念和关系"></p><p>信息系统安全保障工作的基础和前提是风险管理。信息安全策略必须以风险管理为基础，针对可能存在的各种威胁和自身存在的弱点，采取有针对性的防范措施。</p><h2 id="二、信息系统安全保障模型"><a href="#二、信息系统安全保障模型" class="headerlink" title="二、信息系统安全保障模型"></a>二、信息系统安全保障模型</h2><p>信息系统安全保障模型包含保障要素、生命周期和安全特征3个方面。<br><img src="https://img-blog.csdnimg.cn/8628a0d24f8546279025e516ff5821d5.png#pic_center" alt="信息系统安全保障模型" title="信息系统安全保障模型"></p><p>信息系统安全保障模型的主要思路是以风险和策略为基础，在整个信息系统的生命周期中实施技术、管理、工程和人员保障要素。通过信息系统安全保障实现信息安全的安全特征：信息的保密性、完整性和可用性特征，从而达到保障组织机构执行其使命的根本目的。</p><p>模型特点：</p><ul><li>将风险和策略作为信息系统安全保障的基础和核心。</li><li>强调信息系统安全保障应贯穿于整个信息系统生命周期的全过程。</li><li>强调综合保障的观念。通过综合技术、管理、工程和人员要素来保障信息系统安全。</li></ul><h3 id="1、基于信息系统生命周期的信息安全保障"><a href="#1、基于信息系统生命周期的信息安全保障" class="headerlink" title="1、基于信息系统生命周期的信息安全保障"></a>1、基于信息系统生命周期的信息安全保障</h3><p>信息系统的生命周期层面和保障要素层面不是相互孤立的，而是相互关联、密不可分的。<br><img src="https://img-blog.csdnimg.cn/9c35a3d5b9f84a1ba76d13d505998e89.png#pic_center" alt="信息系统安全保障生命周期的安全保障要素" title="信息系统安全保障生命周期的安全保障要素"></p><p>在信息系统生命周期模型中，将信息系统的整个生命周期抽象成计划组织、开发采购、实施交付、运行维护和废弃5个阶段，加上在运行维护阶段的变更产生的反馈，形成信息系统生命周期完整的闭环结构。在信息系统生命周期中的任何时间点上，都需要综合信息系统安全保障的技术、管理、工程和人员保障要素。</p><ul><li>计划组织阶段 ：根据组织机构的业务要求、法律法规的要求、系统所存在的风险等因素，产生了信息系统安全保障需求。在此阶段，信息安全策略应加入信息系统建设和使用的决策中。从信息系统建设开始，就应该综合考虑系统的安全保障要求，确保信息系统建设和信息系统安全保障建设同步规划、同步实施。也就是我们平时讲的信息系统和安全保障要“三同步”–同步规划、同步建设、同步使用。</li><li>开发采购阶段：此阶段是计划组织阶段的细化和具体体现。在此阶段中，进行系统安全需求分析、系统安全体系设计以及相关预算申请和项目准备等活动。在此阶段，应克服传统拘泥于具体技术的片面性，要综合考虑系统的风险和安全策略，将信息系统安全保障作为一个个整体，进行系统地设计，建立信息系统安全保障整体规划和全局视野。组织机构可根据具体要求，对系统整体的技术、管理安全保障规划或设计进行评估，以保证对信息系统的整体规划满足组织机构的建设要求和相关国家与行业的要求。</li><li>实施交付阶段：在此阶段，组织机构可通过对承建方进行信息安全服务资格要求和人员专业资格要求以确保施工组织的服务能力；组织机构还可通过信息系统安全保障工程保障对实施施工过程进行监理和评估,最终确保所交付系统的安全性。</li><li>运行维护阶段：信息系统进人运行维护阶段后，对信息系统的管理、运行维护和使用人员的能力等方面进行综合保障,是信息系统得以安全正常运行的根本保证。</li><li>变更：信息系统投入运行后并不是- - 成不变的，它随着业务和需求的变更、外界环境的变更产生新的要求或增强原有的要求，重新进人信息系统组织计划阶段(即规划阶段)。</li><li>废弃阶段：当信息系统不再满足业务要求时，信息系统进入废弃阶段，在这个阶段，需要考虑信息安全销毁等要素。</li></ul><p>这样，通过在信息系统生命周期所有阶段融人信息系统安全保障概念，确保了信息系统的持续动态安全保障。</p><h3 id="2、信息安全保障要素"><a href="#2、信息安全保障要素" class="headerlink" title="2、信息安全保障要素"></a>2、信息安全保障要素</h3><h4 id="1）信息安全技术"><a href="#1）信息安全技术" class="headerlink" title="1）信息安全技术"></a>1）信息安全技术</h4><p>信息安全技术体系包括以下几个方面。</p><ul><li>密码技术：密码技术及应用涵盖了数据处理过程的各个环节，如数据加密、密码分析、数字签名、身份识别、秘密分享等。通过以密码学为核心的信息安全理论与技术保证数据的机密性和完整性等要求。<br>访问控制技术：在为用户对系统资源提供最大限度共享的基础上，对用户的访问权进行管理，防止对信息的非授权篡改和滥用。访问控制对经过身份鉴别后的合法用户提供所需要的且经过授权的服务,拒绝用户越权的服务请求，保证用户在系统安全策略下有序工作。</li><li>审计和监控技术：审计是事后认定违反安全规则行为的分析技术，在检测违反安全规则方面、准确发现系统发生的事件以及对事件发生的事后分析方面，审计都发挥着巨大的作用。审计技术的发展，来源于对访问的跟踪，这些访问包括对保存在计算机系统中敏感及重要信息的访问和对计算机系统资源的访问。网络安全监控包括主动监控和被动监控。它依赖于在任何给定时间内网络组件和检测器记录下已经发生的事情，接收日志信息，并对它进行分析。</li><li>网络安全技术：这些技术包括网络协议安全、防火墙技术、人侵检测系统/人侵防御系统( Intrusion Detection System/Intrusion Prevention System, IDS/IPS )安全管理平台( Security Operations Center， SOC )、统一威胁管理( Unified Threat Management, UTM )等。网络安全技术主要是保护网络的安全，防止入侵攻击行为的发生。防火墙是一个位于可信网络和不可信网络之间的边界防护系统。防病毒网关防止基于HTTP/FTP/SMTP/POP3/HTTPS等网络协议侵人网络内部的病毒进行过滤。人侵检测系统是一种对网络传输进行即时监视，在发现可疑传输时发出警报措施的网络安全设备。人侵防御系统是监视网络传输行为的安全技术，它能够即时地中断、调整或隔离一些异常或是具有伤害性的网络传输行为。</li><li>操作系统与数据库安全技术：操作系统安全技术主要包括身份鉴别、访问控制 、文件系统安全、安全审计等方面。数据库安全技术包括数据库的安全特性和安全功能，数据库完整性要求和备份恢复，以及数据库安全防护、安全监控和安全审计等。</li><li>安全漏洞与恶意代码：包括安全漏洞的成因、分类、发掘方法，以及如何修复等;以及恶意代码的加载、隐藏和自我保护技术,恶意代码的检测原理及清除方法等。</li><li>软件安全开发：包括软件安全开发模型、软件安全开发关键阶段的安全控制措施等内容。</li></ul><h4 id="2）信息安全管理"><a href="#2）信息安全管理" class="headerlink" title="2）信息安全管理"></a>2）信息安全管理</h4><p>信息安全管理体系，是组织在整体或特定范围内建立信息安全方针和目标，以及完成这些目标所用方法的体系。基于对业务风险的认识、ISMS包括建立、实施、操作、监视、复查、维护和改进信息安全等一系列的管 理活动，并且表现为组织结构、策略方针、计划活动、目标与原则、人员与责任、过程与方法、资源等诸多要素的集合。</p><p>风险管理是指以风险为主线进行信息安全的管理，它的实施目标就是要依据安全标准和信息系统的安全需求，对信息、信息载体、信息环境进行安全管理，以达到安全目标。</p><p>风险管理贯穿于整个信息系统生命周期，包括对象确立、风险评估、风险控制、审核批准、监控与审查、沟通与咨询等6个方面的内容。其中，对象确立、风险评估、风险控制和审核批准是信息安全风险管理的4个基本步骤，监控与审查、沟通与咨询则贯穿于这4个基本步骤中。</p><h4 id="3）信息安全工程"><a href="#3）信息安全工程" class="headerlink" title="3）信息安全工程"></a>3）信息安全工程</h4><p>信息安全工程涉及系统和应用的开发、集成、操作、管理、维护和进化以及产品的开发、交付和升级。</p><p>系统安全工程能力成熟模型(Systems Security Engineering Capability Maturity Model，SSE-CMM)描述了一个组织的系统安全工程过程必须包含的基本特征。这些特征是完善的安全工程保证，也是系统安全工程实施的度量标准，同时还是一个易于理解的评估系统安全工程实施的框架。</p><h4 id="4）信息安全人才"><a href="#4）信息安全人才" class="headerlink" title="4）信息安全人才"></a>4）信息安全人才</h4><p>信息安全保障诸要素中，人是最关键也是最活跃的要素。网络攻防对抗，最终较量的是攻防两端的人，而不是设备。对组织机构来说，应建立一个完整的信息安全人才体系。<br>信息安全人才体系应包括以下方面。</p><ul><li>所有员工：需要进行信息安全保障意识教育，具体可以采用内部培训、在组织机构网站上发布相关信息等措施来增强所有员工的安全意识。</li><li>涉及信息系统的岗位和职责的员工：需要进行相应的信息安全保障的基本技能培训。</li><li>信息安全专业人员：应建立更全面、更专业的信息安全保障知识和经验。</li></ul><p>本文节选自：<br>《信息安全技术 信息系统安全保障评估框架：简介和一般模型》GB_T 20274.1 200<br>《CISP培训教材》</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全运营之漏洞管理</title>
      <link href="/posts/a937cbf5/"/>
      <url>/posts/a937cbf5/</url>
      
        <content type="html"><![CDATA[<p>1947年冯·诺依曼建立计算机系统结构理论时认为，计算机系统也有天生的类似基因的缺陷，也可能在使用和发展过程中产生意想不到的问题。20世纪七八十年代，早期黑客的出现和第一个计算机病毒的产生，软件漏洞逐渐引起人们的关注。在各种产品、主机、网络和复杂信息系统中，安全漏洞以不同形式存在，而且数量逐年增加，利用漏洞造成的各类安全事件层出不穷。攻击行为或网络安全事件的发生正越来越多地受到利益驱动的影响，这种“黑色产业链”的兴起，导致越来越多的网络终端受害，大量机密信息被窃取，敏感数据信息在互联网上传播，并在黑市中待价而沽。工业控制领域以及新技术新应用的安全漏洞，特别是基础核心系统的安全漏洞已经成为危害国家经济和发展安全的重要因素。在安全运营过程中一个最重要的工作就是漏洞管理。</p><h2 id="一、什么是安全漏洞"><a href="#一、什么是安全漏洞" class="headerlink" title="一、什么是安全漏洞"></a>一、什么是安全漏洞</h2><p><strong>安全漏洞（Vulnerability）也被称为脆弱性</strong>。<br>根据国标-信息安全技术-安全漏洞标识与描述规范[GB/T 28458-2012]对安全漏洞的定义，安全漏洞是计算机信息系统在需求、设计、实现、配置运行等过程中，有意或无意产生的缺陷。这些缺陷以不同形式存在于计算机信息系统的各个层次和环节之中，一旦被恶意主体所利用，就会对计算机信息系统的安全造成损害，从而影响计算机信息系统的正常运行，危害信息产品或系统及信息的安全属性。</p><p>有时漏洞也被称作错误( Error)、缺陷 ( Fault)、 弱点( Weakness )或是故障( Failure )等，这些术语很容易引起混淆。在许多情况下，人们习惯于将错误、缺陷、弱点都简单地称为漏洞。需要指出的是，严格地说，错误、缺陷、弱点和故障并不等于漏洞。错误、缺陷和弱点是产生漏洞的条件，漏洞被利用后必然会破坏安全属性，但不一定能引起产品或系统故障。</p><h2 id="二、安全漏洞标识与描述"><a href="#二、安全漏洞标识与描述" class="headerlink" title="二、安全漏洞标识与描述"></a>二、安全漏洞标识与描述</h2><p>以下为国标-信息安全技术-安全漏洞标识与描述规范[GB/T 28458-2012] 对安全漏洞标识与描述的定义：<br>安全漏洞描述项包括标识号、名称、发布时间、发布单位、类别、等级、影响系统等必须的描述项，并可更具需要扩充（但不限于）相关编号、利用方法、解决方案建议、其他描述等描述项。<br><img src="https://img-blog.csdnimg.cn/d260bdaf3a0a4d4cb2ec59ad888e3f84.png#pic_center" alt="安全漏洞描述"></p><p><strong>标识号</strong><br>CVD-YYYY-NNNNNN格式为标识号。CVD为Common V ulnerabilities Description 的缩写；YYYY为4位十进制数字，表示产生本安全漏洞的年份；NNNNNN为6位十进制数字,表示当年内产生的安全漏洞的序号。<br><strong>名称</strong><br>安全漏洞标题，概括性描述安全漏洞信息的短语,例如InternetExplorer8.0缓冲区溢出漏洞。<br><strong>发布时间</strong><br>安全漏洞信息发布日期。<br><strong>发布单位</strong><br>发布安全漏洞的单位全称。<br><strong>类别</strong><br>安全漏洞所属分类，说明安全漏洞分类归属的信息。<br><strong>等级</strong><br>安全漏洞危害级别，说明安全漏洞能够造成的危害程度。<br><strong>影响系统</strong><br>安全漏洞所影响系统的信息，例如厂商、产品名称和版本号等。<br><strong>相关编号</strong><br>安全漏洞的其他相关编号,例如Bugtraq编号、CVE编号等。<br><strong>利用方法</strong><br>安全漏洞利用的方法，例如安全漏洞攻击方案或利用代码。<br><strong>解决方案建议</strong><br>安全漏洞的解决方案，例如补丁信息等。<br><strong>其他描述</strong><br>安全漏洞描述需要说明的其他相关信息，例如安全漏洞产生的具体原因。</p><h2 id="三、安全漏洞的分类分级"><a href="#三、安全漏洞的分类分级" class="headerlink" title="三、安全漏洞的分类分级"></a>三、安全漏洞的分类分级</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>网络安全漏洞分类是基于漏洞产生或触发的技术原因对漏洞进行划分，分类如下：<br><img src="https://img-blog.csdnimg.cn/e53981eba89a4ebe891147f241ede159.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="安全漏洞分类"></p><h3 id="分级"><a href="#分级" class="headerlink" title="分级"></a>分级</h3><p>网络安全漏洞分级是指采用分级的方式对网络安全漏洞潜在危害的程度进行描述，包括技术分级<br>和综合分级两种分级方式，每种方式均分为超危（严重）、高危、中危和低危四个等级,具体内容如下:<br><strong>超危（严重）</strong>：漏洞可以非常容易地对目标对象造成特别严重后果；<br><strong>高危</strong>：漏洞可以容易地对目标对象造成严重后果；<br><strong>中危</strong>：漏洞可以对目标对象造成一般后果，或者比较困难地对目标造成严重后果；<br><strong>低危</strong>：漏洞可以对目标对象造成轻微后果，或者比较困难地对目标对象造成一般严重后果，或<br>者非常困难地对目标对象造成严重后果。</p><h2 id="四、安全漏洞的生命周期"><a href="#四、安全漏洞的生命周期" class="headerlink" title="四、安全漏洞的生命周期"></a>四、安全漏洞的生命周期</h2><p>依据信息安全漏洞从产生到消亡的整个过程，信息安全漏洞生命周期分以下几个阶段：<br>a)漏洞的发现：通过人工或者自动的方法分析、挖掘漏洞的过程，并且该漏洞可以被验证和重现。<br>b)漏洞的利用：利用漏洞对计算机信息系统的保密性、完整性和可用性造成损害的过程。<br>c)漏洞的修复：通过补丁、升级版本或配置策略等对漏洞进行修补的过程，使得该漏洞不能够被<br>恶意主体所利用。<br>d)漏洞的公开：通过公开渠道(如网站、邮件列表等)公布漏洞信息的过程。</p><h2 id="五、安全漏洞的闭环管理"><a href="#五、安全漏洞的闭环管理" class="headerlink" title="五、安全漏洞的闭环管理"></a>五、安全漏洞的闭环管理</h2><p>根据漏洞生命周期中漏洞所处的不同状态，将漏洞管理行为对应为<strong>预防</strong>、<strong>收集</strong>、<strong>消减</strong>和<strong>发布</strong>等活动。<br><img src="https://img-blog.csdnimg.cn/006685a6190342bdba1455d3c8d79a83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="漏洞生命周期"></p><p>预防是指通过各种安全手段提高信息系统的安全水平，避免漏洞的产生和恶意利用。<br>收集是针对已发现的漏洞进行信息的及时跟踪与获取。<br>消减是指在漏洞被发现后积极采取补救措施,最大限度减少漏洞带来的损失。<br>发布是指在遵循一定的发布策略的前提下,对漏洞及其修复信息进行发布。<br>用户、厂商和漏洞管理组织可以根据漏洞的状态及管理活动建立符合自身特点的漏洞处理策略和处理流程。<br>对于企业组织安全运营来说可以参考以下漏洞处理流程：<br><img src="https://img-blog.csdnimg.cn/584faf04081b40ac8ac23dd93634d00a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="漏洞处理流程"></p><h3 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h3><p>一般由渗透测试工程师通过漏洞扫描工具或渗透测试发现系统漏洞，提交渗透测试报告。由安全工程师进行漏洞验证，确定系统漏洞是否真实存在。</p><h3 id="漏洞录入"><a href="#漏洞录入" class="headerlink" title="漏洞录入"></a>漏洞录入</h3><p>在漏洞验证完成后，安全工程师需要根据企业内部的漏洞等级划分标准，将存在的漏洞录入漏洞管理系统。</p><h3 id="漏洞分发"><a href="#漏洞分发" class="headerlink" title="漏洞分发"></a>漏洞分发</h3><p>漏洞管理系统根据漏洞所影响的业务系统、主机IP等匹配到系统负责部门和修复人。通知系统负责人进行修复加固等。</p><h3 id="漏洞跟进及修复"><a href="#漏洞跟进及修复" class="headerlink" title="漏洞跟进及修复"></a>漏洞跟进及修复</h3><p>根据漏洞等级设定的时效性，设置修复计划时间，漏洞复验时间，在漏洞管理系统中进行管理和跟进。漏洞修复人修复完成后提交安全工程师进行漏洞复验，验证漏洞是否确实已经修复。如果漏洞在目前的技术条件下确实无法修复，提交系统负责进行风险确认，采取其他规避风险的措施，如调整访控策略、下线等。</p><h3 id="漏洞修复周期"><a href="#漏洞修复周期" class="headerlink" title="漏洞修复周期"></a>漏洞修复周期</h3><p>漏洞修复周期，包括漏洞的验证、评估、分发、复验、修复和关闭的各个环节。漏洞的修复周期，会根据漏洞等级确定。<br>参考如下：</p><table><thead><tr><th>漏洞等级</th><th>漏洞确认时间</th><th>漏洞修复时间</th></tr></thead><tbody><tr><td>超危（严重）</td><td>12小时</td><td>24小时</td></tr><tr><td>高危</td><td>24小时</td><td>3*24小时</td></tr><tr><td>中危</td><td>36小时</td><td>7*24小时</td></tr><tr><td>低危</td><td>72小时</td><td>14*24小时</td></tr></tbody></table><h3 id="漏洞数据分析"><a href="#漏洞数据分析" class="headerlink" title="漏洞数据分析"></a>漏洞数据分析</h3><p>对于漏洞管理整个流程来说，漏洞缓解或已解决后，关闭工单不是最终的目的，需要对漏洞数据进行分析，持续运营，可以从以下几个方面考虑：<br>1）统计一段时间内，外网系统出现的次数最多的Top10漏洞排名，分析漏洞出现的原因；<br>如外网系统中出现多次SQL注入漏洞，可以检查WAF的规则库是否及时更新？规则是否生效？此外网系统是否在WAF的防护之内？对外的系统为何不做严格的字符过滤机制等。<br>2）统计一段时间内，自主开发系统中漏洞数量最多的Top10系统排名，分析造成的原因；<br>如弱口令次数过多，是安全意识宣传不够？研发人员不重视？<br>3）哪些供应商的开发的系统漏洞数量最多？分析存在的原因；<br>是否需要约谈供应商沟通，是安全开发能力的问题，还是研发安全意识不够？<br>4）哪些框架被利用造成的漏洞过多？<br>是情报问题？还是应急响应机制的原因？是否可以替换为其他框架？</p><hr><p>参考资料<br>信息安全技术 安全漏洞分类 GBT 33561-2017<br>信息安全技术 安全漏洞标识与描述规范 GB∕T 28458-2012<br>信息安全技术 安全漏洞等级划分指南 GB∕T 30279-2013<br>信息安全技术 信息安全漏洞管理规范 GB/T 30276-2013<br>安惞《浅谈企业内部安全漏洞的运营（一）：规范化》</p><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全之基于时间的安全模型（PDR和PPDR模型）</title>
      <link href="/posts/5156b28b/"/>
      <url>/posts/5156b28b/</url>
      
        <content type="html"><![CDATA[<p>基于时间的安全模型是基于”<strong>任何安全防护措施都是基于时间的，超过该时间段，这种防护措施是可能被攻破的</strong>“这样的前提。该模型主要给出了信息系统的攻防时间表。攻击时间指的是在系统采取某种防守措施，通过不同的攻击手段来计算攻破该防守措施所需要的时间。防守时间指的是，对于某种固定攻击手法，通过采取不同的安全防护措施，来计算该防护措施所能坚守的时间。</p><p>基于时间的安全模型主要包括PDR和后来改进的PPDR模型，PDR模型是源自美国国际互联网安全系统公司ISS提出的自适应网络安全模型ANSM（AdaptiveNetwork Security Model），是一个可量化、可数学证明、基于时间的安全模型。美国ISS公司（后被IBM收购）提出的。PPDR模型是PDR的模型上发展起来的，也称P2DR，加入的P是Policy策略。</p><h2 id="一、PDR模型"><a href="#一、PDR模型" class="headerlink" title="一、PDR模型"></a>一、PDR模型</h2><p>保护-检测-响应( Protection-Detection-Response, PDR )模型是信息安全保障工作中常用的模型，是最早体现主动防御思想的一种网络安全模型，其思想是承认信息系统中漏洞的存在，正视信息系统面临的威胁，通过采取适度防护、加强检测工作、落实对安全事件的响应、建立对威胁的防护来保障系统的安全。<br>模型图如下图所示：<br><img src="https://img-blog.csdnimg.cn/bec7ca0d344442959d2cbf53b6d64eed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="PDR模型"></p><p>P-protection，保护就是采用一切可能的措施来保护网络、系统以及信息的安全。通常采用的技术及方法主要包括加密、认证、访问控制、防火墙及防病毒等。</p><p>D-detect，检测可以了解和评估网络和系统的安全状态，为安全防护和安全响应提供依据。常用的检测技术主要包括入侵检测、漏洞检测及网络扫描等技术。</p><p> R-response，应急响应在安全模型中占有重要地位，是解决安全问题的最有效办法。解决安全问题就是解决紧急响应和异常处理问题，因此，建立应急响应机制，形成快速安全响应的能力，对网络和系统至关重要。</p><p>PDR模型直观、实用，建立了一个所谓的基于时间的可证明的安全模型，定义了防护时间Pt(攻击者发起攻击时，保护系统不被攻破的时间)、检测时间Dt(从发起攻击到检测到攻击的时间)和响应时间Rt(从发现攻击到做出有效响应的时间)3个概念，并给出了评定系统安全的计算方式，<strong>当Pt&gt;Dt+Rt时，即认为系统是安全的</strong>，也就是说，如果在攻击者攻破系统之前发现并阻止了攻击的行为，那么系统就是安全的。</p><p>局限性：系统的Pt、Dt、Rt 很难准确定义，面对不同攻击者和不同种类的攻击，这些时间都是变化的，其实还是不能有效证明-一个系统是否安全。并且该模型对系统的安全隐患和安全措施采取相对固定的前提假设，难于适应网络安全环境的快速变化。</p><h2 id="二、PPDR模型"><a href="#二、PPDR模型" class="headerlink" title="二、PPDR模型"></a>二、PPDR模型</h2><p>策略-保护检测-响应模型( Policy-Protection-Detection-Response, PPDR )是在PDR模型的基础_上发展出来的模型，也称为P2DR模型。模型的核心思想是所有的防护、检测、响应都是依据安全策略实施的，模型包括4个主要部分: Policy (策略)、Protection ( 保护)、Detection(检测)和Response(响应)。<br>模型图如下图所示：<br><img src="https://img-blog.csdnimg.cn/4d73862be0024fbb81811491c43b56ab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="PPDR模型"></p><p>策略（Policy）：模型的核心，所有的防护、检测和响应都是依据安全策略实施的。安全策略一般由总体安全策略和具体安全策略两部分组成。<br>保护（Protection）：保护是根据系统可能出现的安全问题而采取的预防措施，这些措施通过传统的静态安全技术实现。采用的防护技术通常包括数据加密、身份认证、访问控制、授权和虚拟专用网(VPN)技术、防火墙、安全扫描和数据备份等。<br>检测（Detection）：当攻击者穿透防护系统时，检测功能就发挥作用，与防护系统形成互补。检测是动态响应的依据。<br>响应（Response）：系统一旦检测到人侵，响应系统就开始工作，进行事件处理。响应包括应急响应和恢复处理，恢复处理又包括系统恢复和信息恢复。</p><p>PPDR模型是在整体的安全策略的控制和指导下，在综合运用防护工具(如防火墙、操作系统身份认证、加密等)的同时，利用检测工具(如漏洞评估、人侵检测等)了解和评估系统的安全状态，通过适当的反应将系统调整到“最安全”和“风险最低”的状态。保护、检测和响应组成了一个完整的、动态的安全循环，在安全策略的指导下保证信息系统的安全。</p><p>该理论的最基本原理就是信息安全相关的所有活动，不管是攻击行为、防护行为、检测行为和响应行为等都要消耗时间,因此可以用时间来衡量一个体系的安全性和安全能力。假设系统的防护、检测和反应时间分别是Pt、Dt和Rt。系统被对手成功攻击后的时间为暴露时间(Et)，那么PPDR模型就可以用典型的数学公式来表达安全的要求：如果Pt&gt;Dt+Rt,那么系统是安全的。</p><p>P2DR模型中的数学法则：<br>假设S系统的防护、检测和反应的时间分别是<br>• Pt（防护时间、有效防御攻击的时间）<br>• Dt（检测时间、发起攻击到检测到的时间）<br>• Rt（反应时间、检测到攻击到处理完成时间）<br> 假设系统被对手成功攻击后的时间为<br>• Et（暴露时间）<br>则该系统防护、检测和反应的时间关系如下：<br>• 如果Pt＞Dt＋Rt，那么S是安全的；<br>• 如果Pt＜Dt＋Rt，那么Et＝（Dt＋Rt）－Pt。</p><p>PPDR给出了安全的全新定义：“<strong>及时的检测和响应就是安全</strong>”，”<strong>及时的检测和恢复就是安全</strong>”。这样的定义给出了解决安全问题的明确方向:提高系统的防护时间Pt，降低检测时间Dt和响应时间Rt。</p><p>与PDR模型相比，PPDR模型更强调控制和对抗，即强调系统安全的动态性，并且以安全检测、漏洞监测和自适应填充“安全间隙”为循环来提高网络安全。值得指出的是，在PPDR模型中，考虑了管理因素,它强调安全管理的持续性、安全策略的动态性，以实时监视网络活动、发现威胁和弱点来调整和填补网络漏洞。另外，该模型强调检测的重要性，通过经常对信息系统的评估把握系统风险点，及时弱化甚至消除系统的安全漏洞。但该模型忽略了内在的变化因素，如人员的流动、人员的素质和策略贯彻的不稳定性。系统本身安全能力的增强、系统和整个网络的优化，以及人员在系统中最重要角色的素质提升，都是该安全系统没有考虑到的问题。</p><table><thead><tr><th></th><th>PDR</th><th>PPDR</th></tr></thead><tbody><tr><td>意义</td><td>最早体现主动防御思想的一种网络安全模型</td><td>是动态网络是安全体系的代表模型，动态安全模型的雏形。</td></tr><tr><td>组成</td><td>保护-检测-响应( Protection-Detection-Response, PDR )</td><td>策略-保护检测-响应模型( Policy-Protection-Detection-Response, PPDR )</td></tr><tr><td>特点</td><td>PDR模型建立了一个所谓的基于时间的可证明的安全模型，定义了:防护时间Pt (黑客发起攻击时，保护系统不被攻破的时间)、检测时间Dt (从发起攻击到检测到攻击的时间)和响应时间Rt (从发现攻击到作出有效响应的时间)。当Pt&gt;Dt+Rt时，即认为系统是安全的，也就是说，如果在黑客攻破系统之前发现并阻止了黑客的行为，那么系统就是安全的。</td><td>给出了安全一个全新的定义：“及时的检测和响应就是安全”，“及时的检测和恢复就是安全”。而且，这样的定义为安全问题的解决给出了明确的方向：提高系统的防护时间Pt，降低检测时间.Dt和响应时间Rt。</td></tr><tr><td>局限性</td><td>系统的Pt、Dt、Rt 很难准确定义，面对不同攻击者和不同种类的攻击，这些时间都是变化的，其实还是不能有效证明一个系统是否安全。并且该模型对系统的安全隐患和安全措施采取相对固定的前提假设，难于适应网络安全环境的快速变化</td><td>忽略了内在的变化因素，如人员的流动、人员的素质和策略贯彻的不稳定性。系统本身安全能力的增强、系统和整个网络的优化，以及人员在系统中最重要角色的素质提升，都是该安全系统没有考虑到的问题。</td></tr></tbody></table><p>不管是PDR还是PPDR，总体来说还是局限于从技术上考虑信息安全问题。随着信息化的发展，人们越来越意识到信息安全涉及面非常广，除了技术，管理、制度、人员和法律等方面也是信息安全必须考虑的因素，就像一个由多块木块构成的“木桶”，木桶的容量由最短的那块板决定。在处理信息安全问题时，必须全面考虑各方面的因素，任何一个方面的遗漏都有可能形成“短板”。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全之零信任</title>
      <link href="/posts/7f2622dc/"/>
      <url>/posts/7f2622dc/</url>
      
        <content type="html"><![CDATA[<h2 id="一、零信任产生的背景"><a href="#一、零信任产生的背景" class="headerlink" title="一、零信任产生的背景"></a>一、零信任产生的背景</h2><p>对于资源的访问保护，传统方式是划分安全区域，不同的安全区域有不同的安全要求。在安全区域之间就形成了网络边界，在网络边界处部署边界安全设备，包括防火墙、IPS、防毒墙、WAF等，对来自边界外部的各种攻击进行防范，以此构建企业网络安全体系，这种传统方式可称为边界安全理念。在边界安全理念中网络位置决定了信任程度，在安全区域边界外的用户默认是不可信的（不安全的），没有较多访问权限，边界外用户想要接入边界内的网络需要通过防火墙、VPN等安全机制；安全区域内的用户默认都是可信的（安全的），对边界内用户的操作不再做过多的行为监测，但是这就在每个安全区域内部存在过度信任（认为是安全的，给予的权限过大）的问题。同时由于边界安全设备部署在网络边界上，缺少来自终端侧、资源侧的数据，且相互之间缺乏联动，对威胁的安全分析是不够全面的，因此内部威胁检测和防护能力不足、安全分析覆盖度不够全面成为了边界安全理念固有的软肋。甚至很多企业只是非常粗粒度的划分了企业内网和外网（互联网），这种风险就更为明显。</p><p>另外，随着云计算、物联网以及移动办公等新技术新应用的兴起，企业的业务架构和网络环境也随之发生了重大的变化，这给传统边界安全理念带来了新的挑战。比如云计算技术的普及带来了物理安全边界模糊的挑战，远程办公、多方协同办公等成为常态带来了访问需求复杂性变高和内部资源暴露面扩大的风险，各种设备（BYOD、合作伙伴设备）、各种人员接入带来了对设备、人员的管理难度和不可控安全因素增加的风险，高级威胁攻击（钓鱼攻击、水坑攻击、0day漏洞利用等）带来了边界安全防护机制被突破的风险，这些都对传统的边界安全理念和防护手段，如部署边界安全设备、仅简单认证用户身份、静态和粗粒度的访问控制等提出了挑战，亟需有更好的安全防护理念和解决思路。</p><p>传统边界安全理念先天能力存在不足，新技术新应用又带来了全新的安全挑战，在这样的背景下，零信任的最早雏形源于2004年成立的耶利哥论坛（Jericho Forum ），其成立的使命正是为了定义无边界趋势下的网络安全问题并寻求解决方案，提出要限制基于网络位置的隐式信任；美国国防信息系统局（DISA）为了解决GIG（全球信息栅格，是美军信息化作战规划中极其重要且宏大的基础设施）中，如何实时、动态地对网络进行规划和重构的问题，发起了BlackCore项目，将基于边界的安全模型转换为基于单个事物安全性的模型，并提出了SDP（Software Defined Perimeter）的概念，该概念后来被云安全联盟（Cloud Security Alliance）采纳。2010年，由著名研究机构Forrester的首席分析师John Kindervag最早提出了零信任（Zero Trust）的概念，并由Google在BeyondCorp项目中率先得到了应用，很好的解决了边界安全理念难以应对的安全问题。</p><h2 id="二、零信任的定义"><a href="#二、零信任的定义" class="headerlink" title="二、零信任的定义"></a>二、零信任的定义</h2><p>根据NIST《零信任架构标准》中的定义：零信任（Zero Trust，ZT）提供了一系列概念和思想，在假定网络环境已经被攻陷的前提下，当执行信息系统和服务中的每次访问请求时，降低其决策准确度的不确定性。零信任架构（ZTA）是一种企业网络安全的规划，它基于零信任理念，围绕其组件关系、工作流规划与访问策略构建而成。</p><p>零信任代表了新一代的网络安全防护理念，并非指某种单一的安全技术或产品，其目标是为了降低资源访问过程中的安全风险，防止在未经授权情况下的资源访问，其关键是打破信任和网络位置的默认绑定关系。</p><p>在零信任理念下，网络位置不再决定访问权限，在访问被允许之前，所有访问主体都需要经过身份认证和授权。身份认证不再仅仅针对用户，还将对终端设备、应用软件等多种身份进行多维度、关联性的识别和认证，并且在访问过程中可以根据需要多次发起身份认证。授权决策不再仅仅基于网络位置、用户角色或属性等传统静态访问控制模型，而是通过持续的安全监测和信任评估，进行动态、细粒度的授权。安全监测和信任评估结论是基于尽可能多的数据源计算出来的。</p><p>零信任理念的基本假设、基本原则如下：<br>1、零信任理念的基本假设<br>a) 内部威胁不可避免；<br>b) 从空间上，资源访问的过程中涉及到的所有对象（用户、终端设备、应用、网络、资源等）默认都不信任，其安全不再由网络位置决定；<br>c) 从时间上，每个对象的安全性是动态变化的（非全时段不变的）。<br>2、零信任的基本原则<br>a）任何访问主体（人/设备/应用等），在访问被允许之前，都必须要经过身份认证和授权，避免过度的信任；<br>b）访问主体对资源的访问权限是动态的（非静止不变的）；<br>c）分配访问权限时应遵循最小权限原则；<br>d）尽可能减少资源非必要的网络暴露，以减少攻击面；<br>e）尽可能确保所有的访问主体、资源、通信链路处于最安全状态；<br>f）尽可能多的和及时的获取可能影响授权的所有信息，并根据这些信息进行持续的信任评估和安全响应。</p><p>零信任在所有需要对资源访问进行安全防护的场景都可以使用，但是否采用，应根据企业可接受的安全风险水平和投入综合考虑决定。</p><h2 id="三、零信任技术体系"><a href="#三、零信任技术体系" class="headerlink" title="三、零信任技术体系"></a>三、零信任技术体系</h2><p>目前零信任主要有三大技术体系，分别是<strong>SDP（软件定义安全）</strong>、<strong>IAM（增强身份管理）</strong>和<strong>MSG（微隔离）</strong>。<br><img src="https://img-blog.csdnimg.cn/28aa077fbc354fdcb200c867dfdddda0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="零信任三大技术体系"></p><h3 id="1、软件定义安全（SDP）"><a href="#1、软件定义安全（SDP）" class="headerlink" title="1、软件定义安全（SDP）"></a>1、软件定义安全（SDP）</h3><p>SDP即“软件定义边界”,是国际云安全联盟CSA于2014年提出的基于零信任(Zero Trust)理念的新一代网络安全模型。SDP在使应用程序所有者能够在需要时部署安全边界,以便将服务与不安全的网络隔离开来。SDP将物理设备替换为在应用程序所有者控制下运行的逻辑组件。SDP仅允许在设备验证和身份验证后访问企业应用程序基础架构。SDP的体系结构由两部分组成:SDP主机和SDP控制器。SDP主机可以发起连接或接受连接。这些操作通过安全控制通道与SDP 控制器交互来管理。<br><img src="https://img-blog.csdnimg.cn/f5354671b7504707ad3ef392ed6b411c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SDP软件定义边界"></p><p>SDP安全优势：<br>1.SDP最大限度地减少攻击面，降低安全风险；<br>2.SDP通过分离访问控制和数据通道来保护关键资产和基础设施，从而防止潜在的基于网络的攻击；<br>3.SDP提供了现有安全设备难以实现的整体集成安全架构。<br>4.SDP提供了一种基于连接的安全体系结构，而不是基于IP的替代方案。由于整个IT环境的爆炸式增长，云环境中缺乏边界使得基于IP的安全性变得脆弱。<br>5.SDP允许对所有连接进行预检查和控制，从这些连接可以连接设备、服务和设施，因此其整体安全性比传统架构更有利。</p><h3 id="2、增强身份管理（IAM）"><a href="#2、增强身份管理（IAM）" class="headerlink" title="2、增强身份管理（IAM）"></a>2、增强身份管理（IAM）</h3><p>增强身份管理IAM是大多数组织实现安全和IT运营策略的核心。它使企业可以自动访问越来越多的技术资产,同时管理潜在的安全和合规风险。身份管理为所有用户,应用程序和数据启用并保护数字身份。<br><img src="https://img-blog.csdnimg.cn/bb13d39987154b84ad3961d448d25aec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="零信任身份与访问管理"></p><p>身份管理可以帮助组织有效解决复杂业务带来的挑战，并平衡四个关键目标：<br>1.加强安全，降低风险。<br>2.提高合规性和审计绩效。<br>3.提供快速有效的业务访问。<br>4.降低运营成本。</p><h3 id="3、微隔离（MSG）"><a href="#3、微隔离（MSG）" class="headerlink" title="3、微隔离（MSG）"></a>3、微隔离（MSG）</h3><p>微隔离是一种网络安全技术，它可以将数据中心在逻辑上划分为各个工作负载级别的不同安全段，然后定义安全控制并为每个唯一段提供服务。微隔离使IT人员可以使用网络虚拟化技术在数据中心内部部署灵活的安全策略,而不必安装多个物理防火墙。微隔离可用于保护每个虚拟机(VM)在具有策略驱动的应用程序级安全控制的企业网络中。微隔离技术可以大大增强企业的抵御能力。<br><img src="https://img-blog.csdnimg.cn/9a7ccfe4df8d4d5ea3ffb6f5d6898a51.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="威隔离MSG"></p><p>微隔离是在数据中心和云部署中创建安全区域的一种方法。这种方法使企业组织能够分离工作负载并分别保护它们，从而使网络安全更加完善，从而更加有效。<br>以下是微隔离的一些优点：<br>1.减少攻击面<br>2.提高横向运动的安全性<br>3.安全关键应用<br>4.提高合规性</p><h2 id="四、如何实现零信任体系"><a href="#四、如何实现零信任体系" class="headerlink" title="四、如何实现零信任体系"></a>四、如何实现零信任体系</h2><p>零信任的覆盖范围很广，根据企业的实际情况，可参考如下过程执行逐步建立零信任安全体系。</p><p><strong>1、建立统一的认证平台，提升基础安全及执行能力</strong><br>建立统一的认证能力平台，为所有业务系统提供认证能力。所有业务平台对接认证能力平台以获得中级及以上认证能力，大幅降低因认证方式带来的风险。<br>可结合已经建立的 4A 系统，升级 4A 系统认证体系。使用多因素认证提高安全等级。收集并绑定设备指纹，将每台设备（PC 端或移动 端）与账户关联绑定。通过账号与设备的绑定，实现用 户、账号、设备三位一体的认证体系。建立以零信任网关为核心的控制体系，该方式将大大提高对用户访问行为的控制，弥补现有业务系统在访 控制方面的安全短板。建立采集系统，在用户使用业务系统时，采集行为和环境信息。零信任网关体系可以与 4A 系统和其它业务系统结合，通过代理技术隐藏所有被代理系统的 IP 和端口，并对用户的访问行为进行鉴权检测。</p><p><strong>2、升级或部署EDR，加强终端管控和行为风险发现能力</strong><br>加强客户端监管，可通过升级资产与基线管理平台或部署EDR终端控制接入软件，对终端环境进行基线扫描和检查预警。对于不符合要求的终端，通过统一身份认证平台禁止其接入，同时，给出修复建议。<br>建立大数据处理系统，并通过该系统将上一阶段收集的用户行为信息进行统计和分析，结合电信内部管理规章制度，制定一套有针对性的基础专家规则。同时，建立规则引擎，规则引擎根据专家规则判断用户当前环境和行为风险。如果在规则中缺少必要信息指标，通过调整采集指标达到目标。<br>在基础规则基础上，根据不同的业务系统特点，深入挖掘与业务系统紧密相关的规则。结合认证方式在各个接入了认证能力平台的业务系统中实现自适应处置，使用户体会到初级智能化安全。规则引擎与身份认证系统对接，对接完成后，可以通过对用户访问各个业务系统的检测评估发现潜在风险，主要包括冒名访问和违规操作。</p><p><strong>3、引入智能工具，从传统安全向智慧安全转变</strong><br>建立机器学习平台，引入齐全的人工智能模型和可视化工具，利用前期收集的用户数据，训练适配的模型，建立智能规则引擎，对用户请求的行为信息和环境信息进行自动化评估，关联前期部署的规则引擎，验证并改良智能规则和引擎。通过机器学习平台建立无感知认证模型，作为辅助认证方式进一步提高用户体验，从“有认证”升华至“无认证”。通过大数据和机器学习模型，结合深度挖掘技术建立用户画像库，识别用户行为习惯，践行“行为即指纹”理念，实现“零信任”的终极目标。</p><p>参考资料来源：<br>零信任产业标准工作组《零信任实战白皮书》<br>《零信任架构的3大核心技术》<br>《零信任网络安全》<br>《零信任技术系统规范》</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全之安全风险管理</title>
      <link href="/posts/88375ea1/"/>
      <url>/posts/88375ea1/</url>
      
        <content type="html"><![CDATA[<p>在信息时代，信息已经成为第一战略资源，信息对组织使命的完成、组织目标的实现起着至关重要的作用，因此信息资产的安全是关系到该组织能否完成其使命的重大因素。资产与风险是对矛盾共同体，资产价值越高，面临的风险就越大。而对于目前的组织机构而言，由于组织的业务运营越来越依赖于信息资产，信息安全相关风险在组织整体风险中所占的比例也越来越高。信息安全风险管理的目的就是将风险控制到可接受的程度，保护信息及其相关资产，最终保障组织能够完成其使命，实现其目标。</p><h2 id="一、什么是安全风险"><a href="#一、什么是安全风险" class="headerlink" title="一、什么是安全风险"></a>一、什么是安全风险</h2><p>风险定义为事态的概率及其结果的组合。风险的目标可能有很多不同的方面，如财务目标、健康和人身安全目标、信息安全目标和环境目标等；目标也可能有不同的级别，如战略目标、组织目标、项目目标、产品目标和过程目标等。风险经常通过引用潜在事态和后果或这些的组合来描述。影响，是对一个预期的偏离，正面的或负面的偏离。<br>风险是客观存在的，与不确定性紧密相连，但又不能完全等同。风险带来的影响，通常都是负面的(正面的影响通常不被称为风险)。风险强调的是损害的潜在可能性，而不是事实上的损害。风险不能消除殆尽，包括人为因素带来的风险，也一样不能消除殆尽。衡量风险的两个基本要素就是事件的概率和影响。<br>威胁利用脆弱性作用于资产产生影响，威胁增加了组织资产的风险，脆弱点能够暴露资产，脆弱性本身不会构成对资产的损害，但是脆弱性被威胁利用就会增加组织资产的风险。<br><img src="https://img-blog.csdnimg.cn/507664e42a024ccc969927c2a2e9122e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="安全风险与资产、脆弱性、威胁之间的关系"></p><h2 id="二、如何评估安全风险"><a href="#二、如何评估安全风险" class="headerlink" title="二、如何评估安全风险"></a>二、如何评估安全风险</h2><p>根据《信息安全技术信息安全风险评估规范》（GB/T 20984-2007），对评估对象进行安全风险评估分析，风险分析中涉及评估对象的影响范围、威胁、脆弱性三个基本要素。<br><img src="https://img-blog.csdnimg.cn/077ed7794d104aadafd25b4c3ebc0bad.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="风险评估"><br>以下参考互联网新技术新业务安全风险评估可以分为<strong>确定影响范围-&gt;确定威胁-&gt;确定脆弱性-&gt;计算分险值-&gt;形成评估结论</strong>，通过定量和定性相结合的方式进行安全风险评估。</p><h3 id="1、确定影响范围"><a href="#1、确定影响范围" class="headerlink" title="1、确定影响范围"></a>1、确定影响范围</h3><p>影响范围是指评估对象涉及的传播影响，按评估对象支持的用户数计。<br>对于运营于互联网上的应用系统，参考下表进行赋值。</p><table><thead><tr><th>范围</th><th>赋值</th></tr></thead><tbody><tr><td>10万以内</td><td>1</td></tr><tr><td>10万-100万以内</td><td>2</td></tr><tr><td>100万-1000万以内</td><td>3</td></tr><tr><td>1000万-5000万以内</td><td>4</td></tr><tr><td>5000万及以上</td><td>5</td></tr></tbody></table><h3 id="2、确定威胁"><a href="#2、确定威胁" class="headerlink" title="2、确定威胁"></a>2、确定威胁</h3><p>威胁是指可能对评估对象造成损害的外部原因。威胁利用评估对象自身的脆弱性，采用一定的途径和方式，对评估对象造成损害或损失，从而形成风险。如：下表为互联网新技术新业务安全评估涉及的威胁及发生可能性赋值。</p><table><thead><tr><th>威胁分类</th><th>威胁名称</th><th>赋值</th><th>威胁描述</th></tr></thead><tbody><tr><td>假冒</td><td>假冒</td><td>4</td><td>通过欺骗通信系统（或用户）达到非法用户冒充成为合法用户，或特权小的用户冒充成为特权大的用户的目的。黑客大多是采用假冒攻击。</td></tr><tr><td>假冒</td><td>诱骗欺诈</td><td>1</td><td>通过伪造、篡改、劫持短信、彩信、邮件、通讯录、通话记录、收藏夹、桌面等方式，诱骗用户，而达到不正当目的。</td></tr><tr><td>假冒</td><td>恶意扣费</td><td>5</td><td>在用户不知情或非授权的情况下，通过隐蔽执行、欺骗用户点击等手段，订购各类收费业务或使用移动终端支付，造成用户经济损失。</td></tr><tr><td>篡改</td><td>篡改</td><td>3</td><td>通过作伪的手段对应用程序的数据、进程、交互内容、发布内容进行修改。</td></tr><tr><td>拒绝服务</td><td>系统破坏</td><td>4</td><td>通过感染、劫持、篡改、删除、终止进程等手段导致移动终端或其它非恶意软件部分或全部功能、用户文件等无法正常使用，干扰、破坏、阻断移动通信网络、网络服务或其它合法业务正常运行。</td></tr><tr><td>拒绝服务</td><td>拒绝服务</td><td>5</td><td>对信息或其他资源的合法访问被无条件地阻止。</td></tr><tr><td>拒绝服务</td><td>资源消耗</td><td>4</td><td>在用户不知情或非授权的情况下，通过自动拨打电话、发送短信、彩信、邮件、频繁连接网络等方式，造成用户资费损失。</td></tr><tr><td>暴力破解</td><td>暴力破解</td><td>2</td><td>一种针对于用户账号和密码的破译方法，即将密码进行逐个推算直到找出真正的密码为止。</td></tr><tr><td>抵赖</td><td>抵赖</td><td>4</td><td>合法用户对自己操作行为否认的可能性。</td></tr><tr><td>越权（提升权限）</td><td>非授权访问</td><td>3</td><td>某一资源被某个非授权的人，或以非授权的方式使用。</td></tr><tr><td>越权（提升权限）</td><td>隐私窃取</td><td>4</td><td>在用户不知情或非授权的情况下，获取涉及用户个人信息。</td></tr><tr><td>越权（提升权限）</td><td>窃听</td><td>3</td><td>用各种可能的合法或非法的手段窃取系统中的信息资源和敏感信息。例如对通信线路中传输的信号搭线监听，或者利用通信设备在工作过程中产生的电磁泄露截取有用信息等。</td></tr><tr><td>越权（提升权限）</td><td>业务流分析</td><td>3</td><td>通过对系统进行长期监听，利用统计分析方法对诸如通信频度、通信的信息流向、通信总量的变化等参数进行研究，从中发现有价值的信息和规律。</td></tr><tr><td>越权（提升权限）</td><td>远程控制</td><td>4</td><td>在用户不知情或非授权的情况下，能够接受远程控制端指令并进行相关操作。</td></tr><tr><td>越权（提升权限）</td><td>破坏信息的完整性/可用性</td><td>4</td><td>数据被非授权地进行增删、修改或破坏而受到损失/数据遗失。</td></tr><tr><td>越权（提升权限）</td><td>授权侵犯（内部攻击）</td><td>3</td><td>被授权以某一目的使用某一系统或资源的某个人，将此权限用于其他非授权的目的。</td></tr><tr><td>非法传播</td><td>恶意传播</td><td>5</td><td>自动通过复制、感染、投递、下载等方式将自身、自身的衍生物或其它恶意代码进行扩散的行为。</td></tr><tr><td>非法传播</td><td>信息泄露</td><td>5</td><td>信息被泄露或透露给某个非授权的实体。</td></tr><tr><td>非法传播</td><td>三涉</td><td>5</td><td>传播的内容与应用包含了非法的信息，如涉黄、涉非、涉政，含病毒等。</td></tr><tr><td>非法传播</td><td>非法应用</td><td>2</td><td>传播内容与应用的方式让用户无法接受，如垃圾短信的发送、骚扰电话等。</td></tr><tr><td>溯源失效</td><td>溯源失效</td><td>4</td><td>无法准确追溯到传播违法有害信息或进行恶意攻击的责任主体。</td></tr><tr><td>管理失控</td><td>管理失控</td><td>4</td><td>用户、业务规模已超过企业最大安全监管能力范围；或企业安全保障能力无法满足针对业务实现方式或功能属性带来安全风险的管理。</td></tr></tbody></table><p>为了便于对不同威胁发生的可能性概率数据进行类比、度量，依据经验或专家意见进行赋值，常用准则参照如下表。采用相对等级的方式进行度量，等级值为1-5，1为最低，5为最高。<br>表：威胁赋值准则</p><table><thead><tr><th>等级</th><th>标识</th><th>定义</th></tr></thead><tbody><tr><td>5</td><td>VH（很高）</td><td>威胁发生的可能性很高，在大多数情况下几乎不可避免或者可以证实发生过的频率较高。</td></tr><tr><td>4</td><td>H（高）</td><td>威胁发生的可能性较高，在大多数情况下很有可能会发生或者可以证实曾发生过。</td></tr><tr><td>3</td><td>M（中）</td><td>威胁发生的可能性中等，在某种情况下可能会发生但未被证实发生过。</td></tr><tr><td>2</td><td>L（低）</td><td>威胁发生的可能性较小，一般不太可能发生，也没有被证实发生过。</td></tr><tr><td>1</td><td>VL（很低）</td><td>威胁几乎不可能发生，仅可能在非常罕见和例外的情况下发生。</td></tr></tbody></table><h3 id="3、确定脆弱性"><a href="#3、确定脆弱性" class="headerlink" title="3、确定脆弱性"></a>3、确定脆弱性</h3><p>脆弱性是指评估对象存在一个或多个脆弱的管理、技术、业务方面的漏洞，这些漏洞可能会被威胁所利用。脆弱性依据经验或专家意见进行赋值，常用准则参照如下表。采用相对等级的方式进行度量，等级值为1-3，1为最低，3为最高。<br>表：脆弱性赋值准则</p><table><thead><tr><th>类别</th><th>描述</th><th>对应等级</th></tr></thead><tbody><tr><td>技术保障</td><td>技术方面是否存在低等级缺陷，从技术角度是否易被利用。</td><td>3</td></tr><tr><td>攻击利用</td><td>对于攻击者来说，该漏洞目前是否能被直接或者间接利用，或者利用的难度。</td><td>3</td></tr><tr><td>管理控制</td><td>运营管理环节是否有相关的薄弱环节，被利用难易程度。</td><td>3</td></tr><tr><td>防范控制</td><td>是否有规定，是否严格审核、是否有记录校验等。</td><td>2</td></tr></tbody></table><p>脆弱性等级</p><table><thead><tr><th>等级</th><th>标识</th><th>定义</th></tr></thead><tbody><tr><td>3</td><td>H（高）</td><td>如果被威胁利用，将造成完全损害。</td></tr><tr><td>2</td><td>M（中）</td><td>如果被威胁利用，将造成一般损害。</td></tr><tr><td>1</td><td>L（低）</td><td>如果被威胁利用，造成的损害可以忽略。</td></tr></tbody></table><h3 id="4、计算风险值"><a href="#4、计算风险值" class="headerlink" title="4、计算风险值"></a>4、计算风险值</h3><p>风险计算公式：</p><blockquote><p>风险值=影响范围 * 威胁可能性 * 脆弱严重性</p></blockquote><p><img src="https://img-blog.csdnimg.cn/3a6ca1e002664e92af2ea57bee8a24f8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="风险评估彩虹图"></p><p>根据风险计算公式得出风险值后可以对应其风险等级，如风险值在55-75分，表示风险极高</p><h3 id="5、评估结论"><a href="#5、评估结论" class="headerlink" title="5、评估结论"></a>5、评估结论</h3><p>评估报告以风险计算得分形式呈现，即：不仅呈现脆弱性问题，并且对于不符合评估标准的项，根据面临威胁赋值和脆弱性赋值，结合评估对象的影响范围计算出风险得分，依据得分给出风险等级（极高、高、中、低、极低）。 任一评估要点匹配对应的企业安全保障能力的脆弱性测算值＞0时，须及时记录并反馈至本级信息安全部门进行报备。任一评估要点的风险值的对应等级为中及其以上程度时，必须纳入整改事项严格贯彻执行，并密切跟踪把握风险变化、持续健全更新与之匹配对应的信息安全管理措施和技术保障手段，根据业务上线后的经营发展情况适时开展安全评估，以确保将信息安全风险控制在中级以下范围内。评估管理部门应组织评估专家审查小组，对“评估结论”进行审核，通过后出具评审结论。</p><h2 id="三、为什么要管理安全风险"><a href="#三、为什么要管理安全风险" class="headerlink" title="三、为什么要管理安全风险"></a>三、为什么要管理安全风险</h2><p>风险管理的目的是确保不确定性不会使企业的业务目标发生变化。风险管理是风险的识别、评估和优化，然后协调和经济地应用资源，以最小化监测和控制不良事件的可能性及影响，最大限度地实现业务。</p><p>风险管理可使信息系统的主管者和运营者在安全措施的成本与资产价值之间寻求平衡，并最终通过对支持其使命的信息系统及数据进行保护而提高其实现使命的能力。</p><p>一个单位的领导必须确保本单位具备完成其使命所需的能力。信息安全措施是有成本的，因此对信息安全的成本必须像其他管理决策一样进行全面检查。一套合理的风险管理方法，可以帮助信息系统的主管者和运营者最大程度地提高其信息安全保障能力，以有效实现其使命。</p><h2 id="四、如何管理安全风险"><a href="#四、如何管理安全风险" class="headerlink" title="四、如何管理安全风险"></a>四、如何管理安全风险</h2><p>信息安全风险管理包括背景建立、风险评估、风险处理、批准监督、监控审查和沟通咨询6个方面的内容。<strong>背景建立、风险评估、风险处理和批准监督</strong>是信息安全风险管理的4个基本步骤，监控审查和沟通咨询则贯穿于这4个基本步骤中，如下图所示。</p><h3 id="1、背景建立"><a href="#1、背景建立" class="headerlink" title="1、背景建立"></a>1、背景建立</h3><p>背景建立是信息安全风险管理的第一个步骤，是为了明确信息安全风险管理的范围和对象，以及对象的特性和安全要求，对信息安全风险管理项目进行规划和准备，保障后续的风险管理活动顺利进行。背景是建立在业务需求的基础上，通过有效的风险评估和国家、地区、行业相关法律法规及标准的约束下获得背景依据。<br>背景建立的过程包括风险管理准备、信息系统调查、信息系统分析和信息安全分析4个阶段。在信息安全风险管理过程中，对象确立过程是一次信息安全风险管理主循环的起始，为风险评估提供输人。</p><h3 id="2、风险评估"><a href="#2、风险评估" class="headerlink" title="2、风险评估"></a>2、风险评估</h3><p>风险评估确定信息资产的价值、识别适用的威胁和(存在或可能存在的)脆弱点、识别现有控制措施及其对已识别风险的影响，确定潜在后果,对风险进行最终的优先级排序，并按照风险范畴中设定的风险评价准则进行排名。<br>风险评估的目的是通过风险评估的结果，来获得信息安全需求，信息安全风险管理要依靠风险评估的结果来确定随后的风险处理和批准监督活动。风险评估使得组织能够准确定位风险管理的策略、实践和工具，能够将安全活动的重点放在重要的问题上，能够选择有合理成本效益的和适用的安全对策。基于风险评估的风险管理方法被实践证明是有效的和实用的，已被广泛应用于各个领域。<br>风险评估的过程包括风险评估准备、风险要素识别、风险分析和风险结果判定4个阶段。在信息安全风险管理过程中，风险评估活动接受背景建立阶段的输出，形成本阶段的最终输出《风险评估报告》，此文档为风险处理活动提供输人。</p><h3 id="3、风险处理"><a href="#3、风险处理" class="headerlink" title="3、风险处理"></a>3、风险处理</h3><p>风险处理是依据风险评估的结果，选择和实施合适的安全措施。风险处理的目的是为了将风险始终控制在可接受的范围内。风险处理的方式主要有降低、规避、转移和接受4种方式。</p><ul><li><p>降低方式:<br>组织首先应该选择降低风险，通常通过对面临风险的资产采取保护措施来降低风险。保护措施可以从构成风险的5个方面( 即威胁源、威胁行为、脆弱性、资产和影响)来降低风险。比如，采用法律的手段制裁计算机犯罪(包括窃取机密信息，攻击关键的信息系统基础设施，传播病毒、不健康信息和垃圾邮件等)，发挥法律的威慑作用，从而有效遏制威胁源的动机;采取身份认证措施，从而抵制身份假冒这种威胁行为的能力；及时给系统打补丁(特别是针对安全漏洞的补丁)，关闭无用的网络服务端口，从而减少系统的脆弱性，降低被利用的可能性；采用各种防护措施，建立资产的安全域，从而保证资产不受侵犯，其价值得到保持；采取容灾备份、应急响应和业务连续计划等措施，从而减少安全事件造成的影响程度。</p></li><li><p>规避方式:<br>当风险不能被降低时，通过不使用面临风险的资产来避免风险。比如，在没有足够安全保障的信息系统中，不处理特别敏感的信息，从而防止敏感信息的泄漏。再如，对于只处理内部业务的信息系统，不使用互联网，从而避免外部的有害人侵和不良攻击。</p></li><li><p>转移方式:<br>只有在风险既不能被降低，又不能被规避时，通过将面临风险的资产或其价值转移到更安全的地方来避免或降低风险。比如，在本机构不具备足够的安全保障的技术能力时，将信息系统的技术体系(即信息载体部分)外包给满足安全保障要求的第三方机构，从而避免技术风险。再如，通过给昂贵的设备上保险，将设备损失的风险转移给保险公司，从而降低资产价值的损失。</p></li><li><p>接受方式:<br>是选择对风险不采取进一步的处理措施，接受风险可能带来的结果。接受风险的前提是确定了风险的等级，评估了风险发生的可能性以及带来的潜在破坏，分析了使用每种处理措施的可行性，并进行了较全面的成本效益分析，认定某些功能、服务、信息或资产不需要进一 步保护。</p></li></ul><p>风险处理的过程包括现存风险判断、处理目标确立、处理措施选择和处理措施实施4个阶段。</p><h3 id="4、批准监督"><a href="#4、批准监督" class="headerlink" title="4、批准监督"></a>4、批准监督</h3><p>批准监督包括批准和持续监督两部分。<br>批准，是指机构的决策层依据风险评估和风险处理的结果是否满足信息系统的安全要求，做出是否认可风险管理活动的决定。批准应由机构内部或更高层的主管机构的决策层来执行。<br>持续监督，是指检查机构及其信息系统以及信息安全相关的环境有无变化，监督变化因素是否有可能引入新的安全隐患并影响到信息系统的安全保障级别。监督通常由机构内部管理层和执行层完成，必要时也可以委托支持层的外部专业机构提供支持，这主要取决于信息系统的性质和机构自身的专业能力。<br>对风险评估和风险处理的结果的批准和持续监督，不能仅依据相关标准进行僵化的对比，而是需要紧紧围绕信息系统所承载的业务，通过对业务的重要性和业务遭受损失后所带来的影响来开展相关工作。批准通过的依据( 原则)有两个：一是信息系统的残余风险是可接受的；二是安全措施能够满足信息系统当前业务的安全需求。</p><p>参考资料：<br>《CISP培训教材》<br>《信息安全工程师教程（第2版）》<br>《信息安全技术信息安全风险评估规范》</p><hr><p>博客地址：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CWPP与EDR的定义与区别</title>
      <link href="/posts/ada9f957/"/>
      <url>/posts/ada9f957/</url>
      
        <content type="html"><![CDATA[<p>随着信息系统的发展，大家都在说网络安全要覆盖“云”、“管”、“端”，CWPP与EDR是目前非常火的产品，一个面向云端服务器的防护，一个是面向常规终端PC端的防护。</p><p>在介绍CWPP与EDR两个产品概念之前，先来简单说明一下主机、服务器、终端几个位置概念：</p><p>主机VS服务器。主机是一个统称，所有服务器（虚拟机）都是主机，但并非所有主机都是服务器，也就是主机覆盖服务器。主机和服务器的主要差别在于，主机是连接到网络的计算机或其他设备，而服务器是提供服务的软件或硬件设备，日常所说的服务器一般是指提供服务的主机。由此可见，主机安全并不是一个产品，而是对应一个需要被保护的位置，主机安全即主机侧的安全保护。</p><p>终端VS服务器。终端和服务器是两类东西。这里的终端指桌面电脑、笔记本、个人设备等用于访问网络、数据和应用的设备，而服务器则是提供服务、存储、计算的设备。当然，某种程度上来说，广义上的终端概念也可以包括服务器，但常规意义的终端不包括服务器。<br><img src="https://img-blog.csdnimg.cn/b20014059d0b493484d138a36df80c5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="终端主机"></p><p>对于一般的应用系统来说，服务器就是提供服务的主机如提供WEB、FTP、数据库等服务的服务器，终端就是访问服务的工作站、个人PC等。</p><h2 id="一、CWPP的定义"><a href="#一、CWPP的定义" class="headerlink" title="一、CWPP的定义"></a>一、CWPP的定义</h2><p> 现代数据中心支持运行在物理设备、虚拟机（VM）、容器以及私有云基础架构中的各种工作负载，并且几乎总是涉及一些在一个或多个公有云基础设施即服务（IaaS）提供商中运行的工作负载。<br><strong>云工作保护平台(Cloud Workload Protection Platform)简称CWPP</strong>，市场定义为基于主机的解决方案，主要满足现代混合数据中心架构中，服务器工作负载的保护要求。它为信息安全领导者提供了一种集成的方式，通过使用单个管理控制台和单一方式表达安全策略来保护这些工作负载，而不用考虑工作负载运行的位置。<br>可以理解成为基于代理（Agent）的底层技术方案，和传统部署在网络边界上的安全产品不一样，CWPP部署在操作系统层，因此可以横跨物理机、公有云、私有云、混合云等多种数据中心环境，部署方式更加灵活、防护层面更加丰富。采用服务端agent+远程控制台的部署模式，agent支持云、物理、混合环境部署，能有效安全加固服务器、抵御黑客攻击和恶意代码。</p><p>Gartner定义的产品能力(需求)的金子塔说明了对CWPP产品能力的定义，越是靠近基座的功能越重要，越是靠近塔尖的功能越次要。<br><img src="https://img-blog.csdnimg.cn/7d9b3f32871942cdac3f7211ccb897cd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="CWPP"></p><p>CWPP的核心能力：</p><ul><li>Congurationand  vulnerability management 配置和漏洞管理<br>1.配置，即服务器优化，通过对操作系统进行合理配置，提升操作系统的安全性和抗攻击能力。<br>2.漏洞管理，分为操作系统漏洞管理和应用漏洞管理。目前网络攻击主要是通过web服务器或者web应用漏洞发起，因此CWPP产品要能提供标准化、同时支持制定自定义的web应用漏洞防护策略。</li><li>Networksegmentation, isolation and traffic visibility 网络隔离与流可视<br>要求CWPP产品首先能图形化管理用户的主机业务资产，并且可以跨物理、虚拟架构、网络定于基于角色的访问策略（微隔离）；对于主机之间的访问关系，可以图形化的展示和控制（流可视化）。</li><li>Systemintegrity measurement， attestation and monitoring 系统完整性检测、认证和监测<br>可以保护系统文件或者指定目录、文件不被恶意修改，提供监控模式和防护模式。</li><li>Application control应用防护<br>CWPP产品需要能识别到主机上运行的应用，并对不同的应用提供相应的防护策略，如云锁对web应用提供waf防护，对于sshd、remotedesktop提供防暴力破解防护等。</li><li>Capabilities that augment/verify foundational operational controls 增强及验证基础运维能力<br>CWPP产品要求不能单纯依靠服务器账号、密码来验证管理员，而需要引入账号密码外的第二套验证机制。比如云锁的登陆防护功能，可以限制登陆服务的用户名、IP范围、登陆时间、登陆服务器使用的PC名称，如果不满足限制条件，即使拿到服务器的管理员账号密码也无法登陆服务器。</li><li>Log management and monitoring日志管理和监测<br>要求CWPP产品能提供完整的日志，同时当安全事件发生后，CWPP产品需要关联相关日志最终形成事件IOC，帮助用户回溯攻击过程，快速定位风险点。</li></ul><h2 id="二、EDR的定义"><a href="#二、EDR的定义" class="headerlink" title="二、EDR的定义"></a>二、EDR的定义</h2><p>根据Gartner的定义，<strong>EDR端点检测与响应（Endpoint Detection and Response）简称EDR</strong>是一种集成的终端安全解决方案，它将终端数据的实时连续监控和收集与基于规则的自动响应和分析功能相结合。该术语由Gartner的Anton Chuvakin提出，用于描述新兴的安全系统，用于检测和调查终端上的可疑活动，采用高度自动化使安全团队能够快速识别和响应威胁。完全不同于以往的端点被动防护思路，而是通过云端威胁情报、机器学习、异常行为分析、攻击指示器等方式，主动发现来自外部或内部的安全威胁，并进行自动化的阻止、取证、补救和溯源，从而有效对端点进行防护。</p><p>相比于传统端点安全防护采用预设安全策略的静态防御技术，EDR加强了威胁检测和响应取证能力，能够快速检测、识别、监控和处理端点事件，从而在威胁尚未造成危害前进行检测和阻止，帮助受保护网络免受零日威胁和各种新出现的威胁。安全模型如图所示：<br><img src="https://img-blog.csdnimg.cn/b56cc5b4b5984699b37dd266fc8f4865.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="EDR"></p><ul><li>资产发现：定期通过主动扫描、被动发现、手工录入和人工排查等多种方法收集当前网络中所有软硬件资产，包括全网所有的端点资产和在用的软件名称、版本，确保整个网络中没有安全盲点。</li><li>系统加固：定期进行漏洞扫描、补丁修复、安全策略设置和更新端点软件清单，通过软件白名单限制未经授权的软件运行，通过主机防火墙限制未经授权的服务端口开放，并定期检查和清理内部人员的账号和授权信息。</li><li>威胁检测：通过端点本地的主机入侵检测和借助云端威胁情报、异常行为分析、攻击指示器等方式，针对各类安全威胁，在其发生前、发生中、发生后进行相应的安全检测动作。</li><li>响应取证：针对全网的安全威胁进行可视化展示，能够针对安全威胁自动化地进行隔离、修复和补救，自动完成安全威胁的调查、分析和取证工作，降低事件响应和取证分析的技术门槛，不需要依赖于外部专家即可完成快速响应和取证分析。</li></ul><h2 id="三、CWPP与EDR的关系与区别"><a href="#三、CWPP与EDR的关系与区别" class="headerlink" title="三、CWPP与EDR的关系与区别"></a>三、CWPP与EDR的关系与区别</h2><p>EDR与CWPP主机安全属于网络安全领域两个不同的方向，前者聚焦于常规的终端侧，后者聚焦于主机侧，两者作用于完全不同的位置。EDR的基因是根植于PC等常规终端的，它天然不适配于主机侧。</p><table><thead><tr><th>需求场景</th><th>需求求相同点</th><th>需求不同点</th></tr></thead><tbody><tr><td>终端侧安全</td><td>资产梳理清点<br>统一集中管理<br>风险防护</td><td>安全需求&gt;稳定需求，注重安全防护能力，重防御；<br>关注用户实体行为分析（UEBA），防止PC端成为威胁内网安全的导火索，防止敏感数据歪斜；<br>高危动作或安全风险尽可能自动化完成阻断动作，无需人工介入，确保整体网络的安全可靠。</td></tr><tr><td>主机侧安全</td><td>资产梳理清点<br>统一集中管理<br>风险防护</td><td>稳定需求&gt;安全需求，注重安全检测能力，重检测；<br>更加关注主机上承载的业务应用和数据安全；<br>因业务连续性需要，安全加固工作需人工介入，要在确保业务连续稳定运行的基础上进行加固。</td></tr></tbody></table><p>在安全的需求上，PC类的终端侧与主机侧的安全诉求差别很大。所以，面向终端的EDR产品与面向服务器/工作负载的主机安全产品CWPP，这两者之间有本质的区别，并不能混为一谈。主机侧的安全产品实现不了终端侧的安全防护，EDR也不能实现CWPP的防护效果。<br>两种产品的区别如下：</p><table><thead><tr><th>对比项</th><th>CWPP</th><th>EDR</th></tr></thead><tbody><tr><td>产品定位</td><td>主机安全防护</td><td>终端安全防护</td></tr><tr><td>产品部署</td><td>Agent不在内核安装驱动，稳定性高</td><td>Agent安装需要在内核安装驱动，稳定性差，影响业务</td></tr><tr><td>资产清点</td><td>资产清点能力更全面，支持对业务层资产精准识别和动态感知</td><td>资产信息相对比较少，不够全面</td></tr><tr><td>风险发现</td><td>提供全面的风险检查，包括漏洞风险、弱密码、系统风险、应用风险、账号风险检查</td><td>支持漏洞风险检查，不具备其他风险检查能力</td></tr><tr><td>入侵检测与病毒查杀</td><td>不依赖特征库的检测方式，基于行为以及结合威胁情报、大数据、机器学习等方法，提供实时精准的入侵检测和响应能力</td><td>主要功能是病毒查杀，基于特征库或结合威胁情报，能够查杀绝大部分病毒，但仍属于被动防护</td></tr><tr><td>基线合规检查</td><td>提供等保或CIS国标标准的检查基线，支持对系统、应用、数据进行基线合规检查</td><td>通常不具备合基线合规检查能力，或提供少量的基线检查标准。</td></tr></tbody></table><p>CWPP与EDR，一个面向服务器端的防护（CWPP），一个是面向常规终端PC端的防护（EDR）但是对于企业的整体安全防护来说，CWPP和EDR相互作为补充构建企业的云、端防护能力。</p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全之APT攻击</title>
      <link href="/posts/25e5f55a/"/>
      <url>/posts/25e5f55a/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是APT攻击"><a href="#一、什么是APT攻击" class="headerlink" title="一、什么是APT攻击"></a>一、什么是APT攻击</h1><p>当今，网络系统面临着越来越严重的安全挑战，在众多的安全挑战中，一种具有组织性、特定目标以及长时间持续性的新型网络攻击日益猖獗，国际上常称之为<strong>APT（Advanced Persistent Threat高级持续性威胁）攻击</strong>。<br>APT攻击是一种以商业或者政治目的为前提的特定攻击，其通过一系列具有针对性的攻击行为以获取某个组织甚至国家的重要信息，特别是针对国家重要的基础设施和单位开展攻击，包括能源、电力、金融、国防等等。APT攻击常常采用多种攻击技术手段，包括一些最为先进的手段和社会工程学方法，并通过长时间持续性的网络渗透，一步步的获取内部网络权限，此后便长期潜伏在内部网络，不断地收集各种信息，直至窃取到重要情报。<br>对于APT攻击比较权威的定义是由美国国家标准与技术研究所( NIST)提出的，该定义给出了APT攻击的4个要素，具体如下。<br>(1)攻击者：拥有高水平专业知识和丰富资源的敌对方。<br>(2)攻击目的：破坏某组织的关键设施，或阻碍某项任务的正常进行。<br>(3)攻击手段：利用多种攻击方式，通过在目标基础设施上建立并扩展立足点来获取信息。<br>(4)攻击过程：在一个很长的时间段内潜伏并反复对目标进行攻击,同时适应安全系统的防御措施,通过保持高水平的交互来达到攻击目的。</p><h1 id="二、APT攻击过程"><a href="#二、APT攻击过程" class="headerlink" title="二、APT攻击过程"></a>二、APT攻击过程</h1><p>一般APT攻击过程可概括为3个阶段：<strong>攻击前准备</strong>阶段、<strong>攻击入侵</strong>阶段和<strong>持续攻击</strong>阶段，又可细分为5个步骤：<strong>情报收集、防线突破、通道建立、横向渗透、信息收集及外传</strong>。<br><img src="https://img-blog.csdnimg.cn/d0fb871498644cbca3999c9029b7771b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="APT攻击过程"></p><h2 id="1-情报收集"><a href="#1-情报收集" class="headerlink" title="1.情报收集"></a>1.情报收集</h2><p>在实施攻击之前，攻击者会针对特定组织的网络系统和相关员工展开大量的信息搜集。信息搜集方法多种多样，通常包括搜索引擎、爬网系统、网络隐蔽扫描、社会工程学方法等方式。信息来源包括相关员工的微博、博客、社交网站、公司网站，甚至通过某些渠道购买相关信息(如公司通讯录等)。攻击者通过对这些信息的分析，可以清晰地了解攻击目标所使用的应用、防御软件，组织内部架构和人员关系，核心资产存放情况等等。于是，攻击者针对特定目标(一般是内部员工)所使用的应用软件寻找漏洞，并结合特定目标所使用的杀毒软件、防火墙等设计特定木马/恶意代码以绕过防御。同时，攻击者搭建好入侵服务器，开展技术准备工作。</p><h2 id="2-防线突破"><a href="#2-防线突破" class="headerlink" title="2.防线突破"></a>2.防线突破</h2><p>攻击者在完成情报收集和技术准备后，开始采用木马/恶意代码攻击特定员工的个人电脑，攻击方法主要有：①社会工程学方法，如电子邮件攻击，攻击者窃取与特定员工有关系的人员(如领导、同事、朋友等)电子邮箱，冒充发件人给该员工发送带有恶意代码附件的邮件，一旦该员 工打开附件，员工电脑便感染了恶意软件。②远程漏洞攻击方法，如网站挂马攻击，攻击者在员工常访问的网站上放置木马，当员工再次访问该网站时，个人电脑便受到网页代码攻击。由于这些恶意软件针对的是系统未知漏洞并被特殊处理，因此现有的杀毒软件和防火墙均无法察觉，攻击者便能逐渐获取个人电脑权限，最后直至控制个人电脑。</p><h2 id="3-通道建立"><a href="#3-通道建立" class="headerlink" title="3.通道建立"></a>3.通道建立</h2><p>攻击者在突破防线并控制员工电脑后，在员工电脑与入侵服务器之间开始建立命令控制通道。通常，命令控制通道采用HTTP/HTTPS等协议构建，以突破电脑系统防火墙等安全设备。一旦攻击者完成通道建立，攻击者通过发送控制命令检查植入的恶意软件是否遭受查杀，并在恶意软件被安全软件检测到前，对恶意软件进行版本升级，以降低被发现的概率。</p><h2 id="4-横向渗透"><a href="#4-横向渗透" class="headerlink" title="4.横向渗透"></a>4.横向渗透</h2><p>入侵和控制员工个人电脑并不是攻击者的最终目的，攻击者会采用口令窃听、漏洞攻击等多种渗透方法尝试进一步入侵组织内部更多的个人电脑和服务器，同时不断地提升自己的权限，以求控制更多的电脑和服务器，直至获得核心电脑和服务器的控制权。</p><h2 id="5-信息收集及外传"><a href="#5-信息收集及外传" class="headerlink" title="5.信息收集及外传"></a>5.信息收集及外传</h2><p>攻击者常常长期潜伏，并不断实行网络内部横向渗透，通过端口扫描等方式获取服务器或设备上有价值的信息，针对个人电脑通过列表命令等方式获取文档列表信息等。攻击者会将内部某个服务器作为资料暂存的服务器，然后通过整理、压缩、加密、打包的方式，利用建立的隐蔽通信通道将信息进行外传。在获取这些信息后，攻击者会对这些信息数据进行分析识别，并做出最终的判断，甚至实施网络攻击破坏。</p><h1 id="三、APT攻击和传统攻击的区别"><a href="#三、APT攻击和传统攻击的区别" class="headerlink" title="三、APT攻击和传统攻击的区别"></a>三、APT攻击和传统攻击的区别</h1><p>APT攻击具有不同于传统网络攻击的5个显著特征：针对性强、组织严密、持续时间长、高隐蔽性和间接攻击。<br>1.针对性强<br>APT攻击的目标明确，多数为拥有丰富数据/知识产权的目标，所获取的数据通常为商业机密、国家安全数据、知识产权等。<br>相对于传统攻击的盗取个人信息，APT攻击只关注预先指定的目标，所有的攻击方法都只针对特定目标和特定系统，针对性较强。<br>2.组织严密<br>APT攻击成功可带来巨大的商业利益，因此攻击者通常以组织形式存在，由熟练黑客形成团体，分工协作，长期预谋策划后进行攻击。他们在经济和技术上都拥有充足的资源，具备长时间专注APT研究的条件和能力。<br>3.持续时间长<br>APT攻击具有较强的持续性，经过长期的准备与策划，攻击者通常在目标网络中潜伏几个月甚至几年，通过反复渗透，不断改进攻击路径和方法，发动持续攻击，如零日漏洞攻击等。<br>4.高隐蔽性<br>APT攻击根据目标的特点，能绕过目标所在网络的防御系统，极其隐藏地盗取数据或进行破坏。在信息收集阶段，攻击者常利用搜索引擎、高级爬虫和数据泄漏等持续渗透，使被攻击者很难察觉；在攻击阶段，基于对目标嗅探的结果，设计开发极具针对性的木马等恶意软件，绕过目标网络防御系统，隐蔽攻击。<br>5.间接攻击<br>APT攻击不同于传统网络攻击的直接攻击方式，通常利用第三方网站或服务器作跳板，布设恶意程序或木马向目标进行渗透攻击。恶意程序或木马潜伏于目标网络中，可由攻击者在远端进行遥控攻击，也可由被攻击者无意触发启动攻击。</p><table><thead><tr><th>对比内容</th><th>传统攻击</th><th>APT攻击</th></tr></thead><tbody><tr><td>攻击者特征</td><td>个体或小组织网络犯罪分子</td><td>全球性、有组织、有纪律的不法团体、公司、敌对者</td></tr><tr><td>攻击目标</td><td>随机性选择攻击，通常以个体为主，以达到获取金钱、盗窃身份、欺诈等</td><td>特定攻击目标，通常针对国家安全信息、重要行业商业机密信息等</td></tr><tr><td>攻击手段</td><td>攻击手段比较单一，常基于已有的恶意软件展开攻击</td><td>攻击手段复杂，形式多样，结合0day攻击、特种木马攻击、社会工程学等展开攻击</td></tr><tr><td>攻击时间</td><td>攻击时间较短，以一次性、大范围攻击为主</td><td>攻击时间较长，长期潜伏、多次渗透攻击</td></tr><tr><td>攻击痕迹</td><td>攻击特性很强，容易在较短时间内被检测和捕获</td><td>攻击特征弱，比较隐蔽，缺少样本数据，很难被检测和捕获</td></tr></tbody></table><h1 id="四、如何防范APT攻击"><a href="#四、如何防范APT攻击" class="headerlink" title="四、如何防范APT攻击"></a>四、如何防范APT攻击</h1><p>随着人们对APT攻击的研究不断深入，已经出现一些有效的防御技术来对抗APT攻击，其核心思想大多是针对APT“攻击链”的某一步骤展开防御。这些技术主要包括：沙箱技术、信誉技术、异常流量分析技术、大数据分析技术等等。</p><h2 id="1-沙箱技术"><a href="#1-沙箱技术" class="headerlink" title="1.沙箱技术"></a>1.沙箱技术</h2><p>沙箱，又叫做沙盘，被认为是当前防御APT攻击的最有效技术之一。沙箱即是通过虚拟化技术形成一个模拟化的环境，同时将本地系统中的进程对象、内存、注册表等与模拟环境相互隔离，以便在这个虚拟化环境中测试和观察文件、访问等运行行为。沙箱通过重定向技术，将测试过程中生成和修改的文件定向到特定文件夹中，避免了对真是注册表、本地核心数据等的修改。当APT攻击在改虚拟环境发生时，可以及时地观察并分析其特征码，进一步防御其深入攻击。</p><h2 id="2-信誉技术"><a href="#2-信誉技术" class="headerlink" title="2.信誉技术"></a>2.信誉技术</h2><p>安全信誉是对互联网资源和服务相关实体安全可信性的评估和看法。信誉技术是应用于APT攻击检测具有较好辅助功能的一项技术，通过建立信誉库，包括WEB URL信誉库、文件MD5码库、僵尸网络地址库、威胁情报库等，可以为新型病毒、木马等APT攻击的检测提供强有力的技术辅助支撑，实现网络安全设备对不良信誉资源的阻断或过滤。信誉库的充分利用，将进一步提高安全新品的安全防护能力。</p><h2 id="3-主机漏洞防护技术"><a href="#3-主机漏洞防护技术" class="headerlink" title="3.主机漏洞防护技术"></a>3.主机漏洞防护技术</h2><p>针对横向移动与内部资料进行挖掘和探测的防御，可采用主机漏洞防护技术，能侦测任何针对主机漏洞的攻击并加以拦截，进而保护未修补的主机。这类解决方案可实现档案 / 系统一致性监控，保护未套用修补程序的主机，防止已知和0day 漏洞攻击。</p><h2 id="4-异常流量分析技术"><a href="#4-异常流量分析技术" class="headerlink" title="4.异常流量分析技术"></a>4.异常流量分析技术</h2><p>这是一种流量检测及分析技术，其采用旁路接入方式提取流量信息，可以针对帧数、帧长、协议、端口、标识位、IP路由、物理路径、CPU/RAM消耗、宽带占用等进行监测，并基于时间、拓扑、节点等多种统计分析手段，建立流量行为轮廓和学习模型来识别流量异常情况，进而判断并识别0Day漏洞攻击等。</p><h2 id="5-数据防泄漏技术（DLP）"><a href="#5-数据防泄漏技术（DLP）" class="headerlink" title="5.数据防泄漏技术（DLP）"></a>5.数据防泄漏技术（DLP）</h2><p>针对资料外传的风险，一般可采用加密和资料外泄防护 (DLP)技术，将关键、敏感、机密的数据加密，是降低数据外泄风险的一种方法，DLP 可提供一层额外的防护来防止数据外泄。然而，这类工具通常很复杂，而且有些部署条件，例如：数据要分类，要定义政策和规则等。</p><h2 id="6、大数据分析技术"><a href="#6、大数据分析技术" class="headerlink" title="6、大数据分析技术"></a>6、大数据分析技术</h2><p>APT攻击防御离不开大数据分析技术，无论是网络系统本身产生的大量日志数据，还是SOC安管平台产生的大量日志信息，均可以利用大数据分析技术进行大数据再分析，运用数据统计、数据挖掘、关联分析、态势分析等从记录的历史数据中发现APT攻击的痕迹，以弥补传统安全防御技术的不足。</p><p>我们熟知的APT防御产品主要针对的都是APT攻击链上的某个环节来展开防御，目前来说这是远远不够的。APT攻击防御应该是覆盖APT攻击所有环节，未来发展的趋势，是需要构建基于APT攻击链的多层次、多维度、多角度的纵深防御体系，如态势感知平台等。</p><hr><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息系统安全的发展演变</title>
      <link href="/posts/cb0f48b6/"/>
      <url>/posts/cb0f48b6/</url>
      
        <content type="html"><![CDATA[<p>随着通信技术和信息技术的发展，极大的改变了人们处理信息的方式和效率。计算机网络尤其是互联网的出现是信息技术发展中一个里程碑事件。计算机网络将通信技术和计算机技术结合起来。信息在计算机上产生、处理，并在网络中传输。网络信息系统安全是通信安全和信息系统安全的综合，网络信息安全已经覆盖了信息资产的生成、处理、传输和存储等各个阶段。包括信息自身的安全、信息应用的安全、计算机信息系统安全、通信网络安全。</p><table> <tr><td rowspan="2">信息安全</td><td>信息应用安全</td></tr> <tr><td> 信息自身安全</td></tr> <tr><td rowspan="2">信息基础设施安全</td><td>计算机系统安全</td></tr> <tr> <td>通信网络安全</td></tr></table><p>网络信息系统安全随着通信技术和信息技术的发展，大致经历了通信保密年代、计算机系统安全年代、信息系统网络安全年代、网络空间安全年代。<br><img src="https://img-blog.csdnimg.cn/2a9ebb72f181496c96ce55884fba64f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="网络信息系统安全的发展演变"></p><h2 id="一、通信保密年代"><a href="#一、通信保密年代" class="headerlink" title="一、通信保密年代"></a>一、通信保密年代</h2><p>1906年，美国物理学家费森登( Fessenden )成功地研究出无线电广播。法国人克拉维尔建立了英法第一条商用无线电线路，推动了无线电技术的进一步发展。<br>进入20世纪，尤其是在“二战”时期，军事和外交方面的巨大需求，使得无线通信技术得到飞速发展，被广泛用来传递军事情报、作战指令、外交政策等各种关键信息。21世纪，通信技术突飞猛进的发展，移动通信和数字通信成为通信技术的主流，现代世界中通信技术成为支撑整个社会的命脉和根本。<br>在通信保密年代，网络信息安全面临的主要威胁是攻击者对通信内容的窃取:有线通信容易被搭线窃听、无线通信由于电磁波在空间传播易被监听。保密成为通信安全阶段的核心安全需求。这阶段主要通过密码技术对通信的内容进行加密，保证数据的保密性和完整性，而破译成为攻击者对这种安全措施的反制。</p><h2 id="二、计算机系统安全年代"><a href="#二、计算机系统安全年代" class="headerlink" title="二、计算机系统安全年代"></a>二、计算机系统安全年代</h2><p>计算机经历了电子计算机、晶体管计算机、集成电路计算机等几个阶段。尤其是在进入20世纪70年代后,随着个人计算机的普及，各行各业都迅速采用计算机处理各种业务。计算机在处理、存储信息数据等方面的应用越来越广泛。美国国家标准局公布了《数据加密标准》( Data Encryption Standard,DES )，标志着信息安全由通信保密阶段进人计算机安全阶段。这个时期，计算机网络尚未大规模普及，相对于电话电报，计算机对信息的处理和存储能力强大，但数据长距离、大容量的传输方式较单一，功能相对较弱(主要通过软盘等形式传输)。因此，计算机阶段主要威胁来自于非授权用户对计算资源的非法使用、对信息的修改和破坏。<br>20世纪80年代计算机安全的概念开始成熟。计算机安全的主要目的是采取措施和控制以确保信息系统资产(包括硬件、软件、固件和通信、存储和处理的信息)的保密性、完整性和可用性。典型代表措施是通过操作系统的访问控制手段来防止非授权用户的访问。</p><h2 id="三、信息系统网络安全年代"><a href="#三、信息系统网络安全年代" class="headerlink" title="三、信息系统网络安全年代"></a>三、信息系统网络安全年代</h2><p>计算机网络尤其是互联网的出现是信息技术发展中一个里程碑事件。计算机网络将通信技术和计算机技术结合起来。信息在计算机上产生、处理，并在网络中传输。信息技术由此进人网络阶段，网络阶段利用通信技术将分布的计算机连接在一起，形成覆盖整个组织机构甚至整个世界的信息系统。信息系统安全是通信安全和计算机安全的综合，信息安全需求已经全面覆盖了信息资产的生成、处理、传输和存储等各阶段,确保信息系统的保密性、完整性和可用性。信息系统安全也曾被称为网络安全，主要是保护信息在存储、处理和传输过程中免受非授权的访问，防止授权用户的拒绝服务，同时检测、记录和对抗此类威胁。为了抵御这些威胁，人们开始使用防火墙、防病毒、PKI、 VPN等安全产品。此阶段的主要标志是发布了《信息技术安全性评估通用准则》，此准则即通常所说的通用准则( Common Criteria,CC)，后转变为国际标准ISO/IEC 15408,我国等同采纳此国际标准为国家标准GB/T 18336。</p><h2 id="四、网络空间安全年代"><a href="#四、网络空间安全年代" class="headerlink" title="四、网络空间安全年代"></a>四、网络空间安全年代</h2><p>随着互联网的不断发展，越来越多的设备被接人并融合，技术的融合将传统的虚拟世界与物理世界相互连接，共同构成了一个新的IT世界。互联网成为个人生活、组织机构甚至国家运行不可或缺的一部分，网络空间随之诞生，信息化发展进人网络空间阶段。网络空间作为新兴的第五空间，已经成为新的国家竞争领域,威胁来源从个人上升到犯罪组织，甚至上升到国家力量的层面。<br>“网络空间( Cyberspace)”一词，由加拿大作家威廉●吉布森在其短篇科幻小说《燃烧的铬》中创造出来，原意指由计算机创建的虚拟信息空间，体现了Cyberspace 不仅是信息的简单聚合体，也包含了信息对人类思想认知的影响。此后，随着信息技术的快速发展和互联网的广泛应用，Cyberspace 的概念不断丰富和演化。<br>随着信息化的不断深人，信息系统成为组织机构工作和生活不可或缺的一部分，信息安全威胁来源从个人上升到犯罪组织，甚至国家力量。在这个阶段，人们认识到信息安全保障不能仅仅依赖于技术措施，开始意识到管理的重要性和信息系统的动态发展性，信息安全保障的概念逐渐形成和成熟。<br>信息安全保障把信息系统安全从技术扩展到管理，从静态扩展到动态，通过各种安全保障技术和安全保障管理措施的综合融合至信息化中，形成对信息、信息系统乃至业务以及使命的保障。信息安全保障时代，其主要标志是《信息保障技术框架》（IATF）。如果说对信息的保护，主要还是处于从传统安全理念到信息化安全理念的转变过程中，那么面向业务的安全保障，就完全是从信息化的角度来考虑信息的安全了。体系性的安全保障理念，不仅是关注系统的漏洞，而且是从业务的生命周期着手，对业务流程进行分析，找出流程中的关键控制点，从安全事件出现的前、中、后三个阶段进行安全保障。面向业务的安全保障不是只建立防护屏障，而是建立一个“深度防御体系”，通过更多的技术手段把安全管理与技术防护联系起来，不再是被动地保护自己，而是主动地防御攻击。也就是说，面向业务的安全防护已经从被动走向主动，安全保障理念从风险承受模式走向安全保障模式。信息安全阶段也转化为从整体角度考虑其体系建设的信息安全保障时代。<br>2009年5月29日，美国发布《网络空间政策评估:确保信息和通信系统的可靠性和韧性》报告。云计算、虚拟化、物联网、移动互联网、大数据、人工智能等新技术的出现，使得网络空间安全的问题无比复杂。<br>2016年12月，我国发布了《国家网络空间安全战略》，明确了网络空间是国家安全的新疆域，已经成为与陆地、海洋、天空、太空同等重要的人类活动新领域，国家主权拓展延伸到网络空间，网络空间主权成为国家主权的重要组成部分。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客加入51LA网站流量统计</title>
      <link href="/posts/f571f2b1/"/>
      <url>/posts/f571f2b1/</url>
      
        <content type="html"><![CDATA[<p>自建hexo博客xiejava.ishareread.com一直在用CNZZ的网站流量统计，每天登陆到CNZZ的网站流量统计后台看博客的访问量成了建站以来的习惯。3月23日以后突然发现CNZZ的统计没有数据了，查了半天才知道CNZZ的U-Web统计分析产品停服了，计划要收费了。最开始用百度统计也是的，原来用得好好的，突然也是要收费了才开始转向用CNZZ的，现在CNZZ也要开始收费了。看来互联网公司日子比较难过了，免费时代已经一去不复返了。对于个人博客网站来说要付费买个网站流量统计又有点划不来。本来流量就很少，每年域名要付费、主机要付费，再弄个流量统计也要付费实在是有点承受不了。但是没有网站流量统计，不能看到自己的站点的访问量，对于个人自建网站来讲失去了大部分的乐趣。<br>所以这几天一直在寻找其他的网站流量统计的工具，只到找到了51LA。以前只知道百度和CNZZ的网站流量统计工具，最近才了解到51LA统计，它是15年老牌网站统计工具，是互联网上最早基于ASP编写的网站数据统计工具，拥有一大批忠实老站长，后来历经改造，推出新版51LA统计目前是网站统计V6，界面较以往有了较大的改动更加友好直观。<br>51LA网站统计V6的产品链接是 <a href="https://v6.51.la/" target="_blank" rel="noopener">https://v6.51.la/</a><br><img src="https://img-blog.csdnimg.cn/e24590a008154f04a807efaa7703eef1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="我要啦网站统计V6"></p><p>看到”<strong>免费使用</strong>“几个大字的时候我的眼睛已经发光了。迫不及待的点击“注册”，进行使用。</p><h2 id="一、注册登录"><a href="#一、注册登录" class="headerlink" title="一、注册登录"></a>一、注册登录</h2><p>注册流程很简单，要注册的信息很少，基本上就是手机号和登录密码。<br><img src="https://img-blog.csdnimg.cn/64f5b814778248c2a99e6635d51c5410.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_10,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="注册"></p><p>注册过程很友好，注册完就可以登录了。</p><h2 id="二、添加应用"><a href="#二、添加应用" class="headerlink" title="二、添加应用"></a>二、添加应用</h2><p>在正式使用网站统计服务之前要添加应用。也就是要将要统计的站点域名登记到应用里，生成统计代码。<br>点击“添加应用”按钮。要填的信息也就是你要统计的站点域名，可以是多个域名。我的hexo博客除了用到xiejava.ishareread.com外还在github和gited上都生成了。所以把这几个访问的域名都加上。<br><img src="https://img-blog.csdnimg.cn/79491c98a91942639de92f88eb5e975b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="添加应用"></p><h2 id="三、加入网站流量统计代码"><a href="#三、加入网站流量统计代码" class="headerlink" title="三、加入网站流量统计代码"></a>三、加入网站流量统计代码</h2><p>添加应用后下一步就是生成统计代码，将统计代码加入到自己的hexo站点。<br><img src="https://img-blog.csdnimg.cn/1308b239146f486e9aa5db9f631c9f5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="生成统计代码"><br>标签页后面还有“图标引用”、“数据挂件”的代码，如果有需要也可以加入。<br>找到自己的hexo站点的文件目录的<code>footer.swig</code>文件，具体在<code>themes\hexo-theme-next\layout\_partials</code>目录下。编辑footer.swig文件，加入统计代码，根据需要加入图标引用、数据挂件的代码。<br><img src="https://img-blog.csdnimg.cn/4987b4462e464d31b2d0ce8197aa3a53.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="加入统计代码"></p><h2 id="四、查看统计效果"><a href="#四、查看统计效果" class="headerlink" title="四、查看统计效果"></a>四、查看统计效果</h2><p>加入统计代码、图标引用、数据挂件代码后，大约5分钟刷新hexo站点，就可以在网站底部看到图标和数据挂件。<br><img src="https://img-blog.csdnimg.cn/322ef4197bdb47e6a2c7ff8420c923be.png#pic_center" alt="网站底部统计显示"></p><p>登录到<a href="https://v6.51.la/user/application" target="_blank" rel="noopener">https://v6.51.la/user/application</a> 的管理后台，可以看到代码安装状态为“安装成功”<br><img src="https://img-blog.csdnimg.cn/477087d995c9428bba3acacce0a70754.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="应用列表"></p><p>点击“查看报表”可以查看网站的流量统计分析信息。各种统计图表直观易懂，数据详实，感觉比CNZZ 及百度统计更加实用和方便。<br><img src="https://img-blog.csdnimg.cn/00ce0abe369941b7a35ba0094710e844.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="管理后台"><br>51LA可免费添加应用30个，每日应用统计总PV在3000000，对于个人站点或小型企业足足够用了。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全之纵深防御</title>
      <link href="/posts/e2fd4a90/"/>
      <url>/posts/e2fd4a90/</url>
      
        <content type="html"><![CDATA[<p>什么是“纵深防御”？很多人和资料都有不同的解释，有许多资料将“纵深防御”和“分层防护”等同起来，<br>上次文章介绍了“<a href="https://xiejava.blog.csdn.net/article/details/123794343" target="_blank" rel="noopener">分层防护</a>”，分层防护是根据网络的应用现状情况和网络的结构，将安全防范体系的层次划分为物理层安全、系统层安全、网络层安全、应用层安全和安全管理等各个层级，在每个层级实施相应的防护策略和手段。“纵深防御”与“分层防护”既有区别又有联系。</p><p>“纵深防御”实际上并不是一个网络安全领域的专属名词，早在二十世纪初，前苏联元帅米·尼·图哈切夫斯基就在对第一次世界大战以及国内战争经验的基础上，提出了一种名为“大纵深作战理论”的思想。由于网络安全的本质就是黑客与开发者之间的攻防战，所以信息安全领域中的“纵深防御”概念确与战争学上的思想有着共通之处，其核心都是多点布防、以点带面、多面成体，以形成一个多层次的、立体的全方位防御体系来挫伤敌人、保障自身的整体安全。</p><p>根据《信息安全工程师教程（第2版）》的描述，<strong>纵深防御模型的基本思路就是将信息网络安全防护措施有机组合起来，针对保护对象，部署合适的安全措施，形成多道保护线，各安全防护措施能够相互支持和补救，尽可能地阻断攻击者的威胁</strong>。目前，安全业界认为网络需要建立四道防线：安全保护是网络的第一道防线，能够阻止对网络的入侵和危害；安全监测是网络的第二道防线，可以及时发现入侵和破坏；实施响应是网络的第三道防线，当攻击发生时维持网络”打不垮”；恢复是网络的第四道防线，使网络在遭受攻击后能够以最快的速度“起死回升”，最大限度地降低安全事件带来的损失。看描述基本上是对应美国国防部提出的PDRR模型，即（Protection防护、Detection检测、Recovery恢复、Response响应）。PDRR改进了传统的只有防护的单一安全防御思想，强调信息安全保障的四个重要环节。<br>保护（Protection）的内容主要有加密机制、数据签名机制、访问控制机制、认证机制、信息隐藏、防火墙技术等。<br>检测（Detection）的内容主要有入侵检测、系统脆弱性检测、数据完整性检测、攻击性检测等。<br>恢复（Recovery）的内容主要有数据备份、数据修复、系统恢复等。<br>响应（Response）的内容主要有应急策略、应急机制、应急手段、入侵过程分析及安全状态评估等。<br><img src="https://img-blog.csdnimg.cn/55be794c0ca54144b664236a49d06321.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="PDRR"></p><p>但是PPDR模型总体还是比较局限与从技术上考虑安全问题。随着信息化的发展，人们越来越意识到信息安全涉及面非常广，除了技术，管理、制度、人员和法律等方面也是信息安全必须考虑的因素，就像一个由多块木板构成的“木桶”，木桶的容量由最短的那块短板决定。在处理信息安全问题是，需要全面考虑各方面的因素。</p><p>所以美国国家安全局（NSA）发布的信息安全保障技术框架IATF（Information Assurance Technical Framework）提出了纵深防御战略思想，其3个核心要素就是人、技术和操作。信息系统安全保障依赖于人、技术和操作来共同实现组织机构的职能。<br>IATF用一句话概括起来就是：<strong>一个核心思想、三个核心要素、四个焦点领域</strong>。<br><img src="https://img-blog.csdnimg.cn/fdddd1b8b76b4be3a41e4095d08edb49.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="IATF纵深防御"></p><p><strong>一个核心思想</strong><br>一个核心思想就是”纵深防御”，<strong>纵深防御也被称为深度防护战略（Defense-in-Depth），是指网络安全需要采用一个多层次、纵深的安全措施来保障信息安全。因为网络信息的安全不是仅仅依靠一两种技术或简单的安全防御设施就能实现，必须在各个层次、不同技术框架区域中实施保障机制，才能最大程度地降低风险，应对攻击并保护信息系统的安全</strong>。在一个规范的信息系统网络中，我们可以看到在网络出口有防火墙，在DMZ区有防火墙，在服务器前端还有防火墙，这就是纵深防御思想的一个体现。需要在多个位置部署安全措施，看似重复，但是因其面对不同的业务、其安全策略有很大的差异。</p><p><strong>三个核心要素</strong><br>三个核心要素是人、技术、操作。网络安全三分靠技术、七分靠管理，三要素中的“人”指的就是加强管理。<br>人是信息系统的主题，包括信息系统的拥有者、管理者和使用者，是信息安全保障的核心；<br>技术是重要手段，需要通过技术机制来保障各项业务的安全，是一种被动防御；<br>操作也称为运行或运营安全，是一种主动防御的体系和机制，包括风险评估、监控、审计、入侵检测等。<br><img src="https://img-blog.csdnimg.cn/4ccc279ac6a94841b36f5e6c786a90a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="三个核心要素"></p><p><strong>四个焦点领域</strong><br>网络和基础设施、区域边界、计算环境、支撑性基础设施4个焦点领域。基于这4个焦点领域，结合IATF纵深防御的思想进行信息安全防御从而形成保障框架。</p><p>1.保护网络和基础设施</p><p>网络和其他基础设施是信息系统及业务的支撑，是整个信息系统安全的基础。应采取措施确保网络和基础设施能稳定可靠运行，不会因故障和外界影响导致服务的中断或数据延迟，确保在网络中进行传输的公共的、私人的信息能正确地被接收者获取，不会导致未受权的访问、更改等。保护网络和基础设施防护措施包括但并不限于以下方式。</p><ul><li>合理规划以确保骨干网可用性。</li><li>使用安全的技 术架构，例如在使用无线网络时考虑安全的技术架构。</li><li>使用冗余设备提高可用性。</li><li>使用虚拟专网 ( VPN)保护通信。</li></ul><p>2.保护区域边界</p><p>信息系统根据业务、管理方式和安全等级的不同，通常可以划分为多个区域，这些区或多或少都有与其他区域相连接的边界。保护区域边界关注的是如何对进出这此区域边界的数据流进行有效的控制与监视。要合理地将信息系统根据业务、管理方式和安全等级划分不同的安全区域，并明确定义不同网络区域间需要哪些数据传递。在此基础上采取措施对数据进行控制与监视。通常采取的措施包括但并不限于以下方式。</p><ul><li>在区域边界设 置身份认证和访问控制措施，例如部署防火墙对来访者进行身份认证。</li><li>在区域边 界部署人侵检测系统以发现针对安全区域内的攻击行为。</li><li>在区域边界部署防病毒网关以发现并过滤数据中的恶意代码。</li><li>使用VPN设备以确保安全的接人。</li><li>部署抗拒绝服务攻击设备以应对拒绝服务攻击。</li><li>流量管理、行为管理等其他措施。</li></ul><p>3.保护计算环境</p><p>计算环境指信息系统中的服务器、客户机及其中安装的操作系统、应用软件等。保护计算环境通常采用身份鉴别、访问控制、加密等一系列技术以确保计算环境内的数据保密性、完整性、可用性、不可否认性等。保护计算环境的措施包括但并不限于以下方式。<br>安装并使用安全的操作系统和应用软件。</p><ul><li>在服务 器上部署主机入侵检测系统、防病毒软件及其他安全防护软件。</li><li>定期对系统进行漏洞扫描或者补丁加固，以避免系统脆弱性。</li><li>定期对系统进行安全配置检查，确保最优配置。</li><li>部署或配置对文件的完整性保护。</li><li>定期对 系统和数据进行备份等。</li></ul><p>4.支撑性基础设施</p><p>支撑性基础设施是提供安全服务的基础设施及与之相关的一系列活动的综合体。IATF定义了两种类型的支撑性基础设施：密钥管理基础设施( KMI) /公钥基础设施( PKI)和检测与响应。</p><ul><li>KMI/PKI：提供支持密钥、授权和证书管理的密码基础设施并能实现使用网络服务人员确实的身份识别。</li><li>检测与响应：提供入侵检测、报告、分析、评估和响应基础设施，它能迅速检测和响应入侵、异常事件并提供运行状态的情况。</li></ul><p>IATF的4个技术焦点区域是一个逐层递进的关系，从而形成一种纵深防御系统。因此，以上4个方面的应用充分贯彻了纵深防御的思想，对整个信息系统的各个区域、各个层次，甚至在每一个层次内部都部署了信息安全设备和安全机制，保证访问者对每一个 系统组件进行访问时都受到保障机制的监视和检测，以实现系统全方位的充分防御，将系统遭受攻进行访问时都受到保障机制的监视和检测，以实现系统全方位的充分防御，将系统遭受攻击的风险降至最低,确保数据的安全和可靠。</p><p>除了纵深防御这个核心思想之外，IATF还提出了其他一些信息安全原则，包括保护多个位置、分层防护。<br>1.保护多个位置<br>保护多个位置包括保护网络和基础设施、区域边界、计算环境等,这一原则提醒我们，仅仅在信息系统的重要敏感区域设置一些保护装置 是不够的，任意一个系统漏洞都有可能导致严重的攻击和破坏后果，所以在信息系统的各个方位布置全面的防御机制，才能将风险降至最低。<br>2.分层防御<br>如果说保护多个位置原则是横向防御，那么这一原则就是纵向防御，这也是纵深防御思想的一个具体体现。分层防御即在攻击者和目标之间部署多层防御机制，每个这样的机制必须对攻击者形成一道屏障。而且每一个这样的机制还应包括保护和检测措施，以使攻击者不得不面对被检测到的风险，迫使攻击者由于高昂的攻击代价而放弃攻击行为。</p><p>可见，<strong>纵深防御是战略思想、分层防护是具体的战术实现</strong>。</p><p>资料来源：<br>《信息安全工程师教程（第2版）》<br>《CISP培训教材》</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全体系之分层防护</title>
      <link href="/posts/3a099914/"/>
      <url>/posts/3a099914/</url>
      
        <content type="html"><![CDATA[<p>作为全方位的、整体的网络安全防范体系也是分层次的，不同层次反映了不同的安全问题，根据网络的应用现状情况和网络的结构，将安全防范体系的层次划分为物理层安全、系统层安全、网络层安全、应用层安全和安全管理。<br><img src="https://img-blog.csdnimg.cn/c3cba28b0fa34c10bb03fbd14e648e56.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="分层防护"></p><h2 id="1-物理环境的安全性-物理层安全"><a href="#1-物理环境的安全性-物理层安全" class="headerlink" title="1.物理环境的安全性(物理层安全)"></a>1.物理环境的安全性(物理层安全)</h2><p>该层次的安全包括通信线路的安全，物理设备的安全，机房的安全等。物理层的安全主要体现在通信线路的可靠性(线路备份、网管软件、传输介质)，软硬件设备安全性(替换设备、拆卸设备、增加设备)，设备的备份，防灾害能力、防干扰能力，设备的运行环境(温度、湿度、烟尘)，不间断电源保障，等等。</p><h2 id="2-操作系统的安全性-系统层安全"><a href="#2-操作系统的安全性-系统层安全" class="headerlink" title="2.操作系统的安全性(系统层安全)"></a>2.操作系统的安全性(系统层安全)</h2><p>该层次的安全问题来自网络内使用的操作系统的安全，如Windows NT，Windows 2000等。主要表现在三方面，一是操作系统本身的缺陷带来的不安全因素，主要包括身份认证、访问控制、系统漏洞等。二是对操作系统的安全配置问题。三是病毒对操作系统的威胁。</p><h2 id="3-网络的安全性-网络层安全"><a href="#3-网络的安全性-网络层安全" class="headerlink" title="3.网络的安全性(网络层安全)"></a>3.网络的安全性(网络层安全)</h2><p>该层次的安全问题主要体现在网络方面的安全性，包括网络层身份认证，网络资源的访问控制，数据传输的保密与完整性，远程接入的安全，域名系统的安全，路由系统的安全，入侵检测的手段，网络设施防病毒等。</p><h2 id="4-应用的安全性-应用层安全"><a href="#4-应用的安全性-应用层安全" class="headerlink" title="4.应用的安全性(应用层安全)"></a>4.应用的安全性(应用层安全)</h2><p>该层次的安全问题主要由提供服务所采用的应用软件和数据的安全性产生，包括Web服务、电子邮件系统、DNS等。此外，还包括病毒对系统的威胁。</p><h2 id="5-管理的安全性-管理层安全"><a href="#5-管理的安全性-管理层安全" class="headerlink" title="5.管理的安全性(管理层安全)"></a>5.管理的安全性(管理层安全)</h2><p>安全管理包括安全技术和设备的管理、安全管理制度、部门与人员的组织规则等。管理的制度化极大程度地影响着整个网络的安全，严格的安全管理制度、明确的部门安全职责划分、合理的人员角色配置都可以在很大程度上降低其它层次的安全漏洞。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是用户实体行为分析（UEBA）</title>
      <link href="/posts/973478d/"/>
      <url>/posts/973478d/</url>
      
        <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>数字新时代正在加速全面到来，网络环境变得更加多元、人员变得更复杂、接入方式多种多样，网络边界逐渐模糊甚至消失，同时伴随着企业数据的激增。数字化转型促进组织的业务发展的同时，也带来了重大的网络安全挑战。<br>1.越来越多的外部攻击，包括被利益驱动或国家驱动的难以察觉的高级攻击；<br>2.心怀恶意的内鬼、疏忽大意的员工、失陷账号与失陷主机导致的各种内部威胁；<br>3.数字化基础设施的脆弱性和风险暴露面越来越多，业务需求多变持续加剧的问题；<br>4.安全团队人员不足或能力有限，深陷不对称的“安全战争”之中。<br>在数字化带来的巨大变化下，传统的安全威胁发现能力受到了巨大的挑战。传统安全产品、技术、方案基本上都是基于已知特征进行规则匹配来进行分析和检测，基于特征、规则和人工分析，以“特征”为核心的检测分析存在安全可见性盲区，有严重的滞后效应、无力检测未知攻击、容易被绕过，以及难以适应攻防对抗的网络现实和快速变化的企业环境、外部威胁等问题。<br><img src="https://img-blog.csdnimg.cn/a9c1f22d63554bb6a3cd729f60a0d0ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="特征分析与行为分析"></p><p>安全是人和人攻防对抗的游戏，一切的意图都需要通过行为表达，这是安全运营中最重要也最有价值的一块拼图，同时也是传统方式最欠缺的。针对传统方式的不足，安全行业逐步加强基于大数据驱动，机器学习、概率分析、模式识别等的以“行为”为核心的检测分析。<br>用户实体行为分析（UEBA）应运而生。</p><h1 id="二、UEBA是什么"><a href="#二、UEBA是什么" class="headerlink" title="二、UEBA是什么"></a>二、UEBA是什么</h1><p><strong>UEBA全名User and Entity Behavior Analytics ，即为用户实体行为分析。</strong><br>Gartner 对 UEBA 的定义是“UEBA 提供画像及基于各种分析方法的异常检测，通常是基本分析方法（利用签名的规则、模式匹配、简单统计、阈值等）和高级分析方法（监督和无监督的机器学习等），用打包分析来评估用户和其他实体（主机、应用程序、网络、数据库等），发现与用户或实体标准画像或行为相异常的活动所相关的潜在事件。这些活动包括受信内部或第三方人员对系统的异常访问（用户异常），或外部攻击者绕过安全控制措施的入侵（异常用户）</p><p>用户行为分析(UBA)关联了用户活动和相关实体（用户相关的应用和终端等）信息构建人物角色与群组，进一步定义这些个体与群组的合法和正常行为，把这些人物角色在群体与群体、群体与个体、个体与个体（那些远离合法和正常行为的群体与个体）维度上相互比对分析，将异常用户（失陷账号）和用户异常（非法行为）检测出来，从而达到检测业务欺诈、敏感数据泄露、内部恶意用户、有针对性攻击等高级威胁的目的。</p><h1 id="三、UEBA应用场景"><a href="#三、UEBA应用场景" class="headerlink" title="三、UEBA应用场景"></a>三、UEBA应用场景</h1><h2 id="1-账号安全"><a href="#1-账号安全" class="headerlink" title="1  账号安全"></a>1  账号安全</h2><p>内部员工特别是高权限用户，以及服务和共享类帐户是内部和外部攻击者的主要目标。通过获取他们的访问权限则能够访问最敏感的交易、数据，甚至可以创建其他新特权帐户或滥用提权操作。由于公司账号数量庞大且难以区分滥用和合法使用，组织在监控这些帐户时面临着巨大的挑战。有效监控特权帐户不仅是一项重要的合规性要求，而且还是一项关键的威胁管理功能。和专有的特权账号管理应用（PAM，Privileged Account Management），PAM类应用提供了特权账号的全生命周期管理，而对特权账号异常行为的监控、检测、分析则是PAM的一类高级功能。PAM 内置的特权账号异常检测能力相对较弱，所以一些 PAM 供应商会跟 UEBA 产品集成，将 PAM 检测到的异常事件接入 UEBA 产品的高级分析引擎中，和其他维度的数据一起做更深层次的特权账号异常事件识别。<br>细分账号安全的场景，大致有两类。一类是账号本身的操作异常，如创建、提权、删除、暂停、撤回存在异常行为，静默账号忽然出现活动。另一类通过对账号行为如登录的时间、地点、频次的异常监控，判断账号是否被盗用或被攻陷。</p><h2 id="2-内部威胁"><a href="#2-内部威胁" class="headerlink" title="2 内部威胁"></a>2 内部威胁</h2><p>相比于不受信任的外部人员，内部员工访问和获取公司重要信息的要轻松很多。一方面公司的大部分安全防护、访问控制都是针对外来的攻击者；另一方面内部人员对组织的人员、规章、制度都有一定程度的了解，从而可以利用这些便利性来躲过安全防护检测。内部威胁者通常分为两类，一类是恶意内部人员，即合法的人员利用自己的权限做非法的事情。比如，下载大量重要的客户数据贩卖获取利益。另一类是内部人员账号被攻陷后的恶意行为。内部威胁检测的场景设计比较复杂，一般会从4个维度来考虑。</p><ol><li>建立用户行为风险画像 - 将所有身份、活动和访问特征，与基线、同组以及其他已知威胁指标进行比较，确定真正的风险区域。</li><li>高权限账号监控 – 自动识别高权限账号，例如管理员、服务和共享帐户，然后监控他们与攻击相关的异常行为，确定高风险异常行为是否源于高权限用户被成功攻击。</li><li>关键应用监控 – 为所有关键应用程序和系统构建访问风险评估，以识别与其敏感数据和交易相关的所有高风险用户、访问和活动。</li><li>内部欺诈侦测 – 利用同组人员的异常行为，比较分析侦测潜在的内部欺诈行为。</li></ol><h2 id="3-数据渗漏"><a href="#3-数据渗漏" class="headerlink" title="3 数据渗漏"></a>3 数据渗漏</h2><p>一般而言，各类攻击的主要意图是窃取组织中最重要的数据资产。组织一般会部署监控数据流向的 DLP 产品，数据库安全或者应用访问类产品以保护公司的核心数据资产。这类数据防护类产品往往误报很多，每天产生的海量报警让安全团队难以真正聚焦重点。UEBA 可以对应用访问以及 DLP 日志做更深层次的多维分析，从而定位出真正的高风险数据泄漏风险。具体的场景设计可以从以下维度考虑。<br>应用系统访问监控/风险分析 – 对存储敏感数据的应用系统、文件服务器等的访问进行行为监控，通过与用户过去行为或其同组行为异常行相比较，自动识别并持续监控与此数据相关的高风险访问和活动。<br>DLP 事件评估 – 将 DLP 事件做多维度关联分析，比如说发生 DLP 事件的人，他的风险等级、是否有离职倾向、敏感数据下载/外发/打印的数量、频次、数据外流的目的地是否为竞争对手等等，从而进一步定位高风险。高风险人群的 DLP 事件优先处置，并且通过多维度分析往往也能进一步定位这些数据泄漏企图背后的动机。</p><h2 id="4-失陷主机"><a href="#4-失陷主机" class="headerlink" title="4 失陷主机"></a>4 失陷主机</h2><p>除了人员行为异常以外，重要的 IT 资产比如说各种应用服务器、重要的终端等行为异常检测对很多组织也是至关重要。例如，一个重要的应用服务器执行了一个非业务的应用或进程，打开了一个新的端口，外连了从未外连的地址/端口，忽然有长链接的 SSH 会话，系统目录下忽然出现新的可疑文件等等。这些异常行为往往是服务器被攻击的征兆，需要进一步分析与取证。<br>用 UEBA 技术定位失陷主机通常的思路是，基于相应设备和主机执行的高风险异常事件和活动，建立异常时间线，然后关联各种实体参数，包括：端点安全警报、漏洞扫描结果（常见漏洞评分系统[CVSS]）、用户或帐户的风险级别、访问的目标、请求的有效负载的数据包级别等等，从多维度检测任何异常活动或事件以确定风险评分。</p><h1 id="四、UEBA主要实现技术"><a href="#四、UEBA主要实现技术" class="headerlink" title="四、UEBA主要实现技术"></a>四、UEBA主要实现技术</h1><p>UEBA 是一个完整的系统，涉及到算法、工程等检测部分，以及用户实体风险评分排序、调查等用户交互、反馈。从架构上来看，UEBA 系统一般包含三个层次，分别是数据中心层、算法分析层、场景应用层。其中，算法分析层一般大数据计算平台之上运行实时分析、统计分析、关联分析、机器学习等分析引擎。<br><img src="https://img-blog.csdnimg.cn/40c8886fa2654532850b7134ce32b88f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="UEBA架构"></p><p>机器学习引擎实现，如基线及群组分析、异常检测、集成学习风险评分、安全知识图谱、强化学习等UEBA 核心技术。</p><h2 id="基线及群组分析"><a href="#基线及群组分析" class="headerlink" title="基线及群组分析"></a>基线及群组分析</h2><p>历史基线，是行为分析的重要部分，通过构建群组分析，可以跨越单个用户、实体的局限，看到更大的事实；通过对比群组，易于异常检测；通过概率评估可以降低误报，提升信噪比；组合基线分析、群组分析，可以构成全时空的上下文环境。</p><h2 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h2><p>异常检测关注发现统计指标异常、时序异常、序列异常、模式异常等异常信号，采用的技术包括孤立森林、K 均值聚类、时序分析、异常检测、变点检测等传统机器学习算法。现代的异常检测也利用深度学习技术，包括基于变分自编码器（VAE）的深度表征重建异常检测、基于循环神经网络（RNN）和长短时记忆网络（LSTM）的序列深度网络异常检测、图神经网络（GNN）的模式异常检测等。针对标记数据缺乏的现状，某些UEBA 系统能够采用主动学习技术（Active Learning）、自学习（Self Learning），充分发掘标记数据和无标记数据的价值。</p><h2 id="集成学习风险评分"><a href="#集成学习风险评分" class="headerlink" title="集成学习风险评分"></a>集成学习风险评分</h2><p>把安全运维从事件管理转换到用户、实体风险，极大的降低工作量、提升效率。其中，实现转换的关键在于使用集成学习进行风险评分。风险评分需要综合各种告警、异常，以及进行群组对比分析和历史趋势。同时，风险评分技术中用户间风险的传导同样重要，需要一套类似谷歌搜索使用的网页排名PageRank 算法的迭代评估机制。风险评分的好坏，将直接影响到UEBA 实施的成效，进而直接影响到安全运营的效率。</p><h2 id="安全知识图谱"><a href="#安全知识图谱" class="headerlink" title="安全知识图谱"></a>安全知识图谱</h2><p>知识图谱已经成为人工智能领域的热点方向，在网络安全中同样也有巨大的应用潜力。部分UEBA 系统已经支持一定的安全知识图谱能力，可以将从事件、告警、异常、访问中抽取出的实体及实体间关系，构建成一张网络图谱。任何一个事件、告警、异常，都可以集成到网络图谱中，直观、明晰的呈现多层关系，可以让分析抵达更远的边界，触达更隐蔽的联系，揭露出最细微的线索。结合攻击链和知识图谱的关系回放，还能够让安全分析师近似真实的复现攻击全过程，了解攻击的路径与脆弱点，评估潜在的受影响资产，从而更好的进行应急响应与处置。</p><h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>不同客户的环境数据源的多元性及差异性，以及用户对异常风险的定义各有不同， UEBA 需要具有一定的自适应性，输出更精准的异常风险。强化学习能够根据排查结果自适应地调整正负权重反馈给系统，进而得到更符合客户期望的风险评分。UEBA 给出异常信号后，结合安全管理人员的排查结果，获取反馈奖赏或惩罚，通过学习进行正负权重调整，从而让整体效果持续优化改进。</p><h1 id="五、UEBA行业发展趋势"><a href="#五、UEBA行业发展趋势" class="headerlink" title="五、UEBA行业发展趋势"></a>五、UEBA行业发展趋势</h1><p>Gartner《Market Guide for User and Entity Behavior Analytics》报告中指出：<br>终端用户在UEBA独立解决方案上的支出将呈复合式增长年增长率为48％，从2015年的5,000万美元增长到2020年的3.52亿美元。<br>UEBA解决方案供应商在2017年和2018年继续减少，主要是由于收购活动。Gartner预计该领域将继续整合，同时在其服务于相邻细分市场的产品中使用UEBA技术的厂商数量也在大幅增加。<br>到2021年，用户和实体行为分析（UEBA）市场将不再是一个独立的市场。<br>一些UEBA供应商现在将其市场战略路线聚焦于将其核心UEBA技术嵌入其他供应商的更传统的安全解决方案中。到2022年，UEBA的核心技术将嵌入80％的威胁检测和事件高级解决方案中（如SIEM）。<br>Gartner认为这一趋势将持续到2022年，届时UEBA将成为被更广泛的安全分析技术所取代。</p><p>IndustryARC《UEBA Market - Forecast(2020 - 2025)》报告：<br>到2025年，用户和实体行为分析市场预计将达到49亿美元，从2020年到2025年，复合年增长率为41.5％。<br>UEBA是一种用于检测内部风险，财务欺诈和针对性攻击的机制。该方法用于分析人类行为模式，然后使用统计分析和算法来识别差异。<br>UEBA是一种机器学习模型，可以通过检测保护异常来帮助阻止网络攻击者。UEBA使用高级分析，汇总日志和报告数据，并分析数据包，流，文件和其他类型的信息以及其他类型的威胁数据，以评估某些形式的活动和动作是否可能构成网络攻击。<br>UEBA的优势包括–内部威胁识别，防止数据泄露，识别和防止欺诈，可操作的风险信息以及IP数据的安全性。<br>UEBA逐渐成为对全面网络威胁和欺诈的最有希望的回应。软件提供商更专注于确保可靠的算法和集成分析，以及开发应用程序系统。</p><p>综合上述报告可以看出：<br>UEBA市场价值正在飞速上升，UEBA技术研究前景广阔。<br>UEBA发展方向不再是一个独立个体，而是倾向于将UEBA技术嵌入到其他高级安全解决方案中。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全常用术语</title>
      <link href="/posts/78dcbe69/"/>
      <url>/posts/78dcbe69/</url>
      
        <content type="html"><![CDATA[<p>网络信息安全术语是获取网络安全知识和技术的重要途径，常见的网络安全术语可以分为基础技术类、风险评估技术类、防护技术类、检测技术类、响应/恢复技术类、测评技术类等。</p><p>下面主要介绍常见的网络安全技术方面的术语</p><h2 id="一、基础技术类"><a href="#一、基础技术类" class="headerlink" title="一、基础技术类"></a>一、基础技术类</h2><p>基础技术类常见的是密码及加解密相关的技术<br><strong>密码（Cipher）</strong><br>一种用于加密和解密数据的算法。</p><p><strong>密码学（Cryptography）</strong><br>编码研究。同样，使用代码/密码/数学技术来保护数据并提供实体和数据的身份验证。</p><p><strong>密钥（Secret key）</strong><br>用于加密和解密的加密密钥，使对称密钥加密方案能够运行。</p><p><strong>编码(Encode)</strong><br>使用代码将一种符号转换为另外一种符号。</p><p><strong>加密(Encryption)</strong><br>使用密码来保护信息，这使任何没有密钥对其解密的人都无法读取。</p><p><strong>解密（Decryption）</strong><br>将编码文本解密为原始原始格式的过程。</p><p><strong>证书（Certificate）</strong><br>数字证书是数字身份验证的一种形式，它允许计算机，用户或组织安全地交换信息。</p><h2 id="二、攻击技术类"><a href="#二、攻击技术类" class="headerlink" title="二、攻击技术类"></a>二、攻击技术类</h2><p><strong>拒绝服务（Denial of Service）</strong><br>是指通过向 服务器 发送大量垃圾信息或干扰信息的 方式 ，导致服务器无法向正常用户提供服务的现象。</p><p><strong>分布式拒绝服务（Distributed Denial of Service）</strong><br>指处于不同位置的多个攻击者同时向一个或数个目标发动攻击，或者一个攻击者控制了位于不同位置的多台机器并利用这些机器对受害者同时实施攻击。由于攻击的发出点是分布在不同地方的，这类攻击称为分布式拒绝服务攻击。</p><p><strong>网页篡改（Website Distortion）</strong><br>网页篡改是恶意破坏或更改网页内容，使网站无法正常工作或出现黑客插入的非正常网页内容。</p><p><strong>网页仿冒（Phishing）</strong><br>网页仿冒是通过构造与某一目标网站高度相似的页面（俗称钓鱼网站），并通常以垃圾邮件、即时聊天、手机短信或网页虚假广告等方式发送声称来自于被仿冒机构的欺骗性消息，诱骗用户访问钓鱼网站，以获取用户个人秘密信息（如银行账号和账户密码）。</p><p><strong>网页挂马（Website Malicious Code）</strong><br>网页挂马是通过在网页中嵌入恶意代码或链接，致使用户计算机在访问该页面时被植入恶意代码。</p><p><strong>域名劫持（DNS Hijack）</strong><br>域名劫持是通过拦截域名解析请求或篡改域名服务器上的数据，使得用户在访问相关域名时返回虚假IP地址或使用户的请求失败。</p><p><strong>路由劫持（Routing Hijack）</strong><br>路由劫持是通过欺骗方式更改路由信息，以导致用户无法访问正确的目标，或导致用户的访问流量绕行黑客设定的路径，以达到不正当的目的。</p><p><strong>垃圾邮件（Spam）</strong><br>垃圾邮件是将不需要的消息（通常是未经请求的广告）发送给众多收件人。包括：收件人事先没有提出要求或者同意接受的广告、电子刊物、各种形式的宣传品等宣传性的电子邮件；收件人无法拒收的电子邮件；隐藏发件人身份、地址、标题等信息的电子邮件；含有虚假的信息源、发件人、路由等信息的电子邮件。</p><p><strong>特洛伊木马（Trojan Horse）</strong><br>特洛伊木马（简称木马）是以盗取用户个人信息，甚至是远程控制用户计算机为主要目的的恶意代码。由于它像间谍一样潜入用户的电脑，与战争中的 “木马”战术十分相似，因而得名木马。按照功能，木马程序可进一步分为：盗号木马、网银木马、窃密木马、远程控制木马、流量劫持木马和其他木马六类。</p><p><strong>网络蠕虫（Network Worm）</strong><br>网络蠕虫是指能自我复制和广泛传播，以占用系统和网络资源为主要目的恶意代码。按照传播途径，蠕虫可进一步分为：邮件蠕虫、即时消息蠕虫、U盘蠕虫、漏洞利用蠕虫和其他蠕虫五类。</p><p><strong>僵尸程序（Bot）</strong><br>僵尸程序是用于构建僵尸网络以形成大规模攻击平台的恶意代码。按照使用的通信协议，僵尸程序可进一步分为：IRC僵尸程序、Http僵尸程序、P2P僵尸程序和其他僵尸程序四类。</p><p><strong>僵尸网络（Bot Net）</strong><br>僵尸网络是被黑客集中控制的计算机群，其核心特点是黑客能够通过一对多的命令与控制信道操纵感染僵尸程序的主机执行相同的恶意行为，如可同时对某目标网站进行分布式拒绝服务攻击，或发送大量的垃圾邮件等。</p><p><strong>SQL注入（SQL injection）</strong><br>一种使用代码注入来攻击由数据驱动的应用程序的策略。恶意注入的SQL代码可以执行多种操作，包括将所有数据转储到攻击者控制的位置的数据库中。通过这种攻击，恶意黑客可以欺骗身份，修改数据或篡改数据，泄露机密数据，删除和销毁数据或使其不可用。他们还可以完全控制数据库。</p><p><strong>网络钓鱼（Phishing）</strong><br>大量电子邮件要求提供敏感信息或将其推送到假网站。这些电子邮件通常没有针对性。</p><p><strong>宏病毒（Macro virus）</strong><br>一种恶意代码，使用文档应用程序的宏编程功能来执行不当行为，自我复制并在整个系统中传播。</p><p><strong>恶意代码（Malicious code）</strong><br>恶意代码是指在未经授权的情况下，在信息系统中安装、执行以达到不正当目的的程序。旨在损害信息系统的机密性，完整性或可用性。</p><p><strong>恶意广告（Malvertising）</strong><br>使用在线广告投放恶意软件。</p><p><strong>恶意软件（Malware）</strong><br>恶意软件的简称。任何可能对组织或个人造成不利影响的病毒，特洛伊木马，蠕虫，代码或内容。</p><p><strong>中间人攻击（MitM）</strong><br>网络罪犯将自己置于受害者和受害者试图访问的网站之间，以获取正在传输的信息或对其进行更改。有时缩写为MITM，MIM，MiM或MITMA。</p><p><strong>逻辑炸弹（Logic bomb）</strong><br>一段带有一组秘密指令的代码。它被插入系统并由特定操作触发。该代码通常执行恶意操作，例如删除文件。</p><p><strong>高级持久威胁（APT）</strong><br>一种网络攻击，使用复杂的技术持续对目标政府和公司进行网络间谍活动或其他恶意活动。通常由具有丰富专业知识和大量资源的对手进行-通常与民族国家参与者相关。<br>这些攻击往往来自多个入口点，并且可能使用多个攻击媒介（例如，网络攻击，物理攻击，欺骗攻击）。一旦系统遭到破坏，结束攻击可能非常困难。</p><p><strong>被动攻击（Passive attack）</strong><br>攻击者试图获取机密信息以将其提取。因为他们不尝试更改数据，所以这种类型的攻击更难检测-因此称为“被动”。</p><p><strong>密码嗅探（Password sniffing）</strong><br>通过监视或监听网络流量以检索密码数据来收集密码的技术。</p><p><strong>有效载荷（Payload）</strong><br>执行恶意操作的恶意软件元素–网络安全性等同于导弹的爆炸性电荷。通常说来是造成破坏的。</p><p><strong>勒索软件（Ransomware）</strong><br>勒索软件是一种恶意软件（恶意软件），它对PC或移动设备上的所有数据进行加密，从而阻止数据所有者对其进行访问。感染发生后，受害者会收到一条消息，告知他/她必须支付一定数量的钱（通常以比特币支付）才能获得解密密钥。通常，支付赎金也有时间限制。如果受害者支付赎金，则不能保证解密密钥会被移交。最可靠的解决方案是至少在三个不同的位置备份数据（以确保冗余），并使这些备份保持最新状态，这样您就不会失去重要的进展。</p><p><strong>社会工程学（Social engineering）</strong><br>操纵人们执行特定的动作或泄露对攻击者有用的信息。操纵策略包括谎言，心理技巧，贿赂，勒索，假冒和其他类型的威胁。社交工程通常用于提取数据并获得对信息系统的未授权访问，这些信息系统可以是单个私人用户，也可以是组织的信息系统。</p><h2 id="三、防护技术类"><a href="#三、防护技术类" class="headerlink" title="三、防护技术类"></a>三、防护技术类</h2><p><strong>访问控制（Access Control）</strong><br>访问控制是按用户身份及其所归属的某项定义组来限制用户对某些信息项的访问，或限制对某些控制功能的使用的一种技术。</p><p><strong>防火墙（Firewall）</strong><br>网络或设备周围的虚拟边界，用于保护网络或设备免受不必要的访问。可以是硬件或软件。</p><p><strong>入侵防御系统（Intrusion Prevention System）</strong><br>是一部能够监视网络或网络设备的网络资料传输行为的计算机网络安全设备，能够及时的中断、调整或隔离一些不正常或是具有伤害性的网络资料传输行为。</p><p><strong>防毒软件(Antivirus)</strong><br>防病毒软件用于监视计算机或网络，以检测从恶意代码到恶意软件的网络安全威胁。防病毒程序不仅可以警告您威胁的存在，还可以删除或消除恶意代码。</p><p><strong>蜜罐（蜜网）Honeypot (honeynet)</strong><br>诱骗系统或网络，用于吸引潜在的攻击者，通过检测攻击或使攻击发生偏转来保护实际系统。一个学习攻击方式的好工具。多个蜜罐可以组成一个蜜网。</p><p><strong>安全信息和事件管理（SIEM）</strong><br>用于监视，记录，提供警报和分析安全事件以支持威胁检测和事件响应的软件。</p><p><strong>安全监控（Security monitoring）</strong><br>从一系列安全系统中收集数据，并将这些信息与威胁情报进行关联和分析，以识别出受到威胁的迹象。</p><h2 id="四、检测技术类"><a href="#四、检测技术类" class="headerlink" title="四、检测技术类"></a>四、检测技术类</h2><p><strong>入侵检测（Instrusion Detection）</strong><br>是一种对网络传输进行即时监视，在发现可疑传输时发出警报或者采取主动反应措施的网络安全设备。</p><p><strong>漏洞扫描（Vulnerability Scanning）</strong><br>是对网络设备及应用服务的可用性、安全性与合规性等进行扫描，发现可利用漏洞的一种安全检测（渗透攻击）行为。</p><p><strong>威胁分析（Threat analysis）</strong><br>对单个威胁的特征进行详细评估。</p><h2 id="五、响应-恢复技术类"><a href="#五、响应-恢复技术类" class="headerlink" title="五、响应/恢复技术类"></a>五、响应/恢复技术类</h2><p><strong>应急响应（Emergency Response）</strong><br>应急响应通常是指一个组织为了应对各种意外事件的发生所做的准备工作以及在突发事件发生时或者发生后所采取的措施。</p><p><strong>灾难恢复（Disaster Recovery）</strong><br>灾难恢复也称灾备，指自然或人为 灾害 后，重新启用 信息系统 的 数据 、 硬件 及 软体 设备，恢复正常商业运作的过程。</p><p><strong>备份文件（Backup files）</strong><br>一种用户以后数据恢复的文件</p><p><strong>备份（Backup）</strong><br>为应付文件、数据丢失或损坏等可能出现的意外情况，将电子计算机存储设备中的数据复制到磁带等大容量存储设备中。从而在原文中独立出来单独贮存的程序或文件副本。</p><p><strong>应急预案（Contingency plan）</strong><br>一种关于备份、应急响应和灾后恢复的计划。</p><p><strong>灾难恢复计划（Disaster recovery plan）</strong><br>信息系统灾难恢复过程中所需要的任务、行动、数据和资源的文件，用于指导相关人员在预定的灾难恢复目标内恢复系统系统支持的关键业务功能。</p><h2 id="六、评测技术类"><a href="#六、评测技术类" class="headerlink" title="六、评测技术类"></a>六、评测技术类</h2><p><strong>评价方案（Evaluation scheme）</strong><br>针对一个特定的团体，由某一评价机构根据指定标准制定的行政管理的与规章制度的框架。</p><p><strong>渗透测试（Penetration testing）</strong><br>一种旨在探查和暴露信息系统中的安全性弱点以便对其进行修复的测试。</p><p><strong>质量评价（Quality evaluation）</strong><br>对实体满足规定要求程度而进行的系统性检查</p><p><strong>威胁评估（Threat assessment）</strong><br>识别或评估具有或表明可能危害生命，信息，操作和/或财产的实体，动作或事件（自然或人为）的产品或过程。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全基本属性</title>
      <link href="/posts/ec5a2543/"/>
      <url>/posts/ec5a2543/</url>
      
        <content type="html"><![CDATA[<p>常见的网络信息安全基本属性主要有机密性、完整性、可用性、不可抵赖性和可控性等，其中<strong>机密性（Confidentiality）、完整性（Integrity）、可用性（Availability）被称为网络信息系统核心的CIA安全属性</strong>，此外还有其他的安全属性包括：真实性、时效性、合规性、隐私性等。<br><img src="https://img-blog.csdnimg.cn/4ec5c965ed574be4b904588f50e889bf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_9,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="网络信息安全基本属性"></p><h2 id="机密性"><a href="#机密性" class="headerlink" title="机密性"></a>机密性</h2><p>机密性（Confidentiality）是指网络信息不泄露给非授权的用户、实体或程序，能够防止非授权者获取信息。这些信息不仅包括国家机密，也包括企业和社会团体的商业机密和工作机密，还包括个人信息。例如，网络信息系统上传递口令敏感信息，若一旦攻击者通过监听手段获取到，就有可能危及网络系统的整体安全。人们在应用网络时很自然地要求网络能提供保密性服务，而被保密的信息既包括在网络中传输的信息，也包括存储在计算机系统中的信息。就像电话可以被窃听一样，网络传输信息也可以被窃听，解决的办法就是对传输信息进行加密处理。存储信息的机密性主要通过访问控制来实现，不同用户对不同数据拥有不同的权限。</p><h2 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h2><p>完整性（Integrity）是指网络信息或系统未经授权不能进行改变的特性。即信息在存储或传输过程中保持不被修改、不被破坏和丢失的特性。数据的完整性是指保证计算机系统上的数据和信息处于一种完整和未受损害的状态，这就是说数据不会因为有意或无意的事件而被改变或丢失。除了数据本身不能被破坏外，数据的完整性还要求数据的来源具有正确性和可信性，也就是说需要首先验证数据是真实可信的，然后再验证数据是否被破坏。影响数据完整性的主要因素是人为的蓄意破坏，也包括设备的故障和自然灾害等因素对数据造成的破坏。</p><h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><p>可用性（Availability）是指合法许可的用户能够及时获取网络信息或服务的特征，即可授权实体或用户访问并按要求使用信息的特性。简单地说，就是保证信息在需要时能为授权者所用，防止由于主客观因素造成的系统拒绝服务。例如，网站能够给用户提供正常的网页访问服务，防止拒绝服务攻击。</p><h2 id="不可抵赖性"><a href="#不可抵赖性" class="headerlink" title="不可抵赖性"></a>不可抵赖性</h2><p>不可抵赖性也称不可否认性。是指防止网络信息系统相关用户否认其活动行为的特性。在信息交换过程中，确信参与方的真实同一性，即所有参与者都不能否认和抵赖曾经完成的操作和承诺。简单地说，就是发送信息方不能否认发送过信息，信息的接收方不能否认接收过信息。利用信息源证据可以防止发信方否认已发送过信息，利用接收证据可以防止接收方事后否认已经接收到信息。数据签名技术是解决不可否认性的重要手段之一。</p><h2 id="可控性"><a href="#可控性" class="headerlink" title="可控性"></a>可控性</h2><p>可控性是指网络信息系统责任主体对其具有管理、支配能力的属性，能够根据授权规则对系统进行有效掌握和控制，使得管理者有效地控制系统的行为和信息的使用，符合系统运行目标。是人们对信息的传播路径、范围及其内容所具有的控制能力，如：不允许不良内容通过公共网络进行传输，使信息在合法用户的有效掌控之中</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除常见的网络信息系统安全特性，还有真实性、时效性、合规性、公平性、可靠性、可生存性和隐私性等，这些安全特性适用于不同类型的网络信息系统，其要求程度有所差异。</p><h3 id="1-真实性"><a href="#1-真实性" class="headerlink" title="1.真实性"></a>1.真实性</h3><p>真实性是指网络空间信息与实际物理空间、社会空间的客观事实保持一致性。如，网络谣言信息不符合真实情况，违背了客观事实。</p><h3 id="2-时效性"><a href="#2-时效性" class="headerlink" title="2.时效性"></a>2.时效性</h3><p>时效性是指网络空间信息、服务及系统能够满足时间约束要求。如，汽车安全驾驶的智能控制系统要求信息具有实时性，信息在规定时间范围内才有效。</p><h3 id="3-合规性"><a href="#3-合规性" class="headerlink" title="3.合规性"></a>3.合规性</h3><p>合规性是指网络信息、服务及系统符合法律法规政策、标准规范等要求。如，网站内容如何法律法规政策要求等。</p><h3 id="4-公平性"><a href="#4-公平性" class="headerlink" title="4.公平性"></a>4.公平性</h3><p>公平性是指网络信息系统相关主体处于同等地位处理相关任务，任何一方不占据优势的特性要求。如，电子合同签订双方符合公平性要求，在同一时间签订合同。</p><h3 id="5-可靠性"><a href="#5-可靠性" class="headerlink" title="5.可靠性"></a>5.可靠性</h3><p>可靠性是指网络信息系统在规定条件及时间下，能够有效完成预定的系统功能的特性。</p><h3 id="6-可生存性"><a href="#6-可生存性" class="headerlink" title="6.可生存性"></a>6.可生存性</h3><p>可生存性是指网络信息系统在安全受损的情形下，提供最小化、必要的服务功能，能够支撑业务继续运行的安全特性。</p><h3 id="7-隐私性"><a href="#7-隐私性" class="headerlink" title="7.隐私性"></a>7.隐私性</h3><p>隐私性是指有关个人的敏感信息不对外公开的安全属性，如个人的身份证号码、住址、电话号码、工资收入、疾病状况、社交关系等。</p><p>网络攻击是指损害网络系统安全属性的危害行为。危害行为导致网络系统的机密性、可用性、可控性、真实性、抗抵赖性等受到不同程度的破坏。常见的危害行为有四个基本类型：</p><ul><li>信息泄露攻击； </li><li>完整性破坏攻击； </li><li>拒绝服务攻击； </li><li>非法使用攻击。</li></ul><p>本文整理自《信息安全工程师教程第2版》</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全之常用安全设备功能及作用</title>
      <link href="/posts/4696bbec/"/>
      <url>/posts/4696bbec/</url>
      
        <content type="html"><![CDATA[<p>随着网络技术发展，网络威胁无孔不入，网络攻击手段呈现复杂性及多变性的趋势。要建立防御体系应从通信网络、网络边界、局域网络内部、各种业务应用平台等各个层次落实各种安全措施，形成纵深防御体系。单靠一种或几种安全设备就想保护整个网络是不可能的事情。因此，为了满足不同防护需求的安全设备应运而生。有的设备是为了严防非授权访问。有的设备是为了实时检测，拦截攻击行为。有的设备是为了自查自审，发现自身存在的问题。每一种安全设备分工都不同，设备缺失肯定会使防御体系失效造成安全隐患。</p><p>本文介绍常用的安全设备及其能力</p><h3 id="网络安全审计"><a href="#网络安全审计" class="headerlink" title="网络安全审计"></a>网络安全审计</h3><p>网络安全审计通过对网络数据的采集、分析、识别，实时动态监测通信内容、网络行为和网络流量，发现和捕获各种敏感信息、违规行为，实时报警响应，全面记录网络系统中的各种会话和事件，实现对网络信息的智能关联分析、评估及安全事件的准确定位，为整体网络安全策略的制定提供权威可靠的支持。</p><ul><li>内容审计<br>可对网页内容、邮件、数据库操作、论坛、即时通讯等提供完整的文本、图片和音视频内容检测、信息还原功能；并可自定义关键字库，进行细粒度的审计追踪。</li><li>行为审计<br>根据设定的行为审计策略，对网站访问、邮件收发、数据库访问、远程终端访问、文件上传下载、即时通讯、论坛、移动应用、在线视频、P2P 下载、网络游戏等网络应用行为进行监测，对符合行为策略的事件实时告警并记录。</li><li>流量审计<br>支持基于智能协议识别的流量分析功能；实时统计出当前网络中的各种协议流量，进行综合流量分析，提供详细的流量报表；可以统计指定协议流量的IP TOP N，为流量管理策略的制定提供可靠支持。</li></ul><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p>通过漏洞扫描全面发现信息系统存在的安全漏洞、安全配置问题、应用系统安全漏洞，检查系统存在的弱口令，收集系统不必要开放的账号、服务、端口，形成整体安全风险报告。</p><ul><li>全面系统脆弱性发现<br>能够全方位检测系统存在的脆弱性，发现信息系统存在的安全漏洞、安全配置问题、应用系统安全漏洞，检查系统存在的弱口令，收集系统不必要开放的账号、服务、端口，形成整体安全风险报告，帮助安全管理人员先于攻击者发现安全问题，及时进行修补。</li><li>风险统一分析<br>支持全方位的安全漏洞、安全配置、应用系统安全漏洞扫描，通过安全风险计算方法，对网络系统中多个方面的安全脆弱性统一进行分析和风险评估，给出总体安全状态评价，全面掌握信息系统安全风险。</li><li>识别非标准端口<br>应用先进的非标准端口识别技术、以及丰富的协议指纹库，能够快速准确的识别非标准端口上的应用服务类型，并进一步进行漏洞检测，避免扫描过程中的漏报和误报。</li><li>漏洞、配置知识库<br>依托安全知识库，涵盖所有主流基础系统、应用系统、网络设备等网元对象，提供系统<br>的配置检查库，提供专业安全厂商的加固修补建议，以及多个行业的安全配置检查标准。</li></ul><h3 id="Web漏洞扫描"><a href="#Web漏洞扫描" class="headerlink" title="Web漏洞扫描"></a>Web漏洞扫描</h3><p>定位于Web 脆弱性评估，实现全面Web 应用安全检测。帮助用户全面发现Web 漏洞，准确掌控网站风险，深度跟踪漏洞态势，提升快速响应能力。</p><ul><li>漏洞扫描及验证<br>支持系统漏洞扫描以及Web 漏洞扫描，支持Web 应用漏洞分类，全面覆盖OWASP TOP10 应用风险，高中危漏洞专家级验证。</li><li>网站挂马及黑链检测<br>依托沙箱检测技术，识别网站页面中的恶意代码，对潜藏在用户网页中的黄赌毒私服等广告黑链进行周期性检测，并将挂马及黑链情况及时邮件提醒。</li><li>网站篡改检测<br>依托相似度对比技术，识别网页变更状态，并通知用户。</li><li>网页敏感内容检测<br>依托于敏感内容词库，识别网页中的敏感内容，并邮件提醒。</li><li>可用性检测及 DNS 解析检测<br>依托多个检测节点，多条检测线路，识别网站运营是否稳定的问题，并邮件提醒。</li></ul><h3 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h3><p>针对云主机、云数据库、网络设备等的运维权限、运维行为进行管理和审计。主要解决云上IT运维过程中操作系统账号复用、数据泄露、运维权限混乱、运维过程不透明等难题。</p><ul><li>登录功能<br>支持对X11、linux、unix、数据库、网络设备、安全设备等一系列授权账号进行密码的自动化周期更改，简化密码管理，让使用者无需记忆众多系统密码，即可实现自动登录目标设备，便捷安全。</li><li>账号管理<br>支持统一账户管理策略，能够实现对所有服务器、网络设备、安全设备等账号进行集中管理，完成对账号整个生命周期的监控，并且可以对设备进行特殊角色设置如：审计巡检员、运维操作员、设备管理员等自定义设置，以满足审计需求。</li><li>身份认证<br>提供统一的认证接口，对用户进行认证，支持身份认证模式包括动态口令、静态密码、硬件key、生物特征等多种认证方式，设备具有灵活的定制接口，可以与其他第三方认证服务器之间结合；安全的认证模式，有效提高认证的安全性和可靠性。</li><li>资源授权<br>提供基于用户、目标设备、时间、协议类型IP、行为等要素实现细粒度的操作授权，最大限度保护用户资源的安全。</li><li>访问控制<br>支持对不同用户进行不同策略的制定，细粒度的访问控制能够最大限度的保护用户资源的安全，严防非法、越权访问事件的发生。</li><li>操作审计<br>能够对字符串、图形、文件传输、数据库等全程操作行为审计；通过设备录像方式实时监控运维人员对操作系统、安全设备、网络设备、数据库等进行的各种操作，对违规行为进行事中控制。对终端指令信息能够进行精确搜索，进行录像精确定位。</li></ul><h3 id="日志审计"><a href="#日志审计" class="headerlink" title="日志审计"></a>日志审计</h3><p>日志审计是针对大量分散设备的异构日志进行高效采集、统一管理、集中存储、统计分析，可协助企业满足等保合规要求、高效统一管理资产日志并为安全事件的事后取证据供依据。</p><ul><li>安全日志源管理<br>按照需要接入的日志源数量进行服务，提供多种日志接入方式，支持主动、被动采集。</li><li>日志采集<br>提供全面的日志采集能力：支持第三方安全设备、网络设备、数据库、windows/linux主机日志、web 服务器日志、虚拟化平台日志以及自定义等日志；提供强大的数据源管理功能:支持数据源的信息展示与管理、采集器的信息展示与管理以及agent 的信息展示与管理；提供分布式外置采集器、Agent 等多种日志采集方式；支持IPv4、IPv6 日志采集、分析以及检索查询。</li><li>日志存储<br>提供原始日志、范式化日志的存储，可自定义存储周期。</li><li>日志检索<br>提供丰富灵活的日志查询方式，支持全文.key-value、多kv布尔组合、括弧、正则、模糊等检索；提供便捷的日志检索操作，支持保存检索、从已保存的检索导入见多条件等。</li><li>报表管理<br>支持丰富的内置报表以及灵活的自定义报表模式，支持编辑报表的目录接口、引用统计项、设置报表标题、展示页眉和页码、报表配置基本内容（名称、描述等）；支持实时报表、定时报表、周期性任务报表等方式；支持html、pdf、word 格式的报表文件以及报表logo<br>的灵活配置。</li><li>日志分析<br>支持对各类应用系统产生的各类日志的分析功能。</li></ul><h3 id="数据库审计"><a href="#数据库审计" class="headerlink" title="数据库审计"></a>数据库审计</h3><p>数据库审计能够实时记录网络上的数据库活动，对数据库操作进行细粒度审计的合规性管理，对数据库遭受到的风险行为进行告警，对攻击行为进行阻断。通过对用户访问数据库行为的记录、分析和汇报，用来帮助用户事后生成合规报告、事故追根溯源，同时加强内外<br>部数据库网络行为记录，提高数据资产安全。</p><ul><li>实时告警<br>风险操作：支持通过操作类型、操作对象、风险等级等多种元素细粒度定义要求监控的风险操作行为。<br>SQL 注入：数据库安全审计提供SQL 注入库，可以基于SQL 命令特征或风险等级，发现数据库异常行为立即告警。<br>系统资源：当系统资源（CPU、内存和磁盘）占用率达到设置的告警阈值时立即告警。</li><li>多维度线索分析<br>行为线索：支持审计时长、语句总量、风险总量、风险分布、会话统计、SQL 分布等多维度的快速分析。<br>会话线索：支持根据时间、数据库用户、客户端等多角度进行分析。<br>语句线索：提供时间、风险等级、数据用户、客户端IP、数据库IP、操作类型、规则等多种语句搜索条件。</li><li>用户行为发现审计<br>关联应用层和数据库层的访问操作：提供内置或自定义隐私数据保护规则，防止审计日志中的隐私数据（例如，账号密码）在控制台上以明文显示。</li><li>精细化报表<br>会话行为：提供客户端和数据库用户会话分析报表。<br>风险操作：提供风险分布情况分析报表。<br>合规报表：提供满足数据安全标准（例如Sarbanes-Oxley）的合规报告。</li></ul><h3 id="网页防篡改"><a href="#网页防篡改" class="headerlink" title="网页防篡改"></a>网页防篡改</h3><p>网页防篡改是针对网站篡改攻击的防护，通过文件底层驱动技术对Web站点目录提供全方位的保护，为防止黑客、病毒等对目录中的网页、电子文档、图片、数据库等任何类型的文件进行非法篡改和破坏提供解决方案。</p><ul><li>篡改防护<br>同时对多台网站服务器文件，对同一台服务器内的多个web server，对同一web server内的多个virtual host进行防篡改；异地（非网站目录）保留篡改后页面快照，支持网站篡改检测；保护防篡改内嵌模块和守护进程。</li><li>防篡改分析<br>支持页面文件/结构/元素的哈希（MD5）值篡改检测、图片相似性比较。</li><li>攻击防护<br>能够防止SQL 数据库注入式攻击；能够防止跨站脚本漏洞；能够防止网站盗链。</li><li>发布备份<br>支持内容发布；支持实时同步；支持手动同步；可按照条件（按时间戳前，后，区间；按子文件夹；按WEB 服务器）；支持双机热备功能；实体间通信采用SSL 加密。</li><li>日志告警<br>保存系统日志；文件传输日志；支持篡改告警、SQL 注入告警、盗链告警，告警通知<br>支持手机短信通知、邮件通知、管理界面警示框；可通过图形报表综合统计和分析。</li></ul><h3 id="入侵检测系统"><a href="#入侵检测系统" class="headerlink" title="入侵检测系统"></a>入侵检测系统</h3><p>入侵检测系统是一种对网络传输进行即时监视，在发现可疑传输时发出警报或者采取主动反应措施的网络安全系统。根据预先设定的安全策略，它是一种积极主动的安全防护技术。</p><ul><li>敏感数据外发检测<br>能够识别并检测特定格式文件的外发，同时能够检测出文件中包含的敏感数据，进行告<br>警，保护企业敏感数据，防止敏感数据泄露造成的损失。</li><li>客户端攻击检测<br>增加针对主流客户端应用程序的攻击签名规则，如Word、Excel、PDF、Firefox 等，增强客户终端应用程序的安全检测能力。</li><li>服务器非法外联检测<br>通过服务器的自学习功能或手动设置服务器正常外联行为，建立合法连接，能够检测服务器异于该合法连接的非法外联行为，及时产生告警信息通知网络管理人员，从而检测是否存在跳转等攻击行为。</li><li>僵尸网络检测<br>基于实时的信誉机制，结合企业级和全球信誉库，可有效检测恶意URL、僵尸网络，保护用户在访问被植入木马等恶意代码的网站地址时不受侵害，有效检测Web 威胁，并能及时发现网络中可能出现的僵尸网络主机和C&amp;C 连接。</li></ul><h3 id="Web应用防火墙"><a href="#Web应用防火墙" class="headerlink" title="Web应用防火墙"></a>Web应用防火墙</h3><p>基于对Web 流量的解码和分析，可应对Web 应用中的各类攻击，如SQL 注入、XSS注入、跨站请求伪造攻击、Cookie 篡改以及应用层Web 攻击等，能有效解决网页挂马、敏感信息泄露等安全问题，充分保障Web应用安全。通过精细的配置将多种Web安全检测方法连结成一套完整的安全体系，能够在IPv4、IPv6 及二者混合环境中抵御OWASP Top 10等各类Web安全威胁，通过服务化方式快速交付，保卫Web 应用免遭当前和未来的安全威胁。</p><ul><li>Web 应用攻击防护<br>内置多种防护策略，可选择进行 SQL 注入、XSS 攻击、命令注入、非法HTTP 协议请求、常见Web 服务器漏洞攻击、扫描防护等。</li><li>Web 漏洞<br>Web 服务器漏洞探测，Web 服务器漏洞扫描（模拟攻击，判断缺陷，自动配置对应规则），及时发现漏洞隐患。</li><li>注入攻击防护<br>SQL 注入防御、LDAP 注入防御、命令注入防护（OS 命令，webshell 等）、XPath 注入防御、Xml/Json 注入防御。</li><li>IP 访问控制<br>支持对指定IP 的加白和恶意IP 的封禁。</li><li>URL 访问控制<br>支持对URL 进行黑白名单控制。</li><li>爬虫防护<br>基于源IP 周期判断访问数，防护恶意访问。</li></ul><h3 id="下一代防火墙"><a href="#下一代防火墙" class="headerlink" title="下一代防火墙"></a>下一代防火墙</h3><p>下一代防火墙采用高度一体化的架构设计方案，将所有的安全特性纳入到一体化的安全引擎。将传统五元组访问控制与具有下一代防火墙特征能力有机地结合起来，提供一个全新的网络边界防护解决方案。</p><ul><li>应用、用户识别能力<br>可识别大部分应用，并可辅助用户对这些应用进行高效管理和筛查，包括5 维度分类组织，基于特性查询应用、自定义特殊应用等。</li><li>监控统计<br>对设备数据进行统计，并以柱状图、折线图、表格、报表、日志等方式呈现出来，帮助用户通过统计数据掌握设备状况，排查问题。</li><li>用户认证<br>对用户进行识别，通过认证的用户可以访问对应的管理资源。</li><li>访问控制<br>划分安全区域和非安全区域，区域之间的访问基于安全策略进行控制。</li><li>入侵防御<br>实时监控多种网络攻击并根据配置对网络攻击进行阻断等操作。</li><li>病毒过滤<br>探测各种病毒威胁，例如恶意软件、恶意网站等，并且根据配置对发现的病毒进行处理。</li><li>DNS 重定向<br>支持对某一域名重定向到另一域名的功能。</li><li>页面访问控制<br>针对不同用户的权限对页面的访问进行区别。</li><li>带宽管理<br>能够管理和优化网络带宽，提高用户的网络体验和带宽资源利用率。</li><li>云沙箱<br>基于云端架构的恶意软件虚拟运行环境，发现未知威胁，多重静态检测引擎快速过滤正常文件及已知威胁，提升沙箱检测效率。</li><li>僵尸网络 C&amp;C 防护<br>监控 C&amp;C 连接发现内网肉鸡，阻断僵尸网络/勒索软件等高级威胁进一步破坏。</li><li>IP 信誉库<br>识别过滤各种已知风险 IP，根据配置对风险IP 进行记录或阻断处理。</li><li>封账号<br>支持对网络账户封停的功能。</li><li>包过滤<br>支持对网络中的数据包的区分和限制功能。</li><li>授权管理<br>集中管理功能授权并可进行不同种类授权的统一下发。</li><li>传统防火墙功能特性<br>兼容传统防火墙功能特性，包括访问控制、日志报表、会话管理等。</li></ul><h3 id="入侵防护系统"><a href="#入侵防护系统" class="headerlink" title="入侵防护系统"></a>入侵防护系统</h3><p>入侵防护系统是一个监视网络或网络设备的网络资料传输行为的系统，能够深入网络数据内部，即时中断、调整或隔离一些有害数据流。入侵防护系统可主动拦截黑客攻击、据虫、网络病毒、后门木马、DoS 等恶意流量，保护企业信息系统和网络架构免受侵害，防止操作<br>系统和应用程序损坏或宕机。</p><ul><li>敏感数据保护<br>提供敏感数据识别、数据安全审计、数据脱敏、智能异常检测等数据安全能力，形成一体化的数据安全解决方案。</li><li>高级威胁防御<br>高级威胁防御能够基于敏感数的外泄、文件识别、服务器非法外联等异常行为检测，实现内网的高级威胁防御功能。</li><li>恶意文件防御<br>网络中存在大量恶意文件，通过网站文件服务器、邮件服务器实现传播，对企业网络安全构成潜在威胁。对网络中传送的文件，进行快速检测，比对文件信誉，对发现恶意的文件进行告警和阻断。</li><li>网址/网站检测分析<br>支持对网站的URL 进行检测，并分析其是否是恶意网能力。</li></ul><h3 id="防病毒"><a href="#防病毒" class="headerlink" title="防病毒"></a>防病毒</h3><p>防病毒可以对计算机病毒、木马和恶意软件等一切已知的对计算机有危害的程序代码进行清除，提供终端查杀病毒、软件管理、漏洞补丁、统一升级管理等功能。</p><ul><li><p>安全防御<br>能够精准识别、分析及响应病毒传播、0day 攻击及APT 攻击等异常行为。</p></li><li><p>主机防火墙<br>支持对IP、端口协议及访问方向等维度过滤，能智能识别网络协议，同时可通过IP 黑<br>白名单，控制终端只能访问指定目标地址，或指定来源IP 地址访问。</p></li><li><p>漏洞加固<br>实时扫描记录终端的操作系统及常用应用软件漏洞，掌握全网终端漏洞情况及补丁修复。</p></li><li><p>勒索病毒防御<br>基于HIPS 的勒索者主动防御机制，蠕虫病毒、勒索病毒、宏病毒等已知未知威胁防范无忧。</p></li><li><p>安全审计<br>对攻击、病毒及漏洞等终端运行信息，以及上网行为、U 盘使用及文件操作等终端行为信息进行统一收集。</p></li><li><p>软件管理<br>记录全网安装软件清单以及每种软件安装的终端明细，以及软件使用时长。</p></li><li><p>流量管控<br>对终端流量管理包括总流量、上行及下行等管理，同时支持升级下载及日志上传等细粒度的流量管理。</p></li></ul><h3 id="终端检测与响应"><a href="#终端检测与响应" class="headerlink" title="终端检测与响应"></a>终端检测与响应</h3><p>利用终端检测响应，对终端的运行状态进行检测和监控，对进程、文件和配置等进行分析，对异常行为进行处理，确保主机安全，从而实现东西向防护。</p><ul><li>病毒及恶意程序防护<br>基于文件动作行为特征模型分析查杀，主动防御型查杀，文件黑白名单管理，文件多算法(MD5、SHA1、SHA256)校验。</li><li>攻击与威胁防护<br>检测模式，拦截模式，支持端口扫描、泛洪攻击、TCP 洪水攻击、漏洞攻击、注册表安全检测等。</li><li>主机网络访问隔离<br>基于主机维度，定义出入站网络访问，能自定义网络访问对象和端口对象，并记录违规访问日志，可追溯网络访问发起的进程及进程详细路径和进程文件安全性。</li><li>终端环境强控<br>通过设定终端运行的白环境，达到除白名单外的文件无法运行。</li><li>安全基线检查<br>同时含盖 Windows 和Linux 平台，支持帐号与口令检查、密码生存周期检查、远程登录检查、网络与服务检查、日志审计检查、防火墙检查、系统安全配置检查等内容，核查项完全满足工信部等单位要求。</li><li>沙箱防护<br>云端沙箱检查结果查询，用户本地上传文件至沙箱。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas快速入门指南</title>
      <link href="/posts/17215b2c/"/>
      <url>/posts/17215b2c/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/69c7c56ec4614617a28ae2fc480cbf88.png#pic_center" alt="pandas"></p><p>Pandas 是一个开源的第三方 Python 库，从 Numpy 和 Matplotlib 的基础上构建而来，享有数据分析“三剑客之一”的盛名（NumPy、Matplotlib、Pandas）。是学习数据分析、AI机器学习必学组件之一。<br>Pandas 这个名字来源于面板数据（Panel Data）与数据分析（data analysis）这两个名词的组合。在经济学中，Panel Data 是一个关于多维数据集的术语。Pandas 对数据的处理是为数据的分析服务的，它所提供的各种数据处理方法、工具是基于数理统计学出发，包含了日常应用中的众多数据分析方法。</p><p>Pandas 可以实现复杂的处理逻辑，这些往往是 Excel 等工具无法处理的，还可以自动化、批量化，对于相同的大量的数据处理我们不需要重复去工作。Pandas 的出现使得 Python 做数据分析的能力得到了大幅度提升，它主要实现了数据分析的五个重要环节：</p><ul><li>加载数据 </li><li>整理数据 </li><li>操作数据 </li><li>构建数据模型 </li><li>分析数据</li></ul><p>主要特点</p><ul><li>它提供了一个简单、高效、带有默认标签（也可以自定义标签）的 DataFrame 对象。 </li><li>能够快速得从不同格式的文件中加载数据（比如<br>Excel、CSV 、SQL文件），然后将其转换为可处理的对象； </li><li>能够按数据的行、列标签进行分组，并对分组后的对象执行聚合和转换操作；</li><li>能够很方便地实现数据归一化操作和缺失值处理； </li><li>能够很方便地对 DataFrame 的数据列进行增加、修改或者删除的操作；</li><li>能够处理不同格式的数据集，比如矩阵数据、异构数据表、时间序列等；</li><li>提供了多种处理数据集的方式，比如构建子集、切片、过滤、分组以及重新排序等。</li></ul><p>本教程梳理了快速入门pandas的一些知识点。</p><p><img src="https://img-blog.csdnimg.cn/3c9638a1d2c14b479bb46e0e33b32614.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pandas快速入门"></p><p><a href="http://xiejava.ishareread.com/posts/531458d5/" target="_blank" rel="noopener">一、pandas数据结构(Series和DataFrame)</a></p><p><a href="http://xiejava.ishareread.com/posts/4864590d/" target="_blank" rel="noopener">二、pandas数据加载(csv、excel、json、mysql、webAPI)</a></p><p><a href="http://xiejava.ishareread.com/posts/808d8fe8/" target="_blank" rel="noopener">三、pandas基本操作之数据访问(查看与检索)</a></p><p><a href="http://xiejava.ishareread.com/posts/16c9fc17/" target="_blank" rel="noopener">四、pandas数据分析之排序和排名(sort和rank)</a></p><p><a href="http://xiejava.ishareread.com/posts/a87a78e2/" target="_blank" rel="noopener">五、pandas数据清洗之处理缺失、重复、异常数据</a></p><p><a href="http://xiejava.ishareread.com/posts/2c80aac2/" target="_blank" rel="noopener">六、pandas数据处理之数据转换(映射map、替换replace、重命名rename)</a></p><p><a href="http://xiejava.ishareread.com/posts/f44191db/" target="_blank" rel="noopener">七、pandas数据分析之数据运算(逻辑运算、算术运算、统计运算、自定义运算)</a></p><p><a href="http://xiejava.ishareread.com/posts/e7d4d6e1/" target="_blank" rel="noopener">八、pandas数据处理之合并与拼接</a></p><p><a href="http://xiejava.ishareread.com/posts/dd24116d/" target="_blank" rel="noopener">九、pandas数据分析之分组聚合</a></p><p><a href="http://xiejava.ishareread.com/posts/bc5826bd/" target="_blank" rel="noopener">十、pandas数据分析之数据重塑透视(stack、unstack、melt、pivot)</a></p><p><a href="http://xiejava.ishareread.com/posts/e8cac912/" target="_blank" rel="noopener">十一、pandas数据分析之数据绘图</a></p><p>学习pandas最好的资料肯定是pandas的官网  <a href="https://pandas.pydata.org/docs/user_guide/index.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/user_guide/index.html</a></p><p>书籍推荐pandas的作者写的《利用python进行数据分析》</p><hr><p>本教程作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据分析之数据绘图</title>
      <link href="/posts/e8cac912/"/>
      <url>/posts/e8cac912/</url>
      
        <content type="html"><![CDATA[<p>一图胜千言，将信息可视化（绘图）是数据分析中最重要的工作之一。它除了让人们对数据更加直观以外，还可以帮助我们找出异常值、必要的数据转换、得出有关模型的想法等等。pandas 在数据分析、数据可视化方面有着较为广泛的应用。本文将通过实例介绍pandas的数据绘图。<br><img src="https://img-blog.csdnimg.cn/71f0a92c1e9b4d72985c5d7705076be8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pandas数据绘图"></p><p>pandas的数据可视化依赖于matplotlib模块的pyplot类，matplotlib在安装Pandas会自动安装。Matplotlib可以对图形做细节控制，绘制出出版质量级别的图形，通过Matplotlib，可以简单地绘制出常用的统计图形。pandas 对 Matplotlib 绘图软件包的基础上单独封装了一个plot()接口，通过调用该接口可以实现常用的绘图操作。<br>让我们先来认识mataplotlib图形的基本构成。</p><h1 id="一、matplotlib图形基本构成"><a href="#一、matplotlib图形基本构成" class="headerlink" title="一、matplotlib图形基本构成"></a>一、matplotlib图形基本构成</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data=np.arange(<span class="number">10</span>)</span><br><span class="line">plt.plot(data)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8fb478e612224148b3f7346cd78895ac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="matplotlib.plot()"></p><p>通过引入matplotlib模块的pyplot类，将数据传入plot()的接口，就可以将数据以图形化的方式展示出来。Matplotlib 生成的图形主要由以下几个部分构成：<br><img src="https://img-blog.csdnimg.cn/7f23fcaedb244bada98003004d7e975f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_9,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="绘图基本结构"></p><ul><li>Figure：指整个图形，您可以把它理解成一张画布，它包括了所有的元素，比如标题、轴线等； </li><li>Axes：绘制 2D图像的实际区域，也称为轴域区，或者绘图区； </li><li>Axis：指坐标系中的垂直轴与水平轴，包含轴的长度大小（图中轴长为 7）、轴标签（指 x轴，y轴）和刻度标签； </li><li>Artist：在画布上看到的所有元素都属于 Artist对象，比如文本对象（title、xlabel、ylabel）、Line2D 对象（用于绘制2D图像）等。</li></ul><p>了解matplotlib图形的基本构成非常重要，绘图就是通过matplotlib提供的方法来定义和设置这些基本图形的构成元素来将数据显示在这些元素中。</p><h1 id="二、matplotlib显示中文"><a href="#二、matplotlib显示中文" class="headerlink" title="二、matplotlib显示中文"></a>二、matplotlib显示中文</h1><p>Matplotlib 默认不支持中文字体，这因为 Matplotlib 只支持 ASCII 字符，但中文标注更加符合中国人的阅读习惯。下面介绍如何在 Windows 环境下让 Matplotlib 显示中文。</p><h2 id="1、方法一：临时重写配置文件（临时）"><a href="#1、方法一：临时重写配置文件（临时）" class="headerlink" title="1、方法一：临时重写配置文件（临时）"></a>1、方法一：临时重写配置文件（临时）</h2><p>通过临时重写配置文件的方法，可以解决 Matplotlib 显示中文乱码的问题，代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">"font.sans-serif"</span>]=[<span class="string">"SimHei"</span>] <span class="comment">#设置字体</span></span><br><span class="line">plt.rcParams[<span class="string">"axes.unicode_minus"</span>]=<span class="literal">False</span> <span class="comment">#该语句解决图像中的“-”负号的乱码问题</span></span><br></pre></td></tr></table></figure><h2 id="2、方法二：修改配置文件-（永久）"><a href="#2、方法二：修改配置文件-（永久）" class="headerlink" title="2、方法二：修改配置文件 （永久）"></a>2、方法二：修改配置文件 （永久）</h2><p>通过直接修改配置文件的方法，可以一劳永逸的解决 Matplotlib 的中文乱码问题。注意此过程在 Windows 环境下进行。<br>Matplotlib 从配置文件 matplotlibrc 中读取相关配置信息，比如字体、样式等，因此我们需要对该配置文件进行更改。使用如下代码查看 matplotlibrc 所在的目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.matplotlib_fname()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/784e00d0e5664e00a67f54309f8fa9b7.png#pic_center" alt="matplotlib_fname"></p><p>打开配置文件后，找到以下信息：<br>#font.family: sans-serif<br>#font.serif: DejaVu Serif, Bitstream Vera Serif, Computer Modern Roman, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif<br>修改配置将#注释去掉，并将微软雅黑Microsoft  YaHei的字体给加上。<br><img src="https://img-blog.csdnimg.cn/ceaa6040ac1f44ecaf70121f7e691f79.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="微软雅黑"><br>最后，在windows的字体目录中复制中文字体微软雅黑：<br>C:\Windows\Fonts\Microsoft YaHei UI<br>将微软雅黑的字体复制粘贴到matplotlib的字体库中，字体库路径就在matplotlibrc 所在的目录下<br>D:\Anaconda3\Lib\site-packages\matplotlib\mpl-data\fonts\ttf<br><img src="https://img-blog.csdnimg.cn/1a25065992144bff99f693d16b143a5c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="复制字体"><br>如果是jupyter notbook重启启动jupyter notbook让它重新读取配置文件即可。</p><h1 id="三、pandas绘图"><a href="#三、pandas绘图" class="headerlink" title="三、pandas绘图"></a>三、pandas绘图</h1><p>数据分析将数据进行可视化绘图展示离不开数据，pandas的两大数据结构Series和DataFrame都提供了相应的方法很方便的进行数据的可视化绘图展示。</p><h2 id="1、数据"><a href="#1、数据" class="headerlink" title="1、数据"></a>1、数据</h2><p>pandas 提供了 plot() 方法可以快速方便地将 Series 和 DataFrame 中的数据进行可视化。</p><h3 id="a-Series"><a href="#a-Series" class="headerlink" title="a) Series"></a>a) Series</h3><p>Series 使用 plot 时 x 轴为索引，y 轴为索引对应的具体值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">series_data=pd.Series(np.random.randn(<span class="number">10</span>),index=range(<span class="number">10</span>))</span><br><span class="line">series_data</span><br><span class="line">series_data.plot()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c72c01ada00d4db6b5b60154d59e06b3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Series绘图"></p><h3 id="b-DataFrame"><a href="#b-DataFrame" class="headerlink" title="b) DataFrame"></a>b) DataFrame</h3><p>DataFrame 使用 plot 时 x 轴为索引，y 轴为索引对应的多个具体值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_staff = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\staff_sale_byQ.xlsx'</span>)</span><br><span class="line">df_staff</span><br><span class="line">df_staff.plot()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/14733be19b964a818d897f061fa7dcbf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="DataFrame绘图"><br>plot()可以通过传入x和y指定显示具体的列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定X轴及y显示的列数据</span></span><br><span class="line">df_staff.plot(x=<span class="string">'季度'</span>,y=[<span class="string">'张三'</span>,<span class="string">'李四'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5e25b52456c94e54a321eb6fcfe52d02.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="dataframe指定x和y"></p><h2 id="2、图形"><a href="#2、图形" class="headerlink" title="2、图形"></a>2、图形</h2><p>plot 默认为折线图，折线图也是最常用和最基础的可视化图形，足以满足我们日常 80% 的需求。<br>除了使用默认的线条绘图外，还可以使用其他绘图方式，如下所示：</p><ul><li>柱状图：bar() 或 barh() </li><li>箱形图：box() </li><li>区域图：area() </li><li>饼状图：pie() </li><li>散点图：scatter()</li><li>直方图：hist()</li></ul><h3 id="a-柱状图"><a href="#a-柱状图" class="headerlink" title="a) 柱状图"></a>a) 柱状图</h3><p>柱状图（bar chart），使用与轴垂直的柱子，通过柱形的高低来表达数据的多少，适用于数据的对比，在整体中也能看到数据的发展变化趋势。<br>DataFrame 可以直接调用 plot.bar() 生成折线图，与折线图类似，x 轴为索引，其他数字类型的列为 y 轴上的条形，可以设置参数stacked=True生成柱状堆叠图<br>df.plot.bar()<br>df.plot.barh() # 横向<br>df[:5].plot.bar(x=’name’, y=’Q4’) # 指定xy轴<br>df[:5].plot.bar(‘name’, [‘Q1’, ‘Q2’]) # 指定xy轴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#柱状图</span></span><br><span class="line">df_staff.plot.bar(x=<span class="string">'季度'</span>,y=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>]) </span><br><span class="line"><span class="comment">#柱状图可以设置参数stacked=True生成柱状堆叠图</span></span><br><span class="line">df_staff.plot.bar(x=<span class="string">'季度'</span>,y=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>],stacked=<span class="literal">True</span>) </span><br><span class="line"><span class="comment">#通过barh()方法可以绘制水平柱状图</span></span><br><span class="line">df_staff.plot.barh(x=<span class="string">'季度'</span>,y=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>],stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b6aa2053a83e4488a41590fca651e31b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="柱状图"></p><h3 id="b-箱形图"><a href="#b-箱形图" class="headerlink" title="b) 箱形图"></a>b) 箱形图</h3><p>箱形图（Box Chart）又称盒须图、盒式图或箱线图，是一种用作显示一组数据分布情况的统计图。Series.plot.box() 、 DataFrame.plot.box(), 和 DataFrame.boxplot() 都可以绘制箱形图。<br>从箱形图中我们可以观察到：</p><ul><li>一组数据的关键值：中位数、最大值、最小值等。</li><li>数据集中是否存在异常值，以及异常值的具体数值。 </li><li>数据是否是对称的。</li><li>这组数据的分布是否密集、集中。 </li><li>数据是否扭曲，即是否有偏向性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_staff.plot.box(x=<span class="string">'季度'</span>,y=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/872f3c82acf141adb2b37d6b8474acb2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="箱形图"></p><h3 id="c-区域图"><a href="#c-区域图" class="headerlink" title="c) 区域图"></a>c) 区域图</h3><p>区域图（Area Chart），又叫面积图。 将折线图中折线与自变量坐标轴之间的区域使用颜色或者纹理填充，这样一个填充区域叫做面积，颜色的填充可以更好的突出趋势信息，需要注意的是颜色要带有一定的透明度，透明度可以很好的帮助使用者观察不同序列之间的重叠关系，没有透明度的面积会导致不同序列之间相互遮盖减少可以被观察到的信息。<br>面积图默认情况下是堆叠的。 要生成堆积面积图，每列必须全部为正值或全部为负值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_staff.plot.area(x=<span class="string">'季度'</span>,y=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/314e2710b0554883b9edd185a8578b19.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="区域图"></p><h3 id="d-饼状图"><a href="#d-饼状图" class="headerlink" title="d) 饼状图"></a>d) 饼状图</h3><p>饼图（Pie Chart）广泛得应用在各个领域，用于表示不同分类的占比情况，通过弧度大小来对比各种分类。饼图通过将一个圆饼按照分类的占比划分成多个区块，整个圆饼代表数据的总量，每个区块（圆弧）表示该分类占总体的比例大小，所有区块（圆弧）的加和等于 100%。<br>可以使用 DataFrame.plot.pie() 或 Series.plot.pie() 创建饼图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df_staff</span><br><span class="line"><span class="comment">#看张三每个季度的业绩分布</span></span><br><span class="line">df_staff.plot.pie(y=<span class="string">'张三'</span>,subplots=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#看第一个季度，每个人的绩效分布</span></span><br><span class="line">df_staff1=df_staff.loc[<span class="number">0</span>:<span class="number">0</span>,<span class="string">'张三'</span>:<span class="string">'孙八'</span>].T</span><br><span class="line">df_staff1.columns=[<span class="string">'Q'</span>]</span><br><span class="line">df_staff1.plot.pie(y=<span class="string">'Q'</span>,subplots=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/30d2a79821494d60b71788d59a973731.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="饼图"></p><h3 id="e-散点图"><a href="#e-散点图" class="headerlink" title="e) 散点图"></a>e) 散点图</h3><p>散点图（Scatter graph）也叫 X-Y 图，它将所有的数据以点的形式展现在直角坐标系上，以显示变量之间的相互影响程度，点的位置由变量的数值决定。<br>通过观察散点图上数据点的分布情况，我们可以推断出变量间的相关性。如果变量之间不存在相互关系，那么在散点图上就会表现为随机分布的离散的点，如果存在某种相关性，那么大部分的数据点就会相对密集并以某种趋势呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.random.rand(<span class="number">50</span>, <span class="number">4</span>), columns=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])</span><br><span class="line">df1.plot.scatter(x=<span class="string">"a"</span>, y=<span class="string">"b"</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/808e596351ac4d498e7ff764a61d58bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在散点图"></p><h3 id="f-直方图"><a href="#f-直方图" class="headerlink" title="f) 直方图"></a>f) 直方图</h3><p>直方图(Histogram)，又称质量分布图，是一种统计报告图，它是根据具体数据的分布情况，画成以组距为底边、以频数为高度的一系列连接起来的直方型矩形图。<br><img src="https://img-blog.csdnimg.cn/e196cd720e62469288f48ac3e5d3170c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="直方图说明"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建数据集</span></span><br><span class="line">df4=pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">"a"</span>: np.random.randn(<span class="number">1000</span>) + <span class="number">1</span>,</span><br><span class="line">    <span class="string">"b"</span>: np.random.randn(<span class="number">1000</span>),</span><br><span class="line">    <span class="string">"c"</span>: np.random.randn(<span class="number">1000</span>) - <span class="number">1</span>,</span><br><span class="line">    <span class="string">"d"</span>: np.random.randn(<span class="number">1000</span>) - <span class="number">2</span>,</span><br><span class="line">    &#125;,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df4</span><br><span class="line">df4.plot.hist(alpha=<span class="number">0.5</span>)  <span class="comment">#指定图形透明度</span></span><br><span class="line">df4.plot.hist(stacked=<span class="literal">True</span>,bins=<span class="number">20</span>) <span class="comment">#堆叠并指定箱数为20</span></span><br><span class="line">df4.diff().hist() <span class="comment">#通过diff给每一列数据都绘制一个直方图</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f12ed9d079a641c7953c15a54534d494.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="直方图"></p><p>至此，本文介绍了pandas常用的绘图组件matplotlib，包括mataplotlib绘图的基本构成，如何在windows下解决中文问题，并通过实例介绍了如何通过pandas的数据集绘制折线图、箱线图、柱状图、饼图、面积图、散点图、直方图等。</p><p>参考资料：《利用python进行数据分析》、pandas官网 user guide</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据分析之数据重塑透视(stack、unstack、melt、pivot)</title>
      <link href="/posts/bc5826bd/"/>
      <url>/posts/bc5826bd/</url>
      
        <content type="html"><![CDATA[<p>在数据分析的过程中，分析师常常希望通过多个维度多种方式来观察分析数据，重塑和透视是常用的手段。<br>数据的重塑简单说就是对原数据进行变形，为什么需要变形，因为当前数据的展示形式不是我们期望的维度，也可以说索引不符合我们的需求。对数据的重塑不是仅改变形状那么简单，在变形过程中，数据的内在数据意义不能变化，但数据的提示逻辑则发生了重大的改变。<br>数据透视是最常用的数据汇总工具，Excel 中经常会做数据透视，它可以根据一个或者多个指定的维度来聚合数据。pandas 也提供了数据透视函数来实现这些功能。<br>如果能熟练区分和使用各种重塑和透视分析方法，那用pandas处理分析日常的数据基本上就没有什么难度了。<br><img src="https://img-blog.csdnimg.cn/924f8a4672984116a4b502d6f05d549b.png#pic_center" alt="重塑和透视"></p><p>在介绍数据重塑透视之前，先来介绍一下pandas中DataFrame的层次化索引，它广泛应用于重塑透视操作。</p><h1 id="一、层次化索引"><a href="#一、层次化索引" class="headerlink" title="一、层次化索引"></a>一、层次化索引</h1><p>层次化索引是pandas的一项重要功能，它使你能在一个轴上拥有多个（两个以上）索引层数，分层索引的目的是用低维度的结构（Series 或者 DataFrame）更好地处理高维数据。通过分层索引，我们可以像处理二维数据一样，处理三维及以上的数据。分层索引的存在使得分析高维数据变得简单。<br>我们来看一下student数据集，并根据该数据集分别构建列和行的层次索引。然后再介绍数据的重塑和透视。<br>引入student数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\student.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/810d28e429e9431fa7f223eba7b53b01.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="student数据集"></p><p>该student数据集包含学生学号、姓名、语文、数据、英语的成绩等。</p><h2 id="1、列索引分层"><a href="#1、列索引分层" class="headerlink" title="1、列索引分层"></a>1、列索引分层</h2><p>我们选取一些关键的数据构建列标签的层次化索引。这里我们选取’班级’,’姓名’,’语文’,’数学’,’英语’的列，并且将‘班级’、‘姓名’标记为‘标识’，’语文’,’数学’,’英语’标记为‘成绩’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_student=df[[<span class="string">'班级'</span>,<span class="string">'2-姓名'</span>,<span class="string">'4-语文'</span>,<span class="string">'5-数学'</span>,<span class="string">'6-英语'</span>]]</span><br><span class="line">df_student.columns=[[<span class="string">'标识'</span>,<span class="string">'标识'</span>,<span class="string">'成绩'</span>,<span class="string">'成绩'</span>,<span class="string">'成绩'</span>],[<span class="string">'班级'</span>,<span class="string">'姓名'</span>,<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>]]</span><br><span class="line">df_student</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cecd15ff3dca49369fd0e266efb676cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="列索引分层"><br>通过指定DataFrame的columns的层级将’班级’,’姓名’,’语文’,’数学’,’英语’，上多抽出了一个层级，这个层有两个索引一个是‘标识’，一个是成绩，其中‘班级’和‘名称’是属于标识，’语文’,’数学’,’英语’都是’成绩’。</p><h2 id="2、行索引分层"><a href="#2、行索引分层" class="headerlink" title="2、行索引分层"></a>2、行索引分层</h2><p>  接下来看行索引的分层。我们将属于一班的和属于二班的同学进行分层，再分成两个索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据行索引分层，设置行索引将其分成班级和姓名两个层次索引</span></span><br><span class="line">df_student=df_student.set_index([(<span class="string">'标识'</span>,<span class="string">'班级'</span>),(<span class="string">'标识'</span>,<span class="string">'姓名'</span>)])</span><br><span class="line">df_student.index.names=[<span class="string">'班级'</span>,<span class="string">'姓名'</span>]</span><br><span class="line">df_student</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c06f260cd18c45999475887d39c6bd97.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="行索引的分层"></p><p>可以看到将数据集的班级和姓名列分成了两个行的层级索引。没有用默认的0-9的行索引</p><h1 id="二、数据堆叠与拆堆"><a href="#二、数据堆叠与拆堆" class="headerlink" title="二、数据堆叠与拆堆"></a>二、数据堆叠与拆堆</h1><p>层次化索引为DataFrame数据的重排任务提供了一种具有良好一致性的方式，有许多用于重新排列表格数据的基础运算。这些函数也称作重塑（reshape）或轴向旋转（pivot）运算。<br>常见的数据重塑包括数据的堆叠 stack 和 取消堆叠 unstck</p><h2 id="1、数据堆叠-stack"><a href="#1、数据堆叠-stack" class="headerlink" title="1、数据堆叠 stack"></a>1、数据堆叠 stack</h2><p>堆叠 stack ，顾名思义，就是将列的数据堆叠形成行。<br>借用pandas官网的示意图：<br><img src="https://img-blog.csdnimg.cn/45611145863746e6a3c5c2d7c13b31d0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="堆叠 stack"></p><p>看实际数据数据会更容易理解，为了方便我们取student数据集的前5行记录来进行数据堆叠stack()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df_student[:<span class="number">5</span>]</span><br><span class="line"><span class="comment">#将数据进行堆叠</span></span><br><span class="line"><span class="comment">#将数据进行堆叠</span></span><br><span class="line">df_student5=df_student[:<span class="number">5</span>].stack()</span><br><span class="line">df_student5</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bf421506617446528c423c4db58f96cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="堆叠 stack(）"><br>在这里可以看到通过stack()将“语文”、“数学”、”英语”，三列，一个个堆叠形成一条记录的三行。这样列数减少了，行数增多了。<br><img src="https://img-blog.csdnimg.cn/4d2c9436ca6440c783f10425c38a150f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="stack()"></p><p>对于多层索引，可以根据指定堆叠层次，默认是最高层次的堆叠。<br>我们来看指定堆叠层次，如果<code>stack(0)</code>，表示堆叠level0层的。<br><img src="https://img-blog.csdnimg.cn/460a7536308e4cb8b76e548098aa291d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="分层堆叠"></p><h2 id="2、取消堆叠-unstack"><a href="#2、取消堆叠-unstack" class="headerlink" title="2、取消堆叠 unstack"></a>2、取消堆叠 unstack</h2><p>取消堆叠 unstack是堆叠的反操作。<br><img src="https://img-blog.csdnimg.cn/415206f012124a8aa75ecf0e39bd8bae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Unstack"></p><p>也就是将堆叠好了的行数据，一个个卸下来形成列。这样一来行数减少了，但是列数增多了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消堆叠 unstack()</span></span><br><span class="line">df_student5.unstack()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/41728158c7d140109b330787c12bf6da.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="unstack"></p><p>可以看到原来的“语文”、“数学”、”英语”三行，通过unstack()进行拆堆，拆成了三列，明显数据没有那么高了，行数少了，列数多了。<br><img src="https://img-blog.csdnimg.cn/9322cae9843e45038a0989e4b736bd2d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="unstack"></p><p>同样对于多层索引可以逐层拆堆<br><img src="https://img-blog.csdnimg.cn/7533debe490b483983e1ddc89ac423a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="逐层拆堆"></p><h1 id="三、数据融合与透视"><a href="#三、数据融合与透视" class="headerlink" title="三、数据融合与透视"></a>三、数据融合与透视</h1><p>数据透视是最常用的数据汇总工具，它可以根据一个或者多个指定的维度来聚合数据。实际上搞懂了stack和unstack就很容易搞懂pivot和melt了，stack和unstack根据索引来进行堆叠和拆堆，pivot和melt可以根据指定的数据来进行变换操作灵活性更高。</p><h2 id="1、数据融合-melt"><a href="#1、数据融合-melt" class="headerlink" title="1、数据融合 melt"></a>1、数据融合 melt</h2><p>来看pandas官网的示意图，是不是和stack的图有点类似，都是将列转换成行，不同的是melt可以指定哪些列固定，哪些列转换成行等灵活性更高。简单说就是将指定的列放到铺开放到行上名为variable(可指定)列，值在value(可指定)列<br><img src="https://img-blog.csdnimg.cn/a613abd84db744199b1276334d6fe776.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="melt"><br>melt语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pd.melt(frame: pandas.core.frame.DataFrame,</span><br><span class="line">        id_vars=<span class="literal">None</span>, value_vars=<span class="literal">None</span>,</span><br><span class="line">        var_name=<span class="string">'variable'</span>, value_name=<span class="string">'value'</span>,</span><br><span class="line">        col_level=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>id_varstuple，list或ndarray（可选），用作标识变量的列。</li><li>value_varstuple，列表或ndarray，可选，要取消透视的列。 如果未指定，则使用未设置为id_vars的所有列。</li><li>var_namescalar，用于“变量”列的名称。 如果为None，则使用frame.columns.name或“variable”。</li><li>value_namescalar，默认为“ value”，用于“ value”列的名称。<ul><li>col_levelint或str，可选，如果列是MultiIndex，则使用此级别来融化。</li></ul></li></ul><p>我们还是来看示例：<br>数据集还是student数据集，为了演示方便取前5条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_student=df[[<span class="string">'班级'</span>,<span class="string">'2-姓名'</span>,<span class="string">'4-语文'</span>,<span class="string">'5-数学'</span>,<span class="string">'6-英语'</span>]]</span><br><span class="line">df_student.columns=[[<span class="string">'标识'</span>,<span class="string">'标识'</span>,<span class="string">'成绩'</span>,<span class="string">'成绩'</span>,<span class="string">'成绩'</span>],[<span class="string">'班级'</span>,<span class="string">'姓名'</span>,<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>]]</span><br><span class="line">df_student[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/af39dc398bf4485bb1943c9cb06bd2c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="melt"></p><p>现在将“班级”和“姓名”固定，’语文’,’数学’,’英语’三列转换成行融合为“学科”字段，这三个列的值定义为“分数”列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将“班级”和“姓名”固定，'语文','数学','英语'三列转换成行融合为“学科”字段，这三个列的值定义为“分数”列</span></span><br><span class="line">df_student[<span class="number">0</span>:<span class="number">5</span>].melt(id_vars=[<span class="string">'班级'</span>,<span class="string">'姓名'</span>],</span><br><span class="line">                     value_vars=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>],</span><br><span class="line">                     var_name=<span class="string">'学科'</span>,</span><br><span class="line">                     value_name=<span class="string">'分数'</span>,col_level=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c1629d283a024027bd3552de331c95c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="melt"><br>具体实现如下图所示：<br><img src="https://img-blog.csdnimg.cn/1293078bb0bb4ec08a2a6ad64ad25c66.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="melt"></p><h2 id="2、数据透视-pivot"><a href="#2、数据透视-pivot" class="headerlink" title="2、数据透视 pivot"></a>2、数据透视 pivot</h2><p>来看pandas官网的示意图，是不是和unstack的图有点类似，将行数据转换成列。同样pivot提供了更多的参数可以指定相应的数据进行转换，比unstack更加灵活。<br><img src="https://img-blog.csdnimg.cn/f429e482c946477883cfe377725cd26f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pivot"></p><p>这里有三个参数，作用分别是：</p><ul><li>index：新 df 的索引列，用于分组，如果为None，则使用现有索引 </li><li>columns：新 df 的列，如果透视后有重复值会报错</li><li>values：用于填充 df 的列。 如果未指定，将使用所有剩余的列，并且结果将具有按层次结构索引的列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df_student5=df_student[<span class="number">0</span>:<span class="number">5</span>].melt(id_vars=[<span class="string">'班级'</span>,<span class="string">'姓名'</span>],</span><br><span class="line">                     value_vars=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>],</span><br><span class="line">                     var_name=<span class="string">'学科'</span>,</span><br><span class="line">                     value_name=<span class="string">'分数'</span>,col_level=<span class="number">1</span>)</span><br><span class="line">df_student5</span><br><span class="line">df_student5.pivot(index=[<span class="string">'班级'</span>,<span class="string">'姓名'</span>],columns=<span class="string">'学科'</span>,values=<span class="string">'分数'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a76f88c898f949668a9d8d9219d876e9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pivot"></p><p>这里通过pivot将“学科”的行数据透视转换成“数学”、“英语”、“语文”三列，具体实现如下图所示：<br><img src="https://img-blog.csdnimg.cn/52879541f0904c1597436fbb6c476585.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="privot"><br>可以看出privot实际和unstack类似是由行转换成列的视图，但比起unstack更加灵活。</p><p>至此，介绍了pandas的多层索引及pandas的4种重塑操作：<strong>stack、unstack、pivot、melt</strong>:<br><strong>stack、unstack是基础：stack实现列转行，unstack实现行转列</strong>。<br>melt与stack类似，比stack更加灵活。<br>pivot与unstack类似，比unstack更加灵活。</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据分析之分组聚合</title>
      <link href="/posts/dd24116d/"/>
      <url>/posts/dd24116d/</url>
      
        <content type="html"><![CDATA[<p>在数据分析过程中，经常会需要根据某一列或多列把数据划分为不同的组别，然后再对其进行数据分析。本文将介绍pandas的数据分组及分组后的应用如对数据进行聚合、转换和过滤。<br><img src="https://img-blog.csdnimg.cn/7c67a04fbecc420fbaa3f573773b4599.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="分组聚合"><br>在关系型数据库中我们常用SQL的GROUP BY操作进行分组分析计算。在pandas中要完成数据的分组操作同样可用groupby()函数，然后再在划分出来的组（group）上应用一些统计函数，从而达到数据分析的目的，比如对分组数据进行聚合、转换或者过滤。这个过程主要包含以下三步：<strong>拆分(split)-应用(apply)-合并(combine）</strong><br>例如，DataFrame可以在列(axis=1)或行(axis=0)上进行分组(split)，然后将一个函数应用(apply)到各个分组并产生一个新值，最后所有这些函数的执行结果会被合并(combine)到最终的结果对象中。<br>一个简单的分组聚合的过程如下图所示：<br><img src="https://img-blog.csdnimg.cn/bfcdc29750f74bbc9310ec28073c4dd1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="拆分(split)-应用(apply)-合并(combine）"></p><p>我们来构造图中所示的DataFrame数据集，看看pandas的分组聚合是怎么做的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df=pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>],<span class="string">'data'</span>:[<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>]&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/96e8c83812014be19a9f425344d21b80.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grouped=df.groupby([<span class="string">'key'</span>]) <span class="comment">#通过key分组</span></span><br><span class="line"><span class="comment">#查看分组情况</span></span><br><span class="line"><span class="keyword">for</span> dtype,group <span class="keyword">in</span> grouped:</span><br><span class="line">    print(dtype)</span><br><span class="line">grouped.sum() <span class="comment">#对每个分组应用sum函数，并最后组合成结果</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/88fe2175cc574f27a9035c01b32e068c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="对df的key进行用groupby()进行分组"><br>通过对df的key进行用groupby()进行分组，这里可看到，将数据分成了A、B、C三组，然后对这三组分别应用sum()函数求和，再组合成最终的结果。<br>对于分组聚合一般来说实际上是分两步：一是创建分组对象进行分组，二是对分组进行相应处理如（对组应用聚合函数、对组进行转换、对组的数据进行过滤）。不过实际在具体写的时候可以通过链式调用一个语句就可以实现如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby([<span class="string">'key'</span>]).sum() <span class="comment">#链式调用先分组再用聚合函数聚合</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e03b9d8cd4cb4d9bba47d3887cfe6297.png#pic_center" alt="链式调用先分组再用聚合函数聚合"></p><h1 id="一、创建分组对象进行分组"><a href="#一、创建分组对象进行分组" class="headerlink" title="一、创建分组对象进行分组"></a>一、创建分组对象进行分组</h1><p>groupby可以把分组时指定的键（key）作为每组的组名。groupby对象支持迭代，可以遍历每个分组的具体数据。<br>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看分组情况</span></span><br><span class="line"><span class="keyword">for</span> name,group <span class="keyword">in</span> grouped:</span><br><span class="line">    print(name)</span><br><span class="line">    print(group)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b2850e2072f7406ea1a1cb099fe4a049.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="查看分组情况"></p><h2 id="1、根据多列进行分组"><a href="#1、根据多列进行分组" class="headerlink" title="1、根据多列进行分组"></a>1、根据多列进行分组</h2><p>groupby可以通过传入需要分组的参数实现对数据的分组，参数可以是单列，也可以是多列，多列以列表的方式传入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grouped=df.groupby([<span class="string">'key1'</span>,<span class="string">'key2'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/349bebc6743449b99b350bd0c7bf7958.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="多列进行分组"></p><h2 id="2、通过字典或Series进行分组"><a href="#2、通过字典或Series进行分组" class="headerlink" title="2、通过字典或Series进行分组"></a>2、通过字典或Series进行分组</h2><p>除数组以外，分组信息还可以其他形式存在。如可以定义字典或Series进行分组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">people=pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">                   columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>],</span><br><span class="line">                   index=[<span class="string">'Joe'</span>,<span class="string">'Steve'</span>,<span class="string">'Wes'</span>,<span class="string">'Jim'</span>,<span class="string">'Bob'</span>])</span><br><span class="line">people</span><br><span class="line">mapping=&#123;<span class="string">'a'</span>:<span class="string">'red'</span>,<span class="string">'b'</span>:<span class="string">'red'</span>,<span class="string">'c'</span>:<span class="string">'blue'</span>,<span class="string">'d'</span>:<span class="string">'blue'</span>,<span class="string">'e'</span>:<span class="string">'red'</span>&#125;<span class="comment">#定义分组字典</span></span><br><span class="line">by_column=people.groupby(mapping,axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#查看分组情况</span></span><br><span class="line"><span class="keyword">for</span> group_name,group_data <span class="keyword">in</span> by_column:</span><br><span class="line">    print(group_name)</span><br><span class="line">    print(group_data)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ffaacc1096844fbcb4b2436fc5ef2bd0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="字典分组"></p><p>在字典中我们定义了<code>mapping={&#39;a&#39;:&#39;red&#39;,&#39;b&#39;:&#39;red&#39;,&#39;c&#39;:&#39;blue&#39;,&#39;d&#39;:&#39;blue&#39;,&#39;e&#39;:&#39;red&#39;}#定义分组字典</code><br>a、b、e对应“red”，c、d对应“blue”所以将blue和red分成了两组。<br><img src="https://img-blog.csdnimg.cn/28718e616ddb4824a30244d08059fbc6.png#pic_center" alt="sum聚合"></p><p>应用sum()求和函数，可以看到分别对blue和red的分组进行了求和。<br>类似的，Series也是一样的，我们将map转换成Series，可以看到分组结果和map分组一样的。<br><img src="https://img-blog.csdnimg.cn/2bc677d7cad34810ba14fde3287655dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Series分组"></p><h2 id="3、通过函数进行分组"><a href="#3、通过函数进行分组" class="headerlink" title="3、通过函数进行分组"></a>3、通过函数进行分组</h2><p>比起使用字典或Series,使用Python函数是一种更原生的方法定义分组映射，。任何被当做分组键的函数都会在各个索引值上被调用一次，其返回值就会被用作分组名称。<br>如上面的people数据集，将姓名索引的长度进行分组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">by_len=people.groupby(len)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6125e1b8c36741a1a4216697aa666143.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="by_len"></p><p>可以看到将姓名长度相同的3分成一组，长度为5的数据分成了一组<br>更加通用的是可以自定义函数进行分组，如要将索引&gt;5的和小于5的分别分组，可以自定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据集</span></span><br><span class="line">df=pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>],</span><br><span class="line">                 <span class="string">'data'</span>:[<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>]&#125;,</span><br><span class="line">                index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">df</span><br><span class="line"><span class="comment">#自定义函数区分大于5和小于5的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">big5</span><span class="params">(x)</span>:</span>  </span><br><span class="line">    result=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">5</span>:</span><br><span class="line">        result=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">by_big5=df.groupby(big5)  <span class="comment">#根据索引是否大于5进行分组</span></span><br><span class="line"><span class="comment">#查看分组情况</span></span><br><span class="line"><span class="keyword">for</span> group_name,group_data <span class="keyword">in</span> by_big5:</span><br><span class="line">    print(group_name)</span><br><span class="line">    print(group_data)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7cb4a45173eb474fafae0482775e977f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="自定义函数分组"></p><h1 id="二、对分组后的数据进行应用"><a href="#二、对分组后的数据进行应用" class="headerlink" title="二、对分组后的数据进行应用"></a>二、对分组后的数据进行应用</h1><p>前面通过分组将数据集根据条件分组后，可以对分组后的数据进行各种处理包括聚合、转换、过滤等操作。</p><h2 id="1、对分组数据用聚合函数进行聚合"><a href="#1、对分组数据用聚合函数进行聚合" class="headerlink" title="1、对分组数据用聚合函数进行聚合"></a>1、对分组数据用聚合函数进行聚合</h2><h3 id="a-使用pandas聚合函数"><a href="#a-使用pandas聚合函数" class="headerlink" title="a) 使用pandas聚合函数"></a>a) 使用pandas聚合函数</h3><p>前面第一部分的例子中对数据分组后进行了sum()求和聚合操作，类似的聚合函数还有很多如：</p><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>count</td><td>分组中非NA值的数量</td></tr><tr><td>sum</td><td>非NA值的和</td></tr><tr><td>mean</td><td>非NA值的平均值</td></tr><tr><td>median</td><td>非NA值的中位数</td></tr><tr><td>std, var</td><td>标准差和方差</td></tr><tr><td>min, max</td><td>非NA的最小值，最大值</td></tr><tr><td>prod</td><td>非NA值的乘积</td></tr><tr><td>first, last</td><td>非NA值的第一个,最后一个</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/a601e7ac84744ac38faf7199a6b7c181.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="聚合函数"></p><h3 id="b-使用自定义聚合函数"><a href="#b-使用自定义聚合函数" class="headerlink" title="b) 使用自定义聚合函数"></a>b) 使用自定义聚合函数</h3><p>pandas的groupby分组对象还可以用自定义的聚合函数可以通过groupby分组对象，将你自己的聚合函数，传入aggregate或agg方法即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>],<span class="string">'data'</span>:[<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>]&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0663228f377a4b2788efb15aaa64800d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grouped=df.groupby([<span class="string">'key'</span>])</span><br><span class="line"><span class="comment">#查看分组情况</span></span><br><span class="line"><span class="keyword">for</span> group_name,group_data <span class="keyword">in</span> grouped:</span><br><span class="line">    print(group_name)</span><br><span class="line">    print(group_data)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/96c5ea9c86aa477eaee733930ae7d236.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="分组情况"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak_to_peak</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> arr.max() - arr.min()</span><br><span class="line"></span><br><span class="line">grouped.agg(peak_to_peak)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d615027ffaeb4e4bbba2ca9c0e8f41ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="自定义函数分组"></p><h2 id="2、根据分组数据进行转换"><a href="#2、根据分组数据进行转换" class="headerlink" title="2、根据分组数据进行转换"></a>2、根据分组数据进行转换</h2><p>根据分组数据进行数据转换或其他操作，可以在分组的基础上用apply函数进行数据的转换。<br>如数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df=pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>],</span><br><span class="line">                 <span class="string">'data'</span>:[<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>]&#125;)</span><br><span class="line">df</span><br><span class="line">根据key分组</span><br><span class="line">grouped=df.groupby([<span class="string">'key'</span>])</span><br><span class="line"><span class="comment">#查看分组情况</span></span><br><span class="line"><span class="keyword">for</span> group_name,group_data <span class="keyword">in</span> grouped:</span><br><span class="line">    print(group_name)</span><br><span class="line">    print(group_data)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c4c883153a7b41249bb8cec76ddffcfb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据集"></p><p>现在我们要对data求和后小于25的分组数据都加1<br>那么我们可以定义函数，然后再对分数数据进行应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> df[:][<span class="string">'data'</span>].sum()&lt;<span class="number">25</span>:</span><br><span class="line">        <span class="keyword">return</span> df[:][[<span class="string">'data'</span>]]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> df[:][[<span class="string">'data'</span>]]</span><br><span class="line">grouped.apply(add1)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3ba316630f3e4c318f3062296722bcb3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据转换"></p><h2 id="3、根据分组数据进行过滤"><a href="#3、根据分组数据进行过滤" class="headerlink" title="3、根据分组数据进行过滤"></a>3、根据分组数据进行过滤</h2><p>通过 filter() 函数可以实现数据的筛选，该函数根据定义的条件过滤数据并返回一个新的数据集。<br>如当我们要过滤掉分组后data求和小于25的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#过滤掉sum()求和小于25的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filtersum25</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="string">'data'</span>].sum()&gt;<span class="number">25</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">grouped.filter(filtersum25)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f5ebdff87ba048e8b6c9513fc551bc3f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据过滤"></p><p>至此，本文通过实例介绍了pandas的数据分组及分组后的应用如对数据进行聚合、转换和过滤。数据的分组和聚合是数据分析中常用的分析手段，转换和过滤是数据处理中可用到的方法。</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据处理之合并与拼接</title>
      <link href="/posts/e7d4d6e1/"/>
      <url>/posts/e7d4d6e1/</url>
      
        <content type="html"><![CDATA[<p>在许多应用中，数据可能来自不同的渠道，在数据处理的过程中常常需要将这些数据集进行组合合并拼接，形成更加丰富的数据集。pandas提供了多种方法完全可以满足数据处理的常用需求。具体来说包括有join、merge、concat、append等。<br><img src="https://img-blog.csdnimg.cn/dd40ce2e4f694ae89ce8f85eceeb0c29.png#pic_center" alt="合并与拼接"><br>一般来说</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>join</td><td>最简单，主要用于基于索引的横向合并拼接</td></tr><tr><td>merge</td><td>最常用，主要用户基于指定列的横向合并拼接</td></tr><tr><td>concat</td><td>最强大，可用于横向和纵向合并拼接</td></tr><tr><td>append</td><td>主要用于纵向追加</td></tr><tr><td>combine_first</td><td>合并重叠数据，填充缺失值</td></tr><tr><td>update</td><td>将一个数据集的值更新到另一个数据集</td></tr></tbody></table><p>下面就来逐一介绍每个方法</p><h1 id="一、join"><a href="#一、join" class="headerlink" title="一、join"></a>一、join</h1><p>join主要用于基于索引的横向合并拼接<br>在介绍pandas的join之前我们来看一下SQL对数据集join的几种模式。如果大家对SQL比较熟悉的话应该对SQL操作数据集进行各种合并拼接印象深刻。SQL中各种JOIN的方法如下：<br><img src="https://img-blog.csdnimg.cn/4b3662215d2944efaf765b0846d6102a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SQL-JOIN"></p><p>pandas的join实现了<strong>left join、right jion、inner join、out jion</strong>常用的4中join方法<br>来自官网的参数说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dataframe.join(other,  <span class="comment"># 待合并的另一个数据集</span></span><br><span class="line">                   on=<span class="literal">None</span>,  <span class="comment"># 连接的键</span></span><br><span class="line">                   how=<span class="string">'left'</span>,   <span class="comment"># 连接方式：‘left’, ‘right’, ‘outer’, ‘inner’ 默认是left</span></span><br><span class="line">                   lsuffix=<span class="string">''</span>,  <span class="comment"># 左边（第一个）数据集相同键的后缀</span></span><br><span class="line">                   rsuffix=<span class="string">''</span>,  <span class="comment"># 第二个数据集的键的后缀</span></span><br><span class="line">                   sort=<span class="literal">False</span>)  <span class="comment"># 是否根据连接的键进行排序；默认False</span></span><br></pre></td></tr></table></figure><p>我们来看下实例，有两个数据集一个是人员姓名，一个是人员的工资</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left=pd.DataFrame([<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'钱七'</span>], index=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],columns=[<span class="string">'姓名'</span>])</span><br><span class="line">right=pd.DataFrame([<span class="number">13000</span>,<span class="number">15000</span>,<span class="number">9000</span>,<span class="number">8600</span>,<span class="number">10000</span>], index=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>],columns=[<span class="string">'工资'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1f04c5a156c44172960950508e287fbe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据集"></p><blockquote><p>注意，left和right的数据集分别都指定了index，因为join主要用于基于索引的横向合并拼接。</p></blockquote><h2 id="1、left-join"><a href="#1、left-join" class="headerlink" title="1、left join"></a>1、left join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.join(right)  <span class="comment">#默认how='left'</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1b288957d7e0406984f56457544cc4e0.png#pic_center" alt="left join"></p><p>jion操作默认是left jion的操作，可以看到left索引为7姓名为钱七，在right中没有索引为7的对应所以显示left的姓名但right的工资为NaN，right中索引为8的数据在left中没有索引为8的，所以没有显示。left join合并left的数据<br>left join 如下图所示<br><img src="https://img-blog.csdnimg.cn/f83248acc33f426cad52fd05f391f467.png#pic_center" alt="left join"></p><h2 id="2、right-join"><a href="#2、right-join" class="headerlink" title="2、right join"></a>2、right join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.join(right,how=<span class="string">'right'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9c959ac942b24db7a8740e1bdcae416a.png#pic_center" alt="right join"></p><p>右链接合并时可以看到，left的数据集没有索引为8的项，所以索引为8的项显示right数据集的工资数据但姓名为NaN，在left中索引为7的项因为right中不存在，所以没有显示。right join合并right的数据<br>right join 如下图所示<br><img src="https://img-blog.csdnimg.cn/57ca11901b8443a9bfd8eecfd39de242.png#pic_center" alt="right join"></p><h2 id="3、inner-join"><a href="#3、inner-join" class="headerlink" title="3、inner join"></a>3、inner join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.join(right,how=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2f46d399e5014f959aed74e50e3a8173.png#pic_center" alt="inner join"></p><p>内链接合并时，可以看到left数据集中的索引为7姓名为钱七因为在right数据集中找不到对应的索引，right数据集中索引为8的在left找不到对应的索引所以内连接合并时索引7和8都没有进行合并，inner join只合并两个数据集共有的数据<br>inner join 如下图所示<br><img src="https://img-blog.csdnimg.cn/28191c9ea9c04060a72a4c9e3586a342.png#pic_center" alt="inner join"></p><h2 id="4、out-join"><a href="#4、out-join" class="headerlink" title="4、out join"></a>4、out join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.join(right,how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c94d60a0e8ac49658d81f0ee959ddd30.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="out join"><br>外链接合并时，可以看到不管是left中的数据还是right中的数据都进行了合并。right join合并两个数据集中所有的数据。<br>outer join 如下图所示<br><img src="https://img-blog.csdnimg.cn/58c32617de5c476487c9cf0dfe7a0e82.png#pic_center" alt="outer join"><br>join很简单，但是它有局限性，因为它只能根据索引来合并。不能指定键来进行合并。比如我要根据编号和姓名来合并，join就比较难办了。但是pandas提供了merge的方法，可以指定列来进行合并拼接。</p><h1 id="二、merge"><a href="#二、merge" class="headerlink" title="二、merge"></a>二、merge</h1><p>merge最常用，主要用户基于指定列和横向合并拼接，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left, right, how=<span class="string">'inner'</span>, on=<span class="literal">None</span>, left_on=<span class="literal">None</span>, right_on=<span class="literal">None</span>,</span><br><span class="line">left_index=<span class="literal">False</span>, right_index=<span class="literal">False</span>, sort=<span class="literal">True</span>,suffixes=(<span class="string">'_x'</span>, <span class="string">'_y'</span>), copy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>left/right</td><td>两个不同的 DataFrame 对象。</td></tr><tr><td>on</td><td>指定用于连接的键（即列标签的名字），该键必须同时存在于左右两个 DataFrame 中，如果没有指定，并且其他参数也未指定， 那么将会以两个 DataFrame 的列名交集做为连接键。</td></tr><tr><td>left_on</td><td>指定左侧 DataFrame 中作连接键的列名。该参数在左、右列标签名不相同，但表达的含义相同时非常有用。</td></tr><tr><td>right_on</td><td>指定左侧 DataFrame 中作连接键的列名。</td></tr><tr><td>left_index</td><td>布尔参数，默认为 False。如果为 True 则使用左侧 DataFrame 的行索引作为连接键，若 DataFrame 具有多层索引(MultiIndex)，则层的数量必须与连接键的数量相等。</td></tr><tr><td>right_index</td><td>布尔参数，默认为 False。如果为 True 则使用左侧 DataFrame 的行索引作为连接键。</td></tr><tr><td>how</td><td>要执行的合并类型，从 {‘left’, ‘right’, ‘outer’, ‘inner’} 中取值，默认为“inner”内连接。</td></tr><tr><td>sort</td><td>布尔值参数，默认为True，它会将合并后的数据进行排序；若设置为 False，则按照 how 给定的参数值进行排序。</td></tr><tr><td>suffixes</td><td>字符串组成的元组。当左右 DataFrame 存在相同列名时，通过该参数可以在相同的列名后附加后缀名，默认为(‘_x’,’_y’)。</td></tr><tr><td>copy</td><td>默认为 True，表示对数据进行复制。</td></tr></tbody></table><p>我们来看下面的数据集，在上面的数据集中left数据集加入了员工的编号，right数据集加入了编号及姓名。索引就按默认的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">left=pd.DataFrame([[<span class="number">3</span>,<span class="string">'张三'</span>],[<span class="number">4</span>,<span class="string">'李四'</span>],[<span class="number">5</span>,<span class="string">'王五'</span>],[<span class="number">6</span>,<span class="string">'赵六'</span>],[<span class="number">7</span>,<span class="string">'钱七'</span>]],</span><br><span class="line">columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>])</span><br><span class="line"></span><br><span class="line">right=pd.DataFrame([[<span class="number">3</span>,<span class="string">'张三'</span>,<span class="number">13000</span>],[<span class="number">4</span>,<span class="string">'李四'</span>,<span class="number">15000</span>],[<span class="number">5</span>,<span class="string">'王五'</span>,<span class="number">9000</span>],[<span class="number">6</span>,<span class="string">'赵六'</span>,<span class="number">8600</span>],[<span class="number">8</span>,<span class="string">'孙八'</span>,<span class="number">10000</span>]],</span><br><span class="line">columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>,<span class="string">'工资'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fcc9ae729d564abd89ce6b0144269a53.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="merge数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left,right)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d3a58242a2da4719a3fa8b63aab5f9b9.png#pic_center" alt="pd.merge(left,right)"></p><p>没有指定连接键，默认用重叠列名，没有指定连接方式，默认inner内连接（取left和right编号和姓名的交集）<br>和join一样通过how来指定连接方式如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left,right,how=<span class="string">'left'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e6ba32e087644c7ca662e18969d3419b.png#pic_center" alt="pd.merge(left,right,how=&#39;left&#39;)"></p><p>how的连接方式和join一样支持left、right、inner、outer<br>merge还可以指定多个列进行合并链接，也就是和SQL一样设置多个关联的列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left,right,how=<span class="string">'outer'</span>,on=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ec980f11279948188c804f9bddd80f36.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="merge-out"></p><p>如果两个对象的列名不同，可以使用<code>left_on</code>，<code>right_on</code>分别指定，如我们把right数据集的“编码”列标签改成“ID”后如果需要left数据集的”编号”和right数据集的”ID”进行关联</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">right=pd.DataFrame([[<span class="number">3</span>,<span class="string">'张三'</span>,<span class="number">13000</span>],[<span class="number">4</span>,<span class="string">'李四'</span>,<span class="number">15000</span>],[<span class="number">5</span>,<span class="string">'王五'</span>,<span class="number">9000</span>],[<span class="number">6</span>,<span class="string">'赵六'</span>,<span class="number">8600</span>],[<span class="number">8</span>,<span class="string">'孙八'</span>,<span class="number">10000</span>]],columns=[<span class="string">'ID'</span>,<span class="string">'姓名'</span>,<span class="string">'工资'</span>])</span><br><span class="line"></span><br><span class="line">pd.merge(left,right,how=<span class="string">'outer'</span>,left_on=<span class="string">'编号'</span>,right_on=<span class="string">'ID'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dbd437e103634655bef58d4ef5b05d2b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="指定列名关联"></p><p>虽然说merge已经很强大了，但是pandas愿意给你更多，它提供了concat，可以实现横向和纵向的合并与拼接。也就是说不但实现了SQL中的join还实现了union</p><h1 id="三、concat"><a href="#三、concat" class="headerlink" title="三、concat"></a>三、concat</h1><p>concat() 函数用于沿某个特定的轴执行连接操作，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat(objs,axis=<span class="number">0</span>,join=<span class="string">'outer'</span>,join_axes=<span class="literal">None</span>,ignore_index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>objs</td><td>一个序列或者是Series、DataFrame对象。</td></tr><tr><td>axis</td><td>表示在哪个轴方向上（行或者列）进行连接操作，默认 axis=0 表示行方向。</td></tr><tr><td>join</td><td>指定连接方式，取值为{“inner”,”outer”}，默认为 outer 表示取并集，inner代表取交集。</td></tr><tr><td>ignore_index</td><td>布尔值参数，默认为 False，如果为 True，表示不在连接的轴上使用索引。</td></tr><tr><td>join_axes</td><td>表示索引对象的列表。</td></tr></tbody></table><p>来看具体的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left2=pd.DataFrame([[<span class="number">1</span>,<span class="string">'陈一'</span>],[<span class="number">2</span>,<span class="string">'周二'</span>]],columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/22564f0092714a18ba0a8e312bde8ff2.png#pic_center" alt="数据集"></p><h2 id="1、纵向合并"><a href="#1、纵向合并" class="headerlink" title="1、纵向合并"></a>1、纵向合并</h2><p>concat默认纵向拼接，我们要在left1数据集的基础上把left2数据集给合并上去，很简单用concat直接就可以合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df=pd.concat([left,left2])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/19c5007f016d4a46b5ef715aa4d52445.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="纵向合并"></p><h2 id="2、横向合并"><a href="#2、横向合并" class="headerlink" title="2、横向合并"></a>2、横向合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_outer=pd.concat([left,right],axis=<span class="number">1</span>,join=<span class="string">'outer'</span>)<span class="comment">#外链接</span></span><br><span class="line">df_inner=pd.concat([left,right],axis=<span class="number">1</span>,join=<span class="string">'inner'</span>)<span class="comment">#内链接</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d7bf47354d8b45dbabe3ed5f82aee366.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="横向合并"></p><blockquote><p>注意：因为concat的链接和join一样是通过索引来链接合并，并不能指定通过某个特定的列来链接进行合并，所以看到的合并后的数据集left和right的编号和姓名是错位的。</p></blockquote><p>如果要根据编号来关联可以指定编号作为索引再进行横向合并，这样就没有问题了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left.index=left[<span class="string">'编号'</span>].values</span><br><span class="line">right.index=right[<span class="string">'编号'</span>].values</span><br><span class="line">df_outer=pd.concat([left,right],axis=<span class="number">1</span>,join=<span class="string">'outer'</span>)</span><br><span class="line">df_inner=pd.concat([left,right],axis=<span class="number">1</span>,join=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5b57174ea9b14e7e96164c1ae1dd183d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="横向合并"></p><h1 id="四、append"><a href="#四、append" class="headerlink" title="四、append"></a>四、append</h1><p>df.append 可以将其他行附加到调用方的末尾，并返回一个新对象。它是最简单常用的数据合并方式。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.append(self, other, ignore_index=<span class="literal">False</span>,verify_integrity=<span class="literal">False</span>, sort=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>other 是它要追加的其他 DataFrame 或者类似序列内容 </li><li>ignore_index 如果为 True 则重新进行自然索引</li><li>verify_integrity 如果为 True 则遇到重复索引内容时报错 </li><li>sort 进行排序</li></ul><p>来看下面的例子：</p><h2 id="1、同结构数据追加"><a href="#1、同结构数据追加" class="headerlink" title="1、同结构数据追加"></a>1、同结构数据追加</h2><p>将同结构的数据追加在原数据后面，在left数据集后面追加left2数据集，left2的数据集内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left2=pd.DataFrame([[<span class="number">1</span>,<span class="string">'陈一'</span>],[<span class="number">2</span>,<span class="string">'周二'</span>]],columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>])</span><br><span class="line">left2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/82937b0bd5404b2a983a61e1afae4b1d.png#pic_center" alt="append数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.append(left2)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f968e6e71cd24039b3d5f3f728fe0efb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="append"></p><h2 id="2、不同结构数据追加"><a href="#2、不同结构数据追加" class="headerlink" title="2、不同结构数据追加"></a>2、不同结构数据追加</h2><p>不同结构数据追加，原数据没有的列会增加，没有对应内容的会为空NaN。<br>如：left3的数据集列有”编号”、”姓名”、”工资”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left3=pd.DataFrame([[<span class="number">8</span>,<span class="string">'孙八'</span>,<span class="number">10000</span>],[<span class="number">9</span>,<span class="string">'何九'</span>,<span class="number">15000</span>]],columns=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>,<span class="string">'工资'</span>])</span><br><span class="line">left3</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/63772c8399cf42e1b5fa4c8056cdcf5e.png#pic_center" alt="left3的数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.append(left3)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/40aa9fe061454ec1b5a2a2085ceacc4e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="不同结构数据追加"></p><p>当left后追加left3后的数据集会增加“工资列”，没有对应内容的会为空。</p><h2 id="3、追加合并多个数据集"><a href="#3、追加合并多个数据集" class="headerlink" title="3、追加合并多个数据集"></a>3、追加合并多个数据集</h2><p>append参数可带数据集列表，可以将多个数据集追加到原数据集<br>如我们将left2和left3都追加到left</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.append([left2,left3])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3e6c5584e92e46a287a1fbe89e19fa54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="追加合并多个数据集"></p><h1 id="五、combine-first"><a href="#五、combine-first" class="headerlink" title="五、combine_first"></a>五、combine_first</h1><p>combine_first可用于合并重复数据，用其他数据集填充没有的数据。如一个DataFrame数据集中出现了缺失数据，就可以用其他DataFrame数据集中的数据进行填充。语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">combine_first(other) <span class="comment">#只有一个参数other，该参数用于接收填充缺失值的DataFrame对象。</span></span><br></pre></td></tr></table></figure><p>如left数据集中没有”工资”的数据，我们可以用right数据集有的数据去填充left数据集中的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.combine_first(right) <span class="comment">#用right去填充left</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a7c3857131df4cd0879a6c211196eeb5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="combine_first"></p><h1 id="六、update"><a href="#六、update" class="headerlink" title="六、update"></a>六、update</h1><p>update和combine_first比较类似，区别在于：<br>1、填充合并方式稍有差异<br>combine_first：如果s1中c的值为空，用s2的值替换，否则保留s1的值<br>update：如果s2中的值不为空，那么替换s1，否则保留s1的值<br>2、update是更新原数据，combine_first会返回一个填充后的新数据集，对原数据不做更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left.update(right) <span class="comment">#用right的数据更新left中的数据。</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/023ee8c45f0c4ebcab1591405bd43162.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="update"></p><p>至此，本文介绍了pandas的多种数据合并与拼接方法，并介绍了每种方法的异同，通过pandas的数据处理可以应付日常数据处理中大部分的数据处理工作。</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas基本操作之数据访问(查看与检索)</title>
      <link href="/posts/808d8fe8/"/>
      <url>/posts/808d8fe8/</url>
      
        <content type="html"><![CDATA[<p>对于数据分析来说，在构造或载入数据后最基本的操作应该就是对数据的访问了。看一看数据的结构、组成、分布等，根据需要从数据集中检索提取出相应的数据。pandas作为数据分析的利器，当然提供了多种查看和检索数据的方法。本文就来捋一捋pandas基本的数据访问。<br><img src="https://img-blog.csdnimg.cn/8581e4736c4e47ef8a6c71db7f941d18.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_10,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据访问"></p><h1 id="一、查看数据"><a href="#一、查看数据" class="headerlink" title="一、查看数据"></a>一、查看数据</h1><p>当我们拿到数据集后，第一步可能就是查看数据了，一方面是了解拿到的数据集的数据结构，另一方面随机检查一下数据的质量问题。<br>不管是Series还是DataFrame的数据集pandas常用的数据查看方法有：</p><table><thead><tr><th>方法</th><th>操作</th><th>结果</th></tr></thead><tbody><tr><td>head(n)</td><td>查看数据集对象的前n行</td><td>Series或DataFrame</td></tr><tr><td>tail(n)</td><td>查看数据集的最后n行</td><td>Series或DataFrame</td></tr><tr><td>sample(n)</td><td>随机查看n个样本</td><td>Series或DataFrame</td></tr><tr><td>describe()</td><td>数据集的统计摘要</td><td>Series</td></tr></tbody></table><p>以下就以一个DataFrame数据集为例来看看这些查看数据的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\staff.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d4afe8d481f64beaab0b6ecfa556bb17.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="studend数据集"></p><h2 id="1、查看头部-head-n"><a href="#1、查看头部-head-n" class="headerlink" title="1、查看头部 head(n)"></a>1、查看头部 head(n)</h2><p>head()方法如果不带参数，默认返回前5条记录，带了参数n就返回前n条记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head() <span class="comment">#默认查看前5条记录</span></span><br><span class="line">df.head(<span class="number">8</span>) <span class="comment">#指定查看前8条记录</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fc0d5daa5bf04091988e85fd660845df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="查看头部 head(n)"></p><h2 id="2、查看尾部-tail-n"><a href="#2、查看尾部-tail-n" class="headerlink" title="2、查看尾部 tail(n)"></a>2、查看尾部 tail(n)</h2><p>同样tail()方法如果不带参数，默认返回后面5条记录，带了参数n就返回后面n条记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.tail() <span class="comment">#默认查看后面5条记录</span></span><br><span class="line">df.tail(<span class="number">4</span>) <span class="comment">#指定查看后面4条记录</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3387c860aef141e5a91955907af1e0f0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="查看尾部 tail(n)"></p><h2 id="3、随机查看样本-sample-n"><a href="#3、随机查看样本-sample-n" class="headerlink" title="3、随机查看样本 sample(n)"></a>3、随机查看样本 sample(n)</h2><p>sample() 不带参数会随机返回一条样本数据，带了参数n就会随机返回n条记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.sample() <span class="comment">#随机查看一条记录</span></span><br><span class="line">df.sample(<span class="number">4</span>) <span class="comment">#随机查看4条记录</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dccdd7792d564c64b5b4a6f6b8b68cf5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="随机查看样本 sample(n)"></p><h2 id="4、查看统计摘要"><a href="#4、查看统计摘要" class="headerlink" title="4、查看统计摘要"></a>4、查看统计摘要</h2><p><code>df.describe()</code> 返回所有数字列的统计摘要。<br><img src="https://img-blog.csdnimg.cn/d9cb60a2e4324e6aae5a18e17f82e2be.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="查看统计摘要"></p><p>这里连staff_id的统计摘要就显示出来了，因为它是数字列。如果只看某一列的统计摘要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[[<span class="string">'staff_salary'</span>]].describe()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d1c277b8fc684e47b1ef6eacb1e59d7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="只看某一列的统计摘要"></p><h1 id="二、检索数据"><a href="#二、检索数据" class="headerlink" title="二、检索数据"></a>二、检索数据</h1><p>在数据分析过程中，很多时候需要从数据表中提取出相应的数据，而这么做的前提是需要先“检索”出这一部分数据。虽然通过 Python 提供的索引操作符”[]”和属性操作符”.”可以访问 Series 或者 DataFrame 中的数据，但这种方式只适应与少量的数据，为了解决这一问题，pandas 提供了多种类型的索引方式来实现数据的访问。包括[]、loc\iloc、at\iat、布尔索引<br>一般的:<br>df[‘name’] #会返回本列的Series<br>df.name   #也会返回本列的Series</p><blockquote><p>但是要注意，name应该是一个合法的python变量时才可以直接作为属性来使用。</p></blockquote><p>如：<br><strong>df[‘1级别’]可以正常返回索引列为“1级别”的数据，而df.1级别会报错，因为”1级别”不是一个合法的python变量。</strong><br><img src="https://img-blog.csdnimg.cn/311840594a5d4d968a8e071783b8ad8b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="列索引检索"><br>以下通过DataFrame数据集来说明常用检索数据的方法。对于DataFrame的数据集来说要检索数据通常是确定数据所在的行和列。而确定行和列也有两种方式，一是通过<strong>标签索引</strong>来确定，二是通过数据<strong>所在的位置</strong>来确定。<br>一般的：</p><table><thead><tr><th>操作</th><th>语法</th><th>返回结果</th></tr></thead><tbody><tr><td>选择列</td><td>df[col]</td><td>Series</td></tr><tr><td>按索引选择行</td><td>df.loc[label]</td><td>Series</td></tr><tr><td>按位置选择行</td><td>df.iloc[loc]</td><td>Series</td></tr><tr><td>使用切片选择行</td><td>df[2:5]</td><td>DataFrame</td></tr><tr><td>用表达式筛选行</td><td>df[bool]</td><td>DataFrame</td></tr></tbody></table><h2 id="1、切片"><a href="#1、切片" class="headerlink" title="1、切片[]"></a>1、切片[]</h2><p>通过[]进行检索，这将会对行进行切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#通过切片检索行数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8970b0d6e75847efa828127460679b29.png#pic_center" alt="在这里插入图片描述"></p><p>切片并不对列有效，如果是<code>df[0:3][1:2]</code>，会检索出0-3行，再在这三行切片的基础上切片中检索出第二行。<br><img src="https://img-blog.csdnimg.cn/fe95d1c6e4e44b9f850b8aa31a7a6ac9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="df[0:3][1:2]"></p><p>如果要在切片检索的结果上再选择列，则可以通过列标签索引列表来选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="number">0</span>:<span class="number">3</span>][[<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_gender'</span>]] <span class="comment">#通过列标签索引列表检索列数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5c44f494b92143c6b15c4933e9770b50.png#pic_center" alt="通过列标签索引列表来选择"></p><h2 id="2、loc-iloc"><a href="#2、loc-iloc" class="headerlink" title="2、loc\iloc"></a>2、loc\iloc</h2><h3 id="loc"><a href="#loc" class="headerlink" title="loc"></a>loc</h3><p>df.loc[] 只能使用标签索引，不能使用位置索引。当通过标签索引的切片方式来筛选数据时，它的取值前闭后闭，也就是只包括边界值标签（开始和结束）<br>.loc[] 具有多种访问方法，如下所示：</p><ul><li>一个标量标签 </li><li>标签列表 </li><li>切片对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="number">1</span>] <span class="comment">#标量标签，返回该行标签的Series数据</span></span><br><span class="line">df.loc[[<span class="number">1</span>,<span class="number">3</span>]] <span class="comment">#标签列表，返回标签列表的行DataFrame数据</span></span><br><span class="line">df.loc[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#切片对象，返回切片的行DataFrame数据</span></span><br><span class="line">df.loc[<span class="number">0</span>:<span class="number">3</span>,<span class="string">'staff_id'</span>:<span class="string">'staff_salary'</span>]  <span class="comment">#根据行切片，列切片检索数据</span></span><br><span class="line">df.loc[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_age'</span>]] <span class="comment">#根据行标签列表，列标签列表检索数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6c0b79c29b3b4bd1a6813716ca98d82a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="loc"></p><p>.loc[] 除了标量标签，标签列表和切片对象都接受两个参数，并以’,’分隔。第一个位置表示行检索，第二个位置表示列检索<br><img src="https://img-blog.csdnimg.cn/6fbe652ce26d40fea646154cef558db7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="loc2"></p><h3 id="iloc"><a href="#iloc" class="headerlink" title="iloc"></a>iloc</h3><p>df.iloc[] 只能使用位置索引(用整数表示所在行或列的位置如第几行第几列)，不能使用标签索引，通过整数索引切片选择数据时，前闭后开(不包含边界结束值)。同 Python 和 NumPy 一样，它们的<strong>索引都是从 0 开始</strong><br>.iloc[] 提供了以下方式来选择数据：</p><ul><li>整数索引   </li><li>整数列表  </li><li>数值范围</li></ul><p>为了说明方便，我们把数据集的行索引重名为字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=df.rename(index=&#123;<span class="number">0</span>:<span class="string">'A'</span>,<span class="number">1</span>:<span class="string">'B'</span>,<span class="number">2</span>:<span class="string">'C'</span>,<span class="number">3</span>:<span class="string">'D'</span>,<span class="number">4</span>:<span class="string">'E'</span>,<span class="number">5</span>:<span class="string">'F'</span>,<span class="number">6</span>:<span class="string">'G'</span>,<span class="number">7</span>:<span class="string">'H'</span>,<span class="number">8</span>:<span class="string">'I'</span>,<span class="number">9</span>:<span class="string">'J'</span>&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6803048b73534cefb40d294d9d6745cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="reanme"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">1</span>]  <span class="comment">#整数标量选择，数据从0开始，为1的就是第二行的数据，返回的是Series</span></span><br><span class="line">df.iloc[[<span class="number">1</span>,<span class="number">3</span>]] <span class="comment">#整数列表选择，选择位置为1和3的数据，返回的是DataFrame</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#切片选择，选择位置1至2的数据，不包含边界结束值，也就是不包含3的位置</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">4</span>] <span class="comment">#切片选择位置为1至3的行和1至4的列不含位置为3的行和位置为4的列</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/64187160c75f42a882300bb04b7df7e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="iloc"></p><h2 id="3、at-iat"><a href="#3、at-iat" class="headerlink" title="3、at\iat"></a>3、at\iat</h2><p>at和iat和loc和iloc类似，不同的是at和iat仅取一个具体的值，结构为 at[&lt;索引&gt;,&lt;列名&gt;]，iat[&lt;行位置&gt;,&lt;列位置&gt;]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.at[<span class="string">'A'</span>,<span class="string">'staff_name'</span>]  <span class="comment">#检索第“A”行的列标签为"staff_name"的数据</span></span><br><span class="line">df.iat[<span class="number">0</span>,<span class="number">1</span>]  <span class="comment">#检索第1行第2列的数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8fb64f577fce473eacf05bdf8202215d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="at\iat"></p><h2 id="4、布尔条件检索"><a href="#4、布尔条件检索" class="headerlink" title="4、布尔条件检索"></a>4、布尔条件检索</h2><h3 id="1、-里用布尔条件进行检索"><a href="#1、-里用布尔条件进行检索" class="headerlink" title="1、[] 里用布尔条件进行检索"></a>1、[] 里用布尔条件进行检索</h3><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df.staff_salary&gt;<span class="number">10000</span>)&amp;(df.staff_age&lt;<span class="number">40</span>)]  <span class="comment">#检索staff_age小于40且staff_salary&gt;10000的数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/01374b35c7244e23a70909fd04530e24.png#pic_center" alt="[] 里用布尔条件进行检索"></p><h3 id="2、loc索引部分用布尔条件检索"><a href="#2、loc索引部分用布尔条件检索" class="headerlink" title="2、loc索引部分用布尔条件检索"></a>2、loc索引部分用布尔条件检索</h3><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[(df.staff_salary&gt;<span class="number">10000</span>)&amp;(df.staff_age&lt;<span class="number">40</span>)]  <span class="comment">#检索staff_age小于40且staff_salary&gt;10000的数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4d160148aaaf4e778767ece4a5065283.png#pic_center" alt="loc索引部分用布尔条件检索"></p><h3 id="3、query函数布尔条件检索"><a href="#3、query函数布尔条件检索" class="headerlink" title="3、query函数布尔条件检索"></a>3、query函数布尔条件检索</h3><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.query(<span class="string">'staff_salary&gt;10000 &amp; staff_age&lt;40'</span>) <span class="comment">#通过函数检索staff_age小于40且staff_salary&gt;10000的数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4894b9dc467044de9adb17e56e1d5801.png#pic_center" alt="query函数布尔条件检索"></p><p>至此，本文介绍了pandas常用的数据访问操作通过head()、tail()、sample()、describe()查看数据，通过[]、loc\iloc、at\iat、及布尔条件检索数据。通过灵活运用pandas的各种数据访问方法可以很方便的根据需要查看和检索数据。</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据处理之数据转换(映射map、替换replace、重命名rename)</title>
      <link href="/posts/2c80aac2/"/>
      <url>/posts/2c80aac2/</url>
      
        <content type="html"><![CDATA[<p>我们在数据处理的过程中经常碰到需要对数据进行转换的工作，比如将原来数据里的字典值根据字典转义成有意义的说明，将某些数据转换成其他的数据，将空值转换成其他值，将数据字段名进行重命名等。pandas作为数据处理分析的利器当然为上述的这些数据转换提供了便捷的方法。我们可以利用pandas提供的映射、替换、重命名等操作方便的进行相应的数据转换操作。</p><p>本文通过实例重点介绍pandas常用的数据转换工具映射map()、替换replace()、重命名rename()</p><p><strong>映射</strong>：map()函数 对数据集Serice中的元素根据映射关系进行映射（作用于Serice或DataFrame对象的一列）<br><strong>替换</strong>：replace()函数 替换元素 (作用于DataFrame)<br><strong>重命名</strong>：rename()函数  替换索引 (作用于index或columns)</p><h1 id="一、映射-map"><a href="#一、映射-map" class="headerlink" title="一、映射 map()"></a>一、映射 map()</h1><p>在平时数据处理的过程中常常会碰到，某个字段（数据列）是数字表示的要根据映射表转换成有意思的字符。如性别在数据集里存的是1和2分别表示“男”和“女”，如何将数据集中“性别”列的1和2替换成“男”和“女”如何做？绝对不能用for循环一个个去替换。pandas也好、Numpy也好，都是针对数据集处理的，我们应该抛弃以前针对单个数据处理的思维去拥抱针对数据集来编程。使用pandas的map()方法，最少仅需一行代码就可以解决。<br>map() 函数是做用于 Series 或 DataFrame 对象的一列，它接收一个函数或表示映射关系的字典做为参数，它的基本语法格式以下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series.map(arg,na_action=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>函数中的参数说明以下：</p><ul><li>arg：接收 function、dict 或 Series，表示映射关系；</li><li>na_action：类似R中的na.action，取值为None或ingore，用于控制遇到缺失值的处理方式，设置为ingore时串行运算过程中将忽略Nan值原样返回。</li></ul><p>下面通过实例来说明pandas的map()的使用，演示的student数据集如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\student.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b829442e9d9b402e9f241d04fc3d52ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="student数据集"></p><h2 id="1、通过数据字典映射"><a href="#1、通过数据字典映射" class="headerlink" title="1、通过数据字典映射"></a>1、通过数据字典映射</h2><p>map()方法接受数据字典参数，通过数据字典将数据进行映射。如我们需要将“性别”列的1和2替换成“男”和“女”，定义一个数据字典{1:’男’,2:’女’}，将1映射成“男”，将2映射成“女”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gender_map=&#123;<span class="number">1</span>:<span class="string">'男'</span>,<span class="number">2</span>:<span class="string">'女'</span>&#125;</span><br><span class="line">df[<span class="string">'性别'</span>]=df[<span class="string">'性别'</span>].map(gender_map)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d564c69bd9294e9fbe783c521f913e9f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据字典映射"><br>可以看到通过map()将需要转换的列的值进行的转换，具体的转换过程如下图所示：<br><img src="https://img-blog.csdnimg.cn/fbc75117bc9145098d3a43d848ce76d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="map转换过程"></p><h2 id="2、lambda函数映射"><a href="#2、lambda函数映射" class="headerlink" title="2、lambda函数映射"></a>2、lambda函数映射</h2><p>map()方法还接受lambda函数的方式进行值的映射，如我们现在要把数学分数为95分以上的映射数学等级为“优秀”，95及以下的映射为“良好”。可以通过lambda函数进行映射。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'数学等级'</span>]=df[<span class="string">'5-数学'</span>].map(<span class="keyword">lambda</span> x:<span class="string">'优秀'</span> <span class="keyword">if</span> x&gt;<span class="number">95</span> <span class="keyword">else</span> <span class="string">'良好'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ceea930a6c144766951c729461e4b67f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="lambda函数映射"></p><h2 id="3、通用函数映射"><a href="#3、通用函数映射" class="headerlink" title="3、通用函数映射"></a>3、通用函数映射</h2><p>map()方法可以接收自定义通用的函数进行值的映射，如我们现在要把语文分数为95以上的映射为语文等级为“优秀”，95及以下的映射为“良好”，也可以通过自定义函数来实现映射。<br>先定义一个函数score(x)用于接收需要映射的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(x)</span>:</span></span><br><span class="line">    score_class=<span class="string">'良好'</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">95</span>:</span><br><span class="line">        score_class=<span class="string">'优秀'</span></span><br><span class="line">    <span class="keyword">return</span> score_class</span><br><span class="line">    </span><br><span class="line">df[<span class="string">'语文等级'</span>]=df[<span class="string">'4-语文'</span>].map(score)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1d8ab00c51404059bd2a3738d6a09822.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="函数映射"></p><h1 id="二、替换-replace"><a href="#二、替换-replace" class="headerlink" title="二、替换 replace()"></a>二、替换 replace()</h1><p>如果要对全DataFrame数据集中的数据进行某种替换，map()可能需要对数据集中的每个列都进行map()操作才可以，但是通过pandas的替换方法replace可以一次性替换掉DataFrame中所有的数据。如：我们现在要将数据集中所有的“良好”替换成“良”，所有的“优秀”替换成“优”<br>可以直接通过 <code>df.replace([&#39;优秀&#39;,&#39;良好&#39;],[&#39;优&#39;,&#39;良&#39;])</code> 一句代码搞定。<br><img src="https://img-blog.csdnimg.cn/2dfc6617e129434dba02868ac172d15e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="替换"></p><p>以前文章中介绍了处理缺失值用fillna的方式来填充缺失值，用replace则提供了一种更加简单、灵活的处理缺失值或异常值的方式。<br>如在数据集中有一个数据列“是否接种”，这里的值有“已”、“是”、“否”、NaN，实际是在收集统计表格的时候大家填的数据不一致，不标准。现在需要将“已”的全部改成“是”，NaN没有填的改成“否”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.replace([<span class="string">'已'</span>,np.nan],[<span class="string">'是'</span>,<span class="string">'否'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d5a4ba993ea4540840d22c79204f7c0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="填充缺失值"></p><h1 id="三、重命名-rename"><a href="#三、重命名-rename" class="headerlink" title="三、重命名 rename()"></a>三、重命名 rename()</h1><p>在数据处理的过程有时候需要对列索引进行重命名，一个典型的例子就是对于数据的检索或其他操作df[column]对于任意列名均有效，但是df.column只在列名是有效的Python变量名时才有效。<br>我们在检索英语大于95分的数据时可以用<code>df[df[&#39;6-英语&#39;]&gt;95]</code><br><img src="https://img-blog.csdnimg.cn/3dbf9c7775484138b24860fffa065918.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="英语大于95分的数据"></p><p> 但是用<code>df.query(&#39;6-英语 &gt;95&#39;)</code> 就会报列名没有定义的错，因为’6-英语’列名不是有效的Python变量名。<br><img src="https://img-blog.csdnimg.cn/3e48e91116f94ee28d52a00fd49878ad.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="报列名没有定义的错"></p><p>这时候就需要将列名重命名为有效的Python变量名，有效的Python变量名应该是只能_，数字，字母组成，不可以是空格或者特殊字符(!@#$%^&amp;*~)，不能是数字开头，不能有中文。我们将“6-英语”的列名重命名为“english”。注意带上inplace=True参数用于更新作用于本数据集，而不是返回一个新的数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">'6-英语'</span>:<span class="string">'english'</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">df.query(<span class="string">'english &gt; 95'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/42e0aec53edb418c9844fda59025384f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="重命名"><br>可以看到“6-英语”列名改成了“english”，并且df.query(‘english &gt; 95’)不报错，可以正常检索出数据了。<br>更多的，如果要重命名多个列，可以传入一个需要重命名的多个字典值，进行多个列的重命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[[<span class="string">'1-学号'</span>,<span class="string">'2-姓名'</span>,<span class="string">'3-年龄'</span>]].rename(columns=&#123;<span class="string">'1-学号'</span>:<span class="string">'ID'</span>,<span class="string">'2-姓名'</span>:<span class="string">'name'</span>,<span class="string">'3-年龄'</span>:<span class="string">'age'</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/128baee4f1a14f3b9ebdce0d57f5cb27.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="多个列重命名"></p><p>如果需要重命名行索引，可以通过df.rename(index={‘原索引’:’重命名索引’})的方式进行重命名。</p><p>至此，本文通过几个实例介绍了pandas常用的数据转换工具映射map()、替换replace()、重命名rename()</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据分析之数据运算(逻辑运算、算术运算、统计运算、自定义运算)</title>
      <link href="/posts/f44191db/"/>
      <url>/posts/f44191db/</url>
      
        <content type="html"><![CDATA[<p>数据分析离不开数据运算，在介绍完pandas的数据加载、排序和排名、数据清洗之后，本文通过实例来介绍pandas的常用数据运算，包括逻辑运算、算术运算、统计运算及自定义运算。</p><h1 id="一、逻辑运算"><a href="#一、逻辑运算" class="headerlink" title="一、逻辑运算"></a>一、逻辑运算</h1><p>逻辑运算是程序代码中经常用到的一种运算。pandas的逻辑运算与Python基础语法中的逻辑运算存在一些差异。pandas的逻辑运算主要用于条件过滤根据条件逻辑运算得出的结果过滤检索出相应的数据。<br>我们来看一些例子：<br>数据集为学生数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\student.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/165443b3e5184f3f8bec6762a3b15c0a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="学生数据集"><br>我们要过滤检索出语文成绩大于95分的数据，通过<code>df[&#39;4-语文&#39;]&gt;95</code>的条件语句，可以得到一个结果为bool值的Series，True表示满足语文成绩&gt;95分的，False表示不满足语文成绩&gt;95的。<br>在pandas中，将Series与数值进行比较，会得到一个与自身形状相同且全为布尔值的Series，每个位置的布尔值对应该位置的比较结果。<br>这种进行比较的代码，返回值是布尔值，是一种布尔表达式，也可以被称为逻辑语句，只要代码返回的结果是布尔值，都可以把代码当成逻辑语句。<br><img src="https://img-blog.csdnimg.cn/e69800e180c14afaa4e8ad091047c63b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="语文大于95的逻辑运算"><br>根据逻辑语句的布尔值，可以用来对数据进行筛选，按我们的需要从大量数据中过滤出目标数据。如我们要过滤出语文成绩大于95的数据，就可以用上述逻辑语句的布尔值进行筛选。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">'4-语文'</span>]&gt;<span class="number">95</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b6f335ea42a84b36a9ae1f658a905ffe.png#pic_center" alt="语文大于95的结果"></p><p>除了直接的比较，pandas中有很多函数都会返回布尔值，如all()，any()，isna()等对整个DataFrame或Series的判断结果，eq()，ne()，lt()，gt()等比较函数的结果，都是布尔值。<br>逻辑语句是为逻辑运算服务的，可以直接作为判断条件。在复杂的逻辑关系中，需要使用复合逻辑运算，用逻辑运算符来连接多个逻辑语句，复合逻辑运算包含：逻辑与&amp;、逻辑或|、逻辑非~。</p><h2 id="逻辑与-amp"><a href="#逻辑与-amp" class="headerlink" title="逻辑与&amp;"></a>逻辑与&amp;</h2><p>pandas中用符号 &amp; 表示逻辑与，连接两个逻辑语句，同时为真才为真。在Python基本语法中，使用 and 表示逻辑与，但是Pandas中只能用 &amp; ，不能用and，会报模糊错误。<br>如我们要检索出一班并且语文成绩大于95的数据。可以用 <code>df[(df[&#39;4-语文&#39;]&gt;95) &amp; (df[&#39;班级&#39;]==&#39;一班&#39;)]</code><br>注意两个条件逻辑语句要分别用()括起来然后再用逻辑运算符进行运算。<br><img src="https://img-blog.csdnimg.cn/12811a4b89ac45b4868e756228183915.png#pic_center" alt="逻辑与&amp;"></p><h2 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或|"></a>逻辑或|</h2><p>pandas中用符号 | 表示逻辑或，连接两个逻辑语句，只要其中一个为真就为真。<br>在Python基本语法中，使用 or 表示逻辑或，但是Pandas中只能用 | ，不能用or。<br>如我们要检索出语文成绩大于95或英语成绩大于96的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df[<span class="string">'4-语文'</span>]&gt;<span class="number">95</span>)|(df[<span class="string">'6-英语'</span>]&gt;<span class="number">96</span>)]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/10e77ba0b0b44aceb3681be3c930f045.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="逻辑或|"></p><h2 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非~"></a>逻辑非~</h2><p>pandas中用符号 ~ 表示逻辑非，对逻辑语句取反。<br>在Python基本语法中，使用 not 表示逻辑非，但是Pandas中只能用 ~ ，不能用not。<br>如我们要检索出数据成绩&gt;98并且不是一班的同学</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df[<span class="string">'5-数学'</span>]&gt;<span class="number">98</span>) &amp; ~(df[<span class="string">'班级'</span>]==<span class="string">'一班'</span>)]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f2591c50f3d747b58e7e4750c6e993aa.png#pic_center" alt="逻辑非~"></p><p>当然也可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df[<span class="string">'5-数学'</span>]&gt;<span class="number">98</span>) &amp; (df[<span class="string">'班级'</span>]!=<span class="string">'一班'</span>)]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/eae9e964b0b7436486165af022d3084c.png#pic_center" alt="逻辑不等于"></p><h1 id="二、算术运算"><a href="#二、算术运算" class="headerlink" title="二、算术运算"></a>二、算术运算</h1><p>pandas最重要的一个功能是，它可以对不同索引的对象进行算术运算也就是（+、-、*、\）。<br>常见的算术云算是加法+运算，如果相加的对象是标量，则数据对象通过广播机制，每个数据值都+标量。如果相加的对象是数据对象则按索引进行算术运算。<br>通过一个数据集来看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data1=pd.DataFrame(np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>,<span class="number">4</span>)),columns=[<span class="string">'列1'</span>,<span class="string">'列2'</span>,<span class="string">'列3'</span>,<span class="string">'列4'</span>])</span><br><span class="line">data1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/78e20073ab2b4efbb2aa11947b0a3ddf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="数据运算数据集"></p><h2 id="1、使用算术运算符"><a href="#1、使用算术运算符" class="headerlink" title="1、使用算术运算符"></a>1、使用算术运算符</h2><p>和标量计算，标量运算会在算术运算过程中传播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data2=data1+<span class="number">1</span></span><br><span class="line">data2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6b1aa153243a4f1eb9341bd508470dc0.png#pic_center" alt="加标量"><br>可以看到数据集中每个值都+1了<br>和索引相同的数据对象运算，对每个数据值进行算术运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data3=pd.DataFrame(np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>,<span class="number">4</span>)),columns=[<span class="string">'列1'</span>,<span class="string">'列2'</span>,<span class="string">'列3'</span>,<span class="string">'列4'</span>])</span><br><span class="line">data4=data2+data3</span><br><span class="line">data4</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d0fbbb4f8e39444cad7c58013b6d7862.png#pic_center" alt="DataFrame相加"></p><p>在将对象相加时，如果存在不同的索引就是该索引对的并集。自动的数据对齐操作在不重叠的索引引入NA值。缺失值会在算术运算过程中传播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data5=pd.DataFrame(np.ones([<span class="number">3</span>,<span class="number">3</span>]),columns=[<span class="string">'列1'</span>,<span class="string">'列2'</span>,<span class="string">'列3'</span>])</span><br><span class="line">data5</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ee24e1fd53b34fc390af6e04093ed363.png#pic_center" alt="全为1的数据集"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data6=data4+data5</span><br><span class="line">data6</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9231187b1e724d4bbc2c56c7da8e91d3.png#pic_center" alt="形状不同的数据集相加"></p><h2 id="2、使用算数运算函数"><a href="#2、使用算数运算函数" class="headerlink" title="2、使用算数运算函数"></a>2、使用算数运算函数</h2><p>算数运算函数包括add、sub、div、mul等对应于算术运算符如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>add,radd</td><td>用于加法（+）的方法</td></tr><tr><td>sub,rsub</td><td>用于减法（- ）的方法</td></tr><tr><td>div,rdiv</td><td>用于除法（/）的方法</td></tr><tr><td>floordiv,rfloordiv</td><td>用于底除（//）的方法</td></tr><tr><td>mul,rmul</td><td>用于乘法（* ）的方法</td></tr><tr><td>pow,rpow</td><td>用于指数（**）的方法</td></tr></tbody></table><h3 id="加法："><a href="#加法：" class="headerlink" title="加法："></a>加法：</h3><p>在对不同索引的对象进行算术运算时，如果希望当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值比如0，可以通过算术方法进行填充，然后再相加。<br><img src="https://img-blog.csdnimg.cn/948706b73b834294b8ea720e9eaa434c.png#pic_center" alt="加法函数"><br>上面的例子展示了，因为data5的行索引为3和列索引为列4用0填充后再相加所以行索引为3和列索引为列4的值是data4的值+0</p><h3 id="减法："><a href="#减法：" class="headerlink" title="减法："></a>减法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data4.sub(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/45161a0068d54041a02e414c27e0deb7.png#pic_center" alt="sub函数"></p><h3 id="乘法："><a href="#乘法：" class="headerlink" title="乘法："></a>乘法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data4.mul(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8e656f5db7204caba4b634dc59fbbc93.png#pic_center" alt="mul函数"></p><h3 id="除法："><a href="#除法：" class="headerlink" title="除法："></a>除法：</h3><p><img src="https://img-blog.csdnimg.cn/eff946f3fcbb47ab9feea24d9357b095.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="div函数"></p><h1 id="三、统计运算"><a href="#三、统计运算" class="headerlink" title="三、统计运算"></a>三、统计运算</h1><p>统计运算就是我们常用的数据集的求和、算平均值、最大值、最小值、绝对值、标准差等统计数据。在pandas中提供了丰富的统计函数可以方便的进行统计运算。</p><h2 id="1、describe汇总描述统计"><a href="#1、describe汇总描述统计" class="headerlink" title="1、describe汇总描述统计"></a>1、describe汇总描述统计</h2><p>通过np.random.randn(1000,4)生成1000个正态分布的随机数据集看一下describe的汇总描叙统计。<br>包含了数据个数count、均值mean、标准差std、最小值min、最大值等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1000个正态分布的随机数统计信息</span></span><br><span class="line">data=pd.DataFrame(np.random.randn(<span class="number">1000</span>,<span class="number">4</span>))</span><br><span class="line">data.describe()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6ef0a223ba2c49cea4f7386839c1998f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="describe汇总描述统计"></p><h2 id="2、统计函数"><a href="#2、统计函数" class="headerlink" title="2、统计函数"></a>2、统计函数</h2><p>pandas常用统计函数如下：<br><img src="https://img-blog.csdnimg.cn/80b3d851a7294c44b7523a9eb9a22bd3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="常用统计函数"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.max()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fa0ca68d2277473586de6ec2e089e47a.png#pic_center" alt="max函数"></p><p>可以算出DataFrame中每一列的最大值</p><p>如果只需要计算某一列的最大值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">1</span>].max()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4e11735cfe58470f91b72a915de7886b.png#pic_center" alt="计算某一列的最大值"></p><p>对单个函数进行统计的时候，坐标轴还是按照这些默认为columns(axis=0, default)，如果要对index进行统计，则要指明(axis=1) 这里的axis取值与axis=0对应index，axis=1对应columns不同</p><ul><li>使用0值表示沿着每一列或行标签\索引值向下执行方法</li><li>使用1值表示沿着每一行或者列标签模向执行对应的方法<br><img src="https://img-blog.csdnimg.cn/3827ea96c8724e879da33ce993bb1240.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="axis=1"></li></ul><p>如果要计算某一行的最大值<br>用<code>data.loc[0].max()</code>，通过loc[]检索出需要统计的行，再用统计函数进行统计<br><img src="https://img-blog.csdnimg.cn/f8c7621c31d14cfc8fca280df90e9081.png#pic_center" alt="计算某一行的最大值"><br>累计统计cumsum,计算前n个数的和<br><img src="https://img-blog.csdnimg.cn/3fe08e6ee5b64162bbfc25f6f5ab44ec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="计算前n个数的和"></p><h1 id="四、自定义运算"><a href="#四、自定义运算" class="headerlink" title="四、自定义运算"></a>四、自定义运算</h1><p>如果常用的统计运算还不能满足，pandas提供了方法可以进行自定义运算。</p><p> apply(func, axis=0)</p><ul><li>func – 自定义函数 axis=0 – 默认是列（按行标签方向执行方法）</li><li>axis=1为对行进行运算（按列标签方向执行方法）</li></ul><p>如：自定义一个对列求max-min的函数<br><img src="https://img-blog.csdnimg.cn/9c3f83e3362e4fbd98ca97692a2c730a.png#pic_center" alt="head()"><br>通过lambda匿名函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.apply(<span class="keyword">lambda</span> x: x.max() - x.min()) <span class="comment"># lambda为匿名函数，x为自变量，冒号后面为函数表达式</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5faf44ec89af43068ad3524f46fd1ee3.png#pic_center" alt="lambda匿名函数"></p><p>通过自定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxdivmin</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x.max()-x.min()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0c8d377e7cfb47189c03ee52257fc215.png#pic_center" alt="自定义函数"><br>至此，本文通过实例简单介绍了pandas数据分析的数据运算包括逻辑运算、算术运算、统计运算、自定义运算，也是平时在实际应用中常用的运算。</p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据清洗之处理缺失、重复、异常数据</title>
      <link href="/posts/a87a78e2/"/>
      <url>/posts/a87a78e2/</url>
      
        <content type="html"><![CDATA[<p>在数据分析和建模的过程中，有相当多的时间要用在数据准备上：加载、清理、转换以及重塑。这些工作会占到分析师时间的80%或更多。幸运的是pandas和内置的Python标准库提供了高效、灵活的工具可以帮助我们轻松的做这些事情。</p><p>本文重点介绍通过pandas进行数据的清洗。数据处理中的清洗工作主要包括对需要分析的数据集中的缺失值（空值）、重复值、异常值的处理。对于数据清洗一般也是分两个步骤，第一步就是要很方便快速的找到需要处理的数据，如何快速找到数据中的缺失值（空值）、重复数据或异常的数据，第二步是对找到的数据根据自己的实际使用需求进行处理，如删除还是替换成其他的数据。<br><img src="https://img-blog.csdnimg.cn/1013415fe61e4504be7a584b42f12daf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_8,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pandas数据清洗"></p><h1 id="一、处理缺失值"><a href="#一、处理缺失值" class="headerlink" title="一、处理缺失值"></a>一、处理缺失值</h1><p>在许多数据分析工作过程中，由于对数据质量问题，缺失数据是经常发生的。对于数值数据，pandas使用浮点值NaN(Not a Number)表示缺失数据。在pandas中，还采用了R语言中惯用的缺失值表示法NA，它表示不可用not available。在统计应用中，NA数据可能是不存在的数据或虽然存在但是看不到。进行数据清洗对缺失数据进行分析，以判断数据采集的问题或缺失数据导致的偏差。</p><h2 id="1、判断缺失值（空值）"><a href="#1、判断缺失值（空值）" class="headerlink" title="1、判断缺失值（空值）"></a>1、判断缺失值（空值）</h2><p>在pandas中通过isna()或isnull()方法判断空值，二者等价，用于判断一个series或dataframe各元素值是否为空的bool结果。需注意对空值的界定：即None或numpy.nan才算空值，而空字符串、空列表等则不属于空值；类似地，notna()和notnull()则用于判断是否非空。<br>看下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">stud_data=pd.Series([<span class="string">'张三'</span>,<span class="string">'李四'</span>,np.nan,[],<span class="string">''</span>,<span class="literal">None</span>,<span class="string">'王五'</span>])</span><br><span class="line">stud_data</span><br></pre></td></tr></table></figure><p>通过stud_data.isnull()和stud_data.isna()分别来判断空值<br><img src="https://img-blog.csdnimg.cn/5e5303378e084de8b8326c3a55d61d4a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="判断空值"></p><p>类似地，notna()和notnull()则用于判断是否非空<br><img src="https://img-blog.csdnimg.cn/24a955afccac4e9199e31fb91e3eb3d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_10,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="判断是否非空"><br>同样的对于DataFrame中的缺失数据判断也是一样的。<br>构建DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stud_df=pd.DataFrame(stud_data,columns=[<span class="string">'student_name'</span>])</span><br><span class="line">stud_df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa151caaefd54026927b43521b3e89af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="DataFrame中的缺失数据判断"></p><p>对于缺失值的处理有两种常用的方式，一是用按一定的策略对空值进行填充，二是对于缺失值干脆进行删除。</p><h2 id="2、填充缺失值（空值）"><a href="#2、填充缺失值（空值）" class="headerlink" title="2、填充缺失值（空值）"></a>2、填充缺失值（空值）</h2><p>pandas中用户填充缺失值的方法是fillna()，可以按一定的策略对空值进行填充，如常数填充、向前/向后填充等，也可通过inplace参数确定是否本地更改。</p><h3 id="1-常量填充"><a href="#1-常量填充" class="headerlink" title="1.常量填充"></a>1.常量填充</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stud_df[[<span class="string">'student_name'</span>]].fillna(<span class="string">'某某'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8b7c06b63b544d7698ceba74dd2cfe24.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="常量填充"></p><p>可以看到判断为缺失值的地方都填充了”某某”，因为空字符串和空列表都不是缺失值，所以没有填充。</p><h3 id="2-向前和向后填充NA"><a href="#2-向前和向后填充NA" class="headerlink" title="2.向前和向后填充NA"></a>2.向前和向后填充NA</h3><p>通过fillna(mathod=’ffill’)，mathod=’ffill’ 向前填充和 mathod=’bfill’ 向后填充，也就是说用前面的值来填充NA或用后面的值来填充NA<br>我们来增加一列性别列gender来看一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stud_gender_data=pd.Series([<span class="number">1</span>,<span class="number">0</span>,np.nan,<span class="string">'女'</span>,<span class="number">1</span>,<span class="literal">None</span>,<span class="string">'男'</span>])</span><br><span class="line">stud_df[<span class="string">'gender'</span>]=stud_gender_data</span><br><span class="line">stud_df</span><br><span class="line">stud_df[[<span class="string">'gender'</span>]].fillna(method=<span class="string">'ffill'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4347d66cbf6145e284457cf6dd72baf0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="向前和向后填充NA"></p><p>可以看到通过method=’ffill’，将NaN和None前面的值填充端到了NaN和None。<br>用fillna()进行填充会返回一个填充好的数据集的副本，并没有对原始数据进行操作，如果要修改原始数据可以通过inplace参数确定是否本地更改。<br><img src="https://img-blog.csdnimg.cn/57011ee8f66a472a94ce0af4fa5f3ee4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="通过inplace参数确定是否本地更改"></p><h2 id="3、删除缺失值（空值）"><a href="#3、删除缺失值（空值）" class="headerlink" title="3、删除缺失值（空值）"></a>3、删除缺失值（空值）</h2><p>如果想删除缺失值，那么使用 dropna() 函数与参数 axis 可以实现。在默认情况下，按照 axis=0 来按行处理，这意味着如果某一行中存在 NaN 值将会删除整行数据。如果在dropna()中传入<code>how=&#39;all&#39;</code>将只会删除全为NA或NaN的行。示例如下：<br><img src="https://img-blog.csdnimg.cn/0eed969515fe431e86b7a17cb7c6ec05.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="删除缺失值（空值）"></p><h1 id="二、处理重复值"><a href="#二、处理重复值" class="headerlink" title="二、处理重复值"></a>二、处理重复值</h1><p>重复数据也是在实际数据处理过程中碰到比较多的，处理重复数据就是在数据集中找出重复数据然后将其删除保留一个唯一不重复的数据。</p><h2 id="1、检测重复值"><a href="#1、检测重复值" class="headerlink" title="1、检测重复值"></a>1、检测重复值</h2><p>pandas通过duplicated()方法检测各行是否重复，返回一个行索引的bool结果，可通过keep参数设置保留第一行、最后一行、无保留，例如keep=first意味着在存在重复的多行时，首行被认为是合法的而可以保留。<br>构造一个DataFrame来看一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=pd.DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'A'</span>,<span class="string">'B'</span>]*<span class="number">3</span>+[<span class="string">'B'</span>],<span class="string">'key2'</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]&#125;)</span><br><span class="line">data</span><br><span class="line">data.duplicated()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e4e8559ffcf14f718f72f6a93f7d4c86.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="检测重复值"></p><h2 id="2、删除重复值"><a href="#2、删除重复值" class="headerlink" title="2、删除重复值"></a>2、删除重复值</h2><p>pandas通过drop_duplicates()方法按行检测并删除重复的记录，也可通过keep参数设置保留项。由于该方法默认是按行进行检测，如果存在某个需要需要按列删除，则可以先转置再执行该方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.drop_duplicates()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0b23707f00c84944a6eb1b417eb51e95.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_9,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="删除重复值"><br>可以看到第7行也就是index为6的重复行被删除了。<br>当带了<code>keep=&#39;last&#39;</code>参数时，保留最后一个重复项，前面的重复项将被丢弃。可以看到保留的是索引为6的，索引为5的重复项被丢弃了。<br><img src="https://img-blog.csdnimg.cn/16068ab867b04514b64a628d8b69f7e4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="保留最后一个重复项"></p><h1 id="三、处理异常值"><a href="#三、处理异常值" class="headerlink" title="三、处理异常值"></a>三、处理异常值</h1><h2 id="1、判断异常值"><a href="#1、判断异常值" class="headerlink" title="1、判断异常值"></a>1、判断异常值</h2><p>判断异常值的标准依赖具体分析数据，如大于或小于某个基线范围的值。<br>我们来看一个含有正态分布的DataFrame数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data=pd.DataFrame(np.random.randn(<span class="number">1000</span>,<span class="number">4</span>))</span><br><span class="line">data.describe()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/035abbd8a84e464da0b9a3c26e9db1df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="含有正态分布的DataFrame数据集"></p><p>假设我们认为某列中绝对值大小超过3的是异常值，那么判断异常值就是要找出某列中大小超过3的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[np.abs(col)&gt;<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/632fe5b430da4aeabf8ce886d9e833e5.png#pic_center" alt="找出某列中大小超过3的值"></p><p>要选出全部含有绝对值大小超过3的行，可以在布尔型DataFrame中使用any()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[(np.abs(data)&gt;<span class="number">3</span>).any(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4e076b66d0be430689a36f0ae2568742.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="全部含有绝对值大小超过3的行"></p><h2 id="2、替换异常值"><a href="#2、替换异常值" class="headerlink" title="2、替换异常值"></a>2、替换异常值</h2><p>对于异常值，可以直接替换。<br>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[np.abs(data)&gt;<span class="number">3</span>]=np.sign(data)*<span class="number">3</span></span><br></pre></td></tr></table></figure><p>这样就可以将异常值替换为绝对值不大于3的<br><img src="https://img-blog.csdnimg.cn/db6fd6434ca948fd8485a2aafe8f031c.png#pic_center" alt="替换异常值"></p><h2 id="3、删除异常值"><a href="#3、删除异常值" class="headerlink" title="3、删除异常值"></a>3、删除异常值</h2><p>删除异常值，可以用pandas的drop()方法，接受参数在特定轴线执行删除一条或多条记录，可通过axis参数设置是按行删除还是按列删除<br>如删除第3列，列索引为2的列中绝对值&gt;3的行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">col=data[<span class="number">2</span>]</span><br><span class="line">data.drop(data[np.abs(col)&gt;<span class="number">3</span>].index,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ab8dbd69ba3d4da2a94d77d280c36dcb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="删除异常值"></p><p>可以看到本来有1000行的，删除了3行，再用data[np.abs(col)&gt;3]验证，已经找不到数据了。</p><p>至此，本文通过实例介绍了pandas进行数据清洗包括缺失值、重复值及异常值的处理。数据清洗是数据分析前面的准备工作，数据质量的好坏将直接影响数据分析的结果。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据分析之排序和排名(sort和rank)</title>
      <link href="/posts/16c9fc17/"/>
      <url>/posts/16c9fc17/</url>
      
        <content type="html"><![CDATA[<p>对数据集进行排序和排名的是常用最基础的数据分析手段，pandas提供了方便的排序和排名的方法，通过简单的语句和参数就可以实现常用的排序和排名。</p><p>本文以student数据集的DataFrame为例来演示和介绍pandas数据分析之排序和排名(sort和rank)。<br>数据集内容如下，包括学生的学号、姓名、年龄及语文、数学、英语的成绩：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\student.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/50b98632593d4d96bc9d95d0914ba377.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="student数据集"><br>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><h1 id="一、排序"><a href="#一、排序" class="headerlink" title="一、排序"></a>一、排序</h1><p>对数据集进行排序是是常用的数据分析需求之一。pandas提供了按 索引标签排序sort_index()和按值排序sort_values()两种排序方法。对于DataFrame，可以根据任意一个轴上的索引标签进行排序。默认顺序排序，也可以设置按倒序排序。</p><h2 id="1、按标签排序"><a href="#1、按标签排序" class="headerlink" title="1、按标签排序"></a>1、按标签排序</h2><h3 id="1）按行标签索引排序"><a href="#1）按行标签索引排序" class="headerlink" title="1）按行标签索引排序"></a>1）按行标签索引排序</h3><p>pandas默认按行标签索引顺序排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按行索引排序</span></span><br><span class="line">df.sort_index()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7f59ca64cf504f0a81269276187a4ae9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按行索引排序"><br>可以通过设置<code>ascending=False</code>参数进行倒序排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按行索引倒序排序</span></span><br><span class="line">df.sort_index(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/62cc7ea3d992450ea8c69e1552605427.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按行索引倒序排序"></p><h3 id="2）按列标签索引排序"><a href="#2）按列标签索引排序" class="headerlink" title="2）按列标签索引排序"></a>2）按列标签索引排序</h3><p>通过给 axis 轴参数传递 0 或 1，可以对列标签进行排序。默认情况下，axis=0 表示按行排序；而 axis=1 则表示按列排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按列索引排序</span></span><br><span class="line">df.sort_index(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/555275e9780b4b9d911350ebf691b561.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按列索引排序"><br>同样可以设置ascending=False参数进行倒序排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按列索引倒序排序</span></span><br><span class="line">df.sort_index(axis=<span class="number">1</span>,ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2b8e879e51f94dfa8ed66013d5b46ebf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按列索引倒序排序"></p><h2 id="2、按值排序"><a href="#2、按值排序" class="headerlink" title="2、按值排序"></a>2、按值排序</h2><p>在实际应用中用得最多的应该是根据某一列的值进行排序。在pandas中可以通过sort_value()，在sort_value中可以设定按某个列排序，也可以通过sort_value(by=[])，通过设置by=[‘a’,’b’]列表来指定多个需要排序的列。</p><h3 id="1）对单个列的值排序"><a href="#1）对单个列的值排序" class="headerlink" title="1）对单个列的值排序"></a>1）对单个列的值排序</h3><p>如在数据集中对语文成绩进行排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩排序</span></span><br><span class="line">df.sort_values(<span class="string">'4-语文'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20590ee5b8ed45e69ec3f8936dadaba7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="对语文成绩进行排序"></p><h3 id="2）对多个列的值进行排序"><a href="#2）对多个列的值进行排序" class="headerlink" title="2）对多个列的值进行排序"></a>2）对多个列的值进行排序</h3><p>通过设置by=[‘a’,’b’]列表来指定多个需要排序的列。<br>如对数据集中的语文和数学进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文、数学排序</span></span><br><span class="line">df.sort_values(by=[<span class="string">'4-语文'</span>,<span class="string">'5-数学'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4137cab46c284d499f180dae9f32bdc2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="对数据集中的语文和数学进行排序"></p><h2 id="3、排序算法"><a href="#3、排序算法" class="headerlink" title="3、排序算法"></a>3、排序算法</h2><p>sort_values() 提供了参数kind用来指定排序算法。这里有三种排序算法：</p><ul><li>mergesort（归并排序） </li><li>heapsort（堆排序） </li><li>quicksort（快速排序）</li></ul><p>默认为 quicksort(快速排序) ，其中 mergesort归并排序是最稳定的算法。<br>具体用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文、数学用mergesort归并排序算法排序</span></span><br><span class="line">df.sort_values(by=[<span class="string">'4-语文'</span>,<span class="string">'5-数学'</span>],kind=<span class="string">'mergesort'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8def3ea3da0048298166f0fff482ccca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="排序算法"></p><h1 id="二、排名"><a href="#二、排名" class="headerlink" title="二、排名"></a>二、排名</h1><p>排名和排序的区别在于排序一定是有顺序，而排名分先后并列。如在现实生活中相同的分数存在排名并列的情况。<br>在《使用python进行数据分析》一书中对rank排名的描述为：排名是指对数组从1到有效数据点总数分配名次的操作。Series和DataFrame的rank方法是实现排名的方法，默认情况下，rank是通过“为各组分配一个平均排名”的方式破坏平级关系。这段话讲得是什么鬼？其实就是在存在并列排名的时候采用一定的策略来打破这种关系。<br>排名中的平级关系打破方法有如下几种：</p><table><thead><tr><th>method</th><th>说明</th></tr></thead><tbody><tr><td>average</td><td>默认：在每个组中分配平均排名</td></tr><tr><td>min</td><td>对整个组使用最小排名</td></tr><tr><td>max</td><td>对整个组使用最大排名</td></tr><tr><td>first</td><td>按照值在数据中出现的次序分配排名</td></tr><tr><td>dense</td><td>类似于method=’min’,但组件排名总是加1，而不是一个组中的相等元素的数量</td></tr></tbody></table><p><strong>rank()函数原型：</strong><code>rank(axis=0, method: str = &#39;average&#39;, numeric_only: Union[bool, NoneType] = None, na_option: str = &#39;keep&#39;, ascending: bool = True, pct: bool = False)</code><br>这里method取值可以为’average’，’first’，’min’， ‘max’，’dense’，用来打破排名中的平级关系的。<br>光看这些说明还是比较难理解。下面通过实例来说明：</p><h2 id="1、默认average-排名"><a href="#1、默认average-排名" class="headerlink" title="1、默认average 排名"></a>1、默认average 排名</h2><p>在数据集中我们只取“学号”、“姓名”、“语文”，然后取“语文”的排名，默认average</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_rank=df[[<span class="string">'1-学号'</span>,<span class="string">'2-姓名'</span>,<span class="string">'4-语文'</span>]].copy()</span><br><span class="line"><span class="comment">#按语文成绩进行rank的默认排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/213aa6cf088d48b69f48ac64845f4581.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="默认average 排名"></p><p>这个排名很奇怪，97分排名第一没有问题，居然没有第二名，三个96分排名均为3，还有两个90分排名为9.5。这是什么鬼？<br>原来这就是默认的“average”规则,成绩相同时，取顺序排名中所有名次之和除以该成绩的个数，如两个90分的名次为最后两名分别为9名和10名，即(9+10)/2=9.5，三个96分的名次分别为2、3、4 那么排名为（2+3+4)/3=9/3=3</p><h2 id="2、mothod-’min’的排名"><a href="#2、mothod-’min’的排名" class="headerlink" title="2、mothod=’min’的排名"></a>2、mothod=’min’的排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行min排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'min'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b289018016d448c6a59b03c6641ed06f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行min排名"></p><p>在这个排名中看到有3个并列为2的排名，但没有排名为3、4的，有两个排名为9的，但没有排名为10的。可以看出当method=“min”时，成绩相同的同学，取在顺序排名中最小的那个排名作为该值的排名，张三、王五、顾十三个同学都是96分排名分别为2、3、4，那么当method为min时，取2、3、4的最小的那个作为成绩为96的整体排名即第2名。因为有了三个2名，接下来就从5名开始，5、6、7、8，到了第9名又有两个同分数的取9、10的最小排名为9，所以有两个9名。</p><h2 id="3、mothod-’max’的排名"><a href="#3、mothod-’max’的排名" class="headerlink" title="3、mothod=’max’的排名"></a>3、mothod=’max’的排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行max排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'max'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/397162df3494435c9acde13fc286eee5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行max排名"><br>与min相反，成绩相同的同学，排名相同取顺序最大的排名，张三、王五、顾十三个同学都是96分排名分别为2、3、4，那么当method为min时，取2、3、4的最小的那个作为成绩为96的整体排名即第2名。当method为max时，取最大的4作为96分的整体排名，同理90分的取10为90分的整体排名。</p><h2 id="4、mothod-’first’的排名"><a href="#4、mothod-’first’的排名" class="headerlink" title="4、mothod=’first’的排名"></a>4、mothod=’first’的排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行first排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'first'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dfda709d0192404abf719ca156906758.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行first排名"></p><p>first排名很好理解了，有点先到先得的意思，成绩相同，谁的索引排前，谁的排名就靠前，比如张三、王五、顾十 这三个同学都是96分，按理应该是并列第2，但张三的索引比王五和顾十的都靠前，王五的索引比顾十靠前，所以他们的顺序分别为2、3、4，同理陈一、钱七的分数都是90分，但陈一的索引比钱七靠前所以陈一排名为9、钱七排名第10</p><h2 id="5、mothod-’dense’的排名"><a href="#5、mothod-’dense’的排名" class="headerlink" title="5、mothod=’dense’的排名"></a>5、mothod=’dense’的排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行dense排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'dense'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'语文排名'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2156d32683ea43da8294df5329869bef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行dense排名"><br>“dense”: 是密集的意思，也比较好理解，即相同成绩的同学排名相同，其他依次加1即可。可以看到张三、王五、顾十这三位同学都是96分，并列排名第2，后面的加1，即比他们分数稍低的赵六95分排名第3，后面依次。</p><h2 id="6、不同method的排名对比"><a href="#6、不同method的排名对比" class="headerlink" title="6、不同method的排名对比"></a>6、不同method的排名对比</h2><p>最后不同method的排名对比：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按语文成绩进行rank的默认排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-average'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#按语文成绩进行min排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-min'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'min'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#按语文成绩进行max排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-max'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'max'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#按语文成绩进行first排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-first'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'first'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#按语文成绩进行dense排名</span></span><br><span class="line">df_rank[<span class="string">'语文排名-dense'</span>]=df_rank[<span class="string">'4-语文'</span>].rank(method=<span class="string">'dense'</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">df_rank.sort_values(by=<span class="string">'4-语文'</span>,ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c082acec2ed9426aa5af7cee47d3ac30.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="按语文成绩进行rank的默认排名"></p><p>数据集及源代码见：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据结构(Series和DataFrame)</title>
      <link href="/posts/531458d5/"/>
      <url>/posts/531458d5/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>无可非议，pandas是Python最强大的数据分析和探索工具之一，因金融数据分析工具而开发，支持类似于SQL语句的模型，可以对数据进行增删改查等操作，支持时间序列分析，也能够灵活的处理缺失的数据。它含有使数据分析工作变得更快更简单的高级数据结构和操作工具。pandas是基于NumPy构建的，让以NumPy为中心的应用变得更加简单。</p><p>这里所说的让pandas变得更快更简单的高级数据结构就是Series和DataFrame。要熟练使用pandas，首先得要熟悉它的这两个主要的数据结构：<strong>Series</strong>和<strong>DateFrame</strong>。</p><p>本文将针对Series和DateFrame，介绍Series和DataFrame数据对象的创建及基于数据对象的基础上对数据进行选择、增加、删除等数据操作。</p><h1 id="一、Series"><a href="#一、Series" class="headerlink" title="一、Series"></a>一、Series</h1><p>Series是一种类似于一维数组对象，它是由一组的数据值value（各种NumPy数据类型）以及一组与之相关的数据标签index（即索引）组成，其中标签与数据值之间是一一对应的关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">obj = pd.Series([<span class="string">'陈一'</span>,<span class="string">'周二'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'钱七'</span>,<span class="string">'孙八'</span>,<span class="string">'何九'</span>,<span class="string">'顾十'</span>])</span><br><span class="line">obj</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    陈一</span><br><span class="line"><span class="number">1</span>    周二</span><br><span class="line"><span class="number">2</span>    张三</span><br><span class="line"><span class="number">3</span>    李四</span><br><span class="line"><span class="number">4</span>    王五</span><br><span class="line"><span class="number">5</span>    赵六</span><br><span class="line"><span class="number">6</span>    钱七</span><br><span class="line"><span class="number">7</span>    孙八</span><br><span class="line"><span class="number">8</span>    何九</span><br><span class="line"><span class="number">9</span>    顾十</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>Series的字符串表现形式为：索引在左边，值在右边。由于没有为数据指定索引，于是会自动创建一个0到N-1（N为数据的长度）的整数型索引。<br><img src="https://img-blog.csdnimg.cn/1a4a56b01582403abdfa33f45b1ba496.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Serires数据结构"></p><p>可以通过Series的values和index属性获取其数组表示形式和索引对象。<br><img src="https://img-blog.csdnimg.cn/7430b9ace9584288a9495cb835f19b9e.png#pic_center" alt="通过Series的values和index属性获取其数组表示形式和索引对象"></p><p><strong>可以将Series看成一个定长的有序字典，因为它是索引值到数据值的一个映射。</strong></p><h2 id="1、Series对象创建"><a href="#1、Series对象创建" class="headerlink" title="1、Series对象创建"></a>1、Series对象创建</h2><p>pandas 使用 Series()  函数来创建 Series 对象，通过这个对象可以调用相应的方法和属性，从而达到处理数据的目的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">obj=pd.Series( data, index, dtype, copy)</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>输入的数据，可以是列表、常量、ndarray 数组等。</td></tr><tr><td>index</td><td>索引值必须是惟一的，如果没有传递索引，则默认为 np.arrange(n)。</td></tr><tr><td>dtype</td><td>dtype表示数据类型，如果没有提供，则会自动判断得出。</td></tr><tr><td>copy</td><td>表示对 data 进行拷贝，默认为 False。</td></tr></tbody></table><p>data可以是列表、常量、ndarray数组等，如果数据被存放在一个Python字典dict中，也可以直接通过这个dict来创建Series，如果没有传入索引时会按照字典的键来构造索引；反之，当传递了索引时需要将索引标签与字典中的值一一对应。<br>前面的列子是通过列表来创建的Series，接下来看下通过ndarray和dic来创建Series。</p><h3 id="通过ndarray创建Series"><a href="#通过ndarray创建Series" class="headerlink" title="通过ndarray创建Series"></a>通过ndarray创建Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ndarray创建Series</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data=np.array([<span class="string">'陈一'</span>,<span class="string">'周二'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'钱七'</span>,<span class="string">'孙八'</span>,<span class="string">'何九'</span>,<span class="string">'顾十'</span>])</span><br><span class="line">obj= pd.Series(data)</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    陈一</span><br><span class="line"><span class="number">1</span>    周二</span><br><span class="line"><span class="number">2</span>    张三</span><br><span class="line"><span class="number">3</span>    李四</span><br><span class="line"><span class="number">4</span>    王五</span><br><span class="line"><span class="number">5</span>    赵六</span><br><span class="line"><span class="number">6</span>    钱七</span><br><span class="line"><span class="number">7</span>    孙八</span><br><span class="line"><span class="number">8</span>    何九</span><br><span class="line"><span class="number">9</span>    顾十</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="通过dict创建Series"><a href="#通过dict创建Series" class="headerlink" title="通过dict创建Series"></a>通过dict创建Series</h3><p>#通过dict创建Series,没有设置indx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">'1'</span> :<span class="string">'张三'</span>, <span class="string">'2'</span> :<span class="string">'李四'</span>, <span class="string">'3'</span> : <span class="string">'王五'</span>&#125;</span><br><span class="line">obj=pd.Series(data)</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>    张三</span><br><span class="line"><span class="number">2</span>    李四</span><br><span class="line"><span class="number">3</span>    王五</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>当传递的索引值无法找到与其对应的值时，使用 NaN（非数字）填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过dict创建Series,设置indx</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">'1'</span> :<span class="string">'张三'</span>, <span class="string">'2'</span> :<span class="string">'李四'</span>, <span class="string">'3'</span> : <span class="string">'王五'</span>&#125;</span><br><span class="line">obj=pd.Series(data,index=[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'4'</span>])</span><br><span class="line"><span class="comment">#索引4没有在dict的对应的key，所以使用NaN（非数字）填充</span></span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>     张三</span><br><span class="line"><span class="number">2</span>     李四</span><br><span class="line"><span class="number">4</span>    NaN</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h2 id="2、Series操作"><a href="#2、Series操作" class="headerlink" title="2、Series操作"></a>2、Series操作</h2><h3 id="Series数据访问"><a href="#Series数据访问" class="headerlink" title="Series数据访问"></a>Series数据访问</h3><p>Series提供了多种数据访问的方式，可以通过位置下标及索引来访问数据，可以访问单个数据也可以访问多个数据。</p><h4 id="通过位置下标及索引来访问数据"><a href="#通过位置下标及索引来访问数据" class="headerlink" title="通过位置下标及索引来访问数据"></a>通过位置下标及索引来访问数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data=np.array([<span class="string">'陈一'</span>,<span class="string">'周二'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>])</span><br><span class="line">obj= pd.Series(data,index=[<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>])</span><br><span class="line">print(<span class="string">'obj的Series数据'</span>)</span><br><span class="line">print(obj)</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#位置下标访问</span></span><br><span class="line">print(<span class="string">'位置下标访问:obj[0]'</span>)</span><br><span class="line">print(obj[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#切片访问</span></span><br><span class="line">print(<span class="string">'位置切片访问多个元素值:obj[1:3]'</span>)</span><br><span class="line">print(obj[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#索引访问</span></span><br><span class="line">print(<span class="string">'索引访问:obj[obj.index==\'三\']'</span>)</span><br><span class="line">print(obj[obj.index==<span class="string">'三'</span>])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#索引访问</span></span><br><span class="line">print(<span class="string">'索引访问:obj[\'一\']'</span>)</span><br><span class="line">print(obj[<span class="string">'一'</span>])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#索引列表访问</span></span><br><span class="line">print(<span class="string">'索引列表访问多个元素值:obj[[\'二\',\'三\']]'</span>)</span><br><span class="line">print(obj[[<span class="string">'二'</span>,<span class="string">'三'</span>]])</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">obj的Series数据</span><br><span class="line">一    陈一</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">四    李四</span><br><span class="line">五    王五</span><br><span class="line">六    赵六</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">位置下标访问:obj[<span class="number">0</span>]</span><br><span class="line">陈一</span><br><span class="line"></span><br><span class="line">位置切片访问多个元素值:obj[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">索引访问:obj[obj.index==<span class="string">'三'</span>]</span><br><span class="line">三    张三</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">索引访问:obj[<span class="string">'一'</span>]</span><br><span class="line">陈一</span><br><span class="line"></span><br><span class="line">索引列表访问多个元素值:obj[[<span class="string">'二'</span>,<span class="string">'三'</span>]]</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h4 id="head-amp-tail-查看数据"><a href="#head-amp-tail-查看数据" class="headerlink" title="head()&amp;tail()查看数据"></a>head()&amp;tail()查看数据</h4><p>如果想要查看 Series 的某一部分数据，可以使用 head() 或者 tail() 方法。其中 head() 返回前 n 行数据，默认显示前 5 行数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data=np.array([<span class="string">'陈一'</span>,<span class="string">'周二'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>])</span><br><span class="line">obj= pd.Series(data,index=[<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>])</span><br><span class="line"><span class="comment">#输出前三行数据</span></span><br><span class="line">print(<span class="string">'输出前三行数据'</span>)</span><br><span class="line">print(obj.head(<span class="number">3</span>))</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#输出后两行数据</span></span><br><span class="line">print(<span class="string">'输出后两行数据'</span>)</span><br><span class="line">print(obj.tail(<span class="number">2</span>))</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输出前三行数据</span><br><span class="line">一    陈一</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">输出后两行数据</span><br><span class="line">五    王五</span><br><span class="line">六    赵六</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="Series数据增加"><a href="#Series数据增加" class="headerlink" title="Series数据增加"></a>Series数据增加</h3><h4 id="1-直接通过索引增加"><a href="#1-直接通过索引增加" class="headerlink" title="1.直接通过索引增加"></a>1.直接通过索引增加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过索引增加数据</span></span><br><span class="line">obj[<span class="string">'十一'</span>]=<span class="string">'肖十一'</span></span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line">一      陈一</span><br><span class="line">二      周二</span><br><span class="line">三      张三</span><br><span class="line">四      李四</span><br><span class="line">五      王五</span><br><span class="line">六      赵六</span><br><span class="line">十一    肖十一</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h4 id="2-通过append-增加"><a href="#2-通过append-增加" class="headerlink" title="2.通过append()增加"></a>2.通过append()增加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过append()增加多个数据</span></span><br><span class="line">obj2=pd.Series([<span class="string">'郭芙蓉'</span>,<span class="string">'杨过'</span>],index=[<span class="string">'十二'</span>,<span class="string">'十三'</span>])</span><br><span class="line">obj=obj.append(obj2)</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一      陈一</span><br><span class="line">二      周二</span><br><span class="line">三      张三</span><br><span class="line">四      李四</span><br><span class="line">五      王五</span><br><span class="line">六      赵六</span><br><span class="line">十一    肖十一</span><br><span class="line">十二    郭芙蓉</span><br><span class="line">十三     杨过</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="Series数据修改"><a href="#Series数据修改" class="headerlink" title="Series数据修改"></a>Series数据修改</h3><p>Series数据可以通过制定索引直接修改<br>如：修改索引为十一的数据，直接obj[‘十一’]=’肖XX’，就可以进行修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改Series数据</span></span><br><span class="line">obj[<span class="string">'十一'</span>]=<span class="string">'肖XX'</span></span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line">一      陈一</span><br><span class="line">二      周二</span><br><span class="line">三      张三</span><br><span class="line">四      李四</span><br><span class="line">五      王五</span><br><span class="line">六      赵六</span><br><span class="line">十一    肖XX</span><br><span class="line">十二    郭芙蓉</span><br><span class="line">十三     杨过</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="Series数据删除"><a href="#Series数据删除" class="headerlink" title="Series数据删除"></a>Series数据删除</h3><p>通过drop()删除，<code>注意如果没有带inplace=True，会返回一个新的Series对象。如果要修改本对象，注意要带上inplace=True</code>。</p><h4 id="1-删除单个数据"><a href="#1-删除单个数据" class="headerlink" title="1.删除单个数据"></a>1.删除单个数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">obj.drop(<span class="string">'十一'</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line">一      陈一</span><br><span class="line">二      周二</span><br><span class="line">三      张三</span><br><span class="line">四      李四</span><br><span class="line">五      王五</span><br><span class="line">六      赵六</span><br><span class="line">十二    郭芙蓉</span><br><span class="line">十三     杨过</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h4 id="2-删除多个数据"><a href="#2-删除多个数据" class="headerlink" title="2.删除多个数据"></a>2.删除多个数据</h4><p>参数为索引列表，即可以删除索引为列表中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj.drop([<span class="string">'十二'</span>,<span class="string">'十三'</span>],inplace=<span class="literal">True</span>)</span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line">一    陈一</span><br><span class="line">二    周二</span><br><span class="line">三    张三</span><br><span class="line">四    李四</span><br><span class="line">五    王五</span><br><span class="line">六    赵六</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h1 id="二、DataFrame"><a href="#二、DataFrame" class="headerlink" title="二、DataFrame"></a>二、DataFrame</h1><p>DataFrame 是 Pandas 的重要数据结构之一，也是在使用 Pandas 进行数据分析过程中最常用的结构之一。DataFrame 一个表格型的数据结构，既有行标签（index），又有列标签（columns），它也被称异构数据表，所谓异构，指的是表格中每列的数据类型可以不同，比如可以是字符串、整型或者浮点型等。DataFrame 的每一行数据都可以看成一个 Series 结构，只不过，DataFrame 为这些行中每个数据值增加了一个列标签。因此 DataFrame 其实是从 Series 的基础上演变而来。<strong>可以把DataFrame看做是关系型数据库里或Excel里的一张表格来理解</strong>。<br><img src="https://img-blog.csdnimg.cn/5d6b34b82d554bc2bfe87d9ccd9eee92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="DataFrame数据结构"><br><strong>DataFrame 数据结构的特点：</strong><br>DataFrame 每一列的标签值允许使用不同的数据类型；<br>DataFrame 是表格型的数据结构，具有行和列；<br>DataFrame 中的每个数据值都可以被修改。<br>DataFrame 结构的行数、列数允许增加或者删除；<br>DataFrame 有两个方向的标签轴，分别是行标签和列标签；<br>DataFrame 可以对行和列执行算术运算。</p><h2 id="1、DataFrame对象的创建"><a href="#1、DataFrame对象的创建" class="headerlink" title="1、DataFrame对象的创建"></a>1、DataFrame对象的创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.DataFrame( data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>输入的数据，可以是 ndarray，series，list，dict，标量以及一个 DataFrame。</td></tr><tr><td>index</td><td>行标签，如果没有传递 index 值，则默认行标签是 np.arange(n)，n 代表 data 的元素个数。</td></tr><tr><td>columns</td><td>列标签，如果没有传递 columns 值，则默认列标签是 np.arange(n)。</td></tr><tr><td>dtype</td><td>dtype表示每一列的数据类型。</td></tr><tr><td>copy</td><td>默认为 False，表示复制数据 data。</td></tr></tbody></table><p>Pandas 提供了多种创建 DataFrame 对象的方式可以看data的参数说明，包括列表、ndarray、series、dict等。<br>平时在数据分析过程中用得最多的应该是从其他数据源文件如cvs、excel、数据库、WEBAPI等方式加载数据到DataFrame中。<br>如：从Excel中加载数据。更多的数据加载方式见：<a href="http://xiejava.ishareread.com/posts/4864590d/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/4864590d/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'D:\\Python\\study\\pythontest\\pandastest\\数据集\\staff.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/21aad8114af64eb8b845861d9567a6ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="staff数据集"></p><h2 id="2、DataFrame数据操作"><a href="#2、DataFrame数据操作" class="headerlink" title="2、DataFrame数据操作"></a>2、DataFrame数据操作</h2><p>DataFrame 可以使用行索引(index )来选取 DataFrame 中的数据并进行操作。也可以使用列索（columns ）引来完成数据的选取、添加和删除操作。</p><h3 id="1-行索引操作DataFrame"><a href="#1-行索引操作DataFrame" class="headerlink" title="1) 行索引操作DataFrame"></a>1) 行索引操作DataFrame</h3><h4 id="选取数据"><a href="#选取数据" class="headerlink" title="选取数据"></a>选取数据</h4><p>行标签选取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选取行标签为2的行</span></span><br><span class="line">df.loc[[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8611f4d65f5e4c54ba9e0bc364b025cd.png#pic_center" alt="选取行标签为2的行"><br>注意：如果是df.loc[2]，同样是选择行标签为2的行，但现实效果为<br><img src="https://img-blog.csdnimg.cn/32903861c623425a926448af4b661aca.png#pic_center" alt="选取行标签为2的行"><br>因为df.loc[2]返回是Series对象，而df.loc[[2]]返回的是DataFrame对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type(df.iloc[<span class="number">2</span>])</span><br><span class="line">pandas.core.series.Series</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type(df.loc[[<span class="number">2</span>]])</span><br><span class="line">pandas.core.frame.DataFrame</span><br></pre></td></tr></table></figure><p>切片选取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切片选取数据（左闭右开）</span></span><br><span class="line">df[<span class="number">2</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c913ea3b04ed47d99bcc056e155e7580.png#pic_center" alt="切片选取数据"></p><h4 id="增加行"><a href="#增加行" class="headerlink" title="增加行"></a>增加行</h4><p> 添加数据行，使用 append() 函数，可以将新的数据行添加到 DataFrame 中，该函数会在行末追加数据行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_1 = pd.DataFrame([[<span class="number">11</span>,<span class="string">'肖十一'</span>,<span class="string">'30'</span>,<span class="string">'女'</span>,<span class="string">'7000'</span>,<span class="string">'1'</span>],[<span class="number">12</span>,<span class="string">'郭芙蓉'</span>,<span class="string">'30'</span>,<span class="string">'女'</span>,<span class="string">'7400'</span>,<span class="string">'1'</span>]],index=[<span class="number">11</span>,<span class="number">12</span>],columns = [<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_age'</span>,<span class="string">'staff_gender'</span>,<span class="string">'staff_salary'</span>,<span class="string">'staff_depatment_id'</span>])</span><br><span class="line">df=df.append(df_1)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a54e2f6025bc4b4f9edfa5000b30c5a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt=" 添加数据行"></p><p>注意新增加的DataFrame如果没有指定行索引，将会默认从0开始，添加数据行后将会有行重复的行索引。如没有指定index=[11,12]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_1 = pd.DataFrame([[<span class="number">11</span>,<span class="string">'肖十一'</span>,<span class="string">'30'</span>,<span class="string">'女'</span>,<span class="string">'7000'</span>,<span class="string">'1'</span>],[<span class="number">12</span>,<span class="string">'郭芙蓉'</span>,<span class="string">'30'</span>,<span class="string">'女'</span>,<span class="string">'7400'</span>,<span class="string">'1'</span>]],columns = [<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_age'</span>,<span class="string">'staff_gender'</span>,<span class="string">'staff_salary'</span>,<span class="string">'staff_depatment_id'</span>])</span><br><span class="line">df=df.append(df_1)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a9e83a1037144f4c8631dfeca1507b70.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="添加数据行有重复行索引"></p><h4 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h4><p>可以使用行索引标签，从 DataFrame 中删除某一行数据。如果索引标签存在重复，那么它们将被一起删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=df.drop(<span class="number">0</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>可以看到到行索引为0的两条记录被一起删除了。<br><img src="https://img-blog.csdnimg.cn/a6d8cb6d9e904199ac88f01adcab63ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="删除"></p><h3 id="2-列索引操作DataFrame"><a href="#2-列索引操作DataFrame" class="headerlink" title="2) 列索引操作DataFrame"></a>2) 列索引操作DataFrame</h3><h4 id="列索引选取数据列"><a href="#列索引选取数据列" class="headerlink" title="列索引选取数据列"></a>列索引选取数据列</h4><p>通过指定列索引来选取数据列，如选择只显示staff_id,staff_name,staff_gender三列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2=df[[<span class="string">'staff_id'</span>,<span class="string">'staff_name'</span>,<span class="string">'staff_gender'</span>]]</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/13a54eedc4d04347bfbe055c9171842a.png#pic_center" alt="列索引选取数据列"></p><h4 id="列索引添加数据列"><a href="#列索引添加数据列" class="headerlink" title="列索引添加数据列"></a>列索引添加数据列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df3=df[<span class="string">'staff_salary'</span>]+<span class="number">500</span></span><br><span class="line"><span class="comment">#在df的基础上增加append_cloume列，新增的append_cloume列为df['staff_salary']+500，即薪水加了500的列</span></span><br><span class="line">df[<span class="string">'append_cloume'</span>]=df3</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2f978dd2838f4bd0b0e7f7dff654ec46.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="列索引添加数据列"></p><h4 id="列索引删除数据列"><a href="#列索引删除数据列" class="headerlink" title="列索引删除数据列"></a>列索引删除数据列</h4><p>通过del 来删除指定的数据列，如删除staff_depatment_id列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df[<span class="string">'staff_depatment_id'</span>]</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b8de684aa6f8410b83b182ddfc29f294.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="列索引删除数据列"></p><p>本文介绍了pandas的两大核心数据结构Series和DataFrame，分别介绍了Series和DataFrame数据对象的创建及基于数据对象的基础上对数据进行选择、增加、删除等数据操作，可以加深对Series和DataFrame的理解，并可以将创建，增、删、改、查等应用于实际的数据处理应用中。</p><hr><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据加载(csv、excel、json、mysql、webAPI)</title>
      <link href="/posts/4864590d/"/>
      <url>/posts/4864590d/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/f5fc706f84454eb49d5457d751025441.png#pic_center" alt="pandas"><br>pandas 是基于NumPy 的一种工具，该工具是为解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。Pandas的名称来自于面板数据（panel data）和python数据分析（data analysis）。pandas提供了大量能使我们快速便捷地处理数据的函数和方法。它是使Python成为强大而高效的数据分析环境的重要因素之一。</p><p>数据的输入是数据分析的第一步，如果不能将数据快速方便的导入导出python，那么pandas不可能成为强大而高效的数据分析环境，本文重点介绍pandas的数据输入加载。pandas的数据输入可以划分为几个大类：读取文本文件和其他更高效的磁盘存储格式，加载数据库中的数据，利用Web API获取网络资源。<br><img src="https://img-blog.csdnimg.cn/27deba5956b842dda6f845149b98d426.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pandas数据处理"><br>pandas的IO工具支持非常多的数据输入输出方式。包括csv、json、Excel、数据库等。</p><table><thead><tr><th>Format Type</th><th>Data Description</th><th>Reader</th><th>Writer</th></tr></thead><tbody><tr><td>text</td><td>CSV</td><td>read_csv</td><td>to_csv</td></tr><tr><td>text</td><td>JSON</td><td>read_json</td><td>to_json</td></tr><tr><td>text</td><td>HTML</td><td>read_html</td><td>to_html</td></tr><tr><td>text</td><td>Local clipboard</td><td>read_clipboard</td><td>to_clipboard</td></tr><tr><td>binary</td><td>MS Excel</td><td>read_excel</td><td>to_excel</td></tr><tr><td>binary</td><td>OpenDocument</td><td>read_excel</td><td></td></tr><tr><td>binary</td><td>HDF5 Format</td><td>read_hdf</td><td>to_hdf</td></tr><tr><td>binary</td><td>Feather Format</td><td>read_feather</td><td>to_feather</td></tr><tr><td>binary</td><td>Parquet Format</td><td>read_parquet</td><td>to_parquet</td></tr><tr><td>binary</td><td>Msgpack</td><td>read_msgpack</td><td>to_msgpack</td></tr><tr><td>binary</td><td>Stata</td><td>read_stata</td><td>to_stata</td></tr><tr><td>binary</td><td>SAS</td><td>read_sas</td><td></td></tr><tr><td>binary</td><td>Python Pickle Format</td><td>read_pickle</td><td>to_pickle</td></tr><tr><td>SQL</td><td>SQL</td><td>read_sql</td><td>to_sql</td></tr><tr><td>SQL</td><td>Google Big Query</td><td>read_gbq</td><td>to_gbq</td></tr></tbody></table><p>本文通过几个实例，介绍几种常用的数据加载方式，包括从csv文件、excel文件、关系型数据库如mysql、API接口加载json数据，来初步体验一下pandas加载数据的便捷性。</p><p>见上表pandas 提供了多种数据源读取数据的方法：<br>read_csv() 用于读取文本文件<br>read_json() 用于读取 json 文件<br>read_sql_query() 读取 sql 语句查询的表记录</p><h1 id="一、读取CSV文件"><a href="#一、读取CSV文件" class="headerlink" title="一、读取CSV文件"></a>一、读取CSV文件</h1><p>CSV 又称逗号分隔值文件，是一种简单的文件格式，以特定的结构来排列表格数据。 CSV 文件能够以纯文本形式存储表格数据，比如电子表格、数据库文件，并具有数据交换的通用格式。CSV 文件会在 Excel 文件中被打开，其行和列都定义了标准的数据格式。<br>将 CSV 中的数据转换为 DataFrame 对象是非常便捷的。和一般文件读写不一样，它不需要你做打开文件、读取文件、关闭文件等操作。相反，只需要一行代码就可以完成上述所有步骤，并将数据存储在 DataFrame 中。<br>pandas通过read_csv()从 CSV 文件中读取数据，并创建 DataFrame 对象。<br>下面通过一个实例来说明。一个用于测试的员工数据集csv的数据如下，文件为staff.csv。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"staff_id"</span>,<span class="string">"staff_name"</span>,<span class="string">"staff_age"</span>,<span class="string">"staff_gender"</span>,<span class="string">"staff_salary"</span>,<span class="string">"staff_depatment_id"</span></span><br><span class="line"><span class="string">"1"</span>,<span class="string">"陈一"</span>,<span class="string">"30"</span>,<span class="string">"男"</span>,<span class="string">"7000"</span>,<span class="string">"1"</span></span><br><span class="line"><span class="string">"2"</span>,<span class="string">"周二"</span>,<span class="string">"31"</span>,<span class="string">"男"</span>,<span class="string">"12000"</span>,<span class="string">"2"</span></span><br><span class="line"><span class="string">"3"</span>,<span class="string">"张三"</span>,<span class="string">"30"</span>,<span class="string">"女"</span>,<span class="string">"13000"</span>,<span class="string">"3"</span></span><br><span class="line"><span class="string">"4"</span>,<span class="string">"李四"</span>,<span class="string">"29"</span>,<span class="string">"女"</span>,<span class="string">"15000"</span>,<span class="string">"1"</span></span><br><span class="line"><span class="string">"5"</span>,<span class="string">"王五"</span>,<span class="string">"29"</span>,<span class="string">"男"</span>,<span class="string">"9000"</span>,<span class="string">"2"</span></span><br><span class="line"><span class="string">"6"</span>,<span class="string">"赵六"</span>,<span class="string">"35"</span>,<span class="string">"男"</span>,<span class="string">"8600"</span>,<span class="string">"1"</span></span><br><span class="line"><span class="string">"7"</span>,<span class="string">"钱七"</span>,<span class="string">"36"</span>,<span class="string">"女"</span>,<span class="string">"9700"</span>,<span class="string">"3"</span></span><br><span class="line"><span class="string">"8"</span>,<span class="string">"孙八"</span>,<span class="string">"40"</span>,<span class="string">"女"</span>,<span class="string">"10000"</span>,<span class="string">"3"</span></span><br><span class="line"><span class="string">"9"</span>,<span class="string">"何九"</span>,<span class="string">"40"</span>,<span class="string">"男"</span>,<span class="string">"11000"</span>,<span class="string">"1"</span></span><br><span class="line"><span class="string">"10"</span>,<span class="string">"顾十"</span>,<span class="string">"37"</span>,<span class="string">"女"</span>,<span class="string">"15000"</span>,<span class="string">"2"</span></span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">'C:\\Users\\xiejava\\Desktop\\staff.csv'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/edaf91317adb42a7b479ebec9aa56bb7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="通过csv加载"></p><h1 id="二、读取EXCEL文件"><a href="#二、读取EXCEL文件" class="headerlink" title="二、读取EXCEL文件"></a>二、读取EXCEL文件</h1><p>Excel 是由微软公司开发的办公软件之一，它在日常工作中得到了广泛的应用。在数据量较少的情况下，Excel 对于数据的处理、分析、可视化有其独特的优势，因此可以显著提升您的工作效率。但是，当数据量非常大时，Excel 的劣势就暴露出来了，比如，操作重复、数据分析难等问题。Pandas 提供了操作 Excel 文件的函数，可以很方便地处理 Excel 表格。<br>pandas提供了 read_excel() 方法，从 Excel文件中读取数据，并创建 DataFrame 对象。<br>staff数据集excel文件staff.xlsx如下图：<br><img src="https://img-blog.csdnimg.cn/96c125c34da24204ae9799f5c444c574.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="staff.xlsx"><br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">'C:\\Users\\xiejava\\Desktop\\staff.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/b46a651c81a74b119ad25e297d9c0d95.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="通过Excel加载数据"></p><h1 id="三、读取MySQL数据库表"><a href="#三、读取MySQL数据库表" class="headerlink" title="三、读取MySQL数据库表"></a>三、读取MySQL数据库表</h1><p>在许多应用中，数据很少取自文本文件，因为这种方式存储数据量有限且比较低效。最常见的是基于SQL的关系型数据库如MySQL、MS-SQL、PostgreSQL等。pandas将关系型数据库加载到DataFrame的过程很简单，通过read_sql_query()方法就可以快速的将数据加载。<br>同样是staff的数据集，在mysql中的表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`staff`</span> (</span><br><span class="line">  <span class="string">`staff_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`staff_name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`staff_age`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  <span class="string">`staff_gender`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`staff_salary`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'薪水'</span>,</span><br><span class="line">  <span class="string">`staff_depatment_id`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'部门ID'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>数据如下：<br><img src="https://img-blog.csdnimg.cn/ed23c05b550d4f0da81e2d7d84455447.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="staff数据集MySQL记录"><br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:yourpassword@localhost:3306/pandastest'</span>)</span><br><span class="line">sql_query_staff = <span class="string">'select * from staff;'</span></span><br><span class="line">df_staff = pd.read_sql_query(sql_query_staff, engine)</span><br><span class="line">df_staff</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/ecdf46a8e02f4a70a490d9cdf89ce6f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="加载mysql数据"></p><h1 id="四、读取Web-API的数据"><a href="#四、读取Web-API的数据" class="headerlink" title="四、读取Web API的数据"></a>四、读取Web API的数据</h1><p>除了本地文件和数据库外，许多网站和web应用都有一些通过JSON或其他格式提供数据的公共API。可以通过Python的requests包来访问这些API获得相应的数据，经过解析处理后加载到pandas的DataFrame中。<br>为了演示方便，本文通过Flask做了一个staff数据集的API，效果如下：<br><img src="https://img-blog.csdnimg.cn/2c962a4235794e95b2545605e44f7192.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="staff数据集API"><br>通过requests包来访问API，通过json包来解析json，然后加载到pandas的DataFrame中。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">url=<span class="string">'http://127.0.0.1:5000/getstaff'</span></span><br><span class="line">resp=requests.get(url)</span><br><span class="line">data=json.loads(resp.text)</span><br><span class="line">staff=pd.DataFrame(data)</span><br><span class="line">staff</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/6ff9136048d7484e961e822826fb805f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="加载WEBAPI数据"></p><p>至此，通过staff测试数据集介绍了pandas的常用多种类型数据源的加载，包括csv、excel、mysql、web API。可以看出pandas对于数据加载非常的方便高效。</p><p>全部数据集及源代码：<a href="https://github.com/xiejava1018/pandastest.git" target="_blank" rel="noopener">https://github.com/xiejava1018/pandastest.git</a></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现读取Word表格计算汇总写入Excel</title>
      <link href="/posts/14434407/"/>
      <url>/posts/14434407/</url>
      
        <content type="html"><![CDATA[<p>快过年了，又到了公司年底评级的时候了。今年的评级和往常一下，每个人都要填写公司的民主评议表，给各个同事进行评价打分，然后部门收集起来根据收集上来的评价表进行汇总统计。想想要收集几十号人的评价表，并根据每个人的评价表又要填到Excel中进行汇总计算统计给出每个人的评价，就头大。虽然不是个什么难事，但是是个无脑的细致活。几十个人的评价也得要花大半天的时间来弄，而且搞多了还容易搞错。如是就想起干脆用Python写个小程序自动来处理这些脏活累活，评级年年都要评，每年都可以用。</p><p>要做的事情就是读放到某个文件夹中的word文档中的评价表格，根据表格内容进行处理，然后汇总所有的表格数据，根据计算规则，算出每个人的评分，在根据评分计算每个人的评价。汇总后写入Excel中。<br><img src="https://img-blog.csdnimg.cn/50851a68db00434c84007249f4e5781e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="处理Word解析、汇总、统计写入Excel"></p><p>不可否认用Python来实现这样的事情真的是太方便了，人生苦短我用Python。<br>我是用的python的docx包来处理word，用pandas来处理数据并写入excel</p><h1 id="一、首先导入包"><a href="#一、首先导入包" class="headerlink" title="一、首先导入包"></a>一、首先导入包</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install docx</span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>pandas写excel依赖openpyxl包所以也到导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><h1 id="二、读评价表所在的目录文件"><a href="#二、读评价表所在的目录文件" class="headerlink" title="二、读评价表所在的目录文件"></a>二、读评价表所在的目录文件</h1><p>通过python的os包，列出文件夹里面的文件，识别出.docx的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">files=os.listdir(filepah)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> file.find(<span class="string">'.docx'</span>)&gt;<span class="number">0</span>:</span><br><span class="line">        docfilepah=filepah+file</span><br></pre></td></tr></table></figure><h1 id="三、读word文件，处理word中的表格数据"><a href="#三、读word文件，处理word中的表格数据" class="headerlink" title="三、读word文件，处理word中的表格数据"></a>三、读word文件，处理word中的表格数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">data=[]</span><br><span class="line"><span class="comment">#读word的docx评议表文件，并读取word中的表格数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procdoc</span><span class="params">(docfilepath)</span>:</span></span><br><span class="line">    document=Document(docfilepath)</span><br><span class="line">    tables=document.tables</span><br><span class="line">    table=tables[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(table.rows)):</span><br><span class="line">        id=int(table.cell(i,<span class="number">0</span>).text)</span><br><span class="line">        name=table.cell(i,<span class="number">1</span>).text</span><br><span class="line">        excellent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i,<span class="number">2</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i,<span class="number">2</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            excellent=<span class="number">1</span></span><br><span class="line">        competent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">3</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">3</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            competent=<span class="number">1</span></span><br><span class="line">        basicacompetent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">4</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">4</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            basicacompetent=<span class="number">1</span></span><br><span class="line">        notcompetent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">5</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">5</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            notcompetent=<span class="number">1</span></span><br><span class="line">        dontunderstand =<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">6</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">6</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            dontunderstand=<span class="number">1</span></span><br><span class="line">        appraisedata=[id,name,excellent,competent,basicacompetent,notcompetent,dontunderstand]</span><br><span class="line">        data.append(appraisedata)</span><br></pre></td></tr></table></figure><h1 id="四、统计计算"><a href="#四、统计计算" class="headerlink" title="四、统计计算"></a>四、统计计算</h1><p>通过pandas直接对数据进行统计计算，避免了传统的循环计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data,columns=[<span class="string">'序号'</span>,<span class="string">'姓名'</span>,<span class="string">'优秀'</span>,<span class="string">'称职'</span>,<span class="string">'基本称职'</span>,<span class="string">'不称职'</span>,<span class="string">'不了解'</span>])</span><br><span class="line">df=df.groupby([<span class="string">'序号'</span>,<span class="string">'姓名'</span>]).sum() <span class="comment">#汇总每个人每一项的评分</span></span><br><span class="line">df[<span class="string">'票数'</span>] = df.apply(<span class="keyword">lambda</span> x: x.sum(), axis=<span class="number">1</span>) <span class="comment">#统计票数</span></span><br><span class="line">df[<span class="string">'计分'</span>] = (df[<span class="string">'优秀'</span>]*<span class="number">95</span>+df[<span class="string">'称职'</span>]*<span class="number">85</span>+df[<span class="string">'基本称职'</span>]*<span class="number">75</span>+df[<span class="string">'不称职'</span>]*<span class="number">65</span>+df[<span class="string">'不了解'</span>]*<span class="number">0</span>)/len(df)<span class="comment">#根据规则计分</span></span><br><span class="line">df[<span class="string">'评价'</span>]=df[<span class="string">'计分'</span>].map(getscore) <span class="comment">#根据规则评价评级</span></span><br></pre></td></tr></table></figure><p>计分方法：民主评议得分=Σ各等级票数*等级计分分数/总票数，其中“优秀”计95分，“称职”计85分，“基本称职”计75分，“不称职”计65分，“不了解”不计分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据评分规则计算评级</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getscore</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'优秀'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">80</span> <span class="keyword">and</span> x&lt;<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">75</span> <span class="keyword">and</span> x&lt;<span class="number">80</span>:</span><br><span class="line">        score=<span class="string">'基本称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&lt;<span class="number">75</span>:</span><br><span class="line">        score=<span class="string">'不称职'</span></span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><h1 id="五、将统计计算结果写入汇总Excel"><a href="#五、将统计计算结果写入汇总Excel" class="headerlink" title="五、将统计计算结果写入汇总Excel"></a>五、将统计计算结果写入汇总Excel</h1><p>通过pandas直接可以将dataframe写入到Excel文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将汇总计算好的数据写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write2excle</span><span class="params">(exclefile,dataframe)</span>:</span></span><br><span class="line">    writer = pd.ExcelWriter(exclefile)</span><br><span class="line">    dataframe.to_excel(writer)</span><br><span class="line">    writer.save()</span><br><span class="line">    print(<span class="string">'输出成功'</span>)</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><strong>Python不到八十行代码，实现读Word-&gt;处理表格数据-&gt;汇总计算数据-&gt;写Excel。</strong><br>完整的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"></span><br><span class="line">data=[]</span><br><span class="line"><span class="comment">#读word的docx评议表文件，并读取word中的表格数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procdoc</span><span class="params">(docfilepath)</span>:</span></span><br><span class="line">    document=Document(docfilepath)</span><br><span class="line">    tables=document.tables</span><br><span class="line">    table=tables[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(table.rows)):</span><br><span class="line">        id=int(table.cell(i,<span class="number">0</span>).text)</span><br><span class="line">        name=table.cell(i,<span class="number">1</span>).text</span><br><span class="line">        excellent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i,<span class="number">2</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i,<span class="number">2</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            excellent=<span class="number">1</span></span><br><span class="line">        competent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">3</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">3</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            competent=<span class="number">1</span></span><br><span class="line">        basicacompetent=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">4</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">4</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            basicacompetent=<span class="number">1</span></span><br><span class="line">        notcompetent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">5</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">5</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            notcompetent=<span class="number">1</span></span><br><span class="line">        dontunderstand =<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> table.cell(i, <span class="number">6</span>).text!=<span class="string">''</span> <span class="keyword">and</span> table.cell(i, <span class="number">6</span>).text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            dontunderstand=<span class="number">1</span></span><br><span class="line">        appraisedata=[id,name,excellent,competent,basicacompetent,notcompetent,dontunderstand]</span><br><span class="line">        data.append(appraisedata)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取评议表的目录，并处理目录中的docx文件，根据评议表计算评分，写入汇总表。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filepah)</span>:</span></span><br><span class="line">    files=os.listdir(filepah)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.find(<span class="string">'.docx'</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            docfilepah=filepah+file</span><br><span class="line">            procdoc(docfilepah)</span><br><span class="line">    df = pd.DataFrame(data,columns=[<span class="string">'序号'</span>,<span class="string">'姓名'</span>,<span class="string">'优秀'</span>,<span class="string">'称职'</span>,<span class="string">'基本称职'</span>,<span class="string">'不称职'</span>,<span class="string">'不了解'</span>])</span><br><span class="line">    print(df)</span><br><span class="line">    df=df.groupby([<span class="string">'序号'</span>,<span class="string">'姓名'</span>]).sum()</span><br><span class="line">    df[<span class="string">'票数'</span>] = df.apply(<span class="keyword">lambda</span> x: x.sum(), axis=<span class="number">1</span>)</span><br><span class="line">    df[<span class="string">'计分'</span>] = (df[<span class="string">'优秀'</span>]*<span class="number">95</span>+df[<span class="string">'称职'</span>]*<span class="number">85</span>+df[<span class="string">'基本称职'</span>]*<span class="number">75</span>+df[<span class="string">'不称职'</span>]*<span class="number">65</span>+df[<span class="string">'不了解'</span>]*<span class="number">0</span>)/len(df)</span><br><span class="line">    df[<span class="string">'评价'</span>]=df[<span class="string">'计分'</span>].map(getscore)</span><br><span class="line">    print(df)</span><br><span class="line">    write2excle(<span class="string">'民主评议\\民主评议表汇总.xlsx'</span>,df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据评分规则计算评级</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getscore</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'优秀'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">80</span> <span class="keyword">and</span> x&lt;<span class="number">95</span>:</span><br><span class="line">        score=<span class="string">'称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;=<span class="number">75</span> <span class="keyword">and</span> x&lt;<span class="number">80</span>:</span><br><span class="line">        score=<span class="string">'基本称职'</span></span><br><span class="line">    <span class="keyword">elif</span> x&lt;<span class="number">75</span>:</span><br><span class="line">        score=<span class="string">'不称职'</span></span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"><span class="comment">#将汇总计算好的数据写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write2excle</span><span class="params">(exclefile,dataframe)</span>:</span></span><br><span class="line">    writer = pd.ExcelWriter(exclefile)</span><br><span class="line">    dataframe.to_excel(writer)</span><br><span class="line">    writer.save()</span><br><span class="line">    print(<span class="string">'输出成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    readfile(<span class="string">'民主评议\\'</span>)</span><br></pre></td></tr></table></figure><p>全部源代码：<a href="https://github.com/xiejava1018/pythonprocword" target="_blank" rel="noopener">https://github.com/xiejava1018/pythonprocword</a></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全之恶意代码</title>
      <link href="/posts/72d6b06f/"/>
      <url>/posts/72d6b06f/</url>
      
        <content type="html"><![CDATA[<p>恶意代码是一种有害的计算机代码或 web 脚本，其设计目的是创建系统漏洞，并借以造成后门、安全隐患、信息和数据盗窃、以及其他对文件和计算机系统的潜在破坏。恶意代码不仅使企业和用户蒙受了巨大的经济损失，而且使国家的安全面临着严重威胁。1991年的海湾战争是美国第一次公开在实战中使用恶意代码攻击技术取得重大军事利益，从此恶意代码攻击成为信息战、网络战最重要的入侵手段之一。恶意代码问题无论从政治上、经济上、还是军事上，都成为信息安全面临的首要问题。让我们一起来认识一下恶意代码。</p><h1 id="一、什么是恶意代码"><a href="#一、什么是恶意代码" class="headerlink" title="一、什么是恶意代码"></a>一、什么是恶意代码</h1><p>恶意代码（Unwanted Code）是指故意编制或设置的、对网络或系统会产生威胁或潜在威胁的计算机代码。最常见的恶意代码有计算机病毒（简称病毒）、特洛伊木马（简称木马）、计算机蠕虫（简称蠕虫）、后门、逻辑炸弹等。</p><h1 id="二、恶意代码的分类"><a href="#二、恶意代码的分类" class="headerlink" title="二、恶意代码的分类"></a>二、恶意代码的分类</h1><h2 id="1、恶意代码分类"><a href="#1、恶意代码分类" class="headerlink" title="1、恶意代码分类"></a>1、恶意代码分类</h2><p>恶意代码的分类标准主要是代码的<strong>独立性</strong>和<strong>自我复制性</strong>，独立的恶意代码是指具备一个完整程序所应该具有的全部功能功能，能够独立传播、运行的恶意代码，这样的恶意代码不需要寄宿在另一个程序中。非独立恶意代码只是一段代码，必须嵌入某个完整的程序中，作为该程序的一个组成部分进行传播和运行。对于非独立恶意代码，自我复制过程就是将自身嵌入宿主程序的过程，这个过程也称为感染宿主程序的过程。对于独立恶意代码，自我复制过程就是将自身传播给其他系统的过程。不具有自我复制能力的恶意代码必须借助其他媒介进行传播。</p><p>分类：</p><table><thead><tr><th>类别</th><th>实例</th></tr></thead><tbody><tr><td>具有自我复制能力的依附性恶意代码</td><td>主要代表是病毒</td></tr><tr><td>具有自我复制能力的独立性恶意代码</td><td>主要代表是蠕虫</td></tr><tr><td>不具有自我复制能力的依附性恶意代码</td><td>主要代表是后门</td></tr><tr><td>不具有自我复制能力的独立性恶意代码</td><td>主要代表是木马</td></tr></tbody></table><h2 id="2、不同恶意代码的区别"><a href="#2、不同恶意代码的区别" class="headerlink" title="2、不同恶意代码的区别"></a>2、不同恶意代码的区别</h2><p>病毒侧重于破坏系统和程序的能力</p><p>木马侧重于窃取敏感信息的能力</p><p>蠕虫侧重于网络中的自我复制能力和自我传染能力</p><table><thead><tr><th></th><th>病毒</th><th>木马</th><th>蠕虫</th></tr></thead><tbody><tr><td><strong>存在形式</strong></td><td>寄生</td><td>独立文件</td><td>独立文件</td></tr><tr><td><strong>传染途径</strong></td><td>通过宿主程序运行</td><td>植入目标主机</td><td>系统漏洞</td></tr><tr><td><strong>传染速度</strong></td><td>慢</td><td>最慢</td><td>快</td></tr><tr><td><strong>攻击目标</strong></td><td>本地文件</td><td>文件、网络主机</td><td>存在漏洞的网络程序</td></tr><tr><td><strong>触发机制</strong></td><td>攻击者指定条件</td><td>自启动</td><td>自动攻击有漏洞的程序</td></tr><tr><td><strong>防范方法</strong></td><td>从宿主文件中清除</td><td>清除启动项和木马服务程序</td><td>更新安全补丁</td></tr><tr><td><strong>对抗主体</strong></td><td>用户，反病毒软件</td><td>用户、管理员、反病毒软件</td><td>应用程序供应商、用户和管理员</td></tr></tbody></table><h1 id="三、恶意代码基本技术"><a href="#三、恶意代码基本技术" class="headerlink" title="三、恶意代码基本技术"></a>三、恶意代码基本技术</h1><h2 id="1、隐蔽技术"><a href="#1、隐蔽技术" class="headerlink" title="1、隐蔽技术"></a>1、隐蔽技术</h2><h3 id="（1）本地隐藏"><a href="#（1）本地隐藏" class="headerlink" title="（1）本地隐藏"></a>（1）本地隐藏</h3><p> 防止本地系统管理人员觉察而采取的隐蔽手段。</p><ul><li><strong>文件隐蔽</strong>：将恶意代码的文件命名为与系统的合法程序文件名相似的名称，或者干脆取而代之，或者将恶意代码文件附加到合法程序文件中。</li><li><strong>进程隐蔽</strong>：附着或替换系统进程，使恶意代码以合法服务的身份运行，从而隐蔽恶意代码。还可以通过修改进程列表程序，修改命令行参数使恶意代码进程的信息无法查询。也可以借助RootKit 技术实现进程隐蔽。</li><li><strong>网络连接隐蔽</strong>：借用现有服务的端口实现网络连接隐蔽，如使用80端口，攻击者在自己的数据包设置特殊标识，通过标识识别连接信息，未标识的WWW 服务网络包仍转交给原服务程序处理。</li><li><strong>编译器隐蔽</strong>：由编译器在对程序代码进行编译时植入恶意代码，从而实现恶意代码在用户程序中的隐藏和原始分发攻击。恶意代码的植入者是编译器开发人员。</li><li><strong>RootKit隐蔽</strong>：利用适当的Rootkit工具，可以很好的隐蔽自身或指定的文件、进程和网络连接等，很难被管理员发现。<h3 id="（2）网络隐藏"><a href="#（2）网络隐藏" class="headerlink" title="（2）网络隐藏"></a>（2）网络隐藏</h3>网络隐藏主要是指通信内容和传输通道的隐藏。</li><li><strong>通信内容隐蔽</strong>：使用加密算法对所传输的内容进行加密能够隐蔽通信内容。</li><li><strong>传输通道隐藏</strong>：利用隐蔽通道技术，实现对传输通道的隐蔽。（隐蔽通道（Covert Channel）是一个不受安全机制控制的、利用共享资源作为通信通路的信息流。包括有：存储隐蔽通道和时间隐蔽通道。）</li></ul><h2 id="2、生存技术"><a href="#2、生存技术" class="headerlink" title="2、生存技术"></a>2、生存技术</h2><p>恶意代码的生存技术主要包括四种类型：</p><ul><li><strong>反跟踪技术</strong>：通过提高恶意代码分析难度，减少被发现的可能性</li><li><strong>加密技术</strong>：利用加密技术，提高恶意代码自身保护能力<br>模糊变换技术：利用模糊变换技术，恶意代码可以躲避基于特征码的恶意代码检测系统，提高生存能力</li><li><strong>自动生产技术</strong>：利用自动生成技术，在已有的恶意代码的基础上自动生成特征码不断变化的新的恶意代码，从而躲避基于特征码的恶意代码检测。</li></ul><h2 id="3、攻击技术"><a href="#3、攻击技术" class="headerlink" title="3、攻击技术"></a>3、攻击技术</h2><ul><li><strong>进程注入技术</strong>：恶意代码程序将自身嵌入到操作系统和网络系统的服务程序中，不但实现了自身的隐藏，而且还能随着服务的加载而启动。</li><li><strong>三线程技术</strong>：恶意代码进程同时开启三个线程，其中一个为主线程，负责远程控制的工作。另外两个辅助线程分别是监视和守护线程。一旦发现主线程被删除，则立即设法恢复。</li><li><strong>端口复用技术</strong>：重复利用系统或网络服务打开的端口（如80端口），可以欺骗防火墙，具有很强的欺骗性。</li><li><strong>超级管理技术</strong>：恶意代码采用超级管理技术对反恶意代码软件系统进行攻击，使其无法正常运行。</li><li><strong>端口反向连接技术</strong>：指使恶意代码的服务端（被控制端）主动连接客户端（控制端）的技术。</li><li><strong>缓冲区溢出技术</strong>：恶意代码利用系统和网络服务的安全漏洞植入并且执行攻击代码，造成缓冲区溢出，从而获得被攻击主机的控制权。</li></ul><h1 id="三、恶意代码传播方式及防范手段"><a href="#三、恶意代码传播方式及防范手段" class="headerlink" title="三、恶意代码传播方式及防范手段"></a>三、恶意代码传播方式及防范手段</h1><h2 id="1、传播方式"><a href="#1、传播方式" class="headerlink" title="1、传播方式"></a>1、传播方式</h2><p>传播途径</p><ul><li><strong>利用操作系统和应用软件的漏洞进行传播</strong></li><li><strong>通过网站传播</strong><br>在网页上挂载恶意代码<br>如：主机流览该网页时，恶意代码会自动下载到主机执行。<br>将恶意代码与正常应用软件捆绑<br>如：主机下载正常软件运行时，恶意代码也随之自动运行。</li><li><strong>利用移动媒介传播</strong><br>如：主机访问U盘和硬盘时，恶意代码可以自动执行。</li><li><strong>利用用户之间的信任关系传播</strong><br>如：冒充用户发送虚假链接、图片、邮件等。</li></ul><p>总的来说，恶意代码的传播是因为用户的软件出现了漏洞、操作不慎或者是两者的结合造成。</p><p>（1）病毒。病毒具备有自我复制能力，一般嵌入主机的程序中。当被感染文件执行操作，如，用户打开一个可执行文件时，病毒就会自我繁殖。病毒一般都具有破坏性。<br>（2）木马。这种程序从表面上看没有危害，但实际上却隐含着恶意的意图和破坏的作用。一些木马程序会通过覆盖系统中已经存在的文件的方式存在于系统之中；另外有的还会以软件的形式出现，因为它一般是以一个正常的应用程序身份在系统中运行的，所以这种程序通常不容易被发现。<br>（3）蠕虫。蠕虫是一种可以自我复制的完全独立的程序，它的传播不需要借助被感染主机中的程序和用户的操作，而是通过系统存在的漏洞和设置的不安全性来进行入侵，如通过共享的设置来侵入。蠕虫可以自动创建与它的功能完全相同的副本，并能在无人干涉的情况下自动运行，大量地复制占用计算机的空间，使计算机的运行缓慢甚至瘫痪。</p><h2 id="2、攻击机制"><a href="#2、攻击机制" class="headerlink" title="2、攻击机制"></a>2、攻击机制</h2><p>恶意代码的行为表现各异，破坏程度千差万别，但基本作用机制大体相同，其整个作用过程分为6个部分。<br><strong>（1）侵入系统</strong>。侵入系统是而已代码实现其恶意目的的必要条件。恶意代码入侵的途径很多，包括前面传播方式的各种途径。如：从互联网下载的程序本身就可能含有而已代码；接收已感染恶意代码的电子邮件；从光盘或U盘往系统上安装软件；黑客或者攻击者故意将恶意代码植入系统等。<br><strong>（2）维持或提升权限</strong>。恶意代码的传播与破坏必须盗用用户或者进程的合法权限才能完成。<br><strong>（3）隐蔽策略</strong>。为了不让系统发现恶意代码已经侵入系统，恶意代码可能会改名、删除源文件或者修改系统的安全策略来隐藏自己。<br><strong>（4）潜伏</strong>。恶意代码侵入系统后，等待一定的条件，并具有足够的权限时，就发作并进行破坏活动。<br><strong>（5）破坏</strong>。恶意代码本质具有破坏性，其目的是造成信息丢失，泄密，破坏系统完整性等。<br><strong>（6）重复（1）至（5）对新的目标实施攻击过程。</strong><br><img src="https://img-blog.csdnimg.cn/746efa50ae124e18af6b275d10e8196a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="恶意代码的攻击模型"></p><h2 id="3、防范手段"><a href="#3、防范手段" class="headerlink" title="3、防范手段"></a>3、防范手段</h2><p>通用恶意代码检测技术包括静态和动态检测技术：</p><ul><li><p><strong>基于特征的扫描技术</strong><br>建立恶意代码的特征文件，在扫描时根据特征进行匹配查找</p></li><li><p><strong>校验和法</strong><br>对需要监控的文件生成校验，周期性的生成新校验和并与原始值比较</p></li><li><p><strong>沙箱技术</strong><br>根据程序需要的资源和拥有的权限建立运行沙箱，可以安全地检测和分析程序行为</p></li><li><p><strong>基于蜜罐的检测技术</strong><br>将主机伪装为运行着脆弱的服务或系统，同时安装强大的监测系统。</p></li></ul><p>其中基于特征的扫描技术和校验和法是静态检测技术，沙箱技术和基于蜜罐的检测技术属于动态检测技术。</p><h2 id="四、常见恶意代码"><a href="#四、常见恶意代码" class="headerlink" title="四、常见恶意代码"></a>四、常见恶意代码</h2><p><img src="https://img-blog.csdnimg.cn/a67e601851d74a45ac57f45552261bd1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="常见的恶意代码"></p><p>参考文献：<br>《网络攻防技术与实战 深入理解信息安全防护体系》 郭帆<br>《恶意代码及其防御》知乎 Drifter<br>《恶意代码》MBA智库百科</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全之暴露面、攻击面、脆弱性</title>
      <link href="/posts/e23ff2e/"/>
      <url>/posts/e23ff2e/</url>
      
        <content type="html"><![CDATA[<p><strong>暴露面</strong><br>暴露在攻击者视线范围内，可以被利用进行入侵的系统、设备、信息等，都属于暴露面。虽然大多数企业都认识到暴露面的风险所在，并想方设法来减少暴露面；但不幸的是，并非所有暴露面都是显而易见的，大量的暴露面都潜藏在不容易被发现的暗处，很容易因为资产排查不彻底、人员疏漏等问题被忽略。互联网暴露面资产直接面向外部攻击者的威胁。相对于企业内部资产，所面临的安全风险更高。</p><p><strong>攻击面</strong><br>攻击面：是一个给定的计算机或网络系统，可以被黑客访问和利用的漏洞总和。<br>攻击面包含：<br>操作系统、中间件、应用程序、承载网络中存在的软件漏洞；<br>系统和软件中的错误配置与安全控制缺失；<br>违反安全制度和合规要求的网络配置；<br>过度宽松的访问控制规则；</p><p>减少攻击面的基本策略是减少运行中的软件总量，减少非信任用户可使用的入口点，以及消除用户很少使用的服务。改进信息安全的方法之一就是减少系统与软件的攻击表面。因为关闭不必要的功能，可以避免它们带来的安全风险。减少未授权操作者可调用的代码有助避免安全事故。虽然减少攻击表面有助于防止安全事故，但它不能减少一旦攻击者发现漏洞后可能造成的损害程度。</p><p>攻击面从外部攻击视角来审视企业网络资产可能存在的攻击面及脆弱性，如开放端口是否做映射、网络边界是否做隔离、人员行为是否被明确约束等。</p><p><strong>脆弱性</strong><br>脆弱性也可称为弱点或漏洞，是资产或资产组中存在的可能被威胁利用造成损害的薄弱环节。脆弱性一旦被威胁成功利用就可能对资产造成损害。脆弱性可能存在于物理环境、组织、过程、人员、管理、配置、硬件、软件和信息等各个方面。脆弱性是网络系统中可能被利用并造成危害的弱点。</p><p><strong>三无七边系统</strong><br>三无：指具有系统特征且存在”无人管理、无人使用、无人防护”情况的业务/网站/系统/平台。<br>七边：指测试系统、试验平台、退网未离网系统、工程已上线加载业务但未正式交维系统、与合作伙伴共同运营的业务或系统、责任交接不清的系统、处于衰退期的系统。<br>三无七边系统是往往是最容易被外部攻破和利用的，所以需要加以重视。但是”三无七边”往往是最不容易发现和忽视的。<br>“三无七边”系统网络安全管控工作应贯穿规划、设计、建设、入网运行、维护及下线退网整个生命周期。</p><p>暴露面不一定存在漏洞也不一定是攻击面，但是因为暴露在攻击者视线范围内，直面外部攻击者的威胁，安全风险高。<br>攻击面我的理解是既可以被黑客访问又存在漏洞，也就是既是暴露面又有脆弱性，安全风险非常高。<br>攻击面是从外部攻击的视角来审视可能存在的风险，暴露面和脆弱性从内部管理的视角来审视安全风险。<br>三无七边系统往往是安全管理人员所忽视的有可能存在暴露面和攻击面而又没有在安全管控范围内的系统，安全风险非常非常高。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不想学鼓的产品经理不是一个好的程序员</title>
      <link href="/posts/60aaa7f1/"/>
      <url>/posts/60aaa7f1/</url>
      
        <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211229/%E6%9E%B6%E5%AD%90%E9%BC%93.jpg" alt="架子鼓"></p><center>架子鼓</center><p>一直以来都想学一门乐器。苦于没有任何才艺，不管是学校搞活动还是公司的团拜活动都是躲得远远的。从小就很羡慕那种多才多艺的人，不管什么时候都能成为众人的焦点，在要表演的时候可以自信的拿得出手表现一番。也非常羡慕那种自娱自乐的享受自我放松的自由演奏，感觉会乐器的人总是那么的快乐和陶醉。</p><p>公司搬到岳麓山大学科技城就在中南大学后湖国际艺术园。一天晚上和同事散步经过一家现代音乐体验店，里面传来乐队演奏的声音，于是驻足前往。里面一群快乐的人，正在激情洋溢的排练着享受着。我们都被触动了，这种自由、快乐、充满激情的感觉真好！想着一天到晚围绕着产品、项目、代码、缺陷，被工作和生活的压力摧残着的我们什么时候才会有这样的状态啊？所以合计了一下，我们也来报个班来学乐器。我一直想学架子鼓，所以决定报个学架子鼓的班。</p><p>试听课，老师是一位胖胖的90后小女孩，问了我一个灵魂拷问的问题。你这年纪不小了为什么想起要来学架子鼓？我想了半天，说我就是喜欢敲鼓啊，一直一来就喜欢节奏感比较强的声音，听音乐也是喜欢听节奏感强的歌曲，听到重低音的鼓声敲在心里“咚”、“咚”、“咚”的感觉很踏实。而且敲鼓沉浸在音乐里敲起来帅气。不管怎么样，虽然不会，但是从心里还是喜欢。</p><p>喜欢是喜欢，但是没有目标的学习始终都是在耍流氓，浪费自己的时间、精力还学不好。既然是喜欢，既然开始学了，就一定要学好。我们现在是报的一个课程12节课的班，我的目标是通过这一个课程的学习，了解架子鼓的基本演奏技巧，学会一首歌曲的演奏。就《大风吹》吧，谁叫这歌这段时间这么火呢。计划是每周二、四上课，每天拿出1个小时用来练习。<strong>学鼓，虽然我不是天赋最好的，但我争取做那个最认真的</strong>！</p><p>今天根据老师的建议在网上买了练习用的哑鼓垫、军鼓架、鼓棒、节拍器。后面动次打次练起来！</p><p>以后我的标签又多了一个–<strong>鼓手</strong>！</p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架子鼓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穷忙与假努力</title>
      <link href="/posts/dae0a359/"/>
      <url>/posts/dae0a359/</url>
      
        <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211228/%E7%A9%B7%E5%BF%99%E4%B8%8E%E5%81%87%E5%8A%AA%E5%8A%9B.png" alt="穷忙与假努力"></p><center>穷忙与假努力</center><p>时间过得真快，只有几天2021年即将过去。每次到了年底回想起来总是感觉时间过得真快，忙忙碌碌又过了一年，可自己各方面取得的成绩乏善可陈。自己并不是很懒惰的人，看上去每天都很忙，却没有忙出效果，反而是随着年龄的增大越来越焦虑。越焦虑就暗自下决心以后要更加努力，当努力没有达到效果时就更加的焦虑。陷入了越努力-&gt;越失望-&gt;越焦虑的怪圈。</p><p><strong>没有目标、没有效果的忙就是穷忙，看上去努力却实际没有效果的努力是假努力</strong>，穷忙和假努力往往是一同出现的，假努力造成了穷忙，穷忙成就了假努力。<strong>相对于不努力，有时候“假努力”会更加可怕</strong>！因为它像安慰剂一样，让你感觉是在努力而不自知，会让你陷入深深的自我怀疑，对自己失望，最后越来越糟，失去对学习、工作、生活的兴趣。</p><p>到底什么样的表现是“假努力”呢？有老师针对孩子们在学习上的表现列举了一些“假努力”表现，给了我很大的启发。</p><p>“假努力”表现一：上课只顾抄笔记，老师讲的都不听。<br>有很多同学在上课的时候表现得特别忙，看上去特别努力的在学习，老师黑板上写的，还是口头上说的，他们都会事无巨细地写下来。然而，对于老师们讲的是什么？本节课的重难点又是什么？他们全然无所谓，只顾着把这堂课发生的所有一切都记录下来。这样的“假努力”注定会让课堂的效率低下，让自己的努力完全沦为无用的“假努力”。</p><p>“假努力”表现二：花很多时间做笔记，课后却从来不去理解。<br>有第一种“假努力”的同学，往往都存在着“假努力”的第二种表现，那就是笔记写得非常非常多，但是至于笔者写的内容和知识点，他们都从来不看，更不会花时间去理解和搞懂笔记上的内容。这样花大力气写下的笔记，当然最终沦为无用功。</p><p>“假努力”表现三：只顾刷题，从来都不花时间总结。<br>还有一部分“假努力”的同学，每天花大量的时间刷题，而且他们往往还有一个显著的特征，那就是只管做题多少，从来不过问题目对错！那些错题，反复出现问题的题目，他们从来都是不管不顾，只觉得刷了足够的题目，自己的成绩自然而然会上升！然而，殊不知他们把大量的时间花在了已经会的题目上，那些不会、易错的题目还是永远会错。</p><p>“假努力”表现四：每天熬夜学习，白天学习效率低下。<br>不知道各位老师和同学有没有发现，几乎每一个中学班级里，总会出现这么一两个“夜晚学习狂魔”，他么总喜欢晚上搞学习，并且熬非常的时间，导致第二天整个人的精神状态都不好，白天的学习效率极其低下！最后陷入一个“白天该学的时候状态差，晚上不该学的时候拼命学”的死循环当中。</p><p> “假努力”表现五：没有目标和计划的去学习。<br>这种“假努力”的表现有一个典型的例子，比如某个同学们英语很差，想通过自己的努力学好英语，然后就从英语单词开始入手，每天背课本上的单词，而且无论什么时候都是从单词表的第一个单词去背起！这样无计划、无目标的努力，只会耗费巨大的时间和精力在重复学习之上！进而导致学习成绩的速度异常的缓慢！</p><p>从这些表现上来看，其实我们成年人在平时学习、工作中同样存在这些类似的问题。个人认为<strong>造成穷忙和假努力最大的问题是没有目标和计划</strong>。东一榔头、西一棒子，不知道自己到底要学什么，要学到一个什么样的程度。就像小时候课本里的小猴子去掰玉米，看什么捡什么，最后捡了芝麻丢了西瓜。<strong>另外一个就是要有系统化、体系化的思维去学习</strong>。只有系统化、体系化的去学习某个东西，建立该领域的知识体系结构体系才能在有体系结构的基础上进行积累，才能学得好，学得牢。现在公众号、抖音、知乎上碎片化的知识很多，哪怕你是天天上知乎去关注学习这些碎片化的知识而没有建立一个知识体系去有意识的去理解吸收的话，那就类似于花了很多时间去做笔记，去关注去了解，课后从来不去理解。给人感觉是看上去在很努力的学习，其实啥也没有学到。</p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新场地，新征程！</title>
      <link href="/posts/8528ed97/"/>
      <url>/posts/8528ed97/</url>
      
        <content type="html"><![CDATA[<p>服务数字经济，护航美好生活！</p><p>2021年12月09日通服网安研发团队强势入驻岳麓上大学科技城国家网络安全产业园。</p><p>新场地，新征程，数网络安全研发，还看通服网安！</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%8F%AD%E7%89%8C.jpg" alt="通服网安揭牌"></p><center>通服网安</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%9B%A2%E9%98%9F%E5%90%88%E5%BD%B1.jpg" alt="通服网安研发团队"></p><center>通服网安研发团队</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E7%A0%94%E5%8F%91%E5%A4%A7%E6%A5%BC.jpg" alt="通服网安研发大楼"></p><center>通服网安研发大楼</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E7%A0%94%E5%8F%91%E5%A4%A7%E6%A5%BC%E4%BE%A7%E9%9D%A2.jpg" alt="通服网安研发大楼外景"></p><center>通服网安研发大楼外景</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E9%80%9A%E6%9C%8D%E7%BD%91%E5%AE%89%E5%89%8D%E5%8F%B0.jpg" alt="通服网安前台"></p><center>通服网安前台</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%B1%95%E5%8E%85%E5%85%A5%E5%8F%A3.jpg" alt="展厅入口"></p><center>通服网安展厅入口</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E5%B1%95%E5%8E%85.jpg" alt="通服网安展厅"></p><center>通服网安展厅</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%80%81%E5%8A%BF%E6%84%9F%E7%9F%A5%E5%B1%95%E7%A4%BA%E5%A4%A7%E5%B1%8F.jpg" alt="通服网安研发楼展厅安全运营中心展示"></p><center>通服网安研发楼展厅安全运营中心展示</center><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211210/%E6%B2%A1%E6%9C%89%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%B0%B1%E6%B2%A1%E6%9C%89%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8.jpg" alt="没有网络安全就没有国家安全"></p><center>没有网络安全就没有国家安全</center>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习实现恶意URL检测实战一</title>
      <link href="/posts/6b6a91de/"/>
      <url>/posts/6b6a91de/</url>
      
        <content type="html"><![CDATA[<p>恶意URL检测的方法很多，这里介绍通过机器学习分析URL文本分词词频来检测恶意URL。训练的数据集为开源数据集，通过机器学习训练检测模型，然后做了部分工程化的应用，将模型持久化，在应用的时候加载进来直接应用，不用重新进行训练。通过接口调用实现恶意URL检测预测判断。</p><p>恶意URL检测，对应与机器学习是个分类问题，这里分别用逻辑回归和SVM支持向量机分类模型进行模型实现。</p><p>具体实现过程包括<strong>数据载入</strong>–&gt;<strong>数据处理（分词、向量化处理）</strong>–&gt;<strong>模型训练</strong>–&gt;<strong>模型保存</strong>–&gt;<strong>模型应用</strong></p><p><strong>项目组织结构如下：</strong><br><img src="https://img-blog.csdnimg.cn/cdcd148129c346f8a79ab6d91a120fe9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_11,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="项目组织结构"></p><h1 id="一、数据载入"><a href="#一、数据载入" class="headerlink" title="一、数据载入"></a>一、数据载入</h1><p>从数据集中载入数据，读取数据，将URL和标签进行识别和区分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从文件中获取数据集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataFromFile</span><span class="params">(filename=<span class="string">'data/data.csv'</span>)</span>:</span></span><br><span class="line">    input_url = filename</span><br><span class="line">    data_csv = pd.read_csv(input_url, <span class="string">','</span>, error_bad_lines=<span class="literal">False</span>)</span><br><span class="line">    data_df = pd.DataFrame(data_csv)</span><br><span class="line">    url_df = np.array(data_df)</span><br><span class="line">    random.shuffle(url_df)</span><br><span class="line">    y = [d[<span class="number">1</span>] <span class="keyword">for</span> d <span class="keyword">in</span> url_df]</span><br><span class="line">    inputurls = [d[<span class="number">0</span>] <span class="keyword">for</span> d <span class="keyword">in</span> url_df]</span><br><span class="line">    <span class="keyword">return</span> inputurls,y</span><br></pre></td></tr></table></figure><h1 id="二、数据处理（分词、向量化处理）"><a href="#二、数据处理（分词、向量化处理）" class="headerlink" title="二、数据处理（分词、向量化处理）"></a>二、数据处理（分词、向量化处理）</h1><p>数据处理实现对URL的分词及向量化处理<br>分词:分析URL根据,.-进行分词，由于com、cn等常用域名不是关键影响因素，所以分词的时候去掉了</p><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分词</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTokens</span><span class="params">(input)</span>:</span></span><br><span class="line">    web_url = input.lower()</span><br><span class="line">    urltoken = []</span><br><span class="line">    dot_slash = []</span><br><span class="line">    slash = str(web_url).split(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> slash:</span><br><span class="line">        r1 = str(i).split(<span class="string">'-'</span>)</span><br><span class="line">        token_slash = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(r1)):</span><br><span class="line">            r2 = str(r1[j]).split(<span class="string">'.'</span>)</span><br><span class="line">            token_slash = token_slash + r2</span><br><span class="line">        dot_slash = dot_slash + r1 + token_slash</span><br><span class="line">    urltoken = list(set(dot_slash))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'com'</span> <span class="keyword">in</span> urltoken:</span><br><span class="line">        urltoken.remove(<span class="string">'com'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'cn'</span> <span class="keyword">in</span> urltoken:</span><br><span class="line">        urltoken.remove(<span class="string">'cn'</span>)</span><br><span class="line">    <span class="keyword">return</span> urltoken</span><br></pre></td></tr></table></figure><h2 id="向量化处理"><a href="#向量化处理" class="headerlink" title="向量化处理"></a>向量化处理</h2><p>将分词以后的结果进行词频的向量化处理，形成可以用于模型训练的稀疏矩阵向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_urls,y=getDataFromFile(datapath)</span><br><span class="line">url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">x = url_vectorizer.fit_transform(all_urls)</span><br></pre></td></tr></table></figure><h1 id="三、模型训练"><a href="#三、模型训练" class="headerlink" title="三、模型训练"></a>三、模型训练</h1><p>将经过处理后的训练数据用模型进行训练，将数据集分为两部分一部分用于训练，一部分用于测试评估。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练,通过逻辑回归模型训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainLR</span><span class="params">(datapath)</span>:</span></span><br><span class="line">    all_urls,y=getDataFromFile(datapath)</span><br><span class="line">    url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">    x = url_vectorizer.fit_transform(all_urls)</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    l_regress = LogisticRegression()                  <span class="comment"># Logistic regression</span></span><br><span class="line">    l_regress.fit(x_train, y_train)</span><br><span class="line">    l_score = l_regress.score(x_test, y_test)</span><br><span class="line">    print(<span class="string">"score: &#123;0:.2f&#125; %"</span>.format(<span class="number">100</span> * l_score))</span><br><span class="line">    <span class="keyword">return</span> l_regress,url_vectorizer</span><br></pre></td></tr></table></figure><p>用逻辑回归模型训练的结果是 score: 98.50 %</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练，通过SVM支持向量机模型训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainSVM</span><span class="params">(datapath)</span>:</span></span><br><span class="line">    all_urls, y = getDataFromFile(datapath)</span><br><span class="line">    url_vectorizer = TfidfVectorizer(tokenizer=getTokens)</span><br><span class="line">    x = url_vectorizer.fit_transform(all_urls)</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    svmModel=svm.LinearSVC()</span><br><span class="line">    svmModel.fit(x_train, y_train)</span><br><span class="line">    svm_score=svmModel.score(x_test, y_test)</span><br><span class="line">    print(<span class="string">"score: &#123;0:.2f&#125; %"</span>.format(<span class="number">100</span> * svm_score))</span><br><span class="line">    <span class="keyword">return</span> svmModel,url_vectorizer</span><br></pre></td></tr></table></figure><p>用SVM模型训练的结果是 score: 99.64 %</p><p>可以看出SVM模型训练的结果比逻辑回归模型训练的效果要稍好。</p><h1 id="四、保存模型"><a href="#四、保存模型" class="headerlink" title="四、保存模型"></a>四、保存模型</h1><p>将训练好的模型进行持久化保存，通过pickle.dump()的方式把训练好的模型参数及特征保存至模型文件，以便于应用的时候不要再进行训练，直接应用训练好的模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#保存模型及特征</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveModel</span><span class="params">(model,vector)</span>:</span></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">    file1 = modelfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file1, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(model, f)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment">#保存特征</span></span><br><span class="line">    file2 = vectorfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file2, <span class="string">'wb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        pickle.dump(vector, f2)</span><br><span class="line">    f2.close()</span><br></pre></td></tr></table></figure><p>通过main方法执行训练模型及保存模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#model,vector=trainLR('data/data.csv')</span></span><br><span class="line">    model, vector = trainSVM(<span class="string">'data/data.csv'</span>)</span><br><span class="line">    saveModel(model,vector)</span><br></pre></td></tr></table></figure><h1 id="四、模型应用"><a href="#四、模型应用" class="headerlink" title="四、模型应用"></a>四、模型应用</h1><p>通过pickle.load载入已经训练好的模型和特征，并用Flask暴露一个接口调用模型的预测方法进行预测。</p><h2 id="载入已经训练好的模型"><a href="#载入已经训练好的模型" class="headerlink" title="载入已经训练好的模型"></a>载入已经训练好的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#载入已经训练好的模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadModel</span><span class="params">()</span>:</span></span><br><span class="line">    file1 = modelfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file1, <span class="string">'rb'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">        model = pickle.load(f1)</span><br><span class="line">    f1.close()</span><br><span class="line"></span><br><span class="line">    file2 = vectorfile_path</span><br><span class="line">    <span class="keyword">with</span> open(file2, <span class="string">'rb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        vector = pickle.load(f2)</span><br><span class="line">    f2.close()</span><br><span class="line">    <span class="keyword">return</span> model,vector</span><br></pre></td></tr></table></figure><h2 id="通过接口进行调用"><a href="#通过接口进行调用" class="headerlink" title="通过接口进行调用"></a>通过接口进行调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过接口进行调用</span></span><br><span class="line"><span class="meta">@app.route('/&lt;path:path&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_predict</span><span class="params">(path)</span>:</span></span><br><span class="line">    X_predict = []</span><br><span class="line">    X_predict.append(path)</span><br><span class="line">    model, vector = loadModel()</span><br><span class="line">    x = vector.transform(X_predict)</span><br><span class="line">    y_predict = model.predict(x)</span><br><span class="line">    print(y_predict[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"url predict: "</span>+str(y_predict[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="五、应用效果"><a href="#五、应用效果" class="headerlink" title="五、应用效果"></a>五、应用效果</h1><p>将需要检测的URL，输入到<a href="http://127.0.0.1:5000/后面，就可以根据输入的URL进行检测给出模型预测的结果。" target="_blank" rel="noopener">http://127.0.0.1:5000/后面，就可以根据输入的URL进行检测给出模型预测的结果。</a><br><a href="http://127.0.0.1:5000/sohu.com/a/338823532_354899" target="_blank" rel="noopener">http://127.0.0.1:5000/sohu.com/a/338823532_354899</a><br><img src="https://img-blog.csdnimg.cn/7f17697af706490ba693272f6f3780ad.png#pic_center" alt="检测效果1"><br><a href="http://127.0.0.1:5000/sohu.com/a/%3Cscript%3E/test" target="_blank" rel="noopener">http://127.0.0.1:5000/sohu.com/a/%3Cscript%3E/test</a><br><img src="https://img-blog.csdnimg.cn/d6e2542df8944ce4803da80fe0f9f145.png#pic_center" alt="检测效果2"></p><p>完整代码及数据集见：<a href="https://github.com/xiejava1018/urldetection.git" target="_blank" rel="noopener">https://github.com/xiejava1018/urldetection.git</a></p><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Anaconda报The channel is not accessible源通道不可用问题</title>
      <link href="/posts/d101efba/"/>
      <url>/posts/d101efba/</url>
      
        <content type="html"><![CDATA[<p>最近在通过pycharm开发python程序，引用anaconda环境建立虚拟环境时报错，报UnavailableInvalidChannel: The channel is not accessible or is invalid.应该是镜像源访问通道无法访问或无效。现将解决办法记录如下：</p><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><p>操作系统：win10<br>安装有anaconda 4.10.3<br>pycharm2021.2</p><h1 id="报错现象："><a href="#报错现象：" class="headerlink" title="报错现象："></a>报错现象：</h1><p>在pycharm中新建python项目，引用anaconda建立虚拟环境时报错<br>报“UnavailableInvalidChannel: The channel is not accessible or is invalid.”<br><img src="https://img-blog.csdnimg.cn/0b93fd9f35054b69a17eea98aace4d1b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="建立虚拟环境报错"></p><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><h2 id="1、找到anaconda的源配置文件"><a href="#1、找到anaconda的源配置文件" class="headerlink" title="1、找到anaconda的源配置文件"></a>1、找到anaconda的源配置文件</h2><p>根据报错的建议提示：</p><blockquote><p>You will need to ajust your conda configuration to proceed.<br>Use ‘cona config –show channels’ to view your configuration’s current state,<br>and use ‘conda config –show-sources’ to view config file location.</p></blockquote><p>意思是建议你需要调整conda的配置来处理，可以通过<code>cona config --show channels</code>命令来查看你当前的配置状态，可以用<code>conda config --show-sources</code>看查看本地的配置文件。<br>根据这个建议，打开anaconda的命令行控制台。<br><img src="https://img-blog.csdnimg.cn/9fdcb7a4f8e64cb19e069fad4e1ece6a.png#pic_center" alt="Anaconda Powershell"></p><p>敲入“conda config –show-sources”命令，显示当前的通道为<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a>  报错就是说这个通道无法访问或无效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show channels</span><br><span class="line">channels:</span><br><span class="line">  - https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>通过“conda config –show-sources” 查看配置文件的路径。配置文件为用户目录下的<code>.condarc</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show-sources</span><br><span class="line">==&gt; C:\Users\xiejava\.condarc &lt;==</span><br><span class="line">channels:</span><br><span class="line">  - https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/90ca54b07ef6417395a01c140b6b4381.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、修改为清华的镜像源"><a href="#2、修改为清华的镜像源" class="headerlink" title="2、修改为清华的镜像源"></a>2、修改为清华的镜像源</h2><p>将找到的.condarc文件打开。<br>拷贝以下清华的镜像源到该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><p>然后再次运行<code>conda config --show-sources</code>，确认配置文件内容已经修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\xiejava&gt; conda config --show-sources</span><br><span class="line">==&gt; C:\Users\xiejava\.condarc &lt;==</span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">show_channel_urls: True</span><br></pre></td></tr></table></figure><h2 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h2><p>再打开pycharm引用Conda Enviroment新建新的虚拟环境。<br><img src="https://img-blog.csdnimg.cn/86f0c2ffd7434ed1a591bb89c47f68d8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="新建新的虚拟环境"><br>这时不报错可以正常创建Conda虚拟环境了。<br><img src="https://img-blog.csdnimg.cn/556082fa9af142e7adb3529de9da77b3.png#pic_center" alt="创建Conda Environment"><br>至此，修改成清华镜像源解决了Anaconda报The channel is not accessible源通道不可用的问题。</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python快速实现一个域名、IP信息聚合网站</title>
      <link href="/posts/fa820ec9/"/>
      <url>/posts/fa820ec9/</url>
      
        <content type="html"><![CDATA[<p>域名和IP地址信息是非常基础的情报信息，目前网上有很多网站都提供了域名信息的查询、IP地址及归属地的查询。本文通过Python Flask实现域名及IP情报信息的聚合网站。</p><p>因为域名和IP地址信息会有变化，为了减少接口压力，做了本地数据库的存储，新鲜度保存一周，每次查询先从本地数据库获取信息，如果本地库信息有并且没有超过一个星期就从本地库取，没有就从其他网站获取，并更新到本地库。</p><h1 id="一、获取域名WHOIS信息"><a href="#一、获取域名WHOIS信息" class="headerlink" title="一、获取域名WHOIS信息"></a>一、获取域名WHOIS信息</h1><p>网上提供域名WHOIS信息查询的网站有很多，这里以<a href="http://whois.chinafu.com" target="_blank" rel="noopener">http://whois.chinafu.com</a> 为例实现WHOIS信息的查询和解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getwhoisinfobychinafu</span><span class="params">(domain)</span>:</span></span><br><span class="line">    ret_result = &#123;&#125;</span><br><span class="line">    result=getWhoisInfoFromDB(domain)</span><br><span class="line">    <span class="keyword">if</span> len(result)==<span class="number">0</span>:</span><br><span class="line">        whois_service_url = <span class="string">'http://whois.chinafu.com/whois.php'</span></span><br><span class="line">        post_data=&#123;<span class="string">"domain"</span>:domain&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            post_result=requests.post(whois_service_url,post_data)</span><br><span class="line">            <span class="keyword">if</span> post_result.status_code == <span class="number">200</span>:</span><br><span class="line">                ret_str = post_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">                soup = BeautifulSoup(ret_str, <span class="string">'lxml'</span>)</span><br><span class="line">                items_tr =soup.find(name=<span class="string">'table'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'listtable'</span>&#125;).find_all(name=<span class="string">'tr'</span>)</span><br><span class="line">                <span class="keyword">for</span> item_tr <span class="keyword">in</span> items_tr:</span><br><span class="line">                    td_item=item_tr.find(name=<span class="string">'td'</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'colspan'</span> <span class="keyword">in</span> td_item.attrs:</span><br><span class="line">                        key_name=<span class="string">'详情'</span></span><br><span class="line">                        key_value=td_item.find(name=<span class="string">'div'</span>,id=<span class="string">'tab1'</span>).text</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        key_name=item_tr.find(name=<span class="string">'th'</span>).text</span><br><span class="line">                        key_value=item_tr.find(name=<span class="string">'td'</span>).text</span><br><span class="line">                    ret_result[key_name]=key_value</span><br><span class="line">                addchinafuWhoisInfo2DB(ret_result)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> r:</span><br><span class="line">            print(<span class="string">'未知错误 %s'</span> % (r))</span><br><span class="line">    <span class="comment">#ret_result = json.dumps(ret_result, ensure_ascii=False)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret_result=result[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> ret_result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWhoisInfoFromDB</span><span class="params">(domainname)</span>:</span></span><br><span class="line">    whoisInfos=db.session.execute(<span class="string">'select * from whoisinfo where domain_name="%s" and updated_time &gt; DATE_SUB(CURDATE(), INTERVAL 1 WEEK)'</span> % domainname).fetchall()</span><br><span class="line">    whoisInfo_dics=[]</span><br><span class="line">    <span class="keyword">for</span> whoisInfo <span class="keyword">in</span> whoisInfos:</span><br><span class="line">        chinafuwhoisinfo_dic=chinafuwhoisinfo2dic(whoisInfo)</span><br><span class="line">        whoisInfo_dics.append(chinafuwhoisinfo_dic)</span><br><span class="line">    <span class="keyword">return</span> whoisInfo_dics</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addchinafuWhoisInfo2DB</span><span class="params">(chinafuWhoisInfo_dic)</span>:</span></span><br><span class="line">    chinafuWhois=WhoisInfo()</span><br><span class="line">    chinafuWhois.domain_name=chinafuWhoisInfo_dic.get(<span class="string">'域名DomainName'</span>)</span><br><span class="line">    chinafuWhois.domain_status=chinafuWhoisInfo_dic.get(<span class="string">'域名状态Domain Status'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar=chinafuWhoisInfo_dic.get(<span class="string">'注册商Sponsoring Registrar'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.name_server=chinafuWhoisInfo_dic.get(<span class="string">'DNS 服务器Name Server'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_creation_date=chinafuWhoisInfo_dic.get(<span class="string">'注册日期Registration Date'</span>,<span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_updated_date = chinafuWhoisInfo_dic.get(<span class="string">'更新日期Update Date'</span>, <span class="string">''</span>)</span><br><span class="line">    chinafuWhois.registrar_expiry_date = chinafuWhoisInfo_dic.get(<span class="string">'到期日期Expiration Date'</span>, <span class="string">''</span>)</span><br><span class="line">    chinafuWhois.detail=chinafuWhoisInfo_dic.get(<span class="string">'详情'</span>, <span class="string">''</span>)[<span class="number">0</span>:<span class="number">10000</span>]</span><br><span class="line">    chinafuWhois.source = <span class="string">'中国福网'</span></span><br><span class="line">    db.session.execute(<span class="string">'delete from whoisinfo where domain_name="%s" and source="%s"'</span> % (chinafuWhoisInfo_dic.get(<span class="string">'域名DomainName'</span>), chinafuWhois.source))</span><br><span class="line">    db.session.add(chinafuWhois)</span><br><span class="line">    db.session.commit()</span><br></pre></td></tr></table></figure><p>这里为了减少直接从其他网站获取WHOIS信息的压力，做了本地数据库的存储，每次先从本地数据库取WHOIS的信息，如果本地库信息有并且没有超过一个星期就从本地库取，没有就从其他网站获取，并更新到本地库。这里getWhoisInfoFromDB实现了取新鲜度为1周的数据，addchinafuWhoisInfo2DB实现将获取的信息保存到本地数据库。</p><h1 id="二、根据域名解析出IP"><a href="#二、根据域名解析出IP" class="headerlink" title="二、根据域名解析出IP"></a>二、根据域名解析出IP</h1><p>根据域名解析出IP代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIPbyDomain</span><span class="params">(domain)</span>:</span></span><br><span class="line">    addr=<span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        myaddr = socket.getaddrinfo(domain, <span class="string">'http'</span>)</span><br><span class="line">        addr=myaddr[<span class="number">0</span>][<span class="number">4</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">return</span> addr</span><br></pre></td></tr></table></figure><h1 id="三、获取IP信息"><a href="#三、获取IP信息" class="headerlink" title="三、获取IP信息"></a>三、获取IP信息</h1><p>获取IP信息的API接口也有很多，有淘宝的 <a href="https://ip.taobao.com/outGetIpInfo" target="_blank" rel="noopener">https://ip.taobao.com/outGetIpInfo</a>  、IPINFO <a href="http://ipinfo.io/、IPAPI" target="_blank" rel="noopener">http://ipinfo.io/、IPAPI</a> <a href="http://ip-api.com/" target="_blank" rel="noopener">http://ip-api.com/</a>  以及GeoLite2离线库等。</p><h2 id="从淘宝IP获取IP信息"><a href="#从淘宝IP获取IP信息" class="headerlink" title="从淘宝IP获取IP信息"></a>从淘宝IP获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobytaobao</span><span class="params">(ip)</span>:</span></span><br><span class="line">    taobaoIp_url = <span class="string">'https://ip.taobao.com/outGetIpInfo'</span></span><br><span class="line">    post_data=&#123;<span class="string">"ip"</span>:ip,<span class="string">"accessKey"</span>:<span class="string">"alibaba-inc"</span>&#125;</span><br><span class="line">    ret_ipinfo= &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        return_data=requests.post(taobaoIp_url,post_data)</span><br><span class="line">        <span class="comment">#其中返回数据中code的值的含义为，0：成功，1：服务器异常，2：请求参数异常，3：服务器繁忙，4：个人qps超出</span></span><br><span class="line">        return_json=json.loads(return_data.text)</span><br><span class="line">        <span class="keyword">if</span> return_json[<span class="string">'code'</span>]==<span class="number">0</span>:</span><br><span class="line">            ret_ipinfo[<span class="string">'ip'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'ip'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'country'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'country'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'region'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'region'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'org'</span>]=<span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'city'</span>] = return_json[<span class="string">'data'</span>][<span class="string">'city'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'isp'</span>]=return_json[<span class="string">'data'</span>][<span class="string">'isp'</span>]</span><br><span class="line">            ret_ipinfo[<span class="string">'loc'</span>] = <span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'timezone'</span>] = <span class="string">''</span></span><br><span class="line">            ret_ipinfo[<span class="string">'source'</span>]=<span class="string">'淘宝IP'</span></span><br><span class="line">            addIPInfo2DB(ret_ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ret_ipinfo</span><br></pre></td></tr></table></figure><h2 id="从ipinfo-io获取IP信息"><a href="#从ipinfo-io获取IP信息" class="headerlink" title="从ipinfo.io获取IP信息"></a>从ipinfo.io获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobyipinfo</span><span class="params">(ip)</span>:</span></span><br><span class="line">    api_url=<span class="string">'http://ipinfo.io/'</span>+ip</span><br><span class="line">    ipinfo = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req_return = requests.get(api_url)</span><br><span class="line">        <span class="keyword">if</span> req_return.status_code == <span class="number">200</span>:</span><br><span class="line">            ipinfo = json.loads(req_return.text)</span><br><span class="line">            ipinfo[<span class="string">'source'</span>]=<span class="string">'ipinfo.io'</span></span><br><span class="line">            addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h2 id="从ip-api-com获取IP信息"><a href="#从ip-api-com获取IP信息" class="headerlink" title="从ip-api.com获取IP信息"></a>从ip-api.com获取IP信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobyipapi</span><span class="params">(ip)</span>:</span></span><br><span class="line">    api_url=<span class="string">'http://ip-api.com/json/'</span>+ip</span><br><span class="line">    ipinfo=&#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req_return=requests.get(api_url)</span><br><span class="line">        <span class="keyword">if</span> req_return.status_code==<span class="number">200</span>:</span><br><span class="line">            ipinfo=json.loads(req_return.text)</span><br><span class="line">            ipinfo[<span class="string">'ip'</span>] = ip</span><br><span class="line">            ipinfo[<span class="string">'source'</span>] = <span class="string">'ip-api.com'</span></span><br><span class="line">            ipinfo[<span class="string">'loc'</span>] = str(ipinfo[<span class="string">'lat'</span>])+<span class="string">','</span>+str(ipinfo[<span class="string">'lon'</span>])</span><br><span class="line">            addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'未知错误 %s'</span> % (e))</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h2 id="从GeoLite离线库获取IP信息"><a href="#从GeoLite离线库获取IP信息" class="headerlink" title="从GeoLite离线库获取IP信息"></a>从GeoLite离线库获取IP信息</h2><p>如何获取GeoLite离线库及如何读取，详见：<a href="http://xiejava.ishareread.com/posts/2c5697c0/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/2c5697c0/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getipinfobygeoip2</span><span class="params">(ip)</span>:</span></span><br><span class="line">    ipinfo=&#123;&#125;</span><br><span class="line">    dbdir=Config.geoLiteDBdir</span><br><span class="line">    <span class="keyword">with</span> geoip2.database.Reader(dbdir) <span class="keyword">as</span> reader:</span><br><span class="line">        response = reader.city(ip)</span><br><span class="line">        ipinfo[<span class="string">'ip'</span>] =ip</span><br><span class="line">        ipinfo[<span class="string">'country'</span>] = response.country.names[<span class="string">'zh-CN'</span>]</span><br><span class="line">        ipinfo[<span class="string">'region'</span>] =<span class="string">''</span></span><br><span class="line">        ipinfo[<span class="string">'city'</span>]=response.city.name</span><br><span class="line">        ipinfo[<span class="string">'org'</span>] =<span class="string">''</span></span><br><span class="line">        ipinfo[<span class="string">'loc'</span>] = str(response.location.latitude)+<span class="string">','</span>+str(response.location.longitude)</span><br><span class="line">        ipinfo[<span class="string">'timezone'</span>] = response.location.time_zone</span><br><span class="line">        ipinfo[<span class="string">'source'</span>] = <span class="string">'GeoIP'</span></span><br><span class="line">        addIPInfo2DB(ipinfo)</span><br><span class="line">    <span class="keyword">return</span> ipinfo</span><br></pre></td></tr></table></figure><h1 id="四、搭建一个FLASK-Web应用来查询聚合的域名、IP情报信息"><a href="#四、搭建一个FLASK-Web应用来查询聚合的域名、IP情报信息" class="headerlink" title="四、搭建一个FLASK Web应用来查询聚合的域名、IP情报信息"></a>四、搭建一个FLASK Web应用来查询聚合的域名、IP情报信息</h1><h2 id="1、FLASK-Web应用的工程组织"><a href="#1、FLASK-Web应用的工程组织" class="headerlink" title="1、FLASK Web应用的工程组织"></a>1、FLASK Web应用的工程组织</h2><p><img src="https://img-blog.csdnimg.cn/ad27fb1ae7c84bd297b751bfca86f975.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="工程组织"></p><h2 id="2、配置数据及读取配置数据"><a href="#2、配置数据及读取配置数据" class="headerlink" title="2、配置数据及读取配置数据"></a>2、配置数据及读取配置数据</h2><h3 id="1）配置数据"><a href="#1）配置数据" class="headerlink" title="1）配置数据"></a>1）配置数据</h3><p>配置数据分别放在.env及.flaskenv中，其中<code>.env</code>放的是工程中用到的数据库链接等比较私密的配置信息。<code>.flaskenv</code>放的是Flask运行环境的信息<br>.env的配置信息参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEV_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db_dev?charset=utf8'</span></span><br><span class="line">TEST_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db_test?charset=utf8'</span></span><br><span class="line">PROD_DATABASE_URI = <span class="string">'mysql+pymysql://dbuser:yourpassword@127.0.0.1:3306/infocol_db?charset=utf8'</span></span><br><span class="line"></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br><span class="line">SECRET_KEY=your secret key</span><br></pre></td></tr></table></figure><p>.falskenv配置信息参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLASK_ENV=development</span><br></pre></td></tr></table></figure><h3 id="2）实现读取配置数据"><a href="#2）实现读取配置数据" class="headerlink" title="2）实现读取配置数据"></a>2）实现读取配置数据</h3><p>通过config.py实现配置数据的读取及管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line">basedir=os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">flaskenv_path=os.path.join(basedir,<span class="string">'.flaskenv'</span>)</span><br><span class="line">env_path=os.path.join(basedir,<span class="string">'.env'</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(flaskenv_path):</span><br><span class="line">    load_dotenv(flaskenv_path)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(env_path):</span><br><span class="line">    load_dotenv(env_path)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">    geoLiteDBdir=os.path.join(basedir,<span class="string">'GeoLite2\GeoLite2-City.mmdb'</span>)</span><br><span class="line">    flaskenv = os.getenv(<span class="string">'FLASK_ENV'</span>,<span class="string">'development'</span>)</span><br><span class="line">    SECRET_KEY=os.getenv(<span class="string">'SECRET_KEY'</span>,<span class="string">'123!@#'</span>)</span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS=os.getenv(<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>)</span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'DEV_DATABASE_URI'</span>)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_app</span><span class="params">(app)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    DEBUG=<span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'DEV_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    TESTING=<span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'TEST_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.getenv(<span class="string">'PROD_DATABASE_URI'</span>)</span><br><span class="line"></span><br><span class="line">config=&#123;</span><br><span class="line">    <span class="string">'development'</span>:DevelopmentConfig,</span><br><span class="line">    <span class="string">'testing'</span>:TestingConfig,</span><br><span class="line">    <span class="string">'production'</span>:ProductionConfig,</span><br><span class="line">    <span class="string">'default'</span>:DevelopmentConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、界面及路由"><a href="#3、界面及路由" class="headerlink" title="3、界面及路由"></a>3、界面及路由</h2><p>界面很简单就一个域名/IP的输入框，输入域名或IP后去查询相应的域名信息或IP信息显示到界面上。<br><img src="https://img-blog.csdnimg.cn/d906b3973e654d3cb6c0a68fbc121da1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="index界面"></p><p>界面用jinjia2的模板<br>index.html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "bootstrap/base.html" %&#125;</span><br><span class="line">&#123;% block title %&#125;InfoCol&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    &#123;% block navbar %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".navbar-collapse"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>InfoCol<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header "</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"center-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-block"</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">                &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">                &#123;&#123; form.name.label &#125;&#125;&#123;&#123; form.name() &#125;&#125;</span><br><span class="line">                &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% if whois_info %&#125;</span><br><span class="line">                  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>&#123;&#123; name &#125;&#125;的Whois信息<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    &#123;% for item in whois_info %&#125;</span><br><span class="line">                        &#123;% if item!='详情' %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 80%"</span>&gt;</span>&#123;&#123; whois_info[item] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">href</span>=<span class="string">"#collapseExample"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"collapseExample"</span>&gt;</span></span><br><span class="line">                               &#123;&#123; item &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 80%"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse"</span> <span class="attr">id</span>=<span class="string">"collapseExample"</span>&gt;</span></span><br><span class="line">                                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">                                    &#123;&#123; whois_info[item] &#125;&#125;</span><br><span class="line">                                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% endif %&#125;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% if ipinfos|length&gt;0 %&#125;</span><br><span class="line">                  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>IP<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>国家/地区<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>省份<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>机构<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>ISP<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>经纬度<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>来源<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                      &#123;% for ipinfo in ipinfos %&#125;</span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['ip'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['country'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['region'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['city'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['org'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['isp'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; ipinfo['loc'] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                              &#123;% if ipinfo['source']=='ipinfo.io' %&#125;</span><br><span class="line">                                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ipinfo.io/&#123;&#123; ipinfo['ip'] &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; ipinfo['source'] &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                              &#123;% elif ipinfo['source']=='ip-api.com'%&#125;</span><br><span class="line">                                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ip-api.com/json/&#123;&#123; ipinfo['ip'] &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; ipinfo['source'] &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                              &#123;% else %&#125;</span><br><span class="line">                                  &#123;&#123; ipinfo['source'] &#125;&#125;</span><br><span class="line">                              &#123;% endif %&#125;</span><br><span class="line">                          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                      &#123;% endfor %&#125;</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>路由配置处理中实现了获取表单中的信息，并判断是域名还是IP如果是域名者获取whois信息，并根据域名获取IP信息。如果输入的是IP则获取IP信息，并反馈到页面上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@index_bp.route('/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    ipinfos = []</span><br><span class="line">    whois_info = <span class="string">''</span></span><br><span class="line">    form = InputForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        name = form.name.data</span><br><span class="line">        <span class="keyword">if</span> checkip(name):</span><br><span class="line">            ipinfos = getipinfo(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            whois_info = getwhoisinfo(name)</span><br><span class="line">            whois_ip = getIPbyDomain(name)</span><br><span class="line">            <span class="keyword">if</span> checkip(whois_ip):</span><br><span class="line">                ipinfos = getipinfo(whois_ip)</span><br><span class="line">        form.name.data = <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,form=form, name=name, ipinfos=ipinfos, whois_info=whois_info)</span><br></pre></td></tr></table></figure><h2 id="4、最终实现效果"><a href="#4、最终实现效果" class="headerlink" title="4、最终实现效果"></a>4、最终实现效果</h2><p><img src="https://img-blog.csdnimg.cn/6649c43ceaad485e9d3170b4a03695d4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="界面查询效果"></p><p><strong>至此通过Python快速实现了一个简单的域名、IP信息聚合网站</strong></p><hr><p>全部源代码：<a href="https://github.com/xiejava1018/infocollect" target="_blank" rel="noopener">https://github.com/xiejava1018/infocollect</a></p><p>演示地址：<a href="http://test.ishareread.com/" target="_blank" rel="noopener">http://test.ishareread.com/</a></p><p>博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫获取电子书资源实战</title>
      <link href="/posts/eab21fe5/"/>
      <url>/posts/eab21fe5/</url>
      
        <content type="html"><![CDATA[<p>最近在学习Python，相对java来说python简单易学、语法简单，工具丰富，开箱即用，适用面广做全栈开发那是极好的，对于小型应用的开发，虽然运行效率慢点，但开发效率极高。大大提高了咱们的生产力。为什么python能够在这几年火起来，自然有他的道理，当然也受益于这几年大数据和AI的火。</p><p>据说网络上80%的爬虫都是用python写的，不得不说python写爬虫真的是so easy。基本上一个不太复杂的网站可以通过python用100多行代码就能实现你所需要的爬取。<br>现在就以一个电子书的网站为例来实现python爬虫获取电子书资源。爬取整站的电子书资源，按目录保存到本地，并形成索引文件方便查找。</p><p>爬取的目标网站：苦瓜书盘</p><p>步骤：<strong>爬取-&gt;分析、解析-&gt;保存</strong></p><p>对于一个不需要登录验证的资源分享类的网站，爬取最大的工作量应该是在对目标页面的分析、解析、识别，这里用的到是Python的BeautifulSoup库。</p><p>一、获取目录</p><p>二、获取书籍列表页</p><p>三、获取书籍详情页</p><p>四、分析书籍详情页的资源地址</p><p>五、下载并保存</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>引入相应的包，设置 headerd, 和资源保存路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> Book <span class="keyword">import</span> Book</span><br><span class="line"></span><br><span class="line">savepath=<span class="string">"J://kgbook//books//"</span> <span class="comment">#保存地址</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">main_url=<span class="string">'https://kgbook.com/'</span></span><br><span class="line">bookcount=<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="一、获取目录"><a href="#一、获取目录" class="headerlink" title="一、获取目录"></a>一、获取目录</h1><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E7%9B%AE%E5%BD%95.png" alt="获取目录"><br>通过浏览器的调试工具可以看到目录在id=catagory的div标签下，下面还有ul和li标签，那我们可以迭代li可以获得目录及目录页的地址。<br>可以通过soup.find_all(attrs={‘id’: ‘category’})[0].ul 获取 到ul标签，然后获取ul的li标签，进行迭代获取。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">获取目录</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcategory</span><span class="params">()</span>:</span></span><br><span class="line">    req_result=requests.get(main_url,headers=headers)</span><br><span class="line">    <span class="keyword">if</span> req_result.status_code==<span class="number">200</span>:</span><br><span class="line">        htmlstr=req_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        soup = BeautifulSoup(htmlstr, <span class="string">'lxml'</span>)</span><br><span class="line">        categorys=soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'category'</span>&#125;)[<span class="number">0</span>].ul</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> categorys.find_all(name=<span class="string">'li'</span>):</span><br><span class="line">            print(<span class="string">'开始抓取'</span>+li.a.attrs[<span class="string">'href'</span>]+<span class="string">"--"</span>+li.string)</span><br><span class="line">            getcategroydetail(main_url+li.a.attrs[<span class="string">'href'</span>],li.string)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="二、获取书籍列表页"><a href="#二、获取书籍列表页" class="headerlink" title="二、获取书籍列表页"></a>二、获取书籍列表页</h1><p>在书籍列表页，我们要获取两个信息，分别是书籍列表的信息及翻页下一页书籍列表的URL地址。<br>通过浏览器的调试工具分别对列表的信息及翻页下一页的html进行分析。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E4%B9%A6%E7%B1%8D%E5%88%97%E8%A1%A8.png" alt="获取书籍列表页"><br>列表中的书籍详情页信息在class=”channel-item”的div标签下，通过class=”list-title”的h3标签循环迭代<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%BF%BB%E9%A1%B5.png" alt="翻页"><br>下一页，我们可以直接通过next_pag=soup.find(name=’a’,text=re.compile(‘下一页’))来获取。<br>然后我们可以通过递归来不断的调用获取下一页书籍列表页的代码，知道没有下一页为止。就可以把怎个目录都可以爬取完。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">获取书籍列表</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbookslist</span><span class="params">(bookurlstr,categroy_path)</span>:</span></span><br><span class="line">    book_result=requests.get(bookurlstr,headers=headers)</span><br><span class="line">    bookhtmlstr=book_result.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(bookhtmlstr, <span class="string">'lxml'</span>)</span><br><span class="line">    booklists=soup.select(<span class="string">'.channel-item'</span>)</span><br><span class="line">    <span class="keyword">for</span> bookinfo_div <span class="keyword">in</span> booklists:</span><br><span class="line">        booktitle_div=bookinfo_div.select(<span class="string">'.list-title'</span>)[<span class="number">0</span>]</span><br><span class="line">        bookurl=booktitle_div.a.attrs[<span class="string">'href'</span>]</span><br><span class="line">        getbookdetail(bookurl,categroy_path)</span><br><span class="line">    next_pag=soup.find(name=<span class="string">'a'</span>,text=re.compile(<span class="string">'下一页'</span>))</span><br><span class="line">    <span class="keyword">if</span> next_pag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        next_url=next_pag.attrs[<span class="string">'href'</span>]</span><br><span class="line">        print(<span class="string">'爬取下一页：'</span>+next_url)</span><br><span class="line">        getbookslist(next_url,categroy_path)</span><br></pre></td></tr></table></figure><h1 id="三、获取书籍详情页"><a href="#三、获取书籍详情页" class="headerlink" title="三、获取书籍详情页"></a>三、获取书籍详情页</h1><p>我们要在书籍详情页需要获得书籍详情信息包括书名、作者等信息<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E4%B9%A6%E7%B1%8D%E8%AF%A6%E6%83%85.png" alt="书籍详情"><br>关于书名和作者可以分别通过提取class=”news_title”的h1标签和id=”news_details”的div下的ul下的li再通过正则表达式对作者信息进行提取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">booktitle=bookdetailsoup.select(<span class="string">'.news_title'</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">bookauthor=bookdetailsoup.select(<span class="string">'#news_details'</span>)[<span class="number">0</span>].ul.li.find(text=re.compile(<span class="string">'作者：(.*?)'</span>)).strip()</span><br><span class="line">bookauthor=bookauthor.replace(<span class="string">'作者：'</span>,<span class="string">''</span>)</span><br><span class="line">booktitleinfo=<span class="string">"《"</span>+booktitle+<span class="string">'》-'</span>+bookauthor</span><br></pre></td></tr></table></figure><h1 id="四、分析书籍详情页的资源地址"><a href="#四、分析书籍详情页的资源地址" class="headerlink" title="四、分析书籍详情页的资源地址"></a>四、分析书籍详情页的资源地址</h1><p>在书籍详情页，我们还要分析书籍详情页的资源地址<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E4%B9%A6%E7%B1%8D%E8%B5%84%E6%BA%90%E5%9C%B0%E5%9D%80.png" alt="资源地址"><br>电子书的资源下载地址可以通过提取a标签的信息来获取。通过正则表达式分别匹配azw3、mobi、epub分别提取不同的电子书资源。<br>book_url_item=bookdetailsoup.find(name=’a’,text=re.compile(booktype,re.I))<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">根据书籍资源类型下载资源</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbookfortype</span><span class="params">(bookurl,categroy_path,bookdetailsoup,booktype)</span>:</span></span><br><span class="line">    booktitle=bookdetailsoup.select(<span class="string">'.news_title'</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">    bookauthor=bookdetailsoup.select(<span class="string">'#news_details'</span>)[<span class="number">0</span>].ul.li.find(text=re.compile(<span class="string">'作者：(.*?)'</span>)).strip()</span><br><span class="line">    bookauthor=bookauthor.replace(<span class="string">'作者：'</span>,<span class="string">''</span>)</span><br><span class="line">    booktitleinfo=<span class="string">"《"</span>+booktitle+<span class="string">'》-'</span>+bookauthor</span><br><span class="line">    print(<span class="string">'书籍详情：---'</span>+booktitleinfo)</span><br><span class="line">    book_url_item=bookdetailsoup.find(name=<span class="string">'a'</span>,text=re.compile(booktype,re.I))</span><br><span class="line">    <span class="keyword">if</span> book_url_item <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        downloadurl=book_url_item.attrs[<span class="string">'href'</span>]</span><br><span class="line">        print(<span class="string">'下载地址：'</span>+downloadurl)</span><br><span class="line">        <span class="keyword">if</span> checkIfNoExistBookByUrl(downloadurl):</span><br><span class="line">            r = requests.get(downloadurl)</span><br><span class="line">            <span class="keyword">if</span> r.status_code==<span class="number">200</span>:</span><br><span class="line">                savepath=createdir(categroy_path,booktitleinfo)</span><br><span class="line">                filename=booktitle+<span class="string">"."</span>+booktype</span><br><span class="line">                savebook(r.content,savepath,filename)</span><br><span class="line">                p,f=os.path.split(categroy_path)</span><br><span class="line">                bookcategory=f</span><br><span class="line">                book=Book(bookcategory,booktitle,bookauthor,bookurl,downloadurl,savepath,<span class="string">"苦瓜书盘"</span>,booktype)</span><br><span class="line">                print(book.toString())</span><br><span class="line">                savebooktojson(book)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'下载失败：status_code='</span>+str(r.status_code))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没有'</span>+booktype+<span class="string">'格式的书'</span>)</span><br></pre></td></tr></table></figure><p>五、下载并保存<br>有了资源的下载资源后下载就变得很简单了，主要用python的os库，对文件进行操作，包括建目录及保存资源文件。也可以通过连接数据库将爬取的数据保存到数据库。<br>定义书籍类Book用于组织和保存数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,bookcategory,bookname,bookauthor,bookurl,bookdownloadurl,booksavepath,booksource,booktype)</span>:</span></span><br><span class="line">        self.bookcategory=bookcategory</span><br><span class="line">        self.bookname=bookname</span><br><span class="line">        self.bookauthor=bookauthor</span><br><span class="line">        self.bookurl=bookurl</span><br><span class="line">        self.bookdownloadurl=bookdownloadurl</span><br><span class="line">        self.booksavepath=booksavepath</span><br><span class="line">        self.booksource=booksource</span><br><span class="line">        self.booktype=booktype</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toString</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"bookcategory"</span>:self.bookcategory,<span class="string">"bookname"</span>:self.bookname,<span class="string">"bookauthor"</span>:self.bookauthor,<span class="string">"bookurl"</span>:self.bookurl,<span class="string">"bookdownloadurl"</span>:self.bookdownloadurl,<span class="string">"booksavepath"</span>:self.booksavepath,<span class="string">"booksource"</span>:self.booksource,<span class="string">"booktype"</span>:self.booktype&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">将获取的信息保存至文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savebooktojson</span><span class="params">(book)</span>:</span></span><br><span class="line">    bookdata=&#123;</span><br><span class="line">        <span class="string">'booksource'</span>:book.booksource,</span><br><span class="line">        <span class="string">'booktype'</span>:book.booktype,</span><br><span class="line">        <span class="string">'bookcategory'</span>:book.bookcategory,</span><br><span class="line">        <span class="string">'bookname'</span>:book.bookname,</span><br><span class="line">        <span class="string">'bookauthor'</span>:book.bookauthor,</span><br><span class="line">        <span class="string">'bookurl'</span>:book.bookurl,</span><br><span class="line">        <span class="string">'bookdownloadurl'</span>:book.bookdownloadurl,</span><br><span class="line">        <span class="string">'booksavepath'</span>:book.booksavepath</span><br><span class="line">    &#125;</span><br><span class="line">    bookjson=json.dumps(bookdata,ensure_ascii=<span class="literal">False</span>) <span class="comment">#ensure_ascii=False 就不会用 ASCII 编码，中文就可以正常显示了</span></span><br><span class="line">    print(bookjson)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'a'</span>,encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(bookjson+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">根据目录创建文件夹</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createdir</span><span class="params">(savepath,dir)</span>:</span></span><br><span class="line">    path=os.path.join(savepath,dir)</span><br><span class="line">    isExists=os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> isExists:</span><br><span class="line">        print(<span class="string">'已经存在'</span>+dir)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'创建目录'</span>+dir)</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">下载书籍资源</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savebook</span><span class="params">(content,savepath,savefilename)</span>:</span></span><br><span class="line">    savefile=os.path.join(savepath,savefilename)</span><br><span class="line">    <span class="keyword">with</span> open(savefile, <span class="string">"wb"</span>) <span class="keyword">as</span> code:</span><br><span class="line">       code.write(content)</span><br></pre></td></tr></table></figure><hr><p>运行效果如下：</p><p>1、爬取过程<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%88%AC%E5%8F%96%E8%BF%87%E7%A8%8B.png" alt="爬取过程"><br>2、爬取记录的json信息<br>data.json的信息如下：<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E7%88%AC%E5%8F%96%E8%AE%B0%E5%BD%95%E7%9A%84json%E4%BF%A1%E6%81%AF.png" alt="爬取记录"><br>3、爬取获取的资源<br>按目录都已经整理好了，够你看的了。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211120/%E8%8E%B7%E5%8F%96%E7%9A%84%E8%B5%84%E6%BA%90.png" alt="获取的资源"></p><p>​<br>Python爬虫获取电子书资源实战的全部代码，包括爬取-&gt;分析、解析-&gt;保存至本地及数据库。<a href="https://download.csdn.net/download/fullbug/10468606" target="_blank" rel="noopener">下载</a></p><p>​<strong>github:</strong> <a href="https://github.com/xiejava1018/getbooks" target="_blank" rel="noopener">https://github.com/xiejava1018/getbooks</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你有了一个目标，于是你有了一堆技能，而不是反过来！</title>
      <link href="/posts/e6daf5ca/"/>
      <url>/posts/e6daf5ca/</url>
      
        <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20211116/%E7%9B%AE%E6%A0%87.png" alt="目标"></p><p><strong>你有了一个目标，于是你有了一堆技能。而不是反过来！</strong><br>这应该是这段时间我领悟最深刻的一句话，是从白帽汇-赵武的微信文章中看到的。<br>我的体会是，<strong>没有一个清晰的为之努力奋斗的目标而去学东西，很难获得效果</strong>。</p><p>老实说，我并不是个懒惰的人，知道要不断的去学习、看书，来努力提升自己，但是几年下来自己的个人成长确是非常的有限，原因就是目标不明确。尤其是随着年龄的增大，面对越来越大的压力，越来越焦虑。焦虑是因为面对残酷的社会竞争压力以及对自身能力的不自信。所以很多东西都想学，机器学习、网络安全、英语、写作等等。没有明确的目标和整体的规划，只知道要学，桌上摆了很多书，今天看几页这本书，明天翻几页那本书，看上去天天在看书，实际上一本书都没有看进去。看英语的时候在想应该多花点时间看看专业书，看专业书的时候在想英语也很重要，要不看会英语。实际就是有限的时间精力和无限的需要学习的知识之间的矛盾。还有一个突出的问题就是没有明确的目标就会没有成就感，尤其是专业领域，看了很多书，不能学以致用，看了就忘，感觉就是学了个寂寞。</p><p>学习，目标非常重要，没有明确目标的学习到头来都是浪费时间。学习效果好、状态好的往往是带着明确的目标去学的。记得我才参加工作的时候做网页开发那时候啥都不懂，我的目标就是想成为一名真正的程序员。那时候BBS和聊天室很火，就想自己能够写一个BBS和聊天室，于是自己学Java、 jsp、HTML、javascript、数据库等。那时候上外网还比较奢侈，自己写了一个聊天室放到公司内网，公司几十百把号人玩得不亦乐乎。大家玩聊天室的时候还不断的给我提建议提需求，我白天上班，晚上改我的聊天室代码。看着自己的成果被别人用心里挺开心的。那段时间感觉自己成长很快，学到了很多东西。很快成为了公司主力程序员。还有个例子就是有段时间想学英语，给自己定的目标就是看完全套的《书虫》，有了目标后每天坚持看几十页，花了几个月的时间把全套的149本书虫给看完了。自己感觉还是非常的好，英语阅读能力有了一定的提升。但是这个目标实现了以后，没有重新给自己制定新的目标，所以自己的英语水平一直没有达到自己理想的状态。应该规划好终极目标、长期目标、阶段性目标，通过实现一个个小目标最终达到自己理想的终极目标。</p><p>懂得了很多大道理依旧无法过好这一生，其实就是没有一个明确的人生目标，没有一个让自己为之奋斗的目标，目标感强的人往往都会比较成功。可以说项目管理也好，个人管理也好，归根到底都是目标管理。为了实现目标、投入时间、金钱、精力等各种已有的资源，用各种手段，思考各种方法来达到目标。</p><p><strong>定方向、定目标非常重要！</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7下配置Supervisor自启动的两种方法</title>
      <link href="/posts/4ba25d97/"/>
      <url>/posts/4ba25d97/</url>
      
        <content type="html"><![CDATA[<p>很多网友留言问如何配置Supervisor 自启动，现将如何在CentOS7下配置Supervisor自启动的两种方法整理如下：</p><h1 id="一、方法一"><a href="#一、方法一" class="headerlink" title="一、方法一"></a>一、方法一</h1><p><strong>直接将启动命令加入到/etc/rc.d/rc.local中（简单但不推荐）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>在现有的内容后面加入supervisor的启动命令<br>supervisord -c /etc/supervisord.conf<br><img src="https://img-blog.csdnimg.cn/b7074ff6ccf146de9015d83373ef7830.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="/etc/rc.d/rc.local"><br>注意：一定要执行 chmod +x /etc/rc.d/rc.local</p><blockquote><p>chmod +x /etc/rc.d/rc.local</p></blockquote><p>给文件加入可执行权限<br>根据官方的提示，该方式是不被建议的，强烈建议创建自己的systemd services或udev规则来启动自已的应用，也就是方法二。</p><h1 id="二、方法二"><a href="#二、方法二" class="headerlink" title="二、方法二"></a>二、方法二</h1><p><strong>通过创建systemd services来实现自启动 （推荐）</strong><br>进入到/usr/lib/systemd/system/目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd /usr/lib/systemd/system/</span></span><br></pre></td></tr></table></figure><p>找到supervisord及supervisorctl命令的路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># which supervisord</span></span><br><span class="line">/usr/local/bin/supervisord</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># which supervisorctl</span></span><br><span class="line">/usr/local/bin/supervisorctl</span><br></pre></td></tr></table></figure><h2 id="创建文件supervisord-service"><a href="#创建文件supervisord-service" class="headerlink" title="创建文件supervisord.service"></a>创建文件supervisord.service</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi supervisord.service</span><br></pre></td></tr></table></figure><p>复制以下代码。注意：supervisord及supervisorctl命令的路径根据实际情况进行修改</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#supervisord.service</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Supervisor daemon</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf</span><br><span class="line">ExecStop=/usr/local/bin/supervisorctl shutdown</span><br><span class="line">ExecReload=/usr/local/bin/supervisorctl reload</span><br><span class="line">KillMode=<span class="keyword">process</span></span><br><span class="line">Restart=on<span class="literal">-failure</span></span><br><span class="line">RestartSec=<span class="number">42</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure><h2 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># systemctl enable supervisord</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/supervisord.service to /usr/lib/systemd/system/supervisord.service</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl start supervisord</span></span><br></pre></td></tr></table></figure><h2 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl status supervisord</span></span><br><span class="line">● supervisord.service - Supervisor daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/supervisord.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu <span class="number">2021</span><span class="literal">-11</span><span class="literal">-11</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">36</span> CST; <span class="number">12</span>s ago</span><br><span class="line">  <span class="keyword">Process</span>: <span class="number">3822</span> ExecStart=/usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">3850</span> (supervisord)</span><br><span class="line">   CGroup: /system.slice/supervisord.service</span><br><span class="line">           ├─<span class="number">3850</span> /usr/local/bin/python3.<span class="number">8</span> /usr/local/bin/supervisord <span class="literal">-c</span> /etc/supervisord.conf</span><br><span class="line">           ├─<span class="number">3916</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br><span class="line">           ├─<span class="number">3918</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br><span class="line">           └─<span class="number">3919</span> uwsgi -<span class="literal">-ini</span> /home/flask_web/uwsgi.ini</span><br></pre></td></tr></table></figure><h2 id="验证一下是否为开机启动"><a href="#验证一下是否为开机启动" class="headerlink" title="验证一下是否为开机启动"></a>验证一下是否为开机启动</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">system</span>]<span class="comment"># systemctl is-enabled supervisord</span></span><br><span class="line">enabled</span><br></pre></td></tr></table></figure><p>reboot重启服务器后，可以发现supervisor随服务器启动后自动启动了。</p><p><strong>至此，本文介绍了CentOS7下配置Supervisor自启动的两种方法，推荐使用第二中方式。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python通过GeoIP获取IP信息（国家、城市、经纬度等）</title>
      <link href="/posts/2c5697c0/"/>
      <url>/posts/2c5697c0/</url>
      
        <content type="html"><![CDATA[<p>IP地址信息是非常重要的情报信息，通过IP可以定位到该IP所在的国家、城市、经纬度等。<br>获取IP信息的方式有很多，很多服务商都提供了相应的地址库或API接口服务。<br>如国内的ipip.net，国外的ip-api.com、maxmind.com等。<br>很多公司都是使用Maxmind网站的IP信息库，里面包含着IP的详细信息，有付费的也有免费的，收费与免费的区别就是精准度和覆盖率。</p><p>本文介绍下载及定时更新Maxmind的离线库用python通过GeoIP来获取IP信息 </p><h1 id="一、下载GeoLite2离线地址库"><a href="#一、下载GeoLite2离线地址库" class="headerlink" title="一、下载GeoLite2离线地址库"></a>一、下载GeoLite2离线地址库</h1><h2 id="1、注册及申请License-Key"><a href="#1、注册及申请License-Key" class="headerlink" title="1、注册及申请License Key"></a>1、注册及申请License Key</h2><p>下载地址库之前先要在Maxmind网站注册同意相应的协议并登陆。</p><h3 id="1）注册"><a href="#1）注册" class="headerlink" title="1）注册"></a>1）注册</h3><p>访问 <a href="https://dev.maxmind.com/geoip/geolite2-free-geolocation-data" target="_blank" rel="noopener">https://dev.maxmind.com/geoip/geolite2-free-geolocation-data</a><br><img src="https://img-blog.csdnimg.cn/e4fcf9f4aa7a49888805da7ac7be650b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmiand注册导航"><br>点击”Sign Up for GeoLite2” 根据输入框进行注册<br><img src="https://img-blog.csdnimg.cn/1a9dbfe1d10747caaf22179dac0fb077.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmiand注册表单"><br>注意邮箱一定要正确，注册后会发邮件进行确认及修改密码。<br>根据注册的用户名和修改后的密码登陆就可以直接下载离线包了。<br><img src="https://img-blog.csdnimg.cn/358c4741c75544e1a3d3761fdd337274.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmind账号信息"><br>点击”Download Databases”进入到下载页面，可以看到提供了CSV及mmdb两种格式的离线库包，最近的更新时间为2021年11月02日。<br><img src="https://img-blog.csdnimg.cn/9196090e03384dc99cfd3d6b5c37627d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="MaxmiandGeoLite2地址库下载"><br>由于IP地址信息是经常有变化的，Maxmind提供了geoipupdate工具来更新离线地址包。该工具使用需要申请账号和License Key</p><h3 id="2）申请License-Key"><a href="#2）申请License-Key" class="headerlink" title="2）申请License Key"></a>2）申请License Key</h3><p>还是通过刚注册的引导页面，点击“Generate a License Key”<br><img src="https://img-blog.csdnimg.cn/1386d73167524690bca90a8118bff1f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Maxmind生成License导航页"><br>进如到页面后，点击“Generate new license key”<br><img src="https://img-blog.csdnimg.cn/aa44150be07a4bdcbbf0d7fe48c1d0ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Generate new license key"><br><img src="https://img-blog.csdnimg.cn/a1865478abf74092b903b3c060f8b3ac.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="License Key生成确定页"><br>点击确定以后就会生成账号及License key<br><img src="https://img-blog.csdnimg.cn/4eef17f7d1224c279c78b5730d1e2e43.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="License key生成"></p><h2 id="2、下载并配置geoipupdate"><a href="#2、下载并配置geoipupdate" class="headerlink" title="2、下载并配置geoipupdate"></a>2、下载并配置geoipupdate</h2><p><a href="https://github.com/maxmind/geoipupdate" target="_blank" rel="noopener">https://github.com/maxmind/geoipupdate</a><br>这里有详细的安安装及配置说明</p><p>发行版本下载地址 <a href="https://github.com/maxmind/geoipupdate/releases" target="_blank" rel="noopener">https://github.com/maxmind/geoipupdate/releases</a><br><img src="https://img-blog.csdnimg.cn/44213d6d1dc74e1b871e3327958fe2f9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>可以看到提供了各种平台的版本的下载链接，这里我们下载安装的是linux版本，点击下载“geoipupdate_4.8.0_linux_amd64.tar.gz”<br>在home目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/maxmind/geoipupdate/releases/download/v4.<span class="number">8.0</span>/geoipupdate_4.<span class="number">8.0</span>_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>下载至home目录</p><p>tar -zxvf geoipupdate_4.8.0_linux_amd64.tar.gz 进行解压<br>cd geoipupdate_4.8.0_linux_amd64  目录执行ls -alh查看目录内容，发现有两个关键文件，一个是getipupdate命令执行文件，一个是GeoIP.conf配置文件<br><img src="https://img-blog.csdnimg.cn/e20bf57c217b483f938271233b52c40c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="geoipupdate目录"></p><p>将执行命令拷贝到命令文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp geoipupdate /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><p>geoipupdate命令读配置文件默认为/usr/local/etc/GeoIP.conf将配置文件拷贝到/usr/local/etc/下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp GeoIP.conf /usr/<span class="built_in">local</span>/etc/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/etc/GeoIP.conf</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa5ec95685da4abd9cb3edfa24ea4375.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改GeoIP.conf"><br>如上图修改离线库文件目录及账号、LicenseKey，AccountID和LicenseKey就是开始在Maxmind网站上申请的。</p><h2 id="3、运行geoipupdate命令并加入定时任务"><a href="#3、运行geoipupdate命令并加入定时任务" class="headerlink" title="3、运行geoipupdate命令并加入定时任务"></a>3、运行geoipupdate命令并加入定时任务</h2><p>执行geoipupdate命令，在目录下面产生了GeoLite2-City.mmdb、GeoLite2-Country.mmdb两个离线库文件。<br><img src="https://img-blog.csdnimg.cn/9d1249f69cf84d9c90b690ca3efaa35c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="GeoLite2离线库文件"><br>创建Linux定时任务，每周自动更新一下离线库文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab <span class="literal">-e</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> * * <span class="number">0</span> /usr/local/bin/geoipupdate</span><br></pre></td></tr></table></figure><h1 id="二、通过Python调用GeoIP获取IP信息"><a href="#二、通过Python调用GeoIP获取IP信息" class="headerlink" title="二、通过Python调用GeoIP获取IP信息"></a>二、通过Python调用GeoIP获取IP信息</h1><p>默认已经安装好了Flask环境，并激活了python虚拟环境。激活python虚拟环境安装Flask教程见<a href="http://xiejava.ishareread.com/posts/7f405b25/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/7f405b25/</a></p><h2 id="1、安装geoip2"><a href="#1、安装geoip2" class="headerlink" title="1、安装geoip2"></a>1、安装geoip2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install geoip2</span><br></pre></td></tr></table></figure><h2 id="2、编写hello-py调用geoip2"><a href="#2、编写hello-py调用geoip2" class="headerlink" title="2、编写hello.py调用geoip2"></a>2、编写hello.py调用geoip2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hello.py</span><br></pre></td></tr></table></figure><p>复制以下代码到hello.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> geoip2.database</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">reader=geoip2.database.Reader(<span class="string">'/home/geoipupdate_4.8.0_linux_amd64/GeoLite2-City.mmdb'</span>)</span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/getip/&lt;ip&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getip</span><span class="params">(ip)</span>:</span></span><br><span class="line">    ipinfo=reader.city(ip)</span><br><span class="line">    ipinfo_json=&#123;<span class="string">'country'</span>:ipinfo.country.name,<span class="string">'city'</span>:ipinfo.city.name,<span class="string">'location'</span>:[ipinfo.location.longitude,ipinfo.location.latitude]&#125;</span><br><span class="line">    <span class="keyword">return</span> ipinfo_json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="3、运行hello-py"><a href="#3、运行hello-py" class="headerlink" title="3、运行hello.py"></a>3、运行hello.py</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># python hello.py</span></span><br><span class="line"> * Serving Flask app <span class="string">'hello'</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on all addresses.</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line"> * Running on http://<span class="number">192.168</span>.<span class="number">1.18</span>:<span class="number">8080</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>注意：如果linux开启了防火墙请关闭防火墙，或放开192.168.1.18</p><h2 id="4、验证"><a href="#4、验证" class="headerlink" title="4、验证"></a>4、验证</h2><p>通过浏览器访问 <a href="http://192.168.1.18:8080/getip/128.101.101.101" target="_blank" rel="noopener">http://192.168.1.18:8080/getip/128.101.101.101</a><br><img src="https://img-blog.csdnimg.cn/4cf63aac6b78465d836a6df9ccb5b4a9.png#pic_center" alt="验证IP信息"><br>可以看到返回IP的国家、城市、经纬度等信息。</p><p><strong>至此，本文介绍了如何注册并下载GeoIP离线数据包，并通过官方提供的geoipupdate进行定期更新数据。还介绍了如何通过Python调用GeoIP获取IP信息。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境搭建</title>
      <link href="/posts/7f405b25/"/>
      <url>/posts/7f405b25/</url>
      
        <content type="html"><![CDATA[<p>在生产环境中通常用uwsgi作为Flask的web服务网关，通过nginx反向代理进行负载均衡，通过supervior进行服务进行的管理。这一套搭下来还是有一些坑要踩，本文通过一个简单的Flask web应用记录了CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境搭建的全过程，以及一些注意事项，以免遗忘。</p><h1 id="一、Python3环境安装"><a href="#一、Python3环境安装" class="headerlink" title="一、Python3环境安装"></a>一、Python3环境安装</h1><p>CentOS7下Python3环境安装参考 <a href="http://xiejava.ishareread.com/posts/57cef505/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/57cef505/</a></p><p>查看python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># python -V</span></span><br><span class="line">Python 3.8.12</span><br></pre></td></tr></table></figure><h1 id="二、安装Flask"><a href="#二、安装Flask" class="headerlink" title="二、安装Flask"></a>二、安装Flask</h1><h2 id="1、创建Python虚拟环境"><a href="#1、创建Python虚拟环境" class="headerlink" title="1、创建Python虚拟环境"></a>1、创建Python虚拟环境</h2><p>在home目录下创建flask_web目录（目录根据具体实际环境创建，本教程是/home/flask_web）<br>通过venv创建虚拟环境<br>[root@localhost flask_web]# python -m venv /home/flask_web<br>创建成功后可以看到在目录下自动建了一些文件夹，包括python命令及依赖库等，激活以后是个独立的python虚拟运行环境。<br><img src="https://img-blog.csdnimg.cn/8ad5311fc3254fefa6739c76f067b8ad.png#pic_center" alt="python虚拟运行环境"></p><p>在目录下运行source bin/activate 激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost flask_web]<span class="comment"># source bin/activate</span></span><br><span class="line">(flask_web) [root@localhost flask_web]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="2、安装Flask"><a href="#2、安装Flask" class="headerlink" title="2、安装Flask"></a>2、安装Flask</h2><p>通过pip install flask安装flask</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># pip install flask</span></span><br></pre></td></tr></table></figure><p>安装的时候有可能报ModuleNotFoundError: No module named ‘_ctypes’的错误，原因是缺少libffi-devel包，具体可参考 <a href="https://blog.csdn.net/qq_36416904/article/details/79316972" target="_blank" rel="noopener">https://blog.csdn.net/qq_36416904/article/details/79316972</a><br><img src="https://img-blog.csdnimg.cn/3d4cc5ba51234b399e59ffb1e66aa0b3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="安装Flask报错"></p><p>运行yum install libffi-devel -y 并且要重新编译执行安装python<br>解决包依赖的问题<br>(flask_web) [root@localhost flask_web]# yum install libffi-devel -y<br>进入到python源码包目录 执行使用make&amp;make install 命令重新编译并安装python（这里比较坑）<br>然后再pip install flask 进行安装<br>安装完成后可以尝试运行flask run，提示没有Flask应用程序，说明flask已经安装成功并且可以运行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># flask run</span></span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line">Usage: flask run [OPTIONS]</span><br><span class="line">Try <span class="string">'flask run --help'</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">Error: Could not locate a Flask application. You did not provide the <span class="string">"FLASK_APP"</span> environment variable, and a <span class="string">"wsgi.py"</span> or <span class="string">"app.py"</span> module was not found <span class="keyword">in</span> the current directory.</span><br></pre></td></tr></table></figure><p>3、建立测试应用<br>vi hello.py创建一个hello.py的文件，copy下面的内容到文件中:wq保存退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>通过python hello.py运行测试程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># python hello.py</span></span><br><span class="line"> * Serving Flask app <span class="string">'hello'</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>新开一个shell窗口执行curl <a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a> 可以看到有Hello World返回说明应用在flask框架下运行没有问题。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># curl http://127.0.0.1:5000/</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="三、安装及配置uwsgi"><a href="#三、安装及配置uwsgi" class="headerlink" title="三、安装及配置uwsgi"></a>三、安装及配置uwsgi</h1><p>uWSGI是一个Web Server，并且独占uwsgi协议，但是同时支持WSGI协议、HTTP协议等，它的功能是把HTTP协议转化成语言支持的网络协议供python使用。有点类似于Java的web服务容器中间件tomcat</p><h2 id="1、安装uwsgi"><a href="#1、安装uwsgi" class="headerlink" title="1、安装uwsgi"></a>1、安装uwsgi</h2><p>通过pip命令安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flask_web</span>]<span class="comment"># pip install uwsgi</span></span><br></pre></td></tr></table></figure><p>如果顺利的话会显示Successfully installed uwsgi-2.0.20，表示安装成功了。</p><h2 id="2、配置uwsgi"><a href="#2、配置uwsgi" class="headerlink" title="2、配置uwsgi"></a>2、配置uwsgi</h2><p>新建一个uwsgi.ini配置文件，并将配置信息复制到配置文件<br>vi uwsgi.ini </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment">#http=127.0.0.1:3366  #如果是http,通过proxy_pass http链接</span></span><br><span class="line">socket=127.0.0.1:3366 <span class="comment">#如果是socket，通过nginx配置uwsgi_pass socket链接</span></span><br><span class="line">wsgi-file=/home/flask_web/hello.py</span><br><span class="line">callable=app</span><br><span class="line">touch-reload=/home/flask_web/</span><br><span class="line"><span class="comment">#最大请求数，最多请求5000次就重启进程，以防止内存泄漏</span></span><br><span class="line">max-requests=5000</span><br><span class="line"><span class="comment">#请求超时时间，超过60秒关闭请求</span></span><br><span class="line">harakiri=60</span><br><span class="line"><span class="comment">#进程的数量</span></span><br><span class="line">processes=1</span><br><span class="line"><span class="comment">#线程数</span></span><br><span class="line">threads = 2</span><br><span class="line"><span class="comment">#记录pid的文件</span></span><br><span class="line">pidfile=/home/flask_web/uwsgi.pid</span><br><span class="line">buffer-size = 32768</span><br><span class="line"><span class="comment">#日志最大50M</span></span><br><span class="line"><span class="built_in">log</span>-maxsize=50000000</span><br><span class="line"><span class="comment">#配置虚拟环境路径，如果是在虚拟环境下启动，这个一定要配，不配会有些包找不到，应用会报错。可以在uwsgi.log文件中看报错信息</span></span><br><span class="line">virtualenv =/home/flask_web</span><br><span class="line"><span class="comment">#uwsgi日志文件，如果是通过supervisor托管，daemonize配置需要屏蔽</span></span><br><span class="line"><span class="comment">#daemonize=/home/flask_web/uwsgi.log</span></span><br><span class="line"><span class="comment">#项目更新后，自动加载</span></span><br><span class="line">python-autoreload=1</span><br><span class="line"><span class="comment">#状态检测地址</span></span><br><span class="line">stats = 127.0.0.1:9191</span><br></pre></td></tr></table></figure><h2 id="3、运行uwsgi"><a href="#3、运行uwsgi" class="headerlink" title="3、运行uwsgi"></a>3、运行uwsgi</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(flask_web) [root@localhost flask_web]<span class="comment"># uwsgi --ini /home/flask_web/uwsgi.ini</span></span><br></pre></td></tr></table></figure><p>启动以后通过访问curl <a href="http://127.0.0.1:3366" target="_blank" rel="noopener">http://127.0.0.1:3366</a> 有Hello World!的返回信息表示uwsgi已经成功启动，并且应用程序正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost flask_web]<span class="comment"># curl http://127.0.0.1:3366</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="四、配置Nginx反向代理"><a href="#四、配置Nginx反向代理" class="headerlink" title="四、配置Nginx反向代理"></a>四、配置Nginx反向代理</h1><p>ps -ef|grep nginx 找到nginx的配置文件<br><img src="https://img-blog.csdnimg.cn/70323a6952c9414daad6f80370ea9f94.png#pic_center" alt="nginx配置文件"><br>如果uwsgi配置的是socket连接<br>[uwsgi]<br>socket=127.0.0.1:3366 #如果是socket，通过nginx配置uwsgi_pass socket链接<br>nginx的server配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 808;</span><br><span class="line">     server_name localhost;</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">          include uwsgi_params;</span><br><span class="line">          uwsgi_pass 127.0.0.1:3366;</span><br><span class="line">      &#125;</span><br><span class="line">      access_log /home/flask_web/access.log;</span><br><span class="line">      error_log /home/flask_web/error.log;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果uwsgi配置的是http<br>[uwsgi]<br>http=127.0.0.1:3366  #如果是http,通过proxy_pass http链接<br>nginx的server配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen 808;</span><br><span class="line">      server_name localhost;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:3366;</span><br><span class="line">       &#125;</span><br><span class="line">       access_log /home/flask_web/access.log;</span><br><span class="line">       error_log /home/flask_web/error.log;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>重新加载nginx配置后，通过浏览器访问可以正常显示访问结果</p><h1 id="五、通过Supervisor进行进程托管"><a href="#五、通过Supervisor进行进程托管" class="headerlink" title="五、通过Supervisor进行进程托管"></a>五、通过Supervisor进行进程托管</h1><p>生产环境中，可以通过supervisor来进行uwsgi和nginx进程的托管，界面化的方式管理uwsgi和nginx，包括进程的监控、启停等。</p><h2 id="1、安装supervisor"><a href="#1、安装supervisor" class="headerlink" title="1、安装supervisor"></a>1、安装supervisor</h2><p>通过pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>离线安装请参考：<a href="http://xiejava.ishareread.com/posts/d670c9b8/" target="_blank" rel="noopener">http://xiejava.ishareread.com/posts/d670c9b8/</a></p><h2 id="2、配置supervisor"><a href="#2、配置supervisor" class="headerlink" title="2、配置supervisor"></a>2、配置supervisor</h2><p>找到supervisord的安装目录在/usr/local/bin下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># which supervisord</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/supervisord</span><br></pre></td></tr></table></figure><p>cd到/usr/local/bin目录下<br>通过echo_supervisord_conf &gt; supervisord.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># echo_supervisord_conf &gt; supervisord.conf</span></span><br></pre></td></tr></table></figure><p>可以看到生成了一个supervisord.conf的配置文件。<br>将生成的supervisord.conf配置文件放到/etc/目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv supervisord.conf /etc/</span><br></pre></td></tr></table></figure><p>修改supervisord.conf的配置文件，主要是将子配置文件路径开启并指定配置文件路径，按照惯例将配置文件放到/etc目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisord.d/*.ini</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/049f24f7b6c54c0a892b5075f3921edc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="supervisord.conf配置文件"></p><p>我们在/etc目录下建个supervisord.d目录用来保存supervisor托管进程的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/</span></span><br><span class="line">[root@localhost etc]<span class="comment"># mkdir supervisord.d</span></span><br></pre></td></tr></table></figure><p>建立并配置子配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># cd supervisord.d/</span></span><br><span class="line">[root@localhost supervisord.d]<span class="comment"># vi uwsgi.ini</span></span><br></pre></td></tr></table></figure><p>复制以下内容至uwsgi.ini文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[program:uwsgi]</span><br><span class="line"><span class="built_in">command</span> =uwsgi --ini /home/flask_web/uwsgi.ini</span><br><span class="line">directory=/home/flask_web</span><br><span class="line">startsecs=10</span><br><span class="line">startretries=5</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/home/flask_web/uwsgi_sup_log.log</span><br><span class="line">stdout_logfile_maxbytes=10MB</span><br><span class="line">user=root</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3、启动supervisor"><a href="#3、启动supervisor" class="headerlink" title="3、启动supervisor"></a>3、启动supervisor</h2><p>在启动supervisor拉起uwsgi前两个注意事项</p><p>1) uwsgi的配置文件中daemonize一定要屏蔽掉，否则守护进程一直会重启，导致端口每次都被占用，Supervisor托管不了。<br><img src="https://img-blog.csdnimg.cn/8eef8e8552e047e79a9c3443074cd2cb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="uwsgi.ini"><br>2) 在启动之前先将已经启动的uwsgi进程停掉，否则通过supervisor拉起uwsgi进程时端口冲突<br><img src="https://img-blog.csdnimg.cn/60fda7586d9a430f8cc5febda83cdad9.png#pic_center" alt="kill uwsgi进程"></p><p>启动supervisord进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure><p>修改配置文件后重新加载可以通过 supervisorctl reload 命令重新加载<br>查看supervisor托管状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost supervisord.d]<span class="comment"># supervisorctl status</span></span><br><span class="line">uwsgi                            STARTING</span><br></pre></td></tr></table></figure><p>可以看到uwsgi被supervisor托管并已经启动。如果需要通过supervisor的web控制界面进行进程的管理。需要修改/etc/supervisord.conf的配置文件将访问的IP地址限制放开，设置用户名、口令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=*:9001        ; ip_address:port specifier, *:port <span class="keyword">for</span> all iface</span><br><span class="line">username=user              ; default is no username (open server)</span><br><span class="line">password=user@123               ; default is no password (open server)</span><br></pre></td></tr></table></figure><p>重新启动supervisor，重启时会报需要验证的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost supervisord.d]<span class="comment"># supervisorctl shutdown</span></span><br><span class="line">Server requires authentication</span><br><span class="line">error: &lt;class <span class="string">'xmlrpc.client.ProtocolError'</span>&gt;, &lt;ProtocolError <span class="keyword">for</span> 127.0.0.1/RPC2: 401 Unauthorized&gt;: file: /usr/<span class="built_in">local</span>/lib/python3.8/site-packages/supervisor/xmlrpc.py line: 542</span><br></pre></td></tr></table></figure><p>可以直接kill -9杀掉supervisor的进程再启动，也可以通过supervisorctl 输入用户名、口令通过shutdown然后再重启。<br>启动命令：supervisord -c /etc/supervisord.conf</p><p>这时就可以通过supervisor的web控制界面进行进程的管理了。<br><img src="https://img-blog.csdnimg.cn/fdda8d39fb0343d0b7a7a570c2b1256f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Supervisor"><br><strong>至此，CentOS7下python3+Flask+uWSGI+Nginx+Supervisor环境全部搭建好了。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7下安装python3.8</title>
      <link href="/posts/57cef505/"/>
      <url>/posts/57cef505/</url>
      
        <content type="html"><![CDATA[<p>环境的搭建是进行开发的第一步，python因为存在python2和python3两个版本，让在建立python环境时造成不便，并且由于在Linux环境下不像Window环境安装那么友好，存在一些小坑。本教程记录了CentOS7下安装python3.8的过程和注意事项。</p><h1 id="一、查看系统版本"><a href="#一、查看系统版本" class="headerlink" title="一、查看系统版本"></a>一、查看系统版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux localhost.localdomain 3.10.0-327.el7.x86_64 <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>查看python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># python -V</span></span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure><p>系统默认安装了Python 2.7.5</p><h1 id="二、安装依赖"><a href="#二、安装依赖" class="headerlink" title="二、安装依赖"></a>二、安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure><p>如果有提示一路选择Y就可以</p><h1 id="三、下载python源码包"><a href="#三、下载python源码包" class="headerlink" title="三、下载python源码包"></a>三、下载python源码包</h1><p>python官网<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a> 目前python最新版本是python3.10<br><img src="https://img-blog.csdnimg.cn/5967484e1d49472ab817580815275fef.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="下载Python源码包"></p><p>下载稳定版本3.8版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tgz</span><br></pre></td></tr></table></figure><h1 id="四、解压安装python源码包"><a href="#四、解压安装python源码包" class="headerlink" title="四、解压安装python源码包"></a>四、解压安装python源码包</h1><h2 id="1、解压"><a href="#1、解压" class="headerlink" title="1、解压"></a>1、解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.8.12.tgz</span><br></pre></td></tr></table></figure><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>进入解压后的目录进行编译和安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.8.12/</span><br><span class="line">[root@localhost Python-3.8.12]<span class="comment">#</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ./configure</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># make&amp;&amp;make install</span></span><br></pre></td></tr></table></figure><p>执行完后显示安装成功<br><img src="https://img-blog.csdnimg.cn/9e8bcddbd7644d0b9bc702a13b3984e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="pyhont安装成功"></p><h2 id="3、建立命令软链接"><a href="#3、建立命令软链接" class="headerlink" title="3、建立命令软链接"></a>3、建立命令软链接</h2><p>虽然python3.8.12安装成功了，但默认输入python还是显示是2.7版本的。如果要用python3.8.12需要输入python3即可，有时候不太方便。可以通过修改软链接的方式将默认的python指向python3.8.12。<br>先看一下默认的python及新安装的python3都安装在哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which python</span></span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which python3</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/python3</span><br></pre></td></tr></table></figure><p>可以看到默认的python路径为/usr/bin/python，python3的路径为/usr/local/bin/python3<br>将python3的软链接加到python上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># mv /usr/bin/python /usr/bin/python.bak</span></span><br><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ln -s /usr/local/bin/python3 /usr/bin/python</span></span><br></pre></td></tr></table></figure><p>通过python -V命令查看python版号，这时python的版本已经是3.8.12了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># python -V</span></span><br><span class="line">Python 3.8.12</span><br></pre></td></tr></table></figure><p>pip命令也可以修改，python3.8.12默认的pip是pip3，CentOS7的python2.7默认没有安装pip.<br>输入pip命令的时候提示命令没有找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># pip</span></span><br><span class="line">bash: pip: <span class="built_in">command</span> not found...</span><br></pre></td></tr></table></figure><p>这时也可以通过建立软链接的方式将pip命令链接到pip3上。首先看pip3命令在哪?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># which pip3</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip3</span><br></pre></td></tr></table></figure><p>然后建立pip到pip3的软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># ln -s /usr/local/bin/pip3 /usr/bin/pip</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># pip -V</span></span><br><span class="line">pip 21.1.1 from /usr/<span class="built_in">local</span>/lib/python3.8/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure><h1 id="五、配置yum"><a href="#五、配置yum" class="headerlink" title="五、配置yum"></a>五、配置yum</h1><p>安装python3改完软链接以后发现yum命令报错了，yum是依赖python2.7的，你把python改成了3.8了，所以报错了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Python-3.8.12]<span class="comment"># yum</span></span><br><span class="line">  File <span class="string">"/usr/bin/yum"</span>, line 30</span><br><span class="line">    except KeyboardInterrupt, e:</span><br><span class="line">                            ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>可以修改yum里对python2的依赖即可。虽然安装了python3但是系统里python2依旧还在系统里，可以通过python2来指定用python2.7的命令，首先来看下python2的命令在哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># which python2</span></span><br><span class="line">/usr/bin/python2</span><br></pre></td></tr></table></figure><p>可以cd到/usr/bin目录下 通过ls -alh|grep python查看python命令的详细情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># ls -alh|grep python</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37df1186dcbf4820b7de6676120aa5ee.png#pic_center" alt="python命令软链接"><br>可以看到python软连接是执行的python3命令，python2是执行的python2.7的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure><p>修改对python的依赖，修改成python2或python2.7都可以。<br><img src="https://img-blog.csdnimg.cn/04054660445f497b886cb78119616722.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改依赖"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6777b0e3d68b4842a700a05af5eb6411.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="修改依赖"></p><p>修改完这两个文件后，再敲yum命令就不会报错了。</p><p><strong>至此CentOS7环境下python3.8.12已经成功安装！</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识SOAR-安全事件编排自动化响应</title>
      <link href="/posts/63a3c769/"/>
      <url>/posts/63a3c769/</url>
      
        <content type="html"><![CDATA[<p>SOAR是最近几年安全市场上最火热的词汇之一。SOAR究竟是什么，发展历程是什么，能够起什么作用，带着这些问题我们来认识一下SOAR。</p><h1 id="一、SOAR是什么"><a href="#一、SOAR是什么" class="headerlink" title="一、SOAR是什么"></a>一、SOAR是什么</h1><p>SOAR 一词来自分析机构 Gartner，SOAR-Security Orchestration, Automation and Response 安全编排和自动化响应。在Gartner的报告里，SOAR平台的核心组件为，编排与自动化、工作流引擎、案例与工单管理、威胁情报管理。而SOAR体系则是三个概念的交叉重叠：<strong>SOAR=SOA+SIRP+TIP</strong><br>1）精密编排的联动安全解决方案(SOA)；<br>2）事件应急响应平台(SIRP)；<br>3）威胁情报平台(TIP)。<br><img src="https://img-blog.csdnimg.cn/f1aefcc3e390408abb7effccbe41f083.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR"></p><h1 id="二、SOAR的发展历程"><a href="#二、SOAR的发展历程" class="headerlink" title="二、SOAR的发展历程"></a>二、SOAR的发展历程</h1><p>2015年，可以定义为SOAR的1.0时代。Gartner将SOAR(当时被认为是“安全运维分析和报告”)描述成为安全运维团队提供机器可读的安全数据报告和分析管理功能的产品。2017年，SOAR进入2.0时代。Gartner提出了“安全编排、自动化及响应”(SOAR)这个术语，用以描述脱胎于事件响应、安全自动化、场景管理和其他安全工具的一系列新兴平台。Gartner观察到三种以前截然不同的技术：安全编排和自动化(SOA)、安全事件响应平台(SIRPs)和威胁情报平台(TIPs)，正在逐步融合到一起。<br>根据Gartner2019年最新定义，SOAR是指能使企业组织从SIEM等监控系统中收集报警信息，或通过与其它技术的集成和自动化协调，提供包括安全事件响应和威胁情报等功能。SOAR技术市场最终目标是将安全编排和自动化(SOA)、安全事件响应(SIR)和威胁情报平台(TIP)功能融合到单个解决方案中。<br><img src="https://img-blog.csdnimg.cn/84eb9177ec554c0d8f5f74163cda15b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR的演进"></p><p>根据Gartner预测，到2022年，有30%大型企业组织（安全团队超过5人）将在安全和运维的工作中使用SOAR，这一比例远超当下5%。当下SOAR技术的早期拥护者是那些已经拥有成熟安全运维中心，并且能够理解SOAR带来好处的那些成熟的安全组织。</p><h1 id="三、SOAR主要解决什么问题"><a href="#三、SOAR主要解决什么问题" class="headerlink" title="三、SOAR主要解决什么问题"></a>三、SOAR主要解决什么问题</h1><p>随着网络安全攻防对抗的日趋激烈，网络安全单纯指望防范和阻止的策略已经失效，必须更加注重检测与响应。企业和组织要在网络已经遭受攻击的假定前提下构建集阻止、检测、响应和预防于一体的全新安全防护体系。在国际上，检测和响应类产品受到了极大的关注。放眼国内，更多的注意力集中到了新型检测产品，尤其是未知威胁检测领域。借助这些产品和技术，用户获得了更低的 MTTD（平均检测时间），能够更快更准确地检测出攻击和入侵。但是，这些产品和技术大都没有帮助用户降低 MTTR（平均响应时间）。事实上，对于用户而言，更快地检测出问题仅仅是第一步，如何快速地对问题进行响应更加重要。而在提升安全响应效率的时候，不能仅仅从单点（譬如单纯从端点或者网络）去考虑，还需要从全网整体安全运维的角度去考虑，要将分散的检测与响应机制整合起来。而这，正是 SOAR 要解决的问题。<br>Gartner指出，SOAR可供公司企业收集不同来源的安全威胁数据和警报，运用人机结合的方法进行事件分析与分类，根据标准流程辅助定义、排序和驱动标准化事件响应行为。SOAR主要为安全团队提供定制化的流程和控制，弥合并加速有效网络威胁的调查与缓解。安全运营团队的大量日常事务性工作也可以借助SOAR加以自动化。而且，案例战术手册还可以帮助分析师在单一平台上响应和缓解威胁，节约事件响应的每一分每一秒宝贵时间。<br>Gartner 用 OODA 模型，来描绘一个典型的安全运营流程。OODA 即 Observe(观察)、Orient(定位)、Decide(决策)、Act(行动)。</p><ul><li>观察：观察事件并确定发生了什么，即通过各种检测、分析工具，比如 SIEM 类工具，找到威胁线索，如告警。</li><li>定位：确定观察的方向，并添加上下文来确定观察的含义，即对产生的告警的内容做调查、丰富化。比如查找外网域名的威胁情报，查找此 IP 的历史行为协助研判等等。</li><li>决策：根据业务的风险容忍度和能力决定适当的响应行动，即判定是否需要对此告警采取行动，比如是否需要封禁，是否影响业务，是否需要进一步观察。</li><li>行动：根据决定采取行动，并应用到观察过程中，然后重复，即执行确定的安全策略，并验证。每一步都对下一步提供了指导，周而复始，构成了一个良性促进的进化循环，不断优化企业的安全运营流程以应对不断变化的安全威胁。<br><img src="https://img-blog.csdnimg.cn/b37a4e16ee454bbe95aaf53e5235c9bd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="OODA 模型"></li></ul><p>OODA 环看起来逻辑清晰，易于操作。但事实上， OODA 环里的丰富化、调查取证、验证、执行安全策略变更等等，都是耗时耗力的工作。加上安全设备一直以来的误报问题产生的噪音，以及安全人员工作负荷重，资深从业人员短缺等原因，难以真正有效的推进 OODA 循环。更不用提在 HW 时段高强度的工作压力下，如何能够有条不紊的保持一贯的处置流程来处理每一个安全线索。SOAR 正是在这个背景下被提出，并被寄予厚望。SOAR 的核心，就是将安全流程或预案，即 OODA 循环的每一个实例，比如蠕虫爆发处理流程、挖矿病毒告警处理流程、疑似钓鱼邮件处理流程等等，数字化管理起来形成 Playbook。用自动化完成其中所有可能自动化的动作，无法自动的仍然交由人来处理，通过可视化编排工具将人、技术和流程有机的结合起来，形成标准统一的、可重复的、更高效的安全运营流程。</p><h1 id="四、SOAR的核心功能"><a href="#四、SOAR的核心功能" class="headerlink" title="四、SOAR的核心功能"></a>四、SOAR的核心功能</h1><p>从SOAR安全编排自动化响应的字面定义来看SOAR应该具备三大核心能力，编排、自动化、响应</p><h2 id="编排"><a href="#编排" class="headerlink" title="编排"></a>编排</h2><p>SOAR中的关键词是编排，这是在使用自动化和响应之前必须构建的关键组件。SOAR的编排体现的是一种协调和决策的能力，针对复杂性的安全事件，通过编排将分析过程中各种复杂性分析流程和处理平台进行组合。分析涉及多种数据或平台，如SIEM分析平台、漏洞管理平台、情报数据、资产数据等。处置响应的编排也涉及到很多平台或设备，如EDR管理平台、运维管理平台、工单管理平台、WAF设备、防火墙等。仅仅以技术为中心的安全保障已不再能满足现状，将人员和流程的编排才能保证安全流程真正高效的运行。SOAR的终极目标就是实现技术、流程、人员的无缝编排。</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>SOAR的自动化体现在三个方面，面对需要处理的安全事件能够根据策略自动选择编排的剧本、自动执行剧本的操作流程、根据决策结果自动联动设备进行防护阻断等行动策略。它允许剧本（常称为Playbooks）在安全流程的部分或全部内容上执行多个任务，将线性剧本串联起来。虽然线性剧本可能更容易创建，但只适用于处理决策需求较少的工作流。编排和自动化比线性剧本的最大优势就是其灵活性，为支持全自动化和半自动化的决策，需要更加灵活的工作流和执行剧本。SOAR能够识别这些决策模式，并基于以往事件中的执行操作，自动推荐新事件的剧本、执行剧本操作流程，自动化分析决策，根据决策结果自动下发防护阻断的行动策略。</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>安全事件响应包括告警管理、工单管理、案件管理等功能。告警管理的核心不仅是对告警安全事件的收集、展示和响应，更强调告警分诊和告警调查。只有通过告警分诊和告警调查才能提升告警的质量，减少告警的数量。工单管理适用于中大型的安全运维团队协同化、流程化地进行告警处置与响应，并且确保响应过程可记录、可度量、可考核。案件管理是现代安全事件响应管理的核心能力。案件管理帮助用户对一组相关的告警进行流程化、持续化的调查分析与响应处置，并不断积累该案件相关的痕迹物证 (IOC) 和攻击者的战技过程指标信息 (TTP)。多个案件并行执行，从而持续化地对一系列安全事件进行追踪处置。<br><img src="https://img-blog.csdnimg.cn/c305603e5c6f4bff9d10fa706c7a4e8c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR事件响应"></p><p>事件响应是SOC操作中非常复杂的部分，理想状态下，它将是一个有效的动态过程，涉及数十种相互关联的技术、IT、业务流程和整个组织的人员，将是持续性适应风险和信任评估（Continuous Adaptive Risk and Trust Assessment, CARTA）策略用于在持续监测和可视性方面时，SOC团队可使用SOAR技术执行连续活动，利用SOAR技术通过智能化编排与响应最大程度的将已有安全技术进行整合，提高整个安全事件的解决能力和效率。基于编排和自动化前期对事件的分析，SOAR所提供的响应技术是完善整个事件生命周期，提高解决安全威胁效率的关键一环。本质上，SOAR的最终目标是促进安全团队对事件有全面的、端到端的理解，完成更好、更明智响应。</p><h1 id="五、SOAR的价值"><a href="#五、SOAR的价值" class="headerlink" title="五、SOAR的价值"></a>五、SOAR的价值</h1><p><strong>1、缩短响应时间</strong><br>通过自动化技术，尽可能多的自动完成一个安全事件处置流程中相关步骤，从而缩短响应时间即 MTTR。<br><strong>2、释放人力</strong><br>让安全专家从繁重的重复劳动中释放出来，将时间放在更有价值的安全分析、威胁猎捕、流程建立等工作上。<br><strong>3、安全运营流程标准化</strong><br>将公司的安全运营流程数字化管理起来，每一次安全事件的对应处置过程都在统一标准，统一步骤下执行，有迹可循。避免人员能力的差距导致的处置实际效果不可控。<br><strong>4、避免能力断层</strong><br>将安全专家的经验固化成处置预案Playbook，让不同的人都可以遵循同样的方法来完成特定安全事件的处置流程，避免因为个人的离职导致某个领域的安全能力缺失。<br><strong>5、运营流程指标可度量</strong><br>因为运营流程都通过 Playbook 数字化管理且每一次的执行过程都记录在案，因此流程的 KPI 如 MTTD、MTTR、TTQ、TTI 等全部可评估、可度量、可追踪。<br><strong>6、安全运营决策支撑</strong><br>通过对公司的所有运营流程数字化管理、数字化执行、数字化KPI评估后，管理者可以有效的评估什么流程基本无用，什么流程执行效率不高，什么流程发挥了最大的作用，甚至什么安全设备在所有流程中被使用的价值最大。从而为以后的安全投资决策，安全团队建设决策提供有价值的数值化支撑。</p><h1 id="六、SOAR与其他安全产品的关系"><a href="#六、SOAR与其他安全产品的关系" class="headerlink" title="六、SOAR与其他安全产品的关系"></a>六、SOAR与其他安全产品的关系</h1><p><img src="https://img-blog.csdnimg.cn/bd575be2bac3412984d257a2470c4d40.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeGllamF2YTEwMTg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="SOAR与其他安全产品的关系"></p><p>SOAR定位于安全运营操作平台，它收集不同来源的安全威胁数据和警报，事件来源于其他的态势感知平台、SIEM、日志分析系统或安全人员人工录入需要处理的事件。通过调用安全设备的能力如：情报平台、资产管理平台、漏洞扫描平台、EDR管理平台、运维管理平台、工单管理平台、WAF设备、防火墙来实现对安全事件的分析、溯源、取证、处置、通知等。一端接安全事件源，一端对接安全设备能力。通过SOAR本身的编排能力将人员、设备、资源、流程协同起来。每个企业部署流程和技术并不相同，SOAR在实际落地应用过程中并不能“即插即用”，需要对接事件源、对接各类联动处置设备，根据企业具体的实际情况定制剧本流程。对接的实际安全设备能力数量以及剧本的积累，是SOAR平台能够很好的支持运营的关键。</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大脑不是用来思考的，如何让孩子更好的学习？</title>
      <link href="/posts/8394d1a3/"/>
      <url>/posts/8394d1a3/</url>
      
        <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E8%AF%BB%E4%B9%A6.png" alt="读书"></p><p>在这个知识爆炸、学习竞争压力巨大的时代，让父母最焦虑的事情之一，莫过于家里有个厌学的孩子了。为了让孩子好好学习，家长们操碎了心。为了孩子报各种培训辅导班、自己亲自上阵陪同辅导、高价请一对一的家教辅导，就差自己代替孩子去学习了。而孩子依旧是，一写作业就磨蹭、一考试就不会、一上学就无精打彩，一放学就满血复活。为什么学生不喜欢上学？如何让孩子喜欢并更好的学习呢？让我们跟着这本《为什么学生不喜欢上学?》一起来探索学习的秘密。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E6%88%91%E7%9A%84%E5%BF%83%E9%87%8C%E5%8F%AA%E6%9C%89%E5%AD%A6%E4%B9%A0.jpg" alt="我的心里只有学习"><br>《为什么学生不喜欢上学?》是一本关于认知心理学的普及读物，也是一本教育心理学的入门书籍。作为美国弗吉尼亚大学心理学教授威林厄姆的重要著作，是一本深受学生和教师欢迎的教育心理学著作。他用认知心理学的原理，详细分析了学生学习的过程和教师在课堂教学中必须注意的一些问题。</p><p>作者丹尼尔·T·威林厄姆，哈佛大学心理学博士，美国弗吉尼亚大学心理学教授。主要研究以大脑为基础的学习和记忆及认知心理学的基础教育应用。《美国教育家》杂志《向认知科学家提问》专栏作者。</p><p>这本书有着容易被人忽视和低估的名字，实际上它是一本认知心理学和教育心理学的科普著作，长期在美国亚马逊图书榜畅销不衰。在豆瓣评分高达9.3分！</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E7%94%9F%E4%B8%8D%E5%96%9C%E6%AC%A2%E4%B8%8A%E5%AD%A6.png" alt="为什么学生不喜欢上学"><br>书中主要提出并回答了这些问题：</p><ul><li>为什么学生不喜欢上学？</li><li>为什么学生能记住电视里的所有细节，却记不住我们教他的知识？</li><li>为什么让学生理解抽象概念这么难？</li><li>题海战术有用吗？</li><li>科学家是怎样思考的？如何让学生像专家一样思考？</li><li>如何因材施教？</li></ul><p>这本书刷新了很多人对学习的认知，不仅仅适合学生，同样适合处于终生学习时代的你和我。如果你的小学老师能早一点看到，你也就不会讨厌学习了。当然，现在的你看了也同样不晚。不论是教育孩子还是自己，了解了认知学的原理，按照符合科学原理的方法去做，都会让大家的学习更有效率。特别是，本书有许多震撼人心、不符合我们直觉的认知让我们重新去思考如何去更好的学习。</p><h3 id="学生为什么不爱学习？"><a href="#学生为什么不爱学习？" class="headerlink" title="学生为什么不爱学习？"></a><strong>学生为什么不爱学习？</strong></h3><p>从认知心理学的角度来看，人是充满好奇心的，愿意探索了解一切；也喜欢思考，因为思考就是解决问题，而解决问题能带来愉悦感。比如当你苦苦思索，终于解出了一道难题或者想通了一件事情，你的大脑可能奖励它自己少量的多巴胺，让你恨不得手舞足蹈，瞬间自信心爆棚，觉得自己是世界上最棒的人。这种快乐，跟吃个甜点是完全不一样。学习应该是件很快乐的事情。</p><p>既然解决问题也能带来快乐，那为什么还有这么多人不愿意思考，不愿意学习呢？</p><p><strong>因为：大脑不是用来思考的！！！</strong></p><p>看到这里估计大家会一脸闷逼，大脑不是用来思考的，哪是用来干啥的呢？是的，大脑能做很多事情，但思考并不是它最拿手的，人类不常思考是因为我们的大脑<strong>不是用来思考，而是用来避免思考的</strong>。思考很费力，而且它还是缓慢、靠不住的。幸运的是尽管我们并不擅长思考，但我们其实喜欢思考，我们生来就有着好奇心，也寻找可以进行思考的机会。但正是因为思考很难，需要条件合适，这份好奇心才能存活，否则我们很快就会放弃思考的念头。<strong>好奇心是与生俱来的，但它很脆弱</strong>。思考的愉悦感来自解决问题的过程，在一个要解决的问题上毫无进展是不会有愉悦感的，实际上，还会让你沮丧。同样只是知道问题的答案也不会有多大的愉悦感。如何保持好奇心，激发思考的兴趣呢？答案是思考问题的难易程度。太容易的问题不会带来愉悦感，同样太难的问题不但不会带来愉悦感还会带来挫折感让人渐渐的避免思考。</p><p><strong>所以：要确保提供给学生的问题是可以解决的。尊重学生的认知局限和个体间的认知差异，难易适中。</strong></p><p>根据资料，认知心理学把人类对于外部世界的认识分成了三个区域：舒适区、学习区、恐慌区。其中，“舒适区”是对自己来说没有学习难度的知识，接触这类知识感觉很舒适，但可学到的东西很少，进展缓慢；“学习区”有一定挑战，接触时会感到不适，但又不至于太难受，保持在这个区间学习，可以得到快速成长；“恐慌区”是超出自己能力范围太多的知识，接触会感到忧虑、恐惧，不堪负重以至放弃学习。学习具有适当挑战的东西，一段时间后，“学习区”会慢慢变为“舒适区”， 而一部分的“恐慌区” 又会变成“学习区”。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/2021/20210822/%E8%88%92%E9%80%82%E5%8C%BA.jpg" alt="舒适区、学习区、恐慌区"></p><p>在舒适区学习，会因为太容易而觉得枯燥，无法坚持；在恐慌区学习，会因为太难好奇心受挫，很快就放弃。所以学习任务要难易适中。要确保在学习过程中碰到的问题可以被解决。</p><h3 id="在学习的过程中死记硬背是否合理？"><a href="#在学习的过程中死记硬背是否合理？" class="headerlink" title="在学习的过程中死记硬背是否合理？"></a><strong>在学习的过程中死记硬背是否合理？</strong></h3><p>一般大家都会死记硬背的学习方法嗤之以鼻，认为是读死书。然而你错了！有些东西该背的还得背，该记的还得记。事实性知识要先于技能，也就是说如9*9乘法表，元素周期表、历史年代表、一些常识等等，必须得用心记下，这些都是学习的基石。</p><p>毫无疑问，让学生记住枯燥的事实是完全不够的，需要进行关联和分析。但是同样，如果没有事实性知识想要凭空让学生拥有分析能力或者归纳能力是不可能的。</p><p><strong>因为：</strong><br><strong>第一，背景知识对阅读理解来说必不可少</strong>。它帮我们在单个的要点之间建立起联系。</p><p><strong>第二，背景知识对于我们的认知是必要的</strong>。一个人看起来在进行逻辑思考，但其实大部分是在进行记忆检索。它使我们能够将独立的元素合成一个单元，进而增加工作记忆的空间。</p><p><strong>第三，事实性知识可以增强记忆</strong>。如果你对一方面了解的越多，你就越能更好的理解这方面的新知识。</p><p>长期记忆中的事实性记忆使得获取更多的事实性知识更容易，它说明持有的信息量取决于已有的信息量。</p><p><strong>所以：</strong><br>我们必须让学生学习背景知识。学生必须学会反复出现的概念–统一所有学科的思想。</p><p><strong>知识体系在先，批判性思维在后</strong>。批判性思考并不能够脱离背景知识而单独实践以至完善的。<br>具有浅显知识都比没有知识强。了解的深固然好，但是我们不可能细致地了解每一件事情，泛泛的知识显然比不懂要强。</p><p><strong>加强阅读</strong>。大量的数据证实，读“闲书”的人一生都因此受益。</p><p><strong>偶然获得知识</strong>。学习事实性知识可以随时随地的学习如读闲书、翻杂志、看记录片、新闻或者和朋友聊天都可以获得相应的知识。</p><p><strong>尽早开始</strong>。家庭环境的培养，如父母使用的语言、书籍资源是否可得、家长是否平时看书。等等还有其他一些因素决定了孩子在上学前拥有的知识。</p><h3 id="题海战术到底有没有用？"><a href="#题海战术到底有没有用？" class="headerlink" title="题海战术到底有没有用？"></a><strong>题海战术到底有没有用？</strong></h3><p>题海战术也是比较有争议的学习方法，现在有一种观点认为，题海战术只对提高考试成绩有帮助，扼杀了学生内在的学习动力，是现行教育下的畸形产物，它带来的弊远大于利。但同时也有教育专家跳出来说，学生必须反复地练习才能学会知识和技能。两者孰是孰非？</p><p>在认知学看来，练习是最有效的窍门之一，它减少了大脑活动需要的空间。没有充分的练习，你不可能精通任何脑力活。</p><p>为什么要练习？因为通过练习能获得最基本的能力，以期精益求精。如果你作为足球运动员在带球的同时还要思考踢球的角度和速度，你不太可能成为一个优秀的足球运动员。你必须得日复一日的练习。像这样的低层次过程必须不假思索，才能给更高层次的过程，比如战术策略提供足够的空间。类似的，你如果不熟记数据要诀也学不好代数。练习的目的是获得能力和提高能力。</p><p><strong>因为：</strong></p><p><strong>练习是为了日后更好的学</strong>习。通过大量的练习会让一些步骤变得自动化，学习者才能将思考能力提高到下一个层次。让思考过程变得省力，这样才能学得更多。</p><p><strong>练习使记忆更长久</strong>。努力学习显然不能防止遗忘，但持续地练习可以防止遗忘。</p><p><strong>练习促进知识的迁移</strong>。重复做很多某一类型的题目使你更容易辨识一个新问题的内在结构，即使你以前没有见过这一题目。</p><p>但是，不是每件事情都需要无限度地练习的。</p><p><strong>所以：</strong></p><p>如果练习可以让思考过程变得省力，我们就要去识别哪些过程需要自动化，总的来说需要自动化的过程往往是自动化后效益能达到最大值的技能的基础。</p><p><strong>分散练习时间</strong>。没有必要把关于一个概念的所有练习集中在很短的一段时间里完成。分散练习后记忆会更持久。持续不断地练习同一项技能是很无聊的事，最好能有点变化。分散练习的另一个好处是学习者有更多的时间思考如何将学到的东西加以应用。</p><p><strong>在进阶环境中练习</strong>。自动化需要很多练习，聪明的办法是既分散练习的时间，又分散练习的环境。尽量多的设计有创意的方法来练习最关键的技巧，同时让学习者在更高阶的环境中学到基本技能。</p><h3 id="有些孩子天生就不是学习的料？"><a href="#有些孩子天生就不是学习的料？" class="headerlink" title="有些孩子天生就不是学习的料？"></a><strong>有些孩子天生就不是学习的料？</strong></h3><p>有些人认为，学习能力是受基因影响，如果你的基因优秀，你就聪明；基因不好，就不聪明。你聪明就可以学得很好。另外一种看法就是认为智能是可以塑造的。如果考试考砸了或不理解某个知识点，不是因为笨，而是因为他们还不够努力。哪一种看法是正确的呢？</p><p>答案是：两者都有正确的部分。我们的基因遗传确实对智能有影响，但是通常是通过环境影响的。毫无疑问智能是可以改变的！</p><p>孩子智能上的差异可以通过持久的努力来改变。</p><p><strong>因为：</strong></p><p><strong>对于智能，态度很重要</strong><br>有充分证据证明，相信智能可以通过努力提高的学生比相信智能是改变不了得事情的学生学得更好，得到的分数更高。<br>孩子必须知道他的能力决定他所作事情时的成功率，他需要发展对于自己能力的自信，而且还要理解，对于不同类型的任务他拥有不同级别的能力。</p><p><strong>所以：</strong></p><p>要确保孩子相信自己能够进步，要让他们相信为此所作的努力是值得的。</p><p><strong>赞扬努力，而非能力</strong>。赞扬过程而不是能力，赞扬孩子面对困难时坚持不懈的精神或对作业负责的态度。</p><p>告诉他们<strong>一份耕耘一份收获</strong>。所有的所谓“天才”都是持续努力的结果。</p><p><strong>坦然的接受失败</strong>。如果你想提高智能，你需要挑战自己，这表示接受了略高过自己能力的任务，你很有可能第一次就会失败，但失败没有什么大不了的。人生中的一次又一次的失败是成功的原因。<br>学习技能不是天生的。所有的学习者都要学会自觉、时间分配、足智多谋（如遇到难题时该如何做）。</p><p>终身学习，做保持好奇心和探索欲的父母和老师，我们需要更多的智慧。而教育就是将智慧薪火相传的过程，尊重孩子的认知规律，谨慎积极的保持努力和践行。教育使人更聪明，聪明的人可以使教育更美好。</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 学习考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>都2021了，我为什么还在用博客这种古老的方式在记录</title>
      <link href="/posts/7626e526/"/>
      <url>/posts/7626e526/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/81616d1642d7445796c58b74e0b30bf9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70#pic_center" alt="BLOG"></p><p>都2021了，在这个移动互联网异常发达，自媒体泛滥的时代，博客这个古老的在互联网时代记录自己的工具似乎是不合时宜要被大众所遗忘被历史所淘汰。而我却还在用博客这种古老的方式生活在移动互联网时代记录工作，学习，生活。</p><p><strong>一、为什么要记录</strong><br>正如我的博客标题，记录最好的自己。最朴实的想法就是想记录自己的所学、所见、所闻、所思、所想。记录使人进步。吴军老师的《全球科技通史》中提到，促进人类文明发展的是两条主线，一条是能源，一条是信息。文字的发明，信息的记录，让人类的文明得以延续和发展。是一代一代人通过信息的记载和积累促进科技的发展，让信息不管是从记录方式还是传播速度都得到了跨越式的发展，进入到了现在信息爆炸的时代。书中提到，为什么在近代早期西方的科学技术进步的速度要明显的快于中国，一个重要的原因就西方对于科学技术的研究及传播方式。西方的研究方式是通过不断的实验大量的记录进行定量研究，后人可以基于前人记录的信息研究成果进行研究和传播，大大加快的科学技术的进步。而那时候中国可能还是定性方式的研究，口口相传的传播方式，导致原来很多技术到现在都失传了。</p><p>对于个人来说，我想应该也是一样的，要想更快进步和发展，将自己生活、学习、工作过程中的所学、所见、所闻、所思、所想记录下来定期的回顾和思考应该会有所促进吧。而且随着时间的推移回头看看自己以前记录的东西应该也是一种乐趣。或许，有人看到我所记录的东西以此为鉴少走一点弯路。</p><p>不在乎文笔，不限于内容，仅仅只是记录，希望记录能够成就最好的自己。</p><p><strong>二、为什么是博客这种方式</strong><br>记录信息的手段很多，尤其是自媒体时代，微博、微信、头条、抖音、小红书啥的，平台很多。为什么还要用博客这种古老的方式呢？如果自是记录给自己看映象笔记、网易云笔记都是很好的，私密性太强，不够开放。微博、微信社交属性太强关注的都是些熟人。头条、抖音、小红书，功利性太强，为了收益去强迫自己去写也不是自己的初衷。想来想去还只有博客这种古老的方式比较合适，安安静静的自己想记录什么就记录什么。也不用去担心什么流量，不用去关注什么人关注了你。以前几个大的通用的博客平台都不提供服务了如新浪博客、网易博客等，而CSDN、cnblog主要是技术类的博客，想记录点乱七八糟的事情似乎也不太适合。所以只好自己来搭建博客咯。</p><p>自己搭建的博客<a href="http://xiejava.ishareread.com" target="_blank" rel="noopener">http://xiejava.ishareread.com</a> 已经快两年了。记录的东西不是太多，说明见识不多，思考太少。</p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全运维与安全运营</title>
      <link href="/posts/76373188/"/>
      <url>/posts/76373188/</url>
      
        <content type="html"><![CDATA[<p>安全运维与安全运营是安全人员经常听到的两个名词。到底什么是安全运维，什么是安全运营，两者之间有什么区别和联系呢？</p><p>我们先来看一下运维与运营的概念区别。<br><strong>运维</strong>一般来说指的是运行维护，通过一定的技术和管理手段保障平台或系统的正常运行。本质上是对平台、系统或产品所涉及的网络、服务器、服务的生命周期各个阶段的运营与维护，在成本、稳定性、效率上达成一致可接受的状态。</p><p><strong>运营</strong>从字面上理解更多的是指经营。通过对平台、系统或产品的经营达到预期的业务目标。对运营过程的计划、组织、实施和控制，是与产品生产和服务创造密切相关的各项管理工作的总称。从另一个角度来讲，运营管理也可以指为对生产和提供公司主要的产品和服务的系统进行设计、运行、评价和改进的管理工作。</p><p>总体来说<strong>运营应该是覆盖运维的，运维是支持运营的</strong>。那么安全运维和安全运营，应该也是同样的道理。</p><p>网上有人进行了概括：</p><p><strong>安全运维</strong>简单来说，就是从安全的角度对日常IT信息系统进行运行维护，传统运维工作主要是为了保障信息系统的正常运行，安全运维则是通过安全分析，检测和解决已经产生和即将产生的安全问题，从而建立从防护到监测到解决的闭环安全机制管理系统，实现运维的目的——保障企业整体IT系统运行正常。</p><p><strong>安全运营</strong>应该来说概念更广，狭义的安全运营是为以资产为核心，以安全事件管理为关键流程，依托于安全运营平台（SOC），建立一套实时的资产风险模型，进行事件分析、风险分析、预警管理和应急响应处理的集中安全管理体系。广义安全运营是一个技术、流程和人有机结合的复杂的系统工程，通过对已有的安全产品、工具、服务产出的数据进行有效的分析，持续输出价值，解决安全风险，从而实现安全的最终目标。</p><p>个人认为<strong>运维更多的强调流程，运营更多的强调体系。</strong></p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全管理之资产、脆弱性、威胁、风险</title>
      <link href="/posts/57a81e07/"/>
      <url>/posts/57a81e07/</url>
      
        <content type="html"><![CDATA[<p>​<br><strong>网络信息安全管理</strong>是指对网络资产采取合适的安全措施，以确保网络资产的可用性、完整性、可控制性和抗抵赖性，不致因网络设备、网络通信协议、网络服务、网络管理受到人为和自然因素的危害，而导致网络中断、信息泄露或破坏。网络信息管理对象主要包括网络设备、网络通信协议、网络操作系统、网络服务、安全网络管理等在内的所有支持网络系统运行的软、硬件总和。网络信息安全管理的目标就是通过适当的安全防范措施，保障网络的运行安全和信息安全，满足网上业务开展的安全要求。</p><p><strong>网络信息安全管理要素</strong>由网络管理对象、网络威胁、网络脆弱性、网络风险、网络保护措施组成。由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。网络安全管理实际上就是风险控制，其基本过程是通过网络管理对象的威胁和脆弱性进行分析，确定网络管理对象的价值、网络管理对象威胁发生的可能性、网络管理对象的脆弱程度，从而确定网络管理对象的风险等级，然后据此选取合适的安全保护措施，降低网络管理对象的风险。</p><p><strong>安全风险管理的三要素</strong>分别是<strong>资产</strong>、<strong>威胁</strong>和<strong>脆弱性</strong>，脆弱性的存在将会导致风险，而威胁主体利用脆弱性产生风险。网络攻击主要利用了系统的脆弱性。由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。</p><p><img src="https://img-blog.csdnimg.cn/20201204163036136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络信息安全管理要素"></p><p>网络信息安全管理对象是企业、机构直接赋予了价值而需要保护的资产。它的存在形式包括有形的和无形的，如网络设备硬件、软件文档是有形的，而服务质量、网络带宽是无形的。</p><p>常见的网络信息安全管理对象信息安全资产分类如下：</p><table><thead><tr><th>分类</th><th>示例</th></tr></thead><tbody><tr><td>数据</td><td>保存在信息媒介上的各种数据资料，包括源代码、数据库数据、系统文档、运行管理规程、计划报告、用户手册、各类纸质的文档等</td></tr><tr><td>软件</td><td>系统软件：操作系统、数据库管理系统、语句包、开发系统<br>应用软件：办公软件、数据库软件、各类工具软件等<br>源程序：各种共享源代码、自行或合作开发的各种代码等</td></tr><tr><td>硬件</td><td>网络设备：路由器、网关、交换机等<br>计算机设备：大型机、小型机、服务器、工作站、台式计算机、便携计算机等<br>存储设备：磁带机、磁盘阵列、磁带、光盘、软盘、移动硬盘等<br>传输线路：光纤、双绞线等<br>保障设备：UPS、变电设备、空调、保险柜、文件柜、门禁、消防设施等<br>安全设备：防火墙、入侵检测系统、身份鉴别等<br>其他：打印机、复印机、扫描仪、传真机等</td></tr><tr><td>服务</td><td>信息服务：对外依赖该系统开展的各类服务<br>网络服务：各种网络设备、设施提供的网络连接服务<br>办公服务：为提高效率而开发的管理信息系统，包括各种内部配置管理、文件流转管理等服务</td></tr><tr><td>人员</td><td>掌握重要信息和核心业务的人员，如主机维护主管、网络维护主管及应用项目经理等</td></tr><tr><td>其他</td><td>企业形象、客户关系等</td></tr></tbody></table><p><strong>脆弱性</strong>：脆弱性也可称为弱点或漏洞，是资产或资产组中存在的可能被威胁利用造成损害的薄弱环节。脆弱性一旦被威胁成功利用就可能对资产造成损害。脆弱性可能存在于物理环境、组织、过程、人员、管理、配置、硬件、软件和信息等各个方面。</p><p>脆弱性是与资产紧密相连的，是其固有的属性，客观存在是绝对的，但存在脆弱性不一定就绝对造成安全事件。如果没有被相应的威胁利用，单纯的脆弱性本身不会对资产造成伤害。</p><table><tr><th>类型</th><th>识别对象</th><th>脆弱性子类</th></tr><tr ><td rowspan=6>技术脆弱性</td><td>物理环境</td><td>机房场地、机房防火、机房供配电、机房防静电、机房接地与防雷、电磁防护、通讯线路的保护、机房区域防护、机房设备管理等</td><tr><td>网络结构</td><td>网络结构设计、网络传输加密、网络设备安全漏洞、边界保护、外部访问控制策略、内部访问控制策略、网络设备安全配置等</td></tr><tr><td>服务器/系统软件</td><td>补丁安装、物理保护、用户帐号、口令策略、资源共享、事件审计、访问控制、新系统配置（初始化）、注册表加固、网络安全、系统软件安全漏洞、软件安全功能管理等</td></tr><tr><td>数据库</td><td>补丁安装、鉴别机制、口令机制、访问控制、网络和服务设置、备份恢复机制、审计机制等</td></tr><tr><td>应用系统</td><td>审计机制、审计存储、访问控制策略、数据完整性、通讯、鉴别机制、密码保护等</td></tr><tr><td>应用中间件</td><td>协议安全、交易完整性、数据完整性等</td></tr><tr><td rowspan=2>管理脆弱性</td><td>技术管理</td><td>物理和环境安全、通讯和操作管理、访问控制、系统开发与维护、业务连续性等</td></tr><tr><td>组织管理</td><td>安全策略、组织安全、信息资产分类与控制、人员安全、符合性等</td></tr></table>威胁：对资产或组织可能导致负面结果的一个事件的潜在源。威胁利用管理对象自身的脆弱性，采用一定的途径和方式，对评估对象造成损害或损失，从而形成风险。<p>威胁源分三类：自然威胁、人为威胁和环境威胁。</p><table><thead><tr><th>种类</th><th>描述</th><th>威胁子类</th></tr></thead><tbody><tr><td>软硬件故障</td><td>对业务实施或系统运行产生影响的设备硬件故障、通讯链路中断、系统本身或软件缺陷等问题</td><td>设备硬件故障、传输设备故障、存储媒体故障、 系统软件故障、应用软件故障、数据库软件故障、开发环境故障等</td></tr><tr><td>物理环境影响</td><td>对信息系统正常运行造成影响的物理环境问题和自然灾害</td><td>断电、静电、灰尘、潮湿、温度、洪灾、火灾、地震、暴风雨、潮汐、污染、空调设备故障、鼠蚁虫害、电磁干扰等</td></tr><tr><td>操作失误</td><td>应该执行而没有执行相应的操作，或无意执行了错误的操作</td><td>维护错误、操作失误、提供错误的指南或操作信息等</td></tr><tr><td>管理不到位</td><td>安全管理无法落实或不到位，从而破坏信息系统正常有序运行</td><td>管理制度和策略不完善、管理规程缺失、职责不明确、监督控管机制不健全等</td></tr><tr><td>恶意代码</td><td>故意在计算机系统上执行恶意任务的程序代码</td><td>病毒、特洛伊木马、蠕虫、陷门、间谍软件、窃听软件、携带恶意软件的垃圾邮件、流氓安全软件、即时消息垃圾邮件等</td></tr><tr><td>越权或滥用</td><td>通过采用一些措施，超越自己的权限访问了本来无权访问的资源，或者滥用自己的权限，做出破坏信息系统的行为</td><td>非授权访问网络资源、非授权访问系统资源、滥用权限非正常修改系统配置或数据、滥用权限泄露秘密信息、非授权使用存储介质等</td></tr><tr><td>网络攻击</td><td>利用工具和技术通过网络对信息系统进行攻击和入侵</td><td>网络探测和信息采集、漏洞探测、嗅探（账号、口令、权限等）、用户身份伪造和欺骗、用户或业务数据的窃取和破坏、系统运行的控制和破坏、拒绝服务攻击、僵尸网络、隐蔽式下载、名誉劫持、网络黑客的入侵等</td></tr><tr><td>物理攻击</td><td>通过物理的接触造成对软件、硬件、数据的破坏</td><td>物理接触、物理破坏、盗窃、勒索、罢工、内部员工蓄意破坏等</td></tr><tr><td>泄密</td><td>信息泄露给不应了解的他人</td><td>内部信息泄露、外部信息泄露等</td></tr><tr><td>篡改</td><td>非法修改信息，破坏信息的完整性使系统的安全性降低或信息不可用</td><td>篡改网络配置信息、篡改系统配置信息、篡改安全配置信息、篡改用户身份信息或业务数据信息等</td></tr><tr><td>抵赖</td><td>不承认收到的信息和所作的操作和交易</td><td>原发抵赖、接受抵赖、第三方抵赖等</td></tr></tbody></table><p>在这里可以看出威胁与攻击的区别和关系。攻击是威胁的一种类型，攻击是人为的蓄意的有计划采取的恶意破坏的行动。一般来说攻击比较容易检测到。</p><p><strong>网络信息安全风险</strong>是指特定的威胁利用网络管理对象所存在的脆弱性，导致网络管理对象的价值受到损害或丢失的可能性。简单的说，网络安全风险就是网络威胁发生的概率和所造成影响的乘积。</p><p><img src="https://img-blog.csdnimg.cn/20201204163838552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络安全风险分析"></p><p>本文整理自《信息安全工程师教程第2版》</p><p>作者博客：<a href="http://xiejava.ishareread.com/" target="_blank" rel="noopener">http://xiejava.ishareread.com/</a></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识威胁情报</title>
      <link href="/posts/3866c7c1/"/>
      <url>/posts/3866c7c1/</url>
      
        <content type="html"><![CDATA[<h1 id="初识威胁情报"><a href="#初识威胁情报" class="headerlink" title="初识威胁情报"></a>初识威胁情报</h1><p>随着网络空间的广度和深度不断拓展，当今网络攻击的多样化、复杂化、专业化，安全对抗日趋激烈，传统的安全思维模式和安全技术已经无法有效满足政企客户安全防护的需要，新的安全理念、新的安全技术不断涌现。业界普遍认同：仅仅防御是不够的，更加需要持续地检测与响应。而要做到更有效的检测与更快速的响应，安全情报必不可少。有效的威胁情报可以提高安全产品的对恶意攻击识别能力，提高溯源效率，并及时采取应对措施，减少甚至消除攻击的危害。</p><p>本文收集了互联网上的威胁情报的相关知识信息，试图从威胁情报的定义、分类、应用三个方面对威胁情报进行初步的认识。</p><h2 id="一、什么是威胁情报"><a href="#一、什么是威胁情报" class="headerlink" title="一、什么是威胁情报"></a>一、什么是威胁情报</h2><p>安全情报包含漏洞、资产、威胁、风险、运行和事件等多维度安全知识在内的知识集合。<strong>安全情报</strong>是一个宽泛的概念，主要包括了<strong>威胁情报</strong>、<strong>漏洞情报</strong>、<strong>事件情报</strong>以及<strong>基础数据情报</strong>。</p><p>根据Gartner对威胁情报的定义，<strong>威胁情报</strong>是一种基于证据的知识，包括了情境、机制、指标、影响和操作建议。威胁情报描述了现存的、或者是即将出现针对资产的威胁或危险，并可以用于通知主体针对相关威胁或危险采取某种响应。简单来说威胁情报是可以针对相关威胁采取行动的知识，可以帮助企业和组织快速了解到敌对方对自己的威胁信息，从而帮助他们提前做好威胁防范、更快速地进行攻击检测与响应、更高效地进行事后攻击溯源。</p><p>从严格意义上来讲，威胁情报和漏洞情报是不同的两种安全情报，不应该将它们混淆。从防御者的角度来看，获取<strong>漏洞情报是为了知己</strong>，而获取<strong>威胁情报是为了知彼</strong>。</p><h2 id="二、威胁情报分类"><a href="#二、威胁情报分类" class="headerlink" title="二、威胁情报分类"></a>二、威胁情报分类</h2><p>根据使用方法不同，威胁情报可分为三类</p><p><strong>战略情报</strong><br>包括安全调查报告、趋势分析、行业状况等战略层面的情报，可供企业CISO或安全负责人制定安全规划和投资策略，将有限的资源投入到最需要的地方。</p><p><strong>技术情报</strong><br>包括各种威胁的丰富化情报，以及相关信息。通过攻击事件相关的IP和域名的详细信息，以及攻击者相关的攻击事件及样本，安全分析师可以对重要安全事件做准确的分析，包括报警确认、攻击影响范围、攻击链以及攻击目的、技战方法等，并进行相应的安全预测和防范。</p><p><strong>战术情报</strong><br>包括各种面向安全设备或系统的，易于执行的高可信度威胁IOC (Indicator of Compromise)。安全运营团队利用高质量的威胁IOC可帮忙安全系统自动检测未知威胁，及早产生预警和通知，快速响应恶意攻击，提高企业安全防护能力。</p><p>根据数据本身威胁情报可以分为<strong>HASH值</strong>、<strong>IP地址</strong>、<strong>域名</strong>、<strong>网络或主机特征</strong>、<strong>TTPs</strong>（Tactics、Techniques &amp; Procedures，工具、技术、过程）等<br><img src="https://img-blog.csdnimg.cn/20210625092504657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_2,color_FFFFFF,t_70#pic_center" alt="威胁情报"></p><p><strong>HASH值</strong>：一般指样本、文件的HASH值，比如MD5和SHA系列。由于HASH函数的雪崩效应，文件任何微弱地改变，都会导致产生一个完全不同也不相关的哈希值。这使得在很多情况下，它变得不值得跟踪，所以它带来的防御效果也是最低的。</p><p><strong>​​IP地址</strong>：常见的指标之一，通过IP的访问控制可以抵御很多常见的攻击，但是又因为IP数量太大，任何攻击者均可以尝试更改IP地址，以绕过访问控制。</p><p><strong>​​域名</strong>：有些攻击类型或攻击手法也或者出于隐藏的目的，攻击者会通过域名连接外部服务器进行间接通信，由于域名需要购买、注册、与服务器绑定等操作使得它的成本相对IP是比较高的，对域名的把控产生的防御效果也是较好的。但是对于高级APT攻击或大规模的团伙攻击，往往会准备大量备用域名，所以它的限制作用也是有限。</p><p>​​<strong>网络或主机特征</strong>：这里指的特征可以是很多方面，比如攻击者浏览器的User-Agent、登录的用户名、访问的频率等，这些特征就是一种对攻击者的描述，这些情报数据可以很好的将攻击流量从其他的流量中提取出来，就会产生一种较好的防御效果。</p><p><strong>​​攻击工具</strong>：这里是指获取或检测到了攻击者使用的工具，这种基于工具的情报数据能够使得一批攻击失效，攻击者不得不进行免杀或重写工具，这就达到了增加攻击成本的目的。</p><p><strong>​​TTPs</strong>：Tactics、Techniques &amp; Procedures的缩写，指攻击者所使用的攻击策略、手法等，掌握了些信息就能明白攻击者所利用的具体漏洞，就能够针对性的布防，使得攻击者不得不寻找新的漏洞，所以这也是价值最高的情报数据。</p><p>从应用领域分类可以分为，<strong>机读情报（MRTI）</strong>、<strong>人读情报（PRTI）</strong>、<strong>画像情报</strong>和<strong>知识情报</strong>四类</p><p><strong>机读情报</strong>：可供机器理解和使用的情报，侧重于高频次、高准确性、强实效的应用场景。<br><strong>人读情报</strong>：信息量更大，需要更多的上下文、背景信息支持人工分析研判和应急响应。<br><strong>画像情报</strong>：针对单一的威胁、资产、漏洞、事件进行分析，形成相应的知识集，概念上类似于用户画像。<br><strong>知识情报</strong>：基于先验知识的规则模型和算法。这些模型和算法与平台之间高度匹配，可以快速导入平台，结合平台获得的各类数据、信息和情报，实现对某类特定类别的威胁、风险或特定事件的感知、分析、决策和处置。消费对象和应用场景集中于态势感知、SOC/SIEM类分析平台。</p><p>其中机读情报应用最广，基本已经被各大安全厂商在设备中集成，多以IoC或者Yara的形式存储。人读情报的格式比较宽泛，包括安全公告、漏洞预警、病毒/APT分析文章都属于这个类别。画像情报则是介于机读和人读情报中的一种，通常用结构化的标签和非结构化的备注来描述，针对单一的威胁、资产、漏洞、事件进行分析形成的知识集，也可以加入场景标注。而知识情报的提法主要是针对态势感知、SOC、SIEM类平台产品的，平台内置的先验规则如关联规则和知识图谱都属于这一类。</p><p>从情报市场来源来分可分为<strong>开源情报（OSINT）</strong>、<strong>商用情报</strong></p><p><strong>开源情报</strong>：Open Source Threat Intelligence 开源情报，免费从公开信息来源进行数据采集和分析后形成的情报。<br><strong>商用情报</strong>：Commercial Threat Intelligence 商业情报，在威胁情报领域，根据用户需求提供的付费情报。一般来说付费的准确度要稍高。</p><h2 id="三、威胁情报有什么用"><a href="#三、威胁情报有什么用" class="headerlink" title="三、威胁情报有什么用"></a>三、威胁情报有什么用</h2><p><strong>溯源分析</strong><br>威胁情报记录了外部攻击的大量信息，可以让安全分析师了解攻击方的情报，解决攻防战中信息不对称的困境。特别是在分析告警、进行溯源分析时，往往会在威胁情报系统中查询相关攻击 IP、Domain 等的具体信息，看看有没有攻击线索和方式，可以用作告警确认和进一步处理的依据。</p><p><strong>检测告警</strong><br>数字化时代的黑客的攻击也逐渐自动化、智能化，每天企业都会受到大量的外部攻击，依靠人去一个个分辨是不现实的，企业往往部署了可以对外部流量或外部日志进行自动化分辨的安全设备和系统，比如 FW 、 IDPS 、 SIEM 或大数据安全分析平台。如果将最新的威胁情报传输到这些 安全设备和系统中，就可以极大的提高这些设备系统对新型攻击的检测能力。<br>情报厂商往往将这些有价值的情报以IOC 的形式发布出来，用户可以将这些 IOC 导入到部署的安全设备系统中，从而可以快速实现对新型威胁攻击的识别、告警和处理。</p><p><strong>安全预防</strong><br>防守不是最好的策略，在如今企业每日都面对各式各样的网络攻击，单纯的被动防守已经无法阻挡黑客的攻击。如果能预知攻击并提前预防就可以减小不少攻击的损失。<br>通过漏洞情报可以在攻击到来之前获悉攻击的信息，事先做好准备，修复相关漏洞，加强安全防护，避免威胁攻击带来的危害。</p><p><strong>安全规划</strong><br>安全工作是一个系统性的工程，需要方方面面的知识和信息。为了做好安全规则，需要了解威胁攻击的总体现状和未来发展趋势，同时还要提供相关信息用以说明管理层提供相关投资。高级威胁情报信息可以帮助安全团队领导了解威胁攻击的状况以及预测，方便企业制定好相应安全规划和投资。</p><p><strong><em>实用的情报才是最好的情报</em></strong><br>情报的“ART”原则，符合“ART”原则的才是对企业有用的情报。<br><strong>Accuracy（准确性）</strong>：情报是否足够详细和可靠<br>威胁情报的作用是为安全团队提供相关信息并指导决策，如果情报不准确，不但没有产生价值，反而会对组织的安全决策会造成负面影响。<br><strong>Relevance（相关性）</strong>：情报是否可适用于你的业务或行业<br>不是所有的信息都是适用的，相关性较弱的情报会导致分析人员的繁重任务，并且会导致其他有效情报的时效性失效。<br><strong>Timeliness（时效性）</strong>：在你利用些情报前，情报是否已经失效<br>威胁情报是信息的集合，凡是信息，都具有时效性。往往情报的有效时间会很短，攻击者会为了隐藏自己的踪迹不断的更换一些特征信息，比如说IP地址、手法等等。</p><p>威胁情报要发挥价值，核心在于情报信息的共享。只有建立起一套威胁情报共享的机制，让有价值的威胁情报流动起来，才能真正加速安全防御的效率、效能，取得切实的防御效果。<br>威胁情报的生态系统包括两个方面：威胁情报的生产和威胁情报的消费。<br>威胁情报的生产就是通过对原始数据/样本的采集、交换、分析、追踪，产生和共享有价值的威胁情报信息的过程。<br>威胁情报的消费是指将企业和客户网络中的安全数据与威胁情报进行比对、验证，以及企业和客户方的安全分析师利用威胁情报进行分析的过程。<br>威胁情报的生产和消费构成了一个情报生态系统的闭环。只有生产没有消费，威胁情报的价值无法实现；而只有消费没有生产，威胁情报就成了无源之水。</p><p>对于政企客户而言，威胁情报的应用/消费是实现情报价值的关键。各类安全设备都应该能够消费威胁情报，但最关键的是安全管理平台/SOC对威胁情报的应用</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解企业安全能力框架(IPDRR)</title>
      <link href="/posts/6b94b28d/"/>
      <url>/posts/6b94b28d/</url>
      
        <content type="html"><![CDATA[<p>企业安全能力框架(IPDRR)是美国国家标准与技术研究所（National Institute of Standards and Technology）的网络安全框架（简称NISTCSF )。第一个版本于2014年发布，旨在为寻求加强网咯安全防御的组织提供指导。企业可以根据自身需求加强网络安全防御。<br><img src="https://img-blog.csdnimg.cn/20210617155234944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="企业网络安全系统框架"><br>企业网络安全系统框架（参考IPDRR）</p><p>随着社会数字化转型的深入，网络攻击事件日益增多、破坏力逐步增强。安全方法论也正逐步从”针对威胁的安全防御”向“面向业务的安全治理”（IPDRR）等演进。</p><p>IPDRR能力框架模型包括风险识别（Identify）、安全防御（Protect）、安全检测（Detect）、安全响应（Response）和安全恢复（Recovery）五大能力，从以防护为核心的模型，转向以检测和业务连续性管理的模型，变被动为主动，最终达成自适应的安全能力。</p><p>IPDRR模型体现了安全保障系统化的思想，管理与技术结合来有效保障系统核心业务的安全。通过持续的安全检测来实现IPDRR的闭环安全，为用户提供完善的安全能力框架和支撑体系。</p><p>具体来说IPDRR主要包含了五个部分：<br><strong>识别（Identify）</strong>：识别网络资产及风险，是指对系统、资产、数据和网络所面临的安全风险的认识及确认<br><strong>保护（Protect）</strong>：保护网络，是指制定和实施合适的安全措施，确保能够提供关键基础设施服务。<br><strong>检测（Detect）</strong>：发现攻击，在攻击产生时即时监测，同时监控业务和保护措施是否正常运行，制定和实施恰当的行动以发现网络安全事件<br><strong>响应（Respond）</strong>：响应和处理事件，指对已经发现的网络安全事件采取合适的行动。具体程序依据事件的影响程度来进行抉择，主要包括：事件调查、评估损害、收集证据、报告事件和恢复系统<br><strong>恢复（Recover）</strong>：恢复系统和修复漏洞，将系统恢复至正常状态，同时找到事件的根本原因，并进行预防和修复</p><p>可以参考大家对实体财物是怎么保护的就很容易理解了。举个例子，大家如何对自己的私有财产是怎么保护的呢？<br>第一步识别（Identify）肯定是识别出有哪些资产分别都有什么风险吧，比如家里的现金、金银珠宝、贵重电器、房产证、82年的拉菲、92年的茅台等等对于我们来说都是属于我们要保护的资产，这些都有被小偷偷走，被破坏等风险。所以我们需要采取一定的措施将这些资产给保护起来。<br>比如现金、金银珠宝、房产证等放在保险柜里，82年的拉菲、92年的茅台等搞个酒窖上好锁，家里的房子装好防护门、防盗窗等，这些就是第二步保护（Protect），对需要保护的资产做好基本的防护。做到了这些够不够呢？显然是不够的，这只是做好被动防御，我们还要做好主动防御，也就是第三步检测（Detect），这时候我们可以装一些监控设备摄像头、传感器等等，看时时刻刻监控我们所要保护的资产看有没有什么情况，还可以雇佣一批保安7*24小时巡逻实时监测。响应（Respond）也就是发现了什么风吹草动，就采取响应的措施，比如如果是有人破门而入就及时的告警，制止，报警。恢复（Recover）就是对易发生的损失进行恢复，如有人破门而入把门给搞坏了，就得把门重新修好或换一个新的级别更高更安全的门。</p><p>企业的网络安全也是一样的。首先要识别自己企业的网络安全资产如重要系统、服务器等都部署在哪里，有没有漏洞，基线配置有没有合规。然后需要做好基本的防护，比如在出入口部署防火墙、主机装EDR、Web服务器要在WAF的保护下、做好访问控制、部署IPS设备等等。有了基础的防护设备以后要做好检测响应比如部署NTA做好流量检测分析、部署SIEM或日志分析系统将这些基础防护设备的告警精心接入做好安全告警的检测分析。通过检测设备发现网络安全事件以后要采取响应的响应措施，比如发现漏洞要进行补洞加固等、发现攻击封堵IP等，可以通过SOAR安全编排与自动化响应平台对人、工具、流程进行协同提高对于安全事件的响应能力。最后是恢复，也就是对已经造成的破坏进行恢复至正常状态，对于失陷的主机进行离网、杀毒、重装、恢复等。</p><p>本文试图对市面上常见的安全产品进行分类来映射到IPDRR的五大能力<br><strong>识别（Identify）</strong>提供识别能力的产品包括资产管理平台、资产测绘平台、基线管理平台、漏洞扫描工具等。<br><strong>保护（Protect）</strong>提供保护能力的产品包括主机防御类EDR、VPN、4A、防火墙、IPS、WAF、抗DOS等<br><strong>检测（Detect）</strong> 提供威胁检测能力的产品包括IDS、NTA、蜜罐、恶意代码检测、用户异常行为检测等。<br><strong>响应（Respond）</strong>：提供响应能力的产品包括SIEM、安全审计、态势感知、SOAR等<br><strong>恢复（Recover）</strong>：提供恢复能力的产品包括NG-SOC，NG-SOC理论上应该是覆盖了IPDRR所有的能力。<br><img src="https://img-blog.csdnimg.cn/20210617155308964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="IPDRR产品能力映射"></p><p>当然企业安全能力不能够仅仅的依靠工具，是人、策略、流程、工具综合能力的体现。企业可以根据自身需求参考IPDRR能力框架模型加强网络安全能力建设，哪里欠缺补哪里，通过管理与技术结合来有效保障系统核心业务的安全。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见2020,2021我来了！</title>
      <link href="/posts/e5fab05b/"/>
      <url>/posts/e5fab05b/</url>
      
        <content type="html"><![CDATA[<p>今天是2021年1月1日，按照惯例应该是回忆过去展望未来的一天。</p><h2 id="回忆过去："><a href="#回忆过去：" class="headerlink" title="回忆过去："></a>回忆过去：</h2><p>在过去的一年里，曾今在2020年立下的flag是否都实现了呢？</p><p><strong>2020的flag：</strong></p><ul><li>看完10本英文原著。</li><li>爱分享网站运营PV要达5W,UV达5千</li><li>每周至少发一篇微信公众号文章</li><li>开通自己的博客</li><li>每周至少跑步3次</li></ul><p>2020年完成得最好的是看完了10本英文原著，因为2020过春节到第一季度受疫情影响，老老实实待在家里。在5月份就看完了10本英文原著。但是后来却没有坚持下来。看英文原著的热情慢慢的消退下来。一是看了这么多本原著似乎英文还是那么的菜打击了自己的信心，二是看英文原著比较耗时间4、5月份开始正常上班后时间就显得比较紧张了。后来7月份的时候准备考通信工程师的考试，时间更加紧张。所以继续看英文原著的事情就放下来了。英文很重要，学习英文2020年还是要继续坚持。</p><p> 爱分享网站因为各种原因在7月份的时候基本上已经停了，但是服务器还在续费。其实在5,6月份以前网站的访问量等各方面指标都一直在上升，因为疫情大家可能待在家里看书的需求量大增，网站的访问量一直都在持续的上升。如果网站不停基本上运营的flag还是可以达到的。现在的环境对于个人网站来说很艰难了。网站还会继续下去主要内容会以自己的博客为主了。</p><p>因为网站基本停了，一直在想网站生存的方向。微信公众号的文章也比较少更新了。还是自己肚子里的货太少了，写了一段时间以后发现没啥东西写了，坚持不下去了。真佩服那些现在还在每天更新的微信公众号。</p><p>经过多方比较决定用hexo来搭建自己的博客。写博客已经被认为是很古老的方式了，一直以来都很羡慕那些一直坚持下来的优质博主。想通过博客的方式记录自己的学习、生活、工作。2020年共写了24篇博客，产量不是很高，说明思考和积累还是不够。</p><p>跑步锻炼，在夏天天气好的时候还是坚持得不错，每周基本上坚持了一次。天气渐渐冷了起来以后懒筋发作很少出去跑步了。看着自己日益发胖的体重，要深刻的检讨一下。</p><p>2020年全年阅读量有所减少在豆瓣上标记只读了29本书。因为2020年中旬的时候决定考通信工程师和信息安全工程师，所以其他书看得比较少了。经过几个月的努力，顺利通过了通信工程师和信息安全工程师的考试。虽然2020年年初立的flag很多都没有完成，完成了的效果也不是特别好，但是过了通信工程师和信息安全工程师心里稍微有点宽慰。毕竟2020年努力过。</p><h2 id="展望未来："><a href="#展望未来：" class="headerlink" title="展望未来："></a>展望未来：</h2><p>不管怎么样，2020年已经成为过去式了。崭新的2021已经来到，先立下2021年的flag。</p><p><strong>2021年flag:</strong></p><ul><li>考CISP</li><li>考一建</li><li>发两篇论文</li><li>至少写30篇博客文章</li><li>完成12本英文原著</li><li>完成50本书籍的阅读量</li></ul><p>2021加油！</p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作这么多年了，我为什么还在考证</title>
      <link href="/posts/9fed4f95/"/>
      <url>/posts/9fed4f95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201218163950384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="学习学习"></p><p>工作这么多年了，我为什么还在考证？</p><p>因为以前一直没有考过啊！</p><p>毕业以来参加工作后，一直以来认为考证没有啥用处。一方面，因为找工作太过顺利，那会儿找工作也没有看到别人拿什么证去找工作，也没有看到那家公司的招聘广告上写需要什么什么证书。另一方面，由于才从学校出来对于学习考试有种天然的排斥。想想这么多年以来一直都是在学习考试。好不容易毕业了那还不好好放松一下。现在回想起来真是too young,too simple。</p><p>工作这么多年，都是在从事研发相关的工作。一开始写代码，要学的东西挺多的，从毕业时候的ASP到Java。能够完成工作任务，能够做出东西来才是硬道理。后来做项目经理，产品经理也是没有经过系统的培训和学习，在项目中磨练在项目中成长。在公司也带了几个重点大项目，项目也交付得令公司和客户比较满意。想想这研发和项目管理就那么回事。貌似所有的公司都是一样，不管你用什么办法，能够搞定项目的就是好的项目经理。至于有没有证没人关注。甚至公司过CMMI5的时候，我带的项目被抽为参审项目，我还没有系统的学过项目管理。虽然CMMI5已经过了，但是总感觉过得挺虚的。基本上就是在咨询公司的指导下，要你干什么就干什么，要你准备什么就准备什么。至于为啥是这样完全是懵逼。</p><p>人过中年，似乎不管到哪里都充满着危机感。以前自以为自己技术很牛逼，项目管理方面也是相当的OK。随着时间的推移这种自信心慢慢的越来越消退。大家都说搞IT的就是吃青春饭。就像随着年龄的增长，身体越来虚一样，心里也是越来越虚。心里虚了以后就想自己应该多学习提高自己。但是一段时间发现要学的东西实在是太多了，技术的、管理的。东一下西一下的，也没有什么效果。后来自己总结了一下，没有目标的学习都是假装在学习，只不过是安慰自己罢了。一定要给自己定个目标要学哪个方向，而检验学习效果的办法非常简单粗暴–考证。以考促学。能够考证通过不能说明你学得有多么的精深，至少也说明你达到了基本的平均水平。没有考试就没有压力，一本书拖拖拉拉看了一年还在看。而考试时间临近的压力对于深度拖延症患者也是一个很好的治愈方式。</p><p>就这样，我给自己制定的第一个学习目标就是系统的学习项目管理的理论体系，所以报了软考的信息系统项目管理师。经过半年多的学习顺利的拿到了信息系统项目管理师的证。学习的时候还是有一些感触，原来自己在平时的项目管理工作中还是有理论支撑的，人家在书中就已经写了。一些平时没有注意考虑到的点书上也有总结。回想起自己带的项目过CMMI5和过ISO认证等，以及公司的项目管理体系和质量管理体系结合书中的知识点，至少把我零散的一些项目管理知识和经验给系统化、体系化的联系起来了，让我对项目管理有了更深切的理解。尤其是在后来信息系统项目管理师考试写论文的时候，就能够可以很好的理论联系实践。</p><p>嗯，工作这么多年，我终于可以持证上岗了！</p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络信息安全管理要素和安全风险评估</title>
      <link href="/posts/8a1fa561/"/>
      <url>/posts/8a1fa561/</url>
      
        <content type="html"><![CDATA[<p>网络信息安全管理要素由网络管理对象、网络威胁、网络脆弱性、网络风险、网络保护措施组成。<br><img src="https://img-blog.csdnimg.cn/20201204163036136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络信息安全管理要素"><br>由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。</p><p>网络安全管理实际上就是风险控制，其基本过程是通过网络管理对象的威胁和脆弱性进行分析，确定网络管理对象的价值、网络管理对象威胁发生的可能性、网络管理对象的脆弱程度，从而确定网络管理对象的风险等级，然后据此选取合适的安全保护措施，降低网络管理对象的风险。</p><p>所有的安全管理、安全服务、安全技术等都是围绕网络信息安全管理要素来的。</p><p>网络安全风险评估是评价网络信息系统遭受潜在的安全威胁所产生的影响。</p><p>网络安全风险，是指由于网络系统所存在的脆弱性，因人为或自然的威胁导致安全事件发生所造成的可能性。网络风险评估就是评估威胁者利用网络资产的脆弱性，造成网络资产损失的严重程度。</p><p>网络安全风险评估过程，主要包括网络安全风险评估准备、资产识别、威胁识别、脆弱性识别、已有的安全措施分析、网络安全风险分析、网络安全风险处置与管理等。<br><img src="https://img-blog.csdnimg.cn/20201204163226746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络安全风险评估过程"><br><strong>资产识别</strong>包含“网络资产鉴定”和“网络资产价值估算”。前者给出评估所考虑的具体对象，确认网络资产种类和清单，是整个评估工作的基础。常见的网络资产主要分为网络设备、主机、服务器、应用、数据和文档资产等六个方面。</p><p>“网络资产价值估算”是某一具体资产在网络系统中的重要程度确认。</p><p>威胁是指可能对评估对象造成损害的外部原因。威胁利用评估对象自身的脆弱性，采用一定的途径和方式，对评估对象造成损害或损失，从而形成风险，<strong>威胁识别</strong>是对网络资产有可能受到的安全危害进行分析，一般从威胁来源、威胁途径、威胁意图等几个方面来分析。</p><p>脆弱性是指评估对象存在一个或多个脆弱的管理、技术、业务方面的漏洞，这些漏洞可能会被威胁所利用。<strong>脆弱性识别</strong>是指通过各种测试方法，获得网络资产中所存在的缺陷清单，这些缺陷会导致对信息资产的非授权访问、泄密、失控、破坏或不可用、绕过已有的安全机制，缺陷的存在将会危及网络资产的安全。</p><table><thead><tr><th>任务</th><th>输出文档</th><th>文档内容</th></tr></thead><tbody><tr><td>风险评估准备</td><td>会议记录并确认需要评估的系统、评估计划和评估程序</td><td>评估系统、评估计划和内容安排，双方负责人及需要明确的协调工作</td></tr><tr><td>访谈</td><td>针对业务系统进行技术安全和管理安全评估的访谈表</td><td>业务系统描述、运营情况和用户群体，并了解业务管理流程</td></tr><tr><td>文档审查（资产识别）</td><td>资产审查记录和业务系统审查记录</td><td>资产管理台账、网络拓扑图、业务运营管理制度和责任人</td></tr><tr><td>威胁识别</td><td>技术安全测评的网络、主机、应用测评结果记录，工具测试完成后的电子输出记录</td><td>漏洞扫描、渗透性测试、性能测试、入侵检测和协议分析等内容的技术测试结果</td></tr><tr><td>脆弱性识别</td><td>根据威胁识别结果，技术安全测评的网络、主机、应用测评</td><td>检查检查内容的记录，并根据威胁对业务系统脆弱性进行识别</td></tr><tr><td>风险处置</td><td>风险处置措施记录</td><td>对已识别的风险进行评估和处置，并评估是否存在残余风险</td></tr><tr><td>风险管理</td><td>对可接受的残余风险进行风险管理并出具风险评估报告</td><td>风险评估过程中发现的问题、问题的证据和证据源、每项检查活动中测评委托单位配合人员的书面认可</td></tr></tbody></table><p>网络安全风险分析是指在资产评估、威胁评估、脆弱性评估、安全管理评估、安全影响评估的基础上，综合利用定性和定量的分析方法，选择适当的风险计算方法或工具确定风险的大小与风险等级，即对网络系统安全管理范围内的每一个网络资产因遭受泄露、修改、不可用和破坏所带来的任何影响做出一个风险测量的列表，以便识别与选择适当和正确的安全控制方式。通过分析所评估的数据，进行风险值计算。</p><p><img src="https://img-blog.csdnimg.cn/20201204163838552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="网络安全风险分析"><br>网络安全风险分析的主要步骤如下：<br>一、对资产进行识别，并对资产的价值进行赋值。<br>二、对威胁进行识别，描述威胁的属性，并对威胁出现的频率赋值。<br>三、对脆弱性进行识别，并对具体资产的脆弱性的严重程度赋值。<br>四、根据威胁及威胁利用脆弱性的难易程度判断安全事件发生的可能性<br>五、根据脆弱性的严重程度及安全事件所作用的资产价值计算安全事件的损失。<br>六、根据安全事件发生的可能性及安全事件出现后的损失，计算安全事件一旦发生对组织的影响，即网络安全风险值。其中，安全事件损失是指确定已经鉴定的资产受到损害所带来的影响。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyinstaller打包exe后不能运行报Failed to execute script XXXX问题分析与处理</title>
      <link href="/posts/19a32f6f/"/>
      <url>/posts/19a32f6f/</url>
      
        <content type="html"><![CDATA[<p>最近用python的tkinter写了个小工具，发现用pyinstaller打包成exe后运行出错。报Failed to execute script XXXX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w worksubmit.py</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201101171716408.png#pic_center" alt="报错"><br>为了搞清楚报错的原因，想看到程序具体执行的情况。可以通过不带-w的参数打包在控制台看程序执行情况。<br><code>pyinstaller -F worksubmit.py</code> 可以通过不带-w的参数打包，这时打包的exe运行是带控制台的命令行<br><img src="https://img-blog.csdnimg.cn/20201101172133371.png#pic_center" alt="运行情况"><br>可以清楚的看到</p><blockquote><p>ModuleNotFoundError:No module named ‘xlrd’</p></blockquote><p>这时就要解决打包时xlrd模块没有打进去的问题，找到xlrd模块的位置，并将该模块打到运行程序包里。<br>先找到程序依赖的xlrd模块的位置，在PyCharm中通过”File”-&gt;”Setting”,在项目设置里查看Project interpreter，可以看到xlrd的目录位置。<br><img src="https://img-blog.csdnimg.cn/20201101172227853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70#pic_center" alt="找包路径"></p><p>用pyinstall打包的时候通过加-p的参数将依赖的模块打进去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -p J:\study\python\testsubmit\venv\Lib\site-packages worksubmit.py</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201101172053955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样就可以顺利将依赖的模块打进去，再执行exe文件不再报错了。</p><p><strong>总结一下，碰到打包成exe后运行有问题，可以通过不带-w的参数打包，这时打包的exe运行是带控制台的命令行。基本上所有的运行问题都可以通过控制台的命令定位和排查。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等级保护与分级保护的关系和区别</title>
      <link href="/posts/dc4d08f1/"/>
      <url>/posts/dc4d08f1/</url>
      
        <content type="html"><![CDATA[<p>等级保护与分级保护既有联系又有区别：</p><p>国家安全信息等级保护，重点保护的对象是非涉密的涉及国计民生的重要信息系统和通信基础信息系统；涉密信息系统分级保护是国家信息安全等级保护的重要组成部分，是等级保护在涉密领域的具体体现。</p><p>国家安全信息等级保护重点保护的对象是涉及国计民生的重要信息系统和通信基础信息系统，而不论它是否涉密。涉密信息系统分级保护保护的对象是所有涉及国家秘密的信息系统，重点是党政机关、军队和军工单位，由各级保密工作部门根据涉密信息系统的保护等级实施监督管理，确保系统和信息安全，确保国家秘密不被泄漏。</p><p>国家信息安全等级保护是国家从整体上、根本上解决国家信息安全问题的办法,进一步确定了信息安全发展的主线和中心任务,提出了总体要求。对信息系统实行等级保护是国家法定制度和基本国策，是开展信息安全保护工作的有效办法，是信息安全保护工作的发展方向。而涉密信息系统分级保护则是国家信息安全等级保护在涉及国家秘密信息的信息系统中的特殊保护措施与方法。</p><p><strong>等级保护与分级保护本质的区别是等级保护适用的对象为非涉密信息系统，分级保护适用的对象为涉密信息系统。</strong></p><p>具体区别如下：</p><table><thead><tr><th>项目</th><th>等级保护</th><th>分级保护</th></tr></thead><tbody><tr><td>管理体系</td><td>公安机关</td><td>国家保密部门</td></tr><tr><td>标准体系</td><td>国家标准（GB、GB/T）</td><td>国家保密标准（BMB，强制执行）</td></tr><tr><td>适用对象</td><td>非涉密信息系统</td><td>涉密信息系统</td></tr><tr><td>定级依据</td><td>等级保护定级是依据重要业务系统与承载业务运行的网络、设备、系统及单位属性、遭到破坏后所影响的主、客体关系等。</td><td>分级保护定级是依据信息的重要性，以信息最高密级确定受保护的级别。</td></tr><tr><td>级别划分</td><td>第一级：自主保护级<br>第二级：指导保护级<br>第三极：监督保护级<br>第四级：强制保护级<br>第五级：专控保护级</td><td>秘密级<br>机密级<br>绝密级</td></tr><tr><td>工作内容</td><td>信息系统等级保护工作包括：<br>系统定级、系统备案、安全建设整改、等级测评和监督检查五个环节。</td><td>涉密信息系统分级保护工作包括:<br>系统定级、方案设计、工程实施、系统测评、系统审批、日常管理、测评与检查和系统废止八个环节。</td></tr><tr><td>测评频率</td><td>第三级信息系统：应每年至少进行一次等级测评；<br>第四级信息系统：应每年至少进行一次等级测评；<br>第五级信息系统：应当根据特殊安全要求进行等级测评。</td><td>秘密级、机密级信息系统：应每两年至少进行一次安全保密测评或保密检查；<br>绝密级信息系统：应每年至少进行一次安全保密测评或保密检查。</td></tr><tr><td>评测机构</td><td>国家信息安全等级保护工作协调小组办公室授权的信息安全等级保护测评机构</td><td>由国家保密工作部门授权的系统测评机构</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supervisor离线安装及使用</title>
      <link href="/posts/d670c9b8/"/>
      <url>/posts/d670c9b8/</url>
      
        <content type="html"><![CDATA[<p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警</p><p>supervisor的安装有多种方式<br>配置好yum源后，可以直接安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install supervisor</span><br></pre></td></tr></table></figure><p>Debian/Ubuntu可通过apt安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure><p>pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>easy_install安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easy_install</span><br></pre></td></tr></table></figure><p>这几种安装方式都需要在线联网。但大部分的生产环境都是离线环境，是封闭的网络没有办法在线安装。</p><p>这里整理了Supervisor的离线安装包和安装脚本，可以进行离线安装并能指定安装目录。</p><h1 id="一、整理Supervisor安装需要的工具和依赖包"><a href="#一、整理Supervisor安装需要的工具和依赖包" class="headerlink" title="一、整理Supervisor安装需要的工具和依赖包"></a>一、整理Supervisor安装需要的工具和依赖包</h1><p>包括有：<br>setuptools<br>elementtree<br>meld3<br>supervisor</p><h1 id="二、编写离线安装脚本"><a href="#二、编写离线安装脚本" class="headerlink" title="二、编写离线安装脚本"></a>二、编写离线安装脚本</h1><p>整体思路：依次解压并安装Supervisor所需要的工具和依赖包，将Supervisor的配置文件的默认安装目录路径替换成制定的目录路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi install_supervisor.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="keyword">function</span> Install_Supervisor()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#Install supervisord</span></span><br><span class="line">    tar -zxvf setuptools-24.0.2.tar.gz 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line">    <span class="built_in">cd</span> setuptools-24.0.2/</span><br><span class="line">    python setup.py install &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cd</span> ..</span><br><span class="line">    easy_install elementtree-1.2.7-20070827-preview.zip &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    easy_install meld3-0.6.5.tar.gz 2&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    easy_install supervisor-3.3.0.tar.gz &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    mkdir -p <span class="variable">$&#123;INSTALL_DIR&#125;</span>/etc/</span><br><span class="line">    mkdir -p <span class="variable">$&#123;INSTALL_DIR&#125;</span>/tmp/</span><br><span class="line">    mkdir -p <span class="variable">$&#123;INSTALL_DIR&#125;</span>/logs/</span><br><span class="line">    cp etc/supervisord.conf <span class="variable">$&#123;INSTALL_DIR&#125;</span>/etc/</span><br><span class="line">    sed -i <span class="string">"s#__install_dir__#<span class="variable">$&#123;INSTALL_DIR&#125;</span>#g"</span> <span class="variable">$&#123;INSTALL_DIR&#125;</span>/etc/supervisord.conf</span><br><span class="line">    sed -i <span class="string">"s#__user__#<span class="variable">$&#123;USER&#125;</span>#g"</span> <span class="variable">$&#123;INSTALL_DIR&#125;</span>/etc/supervisord.conf</span><br><span class="line">    ln -s /usr/bin/supervisorctl <span class="variable">$&#123;INSTALL_DIR&#125;</span>/commandctl</span><br><span class="line">    cp run_supervisor.sh <span class="variable">$&#123;INSTALL_DIR&#125;</span>/</span><br><span class="line">    sed -i <span class="string">"s#__install_dir__#<span class="variable">$&#123;INSTALL_DIR&#125;</span>#g"</span> <span class="variable">$&#123;INSTALL_DIR&#125;</span>/run_supervisor.sh</span><br><span class="line">    chmod +x <span class="variable">$&#123;INSTALL_DIR&#125;</span>/run_supervisor.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">USER=<span class="string">'root'</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">   INSTALL_DIR=<span class="string">'/app/supervisor'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   INSTALL_DIR=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">Install_Supervisor</span><br></pre></td></tr></table></figure><p>安装脚本中默认的安装路径是/app/supervisor，可以根据实际情况进行调整。</p><p>另外整理了一个run_supervisor.sh的脚本，在安装以后根据安装目录来生成这个启动脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">cd</span> __install_dir__</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"tmp"</span> ];<span class="keyword">then</span></span><br><span class="line">  mkdir tmp</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"tmp文件夹已经存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"logs"</span> ];<span class="keyword">then</span></span><br><span class="line">  mkdir logs</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"logs文件夹已经存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">/usr/bin/supervisord -c __install_dir__/etc/supervisord.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"supervisord 已执行。"</span></span><br></pre></td></tr></table></figure><h1 id="三、将所有的安装包脚本等打成离线安装包"><a href="#三、将所有的安装包脚本等打成离线安装包" class="headerlink" title="三、将所有的安装包脚本等打成离线安装包"></a>三、将所有的安装包脚本等打成离线安装包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf  supervisor_install_pack.tar.gz  supervisor</span><br></pre></td></tr></table></figure><p>已打好的离线安装包下载 <a href="https://545c.com/file/21165215-443895501" target="_blank" rel="noopener">https://545c.com/file/21165215-443895501</a><br><a href="https://545c.com/file/21165215-443895501" target="_blank" rel="noopener">城通网盘下载</a>   <a href="https://545c.com/file/21165215-443895501" target="_blank" rel="noopener">https://545c.com/file/21165215-443895501</a><br><a href="https://download.csdn.net/download/fullbug/12434225" target="_blank" rel="noopener">CSDN下载</a> <a href="https://download.csdn.net/download/fullbug/12434225" target="_blank" rel="noopener">https://download.csdn.net/download/fullbug/12434225</a></p><h1 id="四、离线安装包使用"><a href="#四、离线安装包使用" class="headerlink" title="四、离线安装包使用"></a>四、离线安装包使用</h1><p>下载离线安包，解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf supervisor_install_pack.tar.gz</span><br></pre></td></tr></table></figure><p>解压后看到supervisor的目录，在supervisor的目录中找到install_supervisor.sh的脚本<br><img src="https://img-blog.csdnimg.cn/20200518111602385.png" alt="supervisor离线包安装目录"><br>执行install_supervisor.sh的脚本，默认安装/app/supervisor下，可以带参数指定安装目录。也可以修改install_supervisor.sh脚本自定义默认的安装路径。<br>执行完安装脚本，就可以在/app/supervisor目录下看到有相应的启动脚本、配置文件目录、日志目录及临时文件目录。<br><img src="https://img-blog.csdnimg.cn/20200518111653544.png" alt="supervisor运行目录"><br>执行run_supervisor.sh就可以启动supervisor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run_supervisor.sh</span><br></pre></td></tr></table></figure><h1 id="五、验证和使用supervisor"><a href="#五、验证和使用supervisor" class="headerlink" title="五、验证和使用supervisor"></a>五、验证和使用supervisor</h1><p>ps -ef|grep supervisor  查看supervisor是否已经启动<br><img src="https://img-blog.csdnimg.cn/20200518111736457.png" alt="查看supervisor是否已经启动"><br>通过web界面的9001看web界面控制台<a href="http://127.0.0.1:9001" target="_blank" rel="noopener">http://127.0.0.1:9001</a><br><img src="https://img-blog.csdnimg.cn/20200518111807123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="web界面控制台"></p><ul><li>supervisord<br>运行 Supervisor 时会启动一个进程 supervisord，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。<br>supervisord -v 查看supervisor版本号</li><li>supervisorctl<br>是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。<br>supervisor是所有进程的父进程，管理着启动的子进展，supervisor以子进程的PID来管理子进程，当子进程异常退出时supervisor可以收到相应的信号量。</li></ul><p><strong>supervisor常用管理命令</strong><br>supervisorctl restart &lt; application name&gt; ;重启指定应用<br>supervisorctl stop &lt; application name&gt; ;停止指定应用<br>supervisorctl start &lt; application name&gt; ;启动指定应用<br>supervisorctl restart all ;重启所有应用<br>supervisorctl stop all ;停止所有应用<br>supervisorctl start all ;启动所有应用</p><h1 id="六、配置文件说明"><a href="#六、配置文件说明" class="headerlink" title="六、配置文件说明"></a>六、配置文件说明</h1><h2 id="supervisor-conf配置文件"><a href="#supervisor-conf配置文件" class="headerlink" title="supervisor.conf配置文件"></a>supervisor.conf配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ;socket文件的mode，默认是0700</span><br><span class="line">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span><br><span class="line"> </span><br><span class="line">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span><br><span class="line">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user              ;登录管理后台的用户名</span><br><span class="line">;password=123               ;登录管理后台的密码</span><br><span class="line"> </span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ;日志文件，默认是 <span class="variable">$CWD</span>/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class="line">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ;pid 文件</span><br><span class="line">nodaemon=<span class="literal">false</span>               ;是否在前台启动，默认是<span class="literal">false</span>，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024。注意托管ES进程，这里要进行调整至65535</span><br><span class="line">minprocs=200                 ;可以打开的进程数的最小值，默认 200。注意托管ES进程，这里要进行调整至4096</span><br><span class="line"> </span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class="line"> </span><br><span class="line">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class="line">[program:xx]</span><br><span class="line"><span class="built_in">command</span>=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</span><br><span class="line">autostart=<span class="literal">true</span>       ; 在supervisord启动的时候也自动启动</span><br><span class="line">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class="line">autorestart=<span class="literal">true</span>     ; 程序退出后自动重启,可选值：[unexpected,<span class="literal">true</span>,<span class="literal">false</span>]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class="line">startretries=3       ; 启动失败自动重试次数，默认是3</span><br><span class="line">user=tomcat          ; 用哪个用户启动进程，默认是root</span><br><span class="line">priority=999         ; 进程启动优先级，默认999，值小的优先启动</span><br><span class="line">redirect_stderr=<span class="literal">true</span> ; 把stderr重定向到stdout，默认<span class="literal">false</span></span><br><span class="line">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</span><br><span class="line">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class="line">stopasgroup=<span class="literal">false</span>     ;默认为<span class="literal">false</span>,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class="line">killasgroup=<span class="literal">false</span>     ;默认为<span class="literal">false</span>，向进程组发送<span class="built_in">kill</span>信号，包括子进程</span><br><span class="line"> </span><br><span class="line">;包含其它配置文件</span><br><span class="line">[include]</span><br><span class="line">files = supervisord.d/*.ini    ;默认放在安装目录的supervisord.d目录下，可以指定一个或多个以.ini结束的配置文件。</span><br></pre></td></tr></table></figure><h2 id="子进程配置文件"><a href="#子进程配置文件" class="headerlink" title="子进程配置文件"></a>子进程配置文件</h2><p>需要给托管的子进程配置相应的配置文件，每个进程的配置文件都可以单独分拆也可以把相关的脚本放一起。目录及文件后缀可以在<br>supervisor.conf配置文件中进行自定义。见supervisor.conf的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = supervisord.d/*.ini  <span class="comment">#目录路径及文件后缀名都可以自定义。</span></span><br></pre></td></tr></table></figure><p>logstash.ini 样例说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#项目名</span></span><br><span class="line">[program:logstash-test]</span><br><span class="line"><span class="comment">#脚本目录</span></span><br><span class="line">directory=/app/elk/logstash-7.6.0</span><br><span class="line"><span class="comment">#脚本执行命令</span></span><br><span class="line"><span class="built_in">command</span>=/app/elk/logstash-7.6.0/bin/logstash -f /app/elk/logstash-7.6.0/bin/<span class="built_in">test</span>-pipeline.conf</span><br><span class="line"><span class="comment">#进程数</span></span><br><span class="line">numprocs=1</span><br><span class="line"><span class="comment">#supervisor启动的时候是否随着同时启动，默认True</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line"><span class="comment">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span></span><br><span class="line">autorestart=<span class="literal">false</span></span><br><span class="line"><span class="comment">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span></span><br><span class="line">startsecs=1</span><br><span class="line"><span class="comment">#脚本运行的用户身份 </span></span><br><span class="line">user = root</span><br><span class="line"><span class="comment">#把stderr重定向到stdout，默认 false</span></span><br><span class="line">redirect_stderr = <span class="literal">true</span></span><br><span class="line"><span class="comment">#stdout日志文件大小，默认 50MB</span></span><br><span class="line">stdout_logfile_maxbytes = 10M</span><br><span class="line"><span class="comment">#stdout日志文件备份数</span></span><br><span class="line">stdout_logfile_backups = 10</span><br><span class="line"><span class="comment">#日志输出 </span></span><br><span class="line">stderr_logfile=/app/elk/logstash-7.6.0/logs/logstash_test_error.log</span><br><span class="line">stdout_logfile=/app/elk/logstash-7.6.0/logs/logstash_test_out.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash简明实用教程</title>
      <link href="/posts/a59d6c21/"/>
      <url>/posts/a59d6c21/</url>
      
        <content type="html"><![CDATA[<h1 id="一、logstash是什么"><a href="#一、logstash是什么" class="headerlink" title="一、logstash是什么"></a>一、logstash是什么</h1><p>Logstash 是开源的服务器端<strong>数据处理管道</strong>，能够同时从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中。<br>官方介绍：Logstash is an open source data collection engine with real-time pipelining capabilities。简单来说logstash就是一根具备实时数据传输能力的管道，负责将数据信息从管道的输入端传输到管道的输出端；与此同时这根管道还可以让你根据自己的需求在中间加上滤网，Logstash提供里很多功能强大的滤网以满足你的各种应用场景。<br>Logstash 能够动态地采集、转换和传输数据，不受格式或复杂度的影响。利用 Grok 从非结构化数据中派生出结构，从 IP 地址解码出地理坐标，匿名化或排除敏感字段，并简化整体处理过程。</p><p>Logstash常用于日志关系系统中做日志采集设备；<br><img src="https://img-blog.csdnimg.cn/20200414152706269.png" alt="logstash"><br>系统结构<br><img src="https://img-blog.csdnimg.cn/20200414153844982.png" alt="logstash系统结构"><br>Logstash的事件（logstash将数据流中等每一条数据称之为一个event）处理流水线有三个主要角色完成：<strong>inputs –&gt; filters –&gt; outputs</strong>：</p><p><strong>输入（inpust）</strong>：必须，负责产生事件（Inputs generate events），常用：File、syslog、redis、beats（如：Filebeats）<br>Logstash 支持 各种输入选择 ，可以在同一时间从众多常用来源捕捉事件。能够以连续的流式传输方式，轻松地从日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据。</p><p><strong>过滤器（filters）</strong>：可选，负责数据处理与转换（filters modify them），常用：grok、mutate、drop、clone、geoip<br>过滤器能实时解析和转换数据<br>数据从源传输到存储库的过程中，Logstash 过滤器能够解析各个事件，识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松、更快速地分析和实现商业价值。</p><ul><li>利用 Grok 从非结构化数据中派生出结构 </li><li>从 IP 地址破译出地理坐标 </li><li>将 PII 数据匿名化，完全排除敏感字段</li><li>简化整体处理，不受数据源、格式或架构的影响</li></ul><p><strong>输出（outpus）</strong>：必须，负责数据输出（outputs ship them elsewhere），常用：elasticsearch、file、graphite、statsd<br>Logstash 提供众多输出选择，可以将数据发送到指定的地方，并且能够灵活地解锁众多下游用例</p><p>其中inputs和outputs支持codecs（coder&amp;decoder）在1.3.0 版之前，logstash 只支持纯文本形式输入，然后以过滤器处理它。但现在，我们可以在输入 期处理不同类型的数据，所以完整的数据流程应该是：input | decode | filter | encode | output；codec 的引入，使得 logstash 可以更好更方便的与其他有自定义数据格式的运维产品共存，比如：graphite、fluent、netflow、collectd，以及使用 msgpack、</p><h1 id="二、为什么是logstash"><a href="#二、为什么是logstash" class="headerlink" title="二、为什么是logstash"></a>二、为什么是logstash</h1><p><strong>Logstash和Flume对比</strong><br>1、Logstash比较偏重于字段的预处理，在异常情况下可能会出现数据丢失，只是在运维日志场景下，一般认为这个可能不重要；而Flume偏重数据的传输，几乎没有数据的预处理，仅仅是数据的产生，封装成event然后传输；传输的时候flume比logstash多考虑了一些可靠性。因为数据会持久化在channel中，数据只有存储在下一个存储位置（可能是最终的存储位置，如HDFS；也可能是下一个Flume节点的channel），数据才会从当前的channel中删除。这个过程是通过事务来控制的，这样就保证了数据的可靠性。<br>2、Logstash有几十个插件，配置比较灵活，flume强调用户自定义开发；<br>3、Logstash的input和filter还有output之间都存在buffer，进行缓冲；Flume直接使用channel做持久化<br>4、Logstash性能以及资源消耗比较严重，且不支持缓存；<br><img src="https://img-blog.csdnimg.cn/20200414154043951.png" alt="Logstash和Flume对比"><br>详见参考：<a href="https://blog.csdn.net/songfeihu0810232/article/details/94406608" target="_blank" rel="noopener">https://blog.csdn.net/songfeihu0810232/article/details/94406608</a></p><h1 id="三、logstash安装与配置"><a href="#三、logstash安装与配置" class="headerlink" title="三、logstash安装与配置"></a>三、logstash安装与配置</h1><h2 id="1、logstash安装"><a href="#1、logstash安装" class="headerlink" title="1、logstash安装"></a>1、logstash安装</h2><p>环境要求：jdk1.8或以上<br>下载logstash软件包  logstash官方下载地址<a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a><br>下载后直接解压就可以用<br>如：tar zxvf logstash-7.6.0.tar.gz<br>解压后目录如下：<br><img src="https://img-blog.csdnimg.cn/20200414154300993.png" alt="logstash目录"><br>目录结构说明见官方文档：<a href="https://www.elastic.co/guide/en/logstash/7.1/dir-layout.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.1/dir-layout.html</a><br>解压以后可以对logstash进行简单的测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -e <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br></pre></td></tr></table></figure><p>这条命令表示通过命令的方式指定logstash的输入输出分别是标准的输入输出，什么是标准的输入输出呢？就是控制台的输入输出。<br>等待启动成功，直接输入“hello world”<br>将会在控制台会有相应的输出<br>出现这些信息就表示logstash安装成功并且可以使用了。<br><img src="https://img-blog.csdnimg.cn/20200414154431921.png" alt="logstash测试"></p><h2 id="2、在线安装logstash插件"><a href="#2、在线安装logstash插件" class="headerlink" title="2、在线安装logstash插件"></a>2、在线安装logstash插件</h2><p>虽然logstash默认安装了大部分的插件，但是有些插件没有默认安装，如logstash-output-syslog、logstash-output-jdbc</p><h3 id="2-1-安装Gem并更新"><a href="#2-1-安装Gem并更新" class="headerlink" title="2.1. 安装Gem并更新"></a>2.1. 安装Gem并更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y gem</span></span><br><span class="line"><span class="comment"># gem -v</span></span><br><span class="line">2.0.14.1</span><br><span class="line"><span class="comment"># gem update --system</span></span><br><span class="line"><span class="comment"># gem -v</span></span><br><span class="line">3.1.2</span><br></pre></td></tr></table></figure><h3 id="2-2-检查并修改镜像源"><a href="#2-2-检查并修改镜像源" class="headerlink" title="2.2 检查并修改镜像源"></a>2.2 检查并修改镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem sources -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"> </span><br><span class="line">https://rubygems.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span></span><br><span class="line">https://gems.ruby-china.com/ added to sources</span><br><span class="line">https://rubygems.org/ removed from sources</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat ~/.gemrc </span></span><br><span class="line">---</span><br><span class="line">:backtrace: <span class="literal">false</span></span><br><span class="line">:bulk_threshold: 1000</span><br><span class="line">:sources:</span><br><span class="line">- https://gems.ruby-china.com/</span><br><span class="line">:update_sources: <span class="literal">true</span></span><br><span class="line">:verbose: <span class="literal">true</span></span><br><span class="line">:concurrent_downloads: 8</span><br></pre></td></tr></table></figure><blockquote><p>请注意：国内的镜像站从<a href="https://gems.ruby-china.org" target="_blank" rel="noopener">https://gems.ruby-china.org</a> 换成了 <a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a><br>！！！现在很多网上的资料就都是写的<a href="https://gems.ruby-china.org，导致很多人换了镜像源也装不上。" target="_blank" rel="noopener">https://gems.ruby-china.org，导致很多人换了镜像源也装不上。</a></p></blockquote><h3 id="2-3-修改-logstash的-gem-镜像源"><a href="#2-3-修改-logstash的-gem-镜像源" class="headerlink" title="2.3. 修改 logstash的 gem 镜像源"></a>2.3. 修改 logstash的 gem 镜像源</h3><p>cd到logstach的安装目录，可以看到Gemfile文件 <code>vi Gemfile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a Logstash generated Gemfile.</span></span><br><span class="line"><span class="comment"># If you modify this file manually all comments and formatting will be lost.</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">source</span> <span class="string">"https://rubygems.org"</span></span><br><span class="line">gem <span class="string">"logstash-core"</span>, :path =&gt; <span class="string">"./logstash-core"</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>更改默认的 <a href="https://rubygems.org" target="_blank" rel="noopener">https://rubygems.org</a> 为<a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a></p><h3 id="2-4、安装插件"><a href="#2-4、安装插件" class="headerlink" title="2.4、安装插件"></a>2.4、安装插件</h3><p><img src="https://img-blog.csdnimg.cn/20200414155435362.png" alt="安装插件"></p><h2 id="3、离线安装logstash插件"><a href="#3、离线安装logstash插件" class="headerlink" title="3、离线安装logstash插件"></a>3、离线安装logstash插件</h2><p>在实际应用过程中有些生产环境是封闭的网络环境，没法连接外网。这时候就需要离线安装插件。<br>说离线安装实际就是在一个有网络的环境下将插件装好，然后再装到离线环境中。<br>这里有两种方式,<br>一种就是在有网络的环境下将插件装好，将整个logsash包离线拷到生产环境。<br>另一种方式就是在有网络的环境下将插件装好后，将logstash的需要离线安装的插件打个离线包，然后再在生产环境进行离线安装。<br>离线插件包打包安装具体操作如下：</p><h3 id="3-1-通过logstash-plugin-prepare-offline-pack-命令将插件打成zip包"><a href="#3-1-通过logstash-plugin-prepare-offline-pack-命令将插件打成zip包" class="headerlink" title="3.1 通过logstash-plugin prepare-offline-pack 命令将插件打成zip包"></a>3.1 通过logstash-plugin prepare-offline-pack 命令将插件打成zip包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./logstash-plugin prepare-offline-pack --output logstash-output-syslog.zip logstash-output-syslog</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200414155806703.png" alt="打包"><br>打包命令执行成功以后，可以看到在logstash的bin目录下有打成的离线插件zip包<br><img src="https://img-blog.csdnimg.cn/20200414155831404.png" alt="打包后生成的离线包"></p><h3 id="3-2-通过logstash-plugin-install-进行离线安装"><a href="#3-2-通过logstash-plugin-install-进行离线安装" class="headerlink" title="3.2 通过logstash-plugin install 进行离线安装"></a>3.2 通过logstash-plugin install 进行离线安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash-plugin install file:///home/logstash/logstash-7.6.2/tools/logstash-output-syslog.zip</span><br></pre></td></tr></table></figure><p>安装后成功会有如下提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installing file: /home/logstash/logstash-7.6.2/tools/logstash-output-syslog.zip</span><br><span class="line">Install successful</span><br></pre></td></tr></table></figure><h3 id="3-2-通过logstash-plugin-list命令检查插件是否安装成功"><a href="#3-2-通过logstash-plugin-list命令检查插件是否安装成功" class="headerlink" title="3.2 通过logstash-plugin list命令检查插件是否安装成功"></a>3.2 通过logstash-plugin list命令检查插件是否安装成功</h3><p><img src="https://img-blog.csdnimg.cn/20200414155929438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash-plugin list"></p><h2 id="4、logstash简单配置说明"><a href="#4、logstash简单配置说明" class="headerlink" title="4、logstash简单配置说明"></a>4、logstash简单配置说明</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>Logstash 设计了自己的 DSL ——包括有区域，注释，数据类型(布尔值，字符串，数值，数组，哈希)，条件判断，字段引用等。</p><h3 id="区段-section"><a href="#区段-section" class="headerlink" title="区段(section)"></a>区段(section)</h3><p>Logstash 用 {} 来定义区域。区域内可以包括插件区域定义，你可以在一个区域内定义多个插件。插件区域内则可以定义键值对设置。示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123;&#125;</span><br><span class="line">    syslog &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Logstash 支持少量的数据值类型：</p><ul><li>bool<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>string<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host =&gt; <span class="string">"hostname"</span></span><br></pre></td></tr></table></figure></li><li>number<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port =&gt; <span class="number">514</span></span><br></pre></td></tr></table></figure></li><li>array<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match =&gt; [<span class="string">"datetime"</span>, <span class="string">"UNIX"</span>, <span class="string">"ISO8601"</span>]</span><br></pre></td></tr></table></figure></li><li>hash<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options =&gt; &#123;</span><br><span class="line">    key1 =&gt; <span class="string">"value1"</span>,</span><br><span class="line">    key2 =&gt; <span class="string">"value2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段引用-field-reference"><a href="#字段引用-field-reference" class="headerlink" title="字段引用(field reference)"></a>字段引用(field reference)</h3>如果想在 Logstash 配置中使用字段的值，只需要把字段的名字写在中括号 [] 里就行了，这就叫字段引用。<br>对于 嵌套字段(也就是多维哈希表，或者叫哈希的哈希)，每层的字段名都写在 [] 里就可以了。比如，你可以从 geoip 里这样获取 longitude 值：<br>[geoip][location][0]<br>logstash 的数组也支持倒序下标，即 [geoip][location][-1] 可以获取数组最后一个元素的值。<br>Logstash 还支持变量内插，在字符串里使用字段引用的方法是这样：<br>“the longitude is %{[geoip][location][0]}”</li></ul><h3 id="条件判断-condition"><a href="#条件判断-condition" class="headerlink" title="条件判断(condition)"></a>条件判断(condition)</h3><p>表达式支持下面这些操作符：<br>equality, etc: ==, !=, &lt;, &gt;, &lt;=, &gt;=<br>regexp: =<del>, !</del><br>inclusion: in, not in<br>boolean: and, or, nand, xor<br>unary: !()<br>通常来说，你都会在表达式里用到字段引用。比如：<br>if “_grokparsefailure” not in [tags] {<br>} else if [status] !~ /^2\d\d/ and [url] == “/noc.gif” {<br>} else {<br>}</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>Logstash 提供了一个 shell 脚本叫 logstash 方便快速运行。它支持一下参数：<br>-e<br>意即执行。我们在 “Hello World” 的时候已经用过这个参数了。事实上可以不写任何具体配置，直接运行 <code>bin/logstash -e</code> ‘’ 达到相同效果。这个参数的默认值是下面这样：<br>input {<br>    stdin { }<br>}<br>output {<br>    stdout { }<br>}<br>–config 或 -f<br>意即文件。真实运用中，我们会写很长的配置，甚至可能超过 shell 所能支持的 1024 个字符长度。所以我们必把配置固化到文件里，然后通过 <code>bin/logstash -f agent.conf</code> 这样的形式来运行。<br>此外，logstash 还提供一个方便我们规划和书写配置的小功能。你可以直接用 <code>bin/logstash -f /etc/logstash.d/</code> 来运行。logstash 会自动读取 /etc/logstash.d/ 目录下所有的文本文件，然后在自己内存里拼接成一个完整的大配置文件，再去执行。<br>–configtest 或 -t<br>意即测试。用来测试 Logstash 读取到的配置文件语法是否能正常解析。Logstash 配置语法是用 grammar.treetop 定义的。尤其是使用了上一条提到的读取目录方式的读者，尤其要提前测试。<br>–log 或 -l<br>意即日志。Logstash 默认输出日志到标准错误。生产环境下你可以通过 bin/logstash -l logs/logstash.log 命令来统一存储日志。<br>–filterworkers 或 -w<br>意即工作线程。Logstash 会运行多个线程。你可以用 <code>bin/logstash -w 5</code> 这样的方式强制 Logstash 为过滤插件运行 5 个线程。</p><h1 id="四、logstash使用的几种典型的应用场景"><a href="#四、logstash使用的几种典型的应用场景" class="headerlink" title="四、logstash使用的几种典型的应用场景"></a>四、logstash使用的几种典型的应用场景</h1><h2 id="1、通过logstash将syslog日志原始日志转发"><a href="#1、通过logstash将syslog日志原始日志转发" class="headerlink" title="1、通过logstash将syslog日志原始日志转发"></a>1、通过logstash将syslog日志原始日志转发</h2><p><img src="https://img-blog.csdnimg.cn/20200414161106796.png" alt="syslog日志原始日志转发"><br>在logstash的bin目录下新建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="built_in">test</span>-pipeline.conf</span><br></pre></td></tr></table></figure><p>编辑input和output</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin&#123;</span><br><span class="line">      type =&gt; <span class="string">"test-log"</span></span><br><span class="line">    &#125;</span><br><span class="line">    syslog&#123;</span><br><span class="line">        type =&gt; <span class="string">"test-log"</span></span><br><span class="line">        port =&gt; <span class="number">514</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output</span><br><span class="line">&#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">      codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">    syslog&#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.2.185"</span></span><br><span class="line">        port =&gt; <span class="number">514</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就相当于把日志转发到了192.168.2.185这台机器的514端口<br>编辑好配置文件以后执行<br><code>./logstash -f test-pipeline.conf --config.test_and_exit</code>     对配置文件进行检查，如果配置文件写得有问题，将会有错误提示。<br>配置文件检查没有问题后就可以启动logstash执行了<code>./logstash -f test-pipeline.conf  --config.reload.automatic</code><br>用udpsender工具往这台机器上发送日志信息，可以看到日志转发到192.168.2.185这台机器上了。<br><img src="https://img-blog.csdnimg.cn/20200414161139252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="updsend发送日志"><br>在控制台可以看到192.168.2.185，接收到了192.168.2.173转发过来的日志<br><img src="https://img-blog.csdnimg.cn/20200414161229147.png" alt="控制台日志"></p><h2 id="2、通过rsyslog、logstash采集nginx等中间件的日志送到ES"><a href="#2、通过rsyslog、logstash采集nginx等中间件的日志送到ES" class="headerlink" title="2、通过rsyslog、logstash采集nginx等中间件的日志送到ES"></a>2、通过rsyslog、logstash采集nginx等中间件的日志送到ES</h2><p>logstash可以与rsyslog、filebeat等无缝结合采集nginx等中间件日志，送给数据存储。<br><img src="https://img-blog.csdnimg.cn/20200414161255484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="通过rsyslog、logstash采集nginx等中间件的日志送到ES"><br>具体参见：<a href="https://xiejava.gitee.io/posts/f3e97829/">https://xiejava.gitee.io/posts/f3e97829/</a></p><h2 id="3、通过logstash将日志入kafka再入mysql或ES"><a href="#3、通过logstash将日志入kafka再入mysql或ES" class="headerlink" title="3、通过logstash将日志入kafka再入mysql或ES"></a>3、通过logstash将日志入kafka再入mysql或ES</h2><p>数据先放到kafka队列里缓存削峰，然后从kafka队列里读取数据到mysql或其他存储系统中进行保存。<img src="https://img-blog.csdnimg.cn/20200414161405732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash将日志入kafka再入mysql或ES"><br>具体参见：<a href="https://xiejava.gitee.io/posts/54e4fd14/">https://xiejava.gitee.io/posts/54e4fd14/</a></p><h2 id="4、通过logstash进行日志补全后再转发或入库"><a href="#4、通过logstash进行日志补全后再转发或入库" class="headerlink" title="4、通过logstash进行日志补全后再转发或入库"></a>4、通过logstash进行日志补全后再转发或入库</h2><p>采集原始日志以后，需要对原始日志进行调整合补齐，比如最常见的是根据IP来补齐IP的经纬度等信息。<br><img src="https://img-blog.csdnimg.cn/2020041416162510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash进行日志补全"><br>这里就可以用logstash的geotip，也可以用其他的外部API接口，为了更具代表性的说明，这里调用的是第三方的http接口（<a href="http://ip-api.com/json/），这个接口也是可以自己定义的。" target="_blank" rel="noopener">http://ip-api.com/json/），这个接口也是可以自己定义的。</a><br>参考配置文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123; &#125;</span><br><span class="line">    syslog &#123;</span><br><span class="line">      port =&gt; <span class="string">"514"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok&#123;</span><br><span class="line">         <span class="comment">#匹配获取IP</span></span><br><span class="line">         match =&gt; &#123;<span class="string">"message"</span> =&gt; <span class="string">"%&#123;IPV4:ip&#125;"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    http &#123;</span><br><span class="line">        <span class="comment">#调用外部接口获取IP的详细信息</span></span><br><span class="line">        url =&gt; <span class="string">"http://ip-api.com/json/%&#123;ip&#125;"</span></span><br><span class="line">        verb =&gt; <span class="string">"GET"</span></span><br><span class="line">        add_field =&gt; &#123;</span><br><span class="line">          <span class="string">"new_field"</span> =&gt; <span class="string">"new_static_value"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        replace =&gt; &#123;     </span><br><span class="line">            <span class="comment">#这里对原始日志数据进行补全，如加了新的字段及从接口中获取的信息</span></span><br><span class="line">            <span class="string">"message"</span> =&gt; <span class="string">"%&#123;message&#125;|%&#123;ip&#125;: My new message|%&#123;new_field&#125;|%&#123;[body][as]&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; &#125;</span><br><span class="line">    syslog &#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.2.173"</span></span><br><span class="line">        port =&gt; <span class="string">"7514"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过http接口调用API取得数据，然后通过mutate重新组合补全信息，这里通过调用获取IP地址信息的API获取IP的信息，然后补全到原始日志中。<br><img src="https://img-blog.csdnimg.cn/20200414161738867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看出logstash是一个非常灵活好用的数据采集框架工具，可以通过简单的配置满足绝大多数数据采集场景的需求。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语学渣的我是如何撸完一本英文原著的</title>
      <link href="/posts/1e6a75de/"/>
      <url>/posts/1e6a75de/</url>
      
        <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200407/blogimage/englishimage.png" alt="英语原著"><br>2020年初立的flag就有要看完十本英文原著。看英文原著对于英语学渣的我来说几乎是很难想像的事情。说英语烂那只有自己知道，读书的时候从来就没有学好过，工作这么多年更是忘得一干二净了。与英语相爱相杀若干年，经历了无数次从开始到放弃……</p><p>非常羡慕别人能够很顺畅的看懂英文原著，能够丢开字幕看懂英语大片，能够飚一口的英文。有人说学好了英文就给自己多开了一扇了解世界的窗户，比别人多一半的人生经历。英语对于生活在全球化信息时代的我们来说有多么的重要，不用多说，道理啥的咱都知道，可是经历了这么多年还是学不会啊。买了N多的英语学习资料，下了N多的视频教程，查找了各种学习英语的方法。单词书永远都是翻了前面几页，英语学习资料屯了一堆从来没有开封过，市面上吹捧的各种英语学习方法感觉都很不错，尝试了很多种还是在尝试……</p><p>虽然有过无数次失败的经历，但也越来越认识到英语的重要性，也看到越来越多的人将英语学得很溜，让我清醒的认识到英语很重要，英语很难学，英语是一定是可以学好的，但是妄想速成是不可能的。如何才能最终习得英语的技能呢？</p><p>前新东方英语老师李笑来在他的《财富自由之路》中指出在智力上、知识上、经验上，复利效应对每个人来说都是存在的。知识和能力的习得与积累是有复利效应的。所以，大多数的人应该要相信自己能够通过知识和能力的积累和复利获得成功和成长。经过多年教训，所有什么打着21天搞定单词，一个月看懂原著啥的口号都是骗人的。在英语技能的习得上，我笃信只有坚持积累和复利才能最终成功。我坚信经过自己的努力和坚持，我在英语习得上投入的精力和时间超过成本线以后，我的英语水平将会有突破性的提高。</p><p>在英语学习的过程中有过<a href="https://xiejava.gitee.io/posts/48451ead/">《坚持了330天，我终于放弃了背单词》</a>的经历，让我认识到只有“用”英语，才能够真正的掌握英语。目前我最朴素的需求就是想能够看懂英文文档，能够流畅的阅读英文书籍。而目前所处的语言环境”说”英语的需求不是很迫切。对于我来说能够流利阅读英语已经足够了。既然开始“用”英语，那就从大量开始阅读英语原版书开始吧！英语这么菜，我为什么敢挑战英文原版书呢？因为我看到了李笑来老师提到掌握一门外语的最少必要知识。<br>1、认识字母<br>2、认识音标<br>3、会查字典<br>4、懂点基本语法<br>5、会用百度或google等搜索引擎。<br>如果掌握了这些最小必要的知识，你就已经“入门”了，接下了就只剩下所谓“执行”了，也就是要用起来。<br>我想，这些最小必要的知识我基本都已经具备了。在正式准备看英语原著之前，我看完了全套149本《书虫》（见<a href="https://xiejava.gitee.io/posts/40bbedc5/">《看完全套149本《书虫》是种什么样的体验》</a>）。对于英语的阅读相对来说没有那么怵了。<br>虽然我看完了全套149本《书虫》，但是《书虫》毕竟只是入门级的英语简写读物，与英语原版的原著还是有很大的距离的。</p><p>作为英语原著初读者来说，真正看完一本书，完成从0到1的过程，比深刻理解一本书更重要。而对于初读者来说如何撸完一本英文原著还是比较有挑战的。</p><p><strong>首先要找到一本自己非常感兴趣并且适合自己难度的书籍。自己不感兴趣或者难度太难了，就会容易放弃。</strong><br>对于挑选原版书的阅读材料来说，我也是花的一些功夫。网上有人建议刚开始接触英语原著建议是比较浅的原著如儿童读物《夏洛的网》、《格林童话》、《小王子》之类的。对于我这种成年人来说这类读物实在是提不起我的兴趣。还有人推荐《哈利波特》系列，我不是哈迷所以也没有选择《哈利波特》系列。我选择的是《奇迹男孩》。《奇迹男孩》的电影在2018年上映的时候我就想看，但是一直没有时间去看。正好买了这本英文原著来看看。《奇迹男孩》英文原著豆瓣评分9.1分，属于儿童成长类的书籍，老少皆宜，300来页长短适中不是那种大部头。因为是面向青少年的书籍所以单词不难，而且是近几年出的新书畅销书，比较口语化没有太多的长句子，非常通俗。事实证明《奇迹男孩》非常适合像我这样的英语原著初读者。<br><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200407/blogimage/wonder.png" alt="奇迹男孩"></p><p><strong>选择了阅读目标的原版书籍后，就要开始读并坚持下来</strong><br>作为英语原著初读者，即使是最通俗的原版书，单词也会是一个拦路虎。单词没有办法，那就是勤查字典。《奇迹男孩》是面向青少年的书籍，单词不难，但对我来说也是充斥着各种生词。不过还好每页大概是在6、7个左右。如果按照伍君仪的《把你的词汇用起来》中的透析法，隔一个生词查一个，只查一半的生词，剩下的靠猜，那每页只要查2-3个单词左右，这个查词量已经很小了。因为这本书对我来说生词量6、7个不算多，而且作为原著初读者，猜单词的意思往往猜不准，所以我就索性看到不懂的单词每个都会查字典。为了尽快的撸完这本书，我也是给自己定了个目标，每天看30页。看少了不记得前后的情节，看多了怕自己看不下去。别看只有区区的30页，看中文也就半个小时的事情，但是看英文又要查字典，平均要花掉2-3个小时才能看完。所以对于英语原著初读者来说30页是个比较适中的量，后续如果熟练的可以慢慢的增加。这本《奇迹男孩》300多页，大概花了我一周半的时间。</p><p><strong>对于英语原版书是看电子版的还是纸质版的，建议还是先看纸质版的</strong><br>作为英语原著初读者，我自己认为还是先看纸质版。看电子版的有个好处就是可以随时查字典，尤其是用kindle看，开启生词提示，并且长按生词就会调出字典查词，非常方便。正是因为太方便了，会让我们产生依赖，有时很容易的单词还会忍不住去查一下字典。而且有时候要往回看情节翻起来也不太方便。虽然有进度显示但是没有纸质书那么直观。纸质书看起来更加有感觉，可以前后翻，有时不记得前面的情节了可以方便的随时翻看，每天看了多少页插个书签就是。看着书签慢慢的插到了最后心里还是满满的成就感。</p><p>对于英语原著初读者来说，撸完一本英文原著，完成从0到1的过程。这种小小的成就感，更加坚定了学习英语的信心。相信经过自己的努力和坚持，看完数十本英文原著以后，英语水平将会有突破性的提高。</p><p>学习外语没有其他任何捷径，唯有“结硬寨,打呆仗;日拱一卒,功不唐捐!”</p><p>我读过的英文读本豆列： <a href="https://www.douban.com/doulist/118432400/" target="_blank" rel="noopener">https://www.douban.com/doulist/118432400/</a></p><p>爱分享读书豆瓣小组： <a href="https://www.douban.com/group/655112/" target="_blank" rel="noopener">https://www.douban.com/group/655112/</a></p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忘掉10000小时，如何快速获得某项技能</title>
      <link href="/posts/10547b72/"/>
      <url>/posts/10547b72/</url>
      
        <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200328/blogimage/%E4%B8%80%E4%B8%87%E5%B0%8F%E6%97%B6%E5%AE%9A%E5%BE%8B.png" alt="一万小时定律"></p><p>几乎每个人都知道1万小时定律，这个定律被人奉为圭臬。给每个渴望成功的同学们指明了方向，只要在某个领域付出不断的努力，达到10000个小时，就可以成为这方面的专家领袖。</p><p>所谓“一万小时定律”，最早出现于作家格拉德威尔《异类》一书。在书中，格拉德威尔举出了例如比尔盖茨这样的例子，言之凿凿的声称：那些天才和专家之所以卓越非凡，并非他们的天赋超人一等，而是他们付出了持续不断的努力。而任何普通人都可以达到这样的目标，只需要付出10000小时的训练即可。</p><p>这个定律非常符合大家的胃口，也有一定的道理，不怀疑在一个方向上持续不断的努力肯定会有所成功。在智力上、知识上、经验上，复利效应对每个人来说都是存在的。知识和能力的习得与积累是有复利效应的。所以，大多数的人应该要相信自己能够通过知识和能力的积累和复利获得成功和成长。</p><p>但是10000小时不是个很短的时间，如果每天投入2个半小时，那要10年才能成为专家。大多数人不用说坚持10000个小时，坚持100个小时还没有入门，就已经倒下放弃了。而对正常人现实需求来说，一万小时是成为顶尖高手的门槛，可遇而不可求。想要获得比较好的收入，能够做出较好的事情，基本上只需要超过平均水平即可。不必凡事都跟行业内最顶尖的几个人相比，但是能够超过一个行业的平均水平，也足够获取比较好的利润、回报和成绩。</p><p>对于任何一件事情、一个行业领域或者是一个学习任务而言也只有先入门了，取得了比较好的利润、回报和成绩，才会有兴趣持续的做下去，才可能有10000小时精进的努力。所以<strong>忘掉10000小时，先快速的入门达到超过行业平均水准，才能继续后面的牛逼</strong>。</p><p>那么问题来了，如何才能快速的入门呢？<br>李笑来的《财富自由之路》里，指出了两个关键字“<strong>最少必要知识</strong>”、”<strong>用</strong>“<br>当需要进入某个行业、获得某项技能的时候，一定要想办法在最短的时间里弄清楚都有哪些最小必要知识，然后迅速的掌握它们。任何人都可以完成快速入门。例如掌握一门外语的最少必要知识有哪些呢？<br>1、认识字母<br>2、认识音标<br>3、会查字典<br>4、懂点基本语法<br>5、会用百度或google等搜索引擎。<br>如果掌握了这些最小必要的知识，你就已经“入门”了，接下了就只剩下所谓“执行”了，也就是要用起来。通过用起来才能从入门到熟练。然后就要专注于改进了。<br>所以快速学习或快速掌握一门技能进入某个行业。无外乎就是快速的掌握最小必要的知识迅速入门，然后通过不断的用起来，在用的过程中不断的实践。逐步从入门到熟练，熟练后就可以专注创新改进而达到精进。</p><p>道理就是这么个道理，但是为什么有些人学什么东西入门就是比你快呢？<br>就是他已有的<strong>背景知识</strong>掌握得比你广、比你好，比如同样是学机器学习，数学系的大概率的要比计算机系的要入门快，计算机系的大概率的要比文科类专业的入门要快。因为学机器学习需要比较强的数学知识背景，虽然入门同样是要掌握那几种常用的算法，数学系的理解起来要比非数学系统理解起来要快得多。</p><p>所以要想快速进入某个行业、获得某项技能，先弄清楚这个行业都需要哪些最小必要知识，评估一下自己的背景知识的匹配度，迅速补齐掌握最小的必要知识，持续的用，不断的改进。实际上当你进入到某个行业实际上就已经补齐完善了你的背景知识。通过不断的学习，背景知识框架体系会越来越广，那你学东西会越来越快。形成一个正向循环。让你越来越牛逼！</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《暗时间》读书笔记</title>
      <link href="/posts/431cf122/"/>
      <url>/posts/431cf122/</url>
      
        <content type="html"><![CDATA[<p>刘未鹏说——</p><p><strong>写博客这件事情给我最大的体会就是，一件事情如果你能够坚持做8年，那么不管效率和频率多低，最终总能取得一些很可观的收益。而另一个体会就是，一件事情只要你坚持得足够久，“坚持”就会慢慢变成“习惯”。原本需要费力去驱动的事情便成了家常便饭，云淡风轻。</strong></p><p>这本书便是从刘未鹏8年的博客文章中精选出来的，主要关于心智模式、学习方法和时间利用，《暗时间》的书名便来自于此。</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200328/blogimage/%E3%80%8A%E6%9A%97%E6%97%B6%E9%97%B4%E3%80%8B.png" alt="《暗时间》"></p><h1 id="第一章-暗时间"><a href="#第一章-暗时间" class="headerlink" title="第一章 暗时间"></a>第一章 暗时间</h1><p>善于利用思维时间的人，可以无形中比别人多出很多时间，从而实际意义上能比别人多活很多年。<br>学习一门专业应该是投入之间和效率的乘积。<br>你可以“投入”很多时间在一件事情上面，却发现毫无进展，因为你没有整天把你要做的事情，要学习的东西常驻在你的大脑中，时刻给予它最高的优先级。<br>如果你有做总结的习惯，你在度过一段时间之后总结自己在某某领域投入了多少时间，建议千万不要粗略地去计算有多少天下班后拿起书来翻看过，因为这样你也许会发现书倒是常翻，但领悟却不见得多深，表面上花的时间不少，收益却不见得那么大。因为<strong>看书并记住书中的东西只是记忆，并没有涉及推理，只有靠推理才能深入理解一个事物，看到别人看都不到的地方，这部分推理的过程就是你的思维时间，也是人一生中占据一个显著比例的“暗时间”</strong>，你走路、买菜、洗脸洗手、坐公车、逛街、出游、吃饭、睡觉，所有这些时间都可以成为“暗时间”，你可以充分利用这些时间进行思考，反刍和消化平时看和读的东西，让你的认识能够脱离照本宣科的层面。</p><h1 id="第二章-设计你自己的进度条"><a href="#第二章-设计你自己的进度条" class="headerlink" title="第二章 设计你自己的进度条"></a>第二章 设计你自己的进度条</h1><p>如果没有进度提示，我们无法判断这个等待什么时候才是个尽头。如果有不断增长的进度条，那么我们对于什么时候会达到100%就会有一个粗略的估计。做事情也是同样的道理，善于规划的人，会将目标分割成一个个的里程碑，再将里程碑分割成TODO列表。<br>过早退出是一切失败的根源。<br>兴趣遍地都是，专注和持之以恒才是真正稀缺的。<br>靠专业技能的成功是最具可复制性的。它需要的只是你在一个领域坚持不懈地专注下午，只需要选择一个不算太靠谱的方向，然后专心致志的专下去，最后必然能成为高手或绝顶高手。<br>反思是让人得以改进自己的最重要的思维品质。<br>一生的知识积累，自学的起码占90%</p><h1 id="第三章-如何有效地记忆与学习"><a href="#第三章-如何有效地记忆与学习" class="headerlink" title="第三章 如何有效地记忆与学习"></a>第三章 如何有效地记忆与学习</h1><p>你所拥有的知识并不取决于你记得多少，而在于它们能否在恰当的时候被回忆起来。<br> 如何有效的总结知识，学以致用<br>1）养成习惯，经常主动回顾一段时间学到的东西。<br>2）创造回忆的机会<br>  2.1）经常与别人讨论，或者讲给别人听。“教是最好的学”<br>  2.2）整理笔记。<br>  2.3）书写。“书写是更好的思考”<br>3）设身处地的“虚拟经历”别人经历过的事情。<br>4）抽象和推广<br>5）联系/比较自身的经历</p><h1 id="第五章-学习习惯"><a href="#第五章-学习习惯" class="headerlink" title="第五章 学习习惯"></a>第五章 学习习惯</h1><h2 id="一、学习与思考"><a href="#一、学习与思考" class="headerlink" title="一、学习与思考"></a>一、学习与思考</h2><p>1、Google&amp;Wiki 遇到问题先上网搜索，自己找答案。<br>2、看书只看经典。<br>3、做读书笔记。便于回顾、加深理解<br>     a.将自己阅读时候的思考总结下来。<br>     b.将书中的好例子摘抄下来。<br>4、无时不可不思考。思考可以避免焦虑。<br>5、要事优先<br>6、重要的事情营造比较大的时间块来完成。<br>7、多看心理学与思维的书。<br>8、学习一项知识三问（a.它的本质是什么。b.它的第一原则是什么。c.它的知识结构是怎样的）<br>9、获得的多少并不取决于读了多少，而取决于思考了多少，多深。<br>10、善于利用小块时间。<br>11、养成好习惯。</p><h2 id="二、时间管理"><a href="#二、时间管理" class="headerlink" title="二、时间管理"></a>二、时间管理</h2><p>1、学习和思考过程中常问自己几个问题<br>    a.你的问题到底是什么？（提醒自己思考不要偏离问题）<br>    b.到现在为止，我到底有了什么收获呢？（提醒自己时不时去总结，整理学习的东西）<br>    c.设想自己正在将东西讲给别人听。<br>    d.时常反省和注意自己的思维过程。（将思维的大致脉络写下来是个很好的习惯）<br>    e.养成反驳自己的想法的习惯。<br>    f.人的思维天生就是极易流于表面来理解事物的。觉得自己理解了一个问题了吗？条件反射的问自己：你真的理解了吗？你真的理解了问题的本质吗？问题的本质到底是什么？目前我的理解是什么？我对这个理解感到满意吗？这样的理解到底有什么建设性呢？等等。<br>2、重视知识的本质<br>3、重视积累的强大力量，万事提前准备。<br>4、抬起头来：时不时抬起头来审视一下自己正在做的事情，自问一下有什么价值，是不是你真正希望做的。它们重要吗？你需要在这个时候学这些吗？你的时间就是你的资源，你投入这些资源来掌握知识，所以到底用来掌握哪些知识是一个很重要的问题。</p><h2 id="三-知识结构"><a href="#三-知识结构" class="headerlink" title="三 知识结构"></a>三 知识结构</h2><p>抓住不变量<br>知识分为essential(必要)和non-essential（非必要）的。对于前者提前深入掌握牢靠，对于后者采取待用到的时刻RTM(Read the manual)方法。</p><h1 id="第八章-书写是为了更好的思考"><a href="#第八章-书写是为了更好的思考" class="headerlink" title="第八章 书写是为了更好的思考"></a>第八章 书写是为了更好的思考</h1><p>1、书写是对思维的备忘<br>2、书写是对思维的缓存<br>3、书写是与自己的对话<br>4、书写是与别人的交流<br>如果你着自己将一些不成熟的想法写下来，看着自己写的内容，试着进一步拓展它们，就有可能在理性的道路上走得很远，很远。</p><h1 id="第九章-为什么你从现在开始就应该写博客"><a href="#第九章-为什么你从现在开始就应该写博客" class="headerlink" title="第九章 为什么你从现在开始就应该写博客"></a>第九章 为什么你从现在开始就应该写博客</h1><p>用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。<br>价值博客的几点好处<br>1、能交到很多志同道合的朋友。<br>2、书写是为了更好的思考<br>3、教是最好的学<br>4、讨论是绝佳的反思<br>5、激励你去持续学习和思考<br>6、学会持之以恒地做一件事情。<br>7、一个长期的价值博客是一份很好的简历。</p><h1 id="第十二章-什么才是你的不可替代性-amp-核心竞争力"><a href="#第十二章-什么才是你的不可替代性-amp-核心竞争力" class="headerlink" title="第十二章 什么才是你的不可替代性&amp;核心竞争力"></a>第十二章 什么才是你的不可替代性&amp;核心竞争力</h1><p>1、专业领域技能：成为一个专业领域的专家，你的专业技能越强，在这个领域的不可替代性就越高。<br>2、跨领域的技能：解决问题的能力，创新思维，判断与决策能力，批判性思维能力，表达沟通能力等等。<br>3、学习能力：持续学习和思考<br>4、性格要素：专注、持之以恒、自信、自省、好奇心。等等。</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你所谓的财富自由是什么？</title>
      <link href="/posts/e3431c21/"/>
      <url>/posts/e3431c21/</url>
      
        <content type="html"><![CDATA[<p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200327/blogimage/%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1.jpg" alt="财富自由"></p><p>实现财富自由是现如今大部分人的理想。不管是加班工作赚钱也好，搞刚需副业也好，还是创业做投资也好都是为了一个目的实现财富自由。有些人早早的就已经实现了财富自由，有些人一辈子也没有实现财富自由，更多的人则是在追求财富自由的路上。</p><p>看过《穷爸爸富爸爸》的人都知道财富自由是指你无须为生活开销而努力为钱工作的状态。简单地说，你的资产生的被动收入必须至少等于或超过你的日常开资–这是我们大多数人向往的状态。这个定义非常清晰，大多数的人都认同这种说法。但是对我来说感触最深的还是李笑来老师在他的《财富自由之路》里面的定义：<strong>“个人财富自由，是指某个人再也不用为了满足生活必须而出售自己的时间了”</strong>。这是多么深刻的认识啊，你加班工作也好，副业也好不都是在出售自己的时间获得财富吗？即使是创业做投资本质上也是在出售自己的时间，是在购买别人的时间再出售出去，只是有可能这样出售自己时间的效率更高而已。</p><p>李笑来老师在对时间的理解、对心智的认识，对学习的认识、对成长的认识，我觉得都非常的深刻。有人说他的书是鸡汤，但是他总是可以用非常浅显深刻的道理让你心甘情愿的干了这碗鸡汤还回味无穷。他的《财富自由之路》就是这么一本书。</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200327/blogimage/%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF.png" alt="《财富自由之路》"></p><p>我们要的自由，其本质不是财富，财富只是工具：我们要的自由，本质上是时间的自主权。所以个人财富自由，是指某个人再也不用为了满足生活必须而出售自己的时间了。</p><p>如何才能让自己财富自由呢？一个世人皆知的道理就是积累和复利。</p><p>爱因斯坦曾经说过：复利是“世界第八大奇迹”。知之者赚，不知之者被赚。但是复利并不是凭空来的，你得现有成本的积累，积累越大复利的效果随着时间的推移效果会越来越显著。</p><p>对于资产投资者来说，如果你的投资收益如果是正的话，你不断的积累复投，若干年后你的财富增长将相当的可观。如果天生有个好爹可以继承财富，那么你起点就比别人高，可以通过财富的复利实现自由。但是大多数人没有爹可以拼，没有大笔财富可以继承。不过万幸并且公平的是，在智力上、知识上、经验上，复利效应对每个人来说都是存在的。知识和能力的习得与积累是有复利效应的。所以，大多数的人应该要相信自己能够通过知识和能力的积累和复利获得成功和成长。</p><p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/20200327/blogimage/%E5%A4%8D%E5%88%A9%E6%9B%B2%E7%BA%BF.png" alt="复利曲线"> </p><p>一切有意义的成长过程都符合那个“复利曲线”。起初看来斜率突然发生变化的“点”，叫做“拐点”。如果作为一个投资者，你的投资是正利率，那么你的资产变化情况也符合这个有拐点、突破了成本线的、后端急速上扬的“复利曲线”。</p><p>如果没有资产可以继承，那就持续积累知识和能力吧。这是大多数人可以成功实现财富自由并且一定能成功的可靠路径。关注成长，而不是成功，因为当你的成长线终于穿越成本线时，你事实上已经成功了，可那肯定不是终点。因为如果你不成长了，有可能这个成长线还会往下掉，将你的成功的成果吞噬。</p><p>既然”复利曲线”那么有效，那为什么还有那么多人在成本线下苦苦挣扎，没有碰到所谓的拐点，更不用说什么财富自由了。这里要注意几个被容易忽视的东西，那就是“<strong>投入方向</strong>”、“<strong>沉没成本</strong>”、“<strong>利润</strong>”，“<strong>贬值</strong>”。</p><ul><li>投入方向</li></ul><p>如果方向有问题，那么你的努力就是南辕北辙，越努力离成功距离越远，那就谈不上什么积累和复利了。比如现在一个行业已经日落西山了要消亡，你还在这个行业傻傻的坚持努力。基本上是不可能成功的。</p><ul><li>沉没成本</li></ul><p>当你选择了一个正确的方向，经过了一段时间的努力，取得了一点小小的成绩，但是你停止了放弃了。在积累和复利之前就投降放弃了，以前的努力付出就成了沉没成本。</p><p>一个切身体会的例子，就是学英语。比如我通过一段时间的努力，看完了149本书虫，但是最近我放松了自己没有看英语了。如果还经过一段时间不坚持不努力，那我以前积累的这些单词什么的又会忘了。以前的努力将会白费了变成了“沉没成本”。</p><p>今天搞搞这个、明天搞搞那个，很多的努力就变成了沉没成本。回头一看，啥都没有积累更谈不上有复利了。所以如果要实现“复利曲线”。坚持和积累非常重要。</p><ul><li>利润</li></ul><p>复利复利，没有利润怎么能复利呢。利润高的复利效果更加明显，这个道理傻瓜都知道。所以说坚持做一件事情要考虑利润，也就是投入产出比。</p><p>比如花大量的时间放在看肥皂剧、刷社交软件上，这些事情不能让你成长或让你的能力提升有限，那对你能力成长产生复利的效果当然有限啊。</p><ul><li>贬值</li></ul><p>作为资本投资来说要考虑货币贬值，作为知识和能力的习得者来说要考虑知识的贬值。大家都知道计算机技术发展速度迅速，很多技术很快随着科技发展迅速的淘汰贬值。比如以前的CGI 、ASP、VB 等开发语言和技术现在都很少用了。那以前花精力学的这些知识都大幅度贬值了。当然有些知识和技能的贬值速度慢一些，比如通识知识、英语、驾驶、写作等。你赚钱的速度要大于你花钱的速度，你的资本才会有所以积累，有积累才有复利的可能。所以你的学习新知识的速度应该要大于知识贬值速度，你的知识和能力才会有积累和复利的可能。</p><p>用正确的方式做正确的事情，你一定会变得更好！</p><p>若长期持续用正确的方法做正确的事情，你的未来一定会很伟大！</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>syslog日志接口调试方法</title>
      <link href="/posts/7bbe2925/"/>
      <url>/posts/7bbe2925/</url>
      
        <content type="html"><![CDATA[<p>日志数据采集，比较方便常用的就是通过syslog来进行数据采集，syslog可以通过udp协议来进行高效的数据传输。一般来说在工程实施的过程中需要对接对端系统的数据采集源可以通过以下步骤来进行syslog日志接口的调试。主要是验证syslog日志是否能正常送到指定的日志服务器的指定端口，日志服务器的指定端口是否能正常收到对端发过来的日志。</p><h1 id="1、检查双方网络是否通畅"><a href="#1、检查双方网络是否通畅" class="headerlink" title="1、检查双方网络是否通畅"></a>1、检查双方网络是否通畅</h1><p>网络通畅是所有网络连接的前提条件，可以先通过ping的方式，先确认一下对端数据源是不是可以ping通这边的日志接收服务器地址，看网络是否是通的。<br>一般来说只到对端能够ping通日志服务器地址就可以了，单向ping通就OK。<br>如果ping不通，那就要检查日志服务器的网络设置，如是否开启了防火墙，禁ping了。根据网络实际情况调整网络策略，确保网络是通的。</p><h1 id="2、检查端口是否通畅"><a href="#2、检查端口是否通畅" class="headerlink" title="2、检查端口是否通畅"></a>2、检查端口是否通畅</h1><p>通过数据源服务器telnet一下日志服务器地址和端口，看端口是不是通的。<br>有很多服务器上可能没有装telnet，也可以用ssh ip 端口  来验证一下。</p><h1 id="3、发送简单的报文测试"><a href="#3、发送简单的报文测试" class="headerlink" title="3、发送简单的报文测试"></a>3、发送简单的报文测试</h1><p>在对端通过发送udp报文来进行简单的测试<br>如日志接收服务器地址是172.28.65.32，端口514 则可以通过<code>echo “hello” &gt; /dev/udp/172.28.65.32/514</code> 来发送测试报文<br>在日志接收服务器用tcpdump收下有没有监听到报文过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump udp port 514 -A -i any</span><br></pre></td></tr></table></figure><p>如果有就会有相应的显示<br><img src="https://img-blog.csdnimg.cn/20200318100042259.png" alt="tcpdump"></p><h1 id="4、进行正式接口对接"><a href="#4、进行正式接口对接" class="headerlink" title="4、进行正式接口对接"></a>4、进行正式接口对接</h1><p>如果tcpdump可以收到日志，那就说明syslog的通信是没有问题的，接下来就可以进行具体的syslog的配置的调测了。</p><hr><p>作者博客:<a href="http://xiejava.gitee.io">http://xiejava.gitee.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> syslog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash集成kafka，mysql实现数据采集</title>
      <link href="/posts/54e4fd14/"/>
      <url>/posts/54e4fd14/</url>
      
        <content type="html"><![CDATA[<p>logstash是一个非常灵活好用的数据采集框架工具，可以通过简单的配置满足绝大多数数据采集场景的需求。<br>采集数据一个非常典型的场景就是将数据先放到kafka队列里削峰，然后从kafka队列里读取数据到mysql或其他存储系统中进行保存。<br><img src="https://img-blog.csdnimg.cn/20200316171007439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="从syslog采集日志到kafka然后在从kafka写到mysql数据库中"><br>本文通过一个简单的示例来演示从syslog采集日志到kafka然后在从kafka写到mysql数据库中。<br>默认已经安装好了kafka、mysql、logstash，并已经经过简单的验证。</p><h1 id="准备logstash的环境"><a href="#准备logstash的环境" class="headerlink" title="准备logstash的环境"></a>准备logstash的环境</h1><h2 id="一、下载mysql的jdbc驱动包"><a href="#一、下载mysql的jdbc驱动包" class="headerlink" title="一、下载mysql的jdbc驱动包"></a>一、下载mysql的jdbc驱动包</h2><p>下载地址：<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java/8.0.15" target="_blank" rel="noopener">https://mvnrepository.com/artifact/mysql/mysql-connector-java/8.0.15</a><br>下载后放到logstash的安装目录的/vendor/jar/目录下</p><h2 id="二、安装logstash插件"><a href="#二、安装logstash插件" class="headerlink" title="二、安装logstash插件"></a>二、安装logstash插件</h2><p>logstash默认安装了kafka插件，但是mysql插件没有默认安装需要自己安装。<br>具体安装方法 /bin/logstash-plugin install logstash-output-jdbc ，这里应为要用到logstash写入mysql数据库，所以安装的插件是logstash-output-jdbc，如果要用到从mysql读数据，那么就要安装logstash-input-jdbc。安装方法类似。<br>因为安装时需要访问国外的源，安装进度很慢很慢，还经常安装不成功，所以需要更改国内的源。<br>也就是给 Ruby 换成国内的镜像站：<a href="https://gems.ruby-china.com/，替代https://rubygems.org。*请注意：国内的镜像站从https://gems.ruby-china.org" target="_blank" rel="noopener">https://gems.ruby-china.com/，替代https://rubygems.org。*请注意：国内的镜像站从https://gems.ruby-china.org</a> 换成了 <a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a> ！！！* 现在很多网上的资料就都是写的<a href="https://gems.ruby-china.org，导致很多人换了镜像源也装不上。" target="_blank" rel="noopener">https://gems.ruby-china.org，导致很多人换了镜像源也装不上。</a><br>具体方法如下：</p><h3 id="1-安装Gem并更新"><a href="#1-安装Gem并更新" class="headerlink" title="1. 安装Gem并更新"></a>1. 安装Gem并更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y gem</span></span><br><span class="line"><span class="comment"># gem -v</span></span><br><span class="line">2.0.14.1</span><br><span class="line"><span class="comment"># gem update --system</span></span><br><span class="line"><span class="comment"># gem -v</span></span><br><span class="line">2.7.7</span><br></pre></td></tr></table></figure><h3 id="2-检查并修改镜像源"><a href="#2-检查并修改镜像源" class="headerlink" title="2. 检查并修改镜像源"></a>2. 检查并修改镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem sources -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"> </span><br><span class="line">https://rubygems.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span></span><br><span class="line">https://gems.ruby-china.org/ added to sources</span><br><span class="line">https://rubygems.org/ removed from sources</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat ~/.gemrc </span></span><br><span class="line">---</span><br><span class="line">:backtrace: <span class="literal">false</span></span><br><span class="line">:bulk_threshold: 1000</span><br><span class="line">:sources:</span><br><span class="line">- https://gems.ruby-china.org/</span><br><span class="line">:update_sources: <span class="literal">true</span></span><br><span class="line">:verbose: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><em>请注意：国内的镜像站从<a href="https://gems.ruby-china.org" target="_blank" rel="noopener">https://gems.ruby-china.org</a> 换成了 <a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a> ！！！现在很多网上的资料就都是写的<a href="https://gems.ruby-china.org，导致很多人换了镜像源也装不上。" target="_blank" rel="noopener">https://gems.ruby-china.org，导致很多人换了镜像源也装不上。</a></em></p><h3 id="3-修改-logstash的-gem-镜像源"><a href="#3-修改-logstash的-gem-镜像源" class="headerlink" title="3. 修改 logstash的 gem 镜像源"></a>3. 修改 logstash的 gem 镜像源</h3><p>cd到logstach的安装目录，可以看到Gemfile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi Gemfile</span></span><br><span class="line"><span class="comment"># This is a Logstash generated Gemfile.</span></span><br><span class="line"><span class="comment"># If you modify this file manually all comments and formatting will be lost.</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">source</span> <span class="string">"https://rubygems.org"</span></span><br><span class="line">gem <span class="string">"logstash-core"</span>, :path =&gt; <span class="string">"./logstash-core"</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>更改默认的 <a href="https://rubygems.org" target="_blank" rel="noopener">https://rubygems.org</a> 为<a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a><br><img src="https://img-blog.csdnimg.cn/20200316171241910.png" alt="更换国内镜像源地址"></p><h3 id="4-安装-logstash-output-jdbc"><a href="#4-安装-logstash-output-jdbc" class="headerlink" title="4. 安装 logstash-output-jdbc"></a>4. 安装 logstash-output-jdbc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/logstash-plugin install logstash-output-jdbc</span></span><br><span class="line">Validating logstash-output-jdbc</span><br><span class="line">Installing logstash-output-jdbc</span><br><span class="line">Installation successful</span><br></pre></td></tr></table></figure><h3 id="5-查看插件是否安装成功"><a href="#5-查看插件是否安装成功" class="headerlink" title="5.查看插件是否安装成功"></a>5.查看插件是否安装成功</h3><p>在logstash的bin目录下执行./logstash-plugin list 可以查看已经安装的插件，可以看到logstash-output-jdbc的插件已经装好。<br><img src="https://img-blog.csdnimg.cn/20200316171324491.png" alt="检查插件安装"></p><h1 id="配置logstash"><a href="#配置logstash" class="headerlink" title="配置logstash"></a>配置logstash</h1><p>新建一个pipline.conf的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="built_in">test</span>-pipeline.conf</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin&#123;            #用于测试标准控制台输入的数据</span><br><span class="line">      type =&gt; <span class="string">"test-log"</span></span><br><span class="line">    &#125;</span><br><span class="line">    syslog&#123;           #用于接收来自syslog的日志</span><br><span class="line">        type =&gt; <span class="string">"test-log"</span></span><br><span class="line">        port =&gt; <span class="number">514</span></span><br><span class="line">    &#125;</span><br><span class="line">    kafka &#123;</span><br><span class="line">       bootstrap_servers =&gt; "172.28.65.26:9092" #kafka服务器地址</span><br><span class="line">       topics =&gt; "test1"           #kafka订阅的topic主题</span><br><span class="line">       codec =&gt; "json" #写入的时候使用json编码，因为logstash收集后会转换成json格式</span><br><span class="line">       consumer_threads =&gt; <span class="number">1</span></span><br><span class="line">       decorate_events =&gt; <span class="literal">true</span></span><br><span class="line">       add_field =&gt; &#123;</span><br><span class="line">             <span class="string">"logsource"</span> =&gt; <span class="string">"kafkalog"</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([type]==<span class="string">"test-log"</span> and <span class="string">"kafkalog"</span> not <span class="keyword">in</span> [logsource]) &#123;</span><br><span class="line">       kafka &#123;</span><br><span class="line">            codec =&gt; json</span><br><span class="line">            topic_id =&gt; <span class="string">"test1"</span></span><br><span class="line">            bootstrap_servers =&gt; <span class="string">"172.28.65.26:9092"</span></span><br><span class="line">            batch_size =&gt; <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([type] == <span class="string">"test-log"</span> and <span class="string">"kafkalog"</span> <span class="keyword">in</span> [logsource]) &#123;</span><br><span class="line">        jdbc &#123;</span><br><span class="line">            driver_jar_path =&gt; <span class="string">"/opt/elk/logstash-7.6.0/vendor/jar/jdbc/mysql-connector-java-8.0.15.jar"</span></span><br><span class="line">            driver_class =&gt; <span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">            connection_string =&gt; <span class="string">"jdbc:mysql://172.28.65.32:3306/testdb?user=yourdbuser&amp;password=yourpassword"</span></span><br><span class="line">            statement =&gt; [ <span class="string">"INSERT INTO test_nginx_log (message) VALUES(?)"</span>, <span class="string">"message"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stdout &#123;</span><br><span class="line">       codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个逻辑就是从stdin或syslog接收数据output到kafka,然后从kafka中取出数据加入了一个logsource的字标识是从kafka过来的数据，然后又output到 jdbc写到mysql中去。<br>如果没有这几个if的逻辑判断，那么就会是个死循环。从kafka读同样的数据又写到kafka中。如果在两台机器上装有logstash一台取数据放到kafka,一台从kafka中取数据放到mysql中就可以不用加这样的判断逻辑会单纯简单一些。</p><h1 id="执行logstash并查看效果"><a href="#执行logstash并查看效果" class="headerlink" title="执行logstash并查看效果"></a>执行logstash并查看效果</h1><p>通过在logstash安装目录下执行 bin/logstash -f test-pipeline.conf –config.test_and_exit 检查配置文件是否有问题，没有问题以后执行bin/logstash -f test-pipeline.conf –config.reload.automatic 运行logstash。<br>在控制台输入 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a <span class="built_in">test</span>!</span><br></pre></td></tr></table></figure><p><strong>效果：</strong><br>从控制台输入信息，可以看到从stdin输入output到stdout的没有logsource标识，input从kafka订阅过来的信息加了一个logsource=&gt;kafkalog的标识。<br><img src="https://img-blog.csdnimg.cn/20200316171423390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logsource=&gt;kafkalog的标识"><br>用kafka tool工具看到kafka收到了从stdin发过来的信息。<br><img src="https://img-blog.csdnimg.cn/20200316171453670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="用kafka tool工具看到kafka收到了从stdin发过来的信息"><br>在看MySQL表里的数据，已经通过logstash从kafka中将数据采集到了MySQL的表中。<br><img src="https://img-blog.csdnimg.cn/20200316171523708.png" alt="MySQL的表的信息数据"><br>再来看从syslog采集日志的效果<br>从控制台看到的信息效果<br><img src="https://img-blog.csdnimg.cn/20200316171552633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="控制台看到的信息效果"><br>从kafka tool看到的效果<br><img src="https://img-blog.csdnimg.cn/20200316171613337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="kafka tool看到的效果"><br>从mysql 表中看到的效果。<br><img src="https://img-blog.csdnimg.cn/20200316171630325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="mysql 表中看到的效果"><br><strong>可以看到，logstash是一个非常灵活好用的数据采集框架工具，可以通过简单的配置就能满足绝大多数数据采集场景的需求。</strong></p><hr><p>作者博客:<a href="http://xiejava.gitee.io">http://xiejava.gitee.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Hexo博客模板hexo-theme-next的翻页按钮不正常显示问题</title>
      <link href="/posts/272f3054/"/>
      <url>/posts/272f3054/</url>
      
        <content type="html"><![CDATA[<p>用Hexo搭了个Gitpage的博客，兴冲冲的发了11篇博文后发现翻页按钮不正常显示，显示为<code>&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</code>的HTML编码。如下图：<br><img src="https://img-blog.csdnimg.cn/20200310154450109.png" alt="HTML编码"><br><code>&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</code>这是个什么鬼？<br>这是一个Font Awesome的字体图标，按道理来说这个图标应该可以正常显示的，现在这个图标不能显示了显示成了html源码。<br><img src="https://img-blog.csdnimg.cn/20200310154516827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="Font Awesone图标"><br><strong>解决办法:</strong><br>最简单的办法就是将<code>&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</code>这个不能正常显示的字体图标改成一般的字符，我这里就是改成正常的一般左右键字符“&gt;”，“&lt;”。<br>在 themes\hexo-theme-next\layout_partials 下找到hexo-theme-next的翻页组件，就是pagination.swig<br>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#39;&lt;i class&#x3D;&quot;fa fa-angle-left&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">        next_text: &#39;&lt;i class&#x3D;&quot;fa fa-angle-right&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;&#x2F;nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#39;&lt;&#39;,</span><br><span class="line">        next_text: &#39;&gt;&#39;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;&#x2F;nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>重新发布以后可以看到翻页按钮可以正常显示了<br><img src="https://img-blog.csdnimg.cn/20200310154621131.png" alt="正常显示箭头"></p><hr><p>作者博客:<a href="http://xiejava.gitee.io">http://xiejava.gitee.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过filebeat、logstash、rsyslog采集nginx日志的几种方式</title>
      <link href="/posts/f3e97829/"/>
      <url>/posts/f3e97829/</url>
      
        <content type="html"><![CDATA[<p>由于nginx功能强大，性能突出，越来越多的web应用采用nginx作为http和反向代理的web服务器。而nginx的访问日志不管是做用户行为分析还是安全分析都是非常重要的数据源之一。如何有效便捷的采集nginx的日志进行有效的分析成为大家关注的问题。本文通过几个实例来介绍如何通过filebeat、logstash、rsyslog采集nginx的访问日志和错误日志。</p><p>大家都知道ELK技术栈是采集、分析日志的利器。所以这里介绍的是从nginx采集日志到ES。当然至于日志采集以后存到看大家的需要。通过logstash可以方便的配置日志输出存储的方式。</p><p>一般来说nginx默认安装后，日志文件在 /usr/local/nginx/logs 目录下。分别有 access.log和error.log 访问日志和错误日志。<br>这次示例Elasitcsearch是三个节点组成的集群172.28.65.22、172.28.65.23、172.28.65.24，172.28.65.30 是kibana的地址，172.28.65.32是数据采集服务器，上面装有logstash、nginx、 filebeat。一般来说采集服务器上有logstash，而nginx、 filebeat应该是装在采集目标上。</p><h2 id="一、直接通过filebeat采集日志到ES"><a href="#一、直接通过filebeat采集日志到ES" class="headerlink" title="一、直接通过filebeat采集日志到ES"></a>一、直接通过filebeat采集日志到ES</h2><p><img src="https://img-blog.csdnimg.cn/20200309222757224.png" alt="filebeat到ES"><br>在filebeat的安装目录找到filebeat.yml 配置获取日志文件的路径及输出到ES的配置。<br> 具体：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- type: log</span><br><span class="line">  <span class="comment"># Change to true to enable this input configuration.</span></span><br><span class="line">  enabled: true</span><br><span class="line">  <span class="comment"># Paths that should be crawled and fetched. Glob based paths.</span></span><br><span class="line">  paths:</span><br><span class="line">    <span class="comment">#- /var/log/*.log</span></span><br><span class="line">    - /usr/local/nginx/logs/*.log</span><br><span class="line">    <span class="comment">#- c:\programdata\elasticsearch\logs\*</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200309222853340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="filebeat.yml配置"><br>如果需要在kibana中友好显示的化，可进行kibana配置<br><img src="https://img-blog.csdnimg.cn/20200309222955878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="kibana配置"><br>输出到es中，在hosts中配置好你的ES服务地址。如果单机只有一个节点，就可以只配一个ip和端口。<br><img src="https://img-blog.csdnimg.cn/20200309223104639.png" alt="filebeat.yml配置中配置es"><br>启动filebeat 进行日志数据采集</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat <span class="literal">-e</span> <span class="literal">-c</span> filebeat.yml <span class="literal">-d</span> <span class="string">"publish"</span></span><br></pre></td></tr></table></figure><p>通过elasticsearch-head插件查看es索引中的日志信息<br><img src="https://img-blog.csdnimg.cn/20200309223159337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="elasticsearch-head插件查看es索引"><br>可以看到nginx中的access.log和error.log的日志都已经上来了。<br>在kibana中通过filebeat-*过滤看filebeat的索引，可以看到通过filebeat采过来的数据。</p><p><img src="https://img-blog.csdnimg.cn/20200309223308928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="kibana中通过filebeat-*过滤看filebeat的索引"><br>这种直接通过filebeat直接对接ES采日志的方式简单直接，但是无法对采集的日志进行预处理和其他一些操作，也不够灵活。<br>可以在filebeat 和 ES之间加一层Logstash，可以将filebeat于ES解耦，通过Logstash可以做一些预处理，也可以通过Logstash采集到除ES以外的其他数据存储上。</p><h2 id="二、通过filebeat采集日志到logstash再送到ES"><a href="#二、通过filebeat采集日志到logstash再送到ES" class="headerlink" title="二、通过filebeat采集日志到logstash再送到ES"></a>二、通过filebeat采集日志到logstash再送到ES</h2><p><img src="https://img-blog.csdnimg.cn/20200309223343261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="通过filebeat采集日志到logstash再送到ES"><br>首先得安装 logstash ，安装完后在logstash的安装目录下新建vi filebeat-pipeline.conf<br>filebeat-pipeline.conf的具体配置如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; <span class="string">"5044"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123; hosts =&gt; [<span class="string">"172.28.65.24:9200"</span>] &#125;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input配置表示通过5044端口接收beats的数据<br>output配置表示输出到elasticsearch，并且同时输出到标准输出也就是控制台。<br>然后通过命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash <span class="operator">-f</span> filebeat<span class="literal">-pipeline</span>.conf -<span class="literal">-config</span>.reload.automatic</span><br></pre></td></tr></table></figure><p>应用filebeat-pipeline.conf启动logstash。<br><img src="https://img-blog.csdnimg.cn/20200309223435991.png" alt="应用filebeat-pipeline.conf启动logstash"><br>启动以后可以看到logstash的启动日志5044端口的服务已经起了，可以接受通过filebeat通过5044端口传过来的数据了。<br>接下来配置filebeat<br>在filebeat的安装目录找到filebeat.yml 配置获取日志文件的路径及输出到logstash的配置。不直接输出到ES了。<br>具体配置如下：<br>将output.elasticsearch的配置屏蔽<br>配置output.logstash，配置正确的logstash的服务主机和端口<br><img src="https://img-blog.csdnimg.cn/20200309223511426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="配置output.logstash"><br>启动filebeat 进行日志数据采集</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat <span class="literal">-e</span> <span class="literal">-c</span> filebeat.yml <span class="literal">-d</span> <span class="string">"publish"</span></span><br></pre></td></tr></table></figure><p>我们访问nginx服务提供的web服务<a href="http://172.28.65.32/" target="_blank" rel="noopener">http://172.28.65.32/</a><br>在logstash的控制台 可以看到相应的访问access.log 日志<br><img src="https://img-blog.csdnimg.cn/20200309223557623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash的控制台 可以看到相应的访问access.log 日志"><br>同时在ES 中也可以看到有相应的日志数据<br><img src="https://img-blog.csdnimg.cn/20200309223625788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="在ES 中也可以看到有相应的日志数据"></p><h2 id="三、直接通过rsyslog采集日志到logstash在送到ES"><a href="#三、直接通过rsyslog采集日志到logstash在送到ES" class="headerlink" title="三、直接通过rsyslog采集日志到logstash在送到ES"></a>三、直接通过rsyslog采集日志到logstash在送到ES</h2><p>在很多情况下你需要采集的web服务器并不是自己能够控制的，不是说你想装filebeat就可以让你装的，这时候就可以要求目标数据源通过 syslog  的方式将日志发出来。我们可以再通过 logstash送到ES或其他的日志存储处理平台。<br><img src="https://img-blog.csdnimg.cn/2020030922365724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="直接通过rsyslog采集日志到logstash在送到ES"><br>通过syslog往日志服务器上发nginx的日志有两种方式，一种就是利用nginx的配置往外发日志，一种就是通过配置linux的rsyslog的配置往外发日志。</p><h3 id="通过nginx配置发送syslog到logstash"><a href="#通过nginx配置发送syslog到logstash" class="headerlink" title="通过nginx配置发送syslog到logstash"></a>通过nginx配置发送syslog到logstash</h3><p>参考见nginx官方文档：<a href="http://nginx.org/en/docs/syslog.html" target="_blank" rel="noopener">http://nginx.org/en/docs/syslog.html</a><br>具体配置如下：<br>在nginx的配置文件nginx.conf中<br>在server下配置access_log和error_log的输出方式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log syslog:server=<span class="number">172.28</span>.<span class="number">65.32</span>:<span class="number">514</span>,facility=local7,tag=nginx_access_log,severity=info;</span><br><span class="line">error_log syslog:server=<span class="number">172.28</span>.<span class="number">65.32</span>:<span class="number">514</span>,facility=local7,tag=nginx_error_log,severity=info;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020030922391711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="nginx.conf配置"><br>配置完成后执行 <code>./nginx -s reload</code> 使配置生效。这样就通过linux的rsyslog服务将nginx的日志往外发了。<br>接着来配置logstash的syslog的服务接收配置 。在logstash的安装目录下新建<code>vi syslog-pipeline.conf</code><br>syslog-pipeline.conf的具体配置如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    syslog&#123;</span><br><span class="line">        type =&gt; <span class="string">"system-syslog"</span></span><br><span class="line">        port =&gt; <span class="number">514</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [<span class="string">"172.28.65.24:9200"</span>]</span><br><span class="line">        index =&gt; <span class="string">"system-syslog-%&#123;+YYYY.MM&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input配置表示通过514端口接收syslog的数据<br>output配置表示输出到elasticsearch，并且同时输出到标准输出也就是控制台。<br>通过执行 <code>bin/logstash -f syslog-pipeline.conf --config.reload.automatic</code> 启动logstash<br><img src="https://img-blog.csdnimg.cn/20200309224021167.png" alt="可以看到logstash启动以后开启了514端口的tcp和upd协议的侦听"><br>可以看到logstash启动以后开启了514端口的tcp和upd协议的侦听。<br>我们访问nginx服务提供的web服务<a href="http://172.28.65.32/" target="_blank" rel="noopener">http://172.28.65.32/</a><br>在logstash的控制台 可以看到相应的nginx访问access和error的日志<br><img src="https://img-blog.csdnimg.cn/20200309224058280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash的控制台可以看到相应的nginx访问access和error的日志"><br>同样通过Elasticsearch-head在ES 中也可以看到有相应的日志数据<br><img src="https://img-blog.csdnimg.cn/20200309224153318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="通过Elasticsearch-head在ES 中也可以看到有相应的日志"></p><h3 id="通过配置rsyslog发送syslog日志到logstash"><a href="#通过配置rsyslog发送syslog日志到logstash" class="headerlink" title="通过配置rsyslog发送syslog日志到logstash"></a>通过配置rsyslog发送syslog日志到logstash</h3><p>有些老版本的nginx不支持配置syslog输出日志，或者说我想输出其他不是nginx的日志该怎么办呢？可以通过直接配置rsyslog的方式来往外发送日志。<br>在/etc/rsyslog.conf 中配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$IncludeConfig</span> /etc/rsyslog.d/*.conf</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200309224226484.png" alt="/etc/rsyslog.conf"><br>意思是可以引用外部的配置文件，引用外部的配置文件一方面可以不影响主配置文件，另一方面也比较好管理<br>在/etc/rsyslog.d目录下新建nginx-log.conf<br>配置如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ModLoad</span> imfile</span><br><span class="line"><span class="variable">$InputFilePollInterval</span> <span class="number">1</span></span><br><span class="line"><span class="variable">$WorkDirectory</span> /var/spool/rsyslog</span><br><span class="line"><span class="variable">$PrivDropToGroup</span> adm</span><br><span class="line"></span><br><span class="line"><span class="comment">##Nginx访问日志文件路径，根据实际情况修改:</span></span><br><span class="line"><span class="variable">$InputFileName</span> /usr/local/nginx/logs/access.log</span><br><span class="line"><span class="variable">$InputFileTag</span> nginx<span class="literal">-access</span>:</span><br><span class="line"><span class="variable">$InputFileStateFile</span> stat<span class="literal">-nginx</span><span class="literal">-access</span></span><br><span class="line"><span class="variable">$InputFileSeverity</span> info</span><br><span class="line"><span class="variable">$InputFilePersistStateInterval</span> <span class="number">25000</span></span><br><span class="line"><span class="variable">$InputRunFileMonitor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##Nginx错误日志文件路径，根据实际情况修改:</span></span><br><span class="line"><span class="variable">$InputFileName</span> /usr/local/nginx/logs/error.log</span><br><span class="line"><span class="variable">$InputFileTag</span> nginx<span class="literal">-error</span>:</span><br><span class="line"><span class="variable">$InputFileStateFile</span> stat<span class="literal">-nginx</span><span class="literal">-error</span></span><br><span class="line"><span class="variable">$InputFileSeverity</span> error</span><br><span class="line"><span class="variable">$InputFilePersistStateInterval</span> <span class="number">25000</span></span><br><span class="line"><span class="variable">$InputRunFileMonitor</span></span><br><span class="line"></span><br><span class="line">*.* @<span class="number">172.28</span>.<span class="number">65</span>:<span class="number">514</span></span><br></pre></td></tr></table></figure><p>配置好了以后，重启rsyslog服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rsyslog</span><br></pre></td></tr></table></figure><p>我们访问nginx服务提供的web服务<a href="http://172.28.65.32/" target="_blank" rel="noopener">http://172.28.65.32/</a><br>在logstash的控制台 可以看到同样的效果。<br><img src="https://img-blog.csdnimg.cn/20200309224257449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="logstash的控制台"></p><p>本文介绍了如何通过filebeat、logstash、rsyslog采集nginx的访问日志和错误日志的几种方式，具体需要根据实际情况灵活的运用。</p><hr><p>作者博客:<a href="http://xiejava.gitee.io">http://xiejava.gitee.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析SIEM、态势感知平台、安全运营中心</title>
      <link href="/posts/e29f28e5/"/>
      <url>/posts/e29f28e5/</url>
      
        <content type="html"><![CDATA[<p>近年来SIEM、态势感知平台、安全运营中心等概念炒的火热，有的人认为这都是安全管理产品，这些产品就是一回事，有人认为还是有所区分。那么到底什么是SIEM、什么是态势感知平台、什么是安全运营中心，他们之间有什么联系和区别呢？</p><h1 id="一、SIEM"><a href="#一、SIEM" class="headerlink" title="一、SIEM"></a>一、SIEM</h1><p>SIEM英文是security information and event managemen安全信息和事件管理<br>SIEM是一个由多个监视和分析组件组成的安全系统，旨在帮助组织检测和减轻威胁<br>一款典型的SIEM产品是将许多其他安全规则和工具结合在一个综合的框架下形成的一个合集。<br>典型的包括以下模块<br>日志管理(LMS)——用于传统日志收集和存储的工具。<br>安全信息管理(SIM)——集中于从多个数据源收集和管理与安全相关的数据的工具或系统。例如，这些数据源可以是防火墙、DNS服务器、路由器和防病毒应用程序。<br>安全事件管理(SEM)——基于主动监视和分析的系统，包括数据可视化、事件相关性和警报<br>大多数的SIEM包括以下元素<br><strong>1、安全数据采集</strong><br>主要是基于安全日志数据，日志表示在数字环境中运行的进程的原始输出，是提供实时发生的事情的准确图像的最佳来源，因此是SIEM系统的主要数据源。无论是防火墙日志、服务器日志、数据库日志，还是在实际网络环境中生成的任何其他类型的日志，SIEM系统都能够收集这些数据并将其存储在一个中心位置以进行扩展的保留。此采集过程通常由代理或应用程序执行，部署在监视的系统上，并配置为将数据转发到SIEM系统的中央数据存储。<br><strong>2、安全数据解析处理和标准化</strong><br>为了能够跨不同源和事件相关性高效地解释数据，SIEM系统能够规范化日志。这个规范化过程包括将日志处理为可读的结构化格式，从日志中提取重要数据，并映射日志中包含的不同字段。<br><strong>3、安全数据集中存储</strong><br>安全信息数据存储的目地当然是为了利用数据进行管理分析发现安全事件。<br><strong>4、安全数据分析</strong><br>一旦收集、解析和存储，SIEM系统中的下一步将负责连接这些点并关联来自不同数据源的事件。这种关联工作基于各种SIEM工具提供的规则、为不同的攻击场景预定义的规则，或者由分析人员创建和调整的规则。大多数SIEM系统还提供生成报告的内置机制。这些报告可以用于管理、审计或合规性原因。例如，可以将详细描述触发警报或规则的每日报告嵌入到仪表板中。<br><strong>5、安全数据呈现</strong><br>可视化数据和事件的能力是SIEM系统中的另一个关键组件，因为它允许分析人员方便地查看数据。包含多个可视化或视图的仪表板有助于识别趋势、异常情况，并监控环境的总体健康或安全状态。一些SIEM工具将附带预先制作的仪表板，而另一些工具将允许用户创建和调整自己的仪表板。<br>基于目前海量的安全信息数据，<strong>大数据架构已经成为主流</strong>。并不是说SIEM必须使用大数据架构，因为这是一个应用场景问题而非技术问题。但面对大量数据需要处理的场景时，基于大数据架构的SIEM则必不可少。所以有些厂商提出了SDC（security data center）安全大数据中心的概念就是把所有的安全数据集中管理起来，在SDC的基础上构建安全数据分析和展现能力，形成SIEM平台。</p><p>目前成熟的SIEM产品有很多，开源的有OSSIM、Elastic SIEM、Opensoc<br>OSSIM是SIEM的代表性产品，在产品形式上和Kali类似是一个基于Debain进行二次开发的Linux发行版，当前5.6.5版本基于Dibian 8（jessie）。<br>OSSIM使用Nmap等实现资产发现、使用Nessus等实现漏洞扫描、使用Snort等实现入侵检测、使用MySQL等进行数据存储，自己实现的部分主要是工具、数据整合和可视化展示。ossim存储架构是mysql，支持多种日志格式，包括鼎鼎大名的Snort、Nmap、 Nessus以及Ntop等，对于数据规模不大的情况是个不错的选择，新版界面很酷炫<br>从架构上来看，OSSIM系统是一个开放的框架，它的核心价值在于创新的集成各开源软件之所长，它里面的模块既有C/S架构，又有B/S架构，但作为最终用户主要掌握OSSIM WebUI主要采用B/S架构，Web服务器使用Apache。OSSIM系统结构示意图如下图所示。<br><img src="https://img-blog.csdnimg.cn/20200302211541393.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第1层，属于数据采集层，使用各种采集技术采集流量信息、日志、各种资产信息，经过归一化处理后传入核心层。改层体现安全事件来源，入侵检测、防火墙、重要主机发出的日志都是安全事件来源，它们按发出机制分为两类：模式侦查器和异常监控（两者都采集警告信息，功能互补）由它们采集的安全事件，再被Agent转换为统一的格式发到OSSIM服务器，这一层就是Sensor要完成的内容。<br>第2层，属于核心处理层，主要实现对各种数据的深入加工处理，包括运行监控、安全分析、策略管理、风险评估、关联分析、安全对象管理、脆弱性管理、事件管理、报表管理等。该层中OSSIM Server是主角，OSSIM服务器，主要功能是安全事件的集中并对集中后的事件进行关联分析、风险评估及严重性标注等。所谓的集中就是以一种统一格式组织所有系统产生的安全事件告警信息（Alarms）并将所有的网络安全事件告警存储到数据库，这样就完成了对网络中所产生事件的一个庞大视图。系统通过事件序列关联和启发式算法关联来更好的识别误报和侦查攻击的能力。<br>OSSIM本质上通过对各种探测器和监控产生的告警进行格式化处理，再进行关联分析，通过后期这些处理能提高检测性能，即减少告警数量，减小关联引擎的压力，从整体上提高告警质量。<br>第3层，属于数据展现层，主要负责完成与用户之间的交互，达到安全预警和事件监控、安全运行监控、综合分析的统一展示，形式上以图形化方式展示给用户。Web框架(Framework)控制台界面即OSSIM的Web UI（Web User Interface，Web用户界面），其实就是OSSIM系统对外的门户站点，它主要由仪表盘、SIEM控制台、Alarm控制台、资产漏洞扫描管理、可靠性监控、报表及系统策略等部分组成。<br>OSSIM主要模块的关系<br>OSSIM系统主要使用了PHP、Python、Perl和C等四种编程语言，从软件层面上看OSSIM框架系统包括五大模块：Agent模块、Server模块、Database数据库模块、Frameworkd模块以及Framework模块，逻辑结构如图所示。<br><img src="https://img-blog.csdnimg.cn/20200302213041778.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Elastic SIEM 的核心是全新的 SIEM 应用，此应用是安全团队的交互式工作空间，可允许他们对事件进行分类并开展初期调查。其中包括的时间线事件查看器 (Timeline Event Viewer) 能够允许分析师收集和存储攻击证据，固定相关活动并添加注释，以及添加评论并分享他们的发现，而且这一切在 Kibana 中即可完成；这样一来，您便能够轻松处理符合 ECS 格式的任何数据了。<br><img src="https://img-blog.csdnimg.cn/20200302213101396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">Opensoc是思科2014年在BroCon大会上公布的开源项目，但是没有真正开源其源代码，只是发布了其技术框架。可以参考Opensoc发布的架构，结合实际落地SIEM的方案。Opensoc完全基于开源的大数据框架kafka、storm、spark和es等，天生具有强大的横向扩展能力<br><img src="https://img-blog.csdnimg.cn/20200302213127295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>所以从SIEM的定义和功能来看有两个核心能力，一个是安全信息数据的采集汇聚能力，一个就是安全事件的分析能力。</strong></p><h1 id="二、安全态势感知平台"><a href="#二、安全态势感知平台" class="headerlink" title="二、安全态势感知平台"></a>二、安全态势感知平台</h1><p>“态势感知”早在 20 世纪 80 年代由美国空军提出，其包含感知、理解和预测三个层次。截止目前，业界对网络安全态势感知还没有一个统一全面的定义，基于美国Endsley 博士的理论对网络安全态势感知做出的定义：“网络安全态势感知是综合分析网络安全要素，评估网络安全状况，预测其发展趋势，并以可视化的方式展现给用户，并给出相应的报表和应对措施。”<br>什么是态势感知平台，大家都认为应该是利用大数据、机器学习等技术对态势感知态势海量数据进行提取，进行多维度的关联分析。能够提供对安全风险保持报警、趋势预测等，海量数据、关联分析、大屏展示和趋势预测是四个重点。而趋势预测最核心，目前做起来也比较难。<br>个人理解，<strong>SIEM重点在于对安全事件的感知和理解，态势感知重点在于通过大数据、机器学习等技术加深了对安全趋势的预测</strong>。国外一般不提态势感知系统，而国内，很多厂商都推出了态势感知系统。<br>目前国内安全厂商提供的“态势感知产品”包含的功能模块有：资产管理、漏洞管理、大数据平台、日志分析平台、威胁情报、沙箱、用户行为分析、网络流量分析、取证溯源、威胁捕捉等能力。<br>几个关键点：<br>1、 大数据平台。随着监测范围的扩大，数据量也在扩大，需要一个具备大数据处理和计算能力的平台，这是整个态势感知平台建设很重要的基础。<br>2、 基于威胁情报的监测。威胁情报对于降低大量数据和报警中的垃圾数据或者报警噪声，帮助更快速、更高效的发现攻击行为和攻击者非常关键，威胁情报的质量是检验态势感知平台能力的很重要的方面。<br>3、 全要素数据的采集。利用态势感知这样的平台能力的核心目的，是要监测到复杂的、高级的攻击，就需要态势感知平台首先要捕获到微观的状态，低成本、高效率的全要素数据采集能力是基础。<br>4、 基于攻击场景的分析研判。攻击不再是基于特征的监测，需要运用威胁情报、运用一些专家的经验，来构建基于场景的分析系统，它不是一个静态的东西，是一个与时俱进的攻防对抗过程中不断学习、学习参考的过程，需要持续运营这样的分析管理，需要更多的专家的经验和安全运营人员的参与。</p><h1 id="三、安全运营中心"><a href="#三、安全运营中心" class="headerlink" title="三、安全运营中心"></a>三、安全运营中心</h1><p>SOC（安全运营中心）来源于NOC（网络运营中心）。<br>随着信息安全问题的日益突出，安全管理理论与技术的不断发展，需要从安全的角度去管理整个网络和系统，而传统的NOC在这方面缺少技术支撑，于是，出现了SOC的概念。<br>以前大家所说的SOC是SOC 1.0阶段，只是在SOC的核心部件SIEM的买卖，国外所说的SOC是一个复杂的系统，它使用SIEM产品进行运维又以此向客户提供服务，也就是我们所说的SOC 2.0<br>SOC(安全运营中心)是以资产为核心，以安全事件管理为关键流程，采用安全域划分的思想，建立一套实时的资产风险模型，协助管理员进行事件及风险分析，预警管理，应急响应的集中安全管理系统。<br>SOC是一个复杂的系统，它既有产品，又有服务，还有运维，SOC是技术、流程和人的有机结合。<br>随着<strong>安全态势感知平台的兴起，安全运营中心将以态势感知平台作为智能安全运营的载体</strong>，在风险监测、分析研判、通知协作、响应处置、溯源取证等各方面进行了增强，同时融入了当前流行的技术和平台作为支撑，如大数据技术、东西向流量采集技术，EDR 终端检测响应技术、机器学习、欺骗攻击技术等。同时态势感知平台与 ITIL（Information Technology Infrastructure Library，ITIL）理念与信息安全管理标准相融合，将安全运营划分为不同角色，如安全管理人员、安全专家、安全运维、安全分析师、安全应急响应人员、安全研究人员等，在集成了安全事件管理全生命周期的流程中，通过工作流程将其串联起来，使安全运营流程更加规范和有序。</p><p><strong>所以个人认为SDC&lt;SIEM&lt;态势感知&lt;安全运营中心</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Git Pages+Hexo搭建自己的博客</title>
      <link href="/posts/79ebd763/"/>
      <url>/posts/79ebd763/</url>
      
        <content type="html"><![CDATA[<h1 id="一、申请并配置Github-Pages"><a href="#一、申请并配置Github-Pages" class="headerlink" title="一、申请并配置Github Pages"></a>一、申请并配置Github Pages</h1><h2 id="step1-在github上创建一个git库"><a href="#step1-在github上创建一个git库" class="headerlink" title="step1 在github上创建一个git库"></a>step1 在github上创建一个git库</h2><p>用github账号登录<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> ，如没有github账号则申请一个github账号。登录后点击“New repository”新建一个名为username.github.io（username是你的github用户名）如我的是：xiejava1018.github.io ，如果库名以及存在则会报库名已经存在的错误。<br><img src="https://img-blog.csdnimg.cn/20200212151727627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="新建库"></p><h2 id="step2-绑定自己的域名（如果没有自己的域名也可以不绑）"><a href="#step2-绑定自己的域名（如果没有自己的域名也可以不绑）" class="headerlink" title="step2 绑定自己的域名（如果没有自己的域名也可以不绑）"></a>step2 绑定自己的域名（如果没有自己的域名也可以不绑）</h2><p>访问刚申请的git库，点击Settings<br><img src="https://img-blog.csdnimg.cn/20200212151814995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="Settings"><br>如果库名不是username.github.io（username是你的github用户名）在这里可以修改成username.github.io<br><img src="https://img-blog.csdnimg.cn/202002121518548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="修改库名"><br>拖到下面可以看到GitHub Pages的信息，如果不绑定自己的域名实际可以通过<a href="https://username.github.io/来访问你的站点了。" target="_blank" rel="noopener">https://username.github.io/来访问你的站点了。</a><br><img src="https://img-blog.csdnimg.cn/20200212151939704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="站点地址"><br>如果有申请自己的域名，可以将域名解析到你的GithubPages username.github.io 如我的是xiejava1018.github.io<br><img src="https://img-blog.csdnimg.cn/20200212152026730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="解析自定义域名"><br>在GitHub Pages的自定义域名Custom domain中输入刚解析的域名保存后就可以看到你的站点被发布到你的域名上了，如<a href="https://xiejavablog.ishareread.com/" target="_blank" rel="noopener">https://xiejavablog.ishareread.com/</a><br><img src="https://img-blog.csdnimg.cn/20200212152056432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="绑定自定义域名"><br>这时候你就可以用自己的域名来访问GitHub Pages的网站了，不过现在什么都没有，只有个空白页面。这就需要我们借助Hexo这个静态站点生成工具来生我们站点的内容了。</p><h1 id="二、安装Hexo并生成站点"><a href="#二、安装Hexo并生成站点" class="headerlink" title="二、安装Hexo并生成站点"></a>二、安装Hexo并生成站点</h1><p>安装Hexo并生成站点可以参考官方的文档 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a>  </p><h2 id="1、安装前的准备"><a href="#1、安装前的准备" class="headerlink" title="1、安装前的准备"></a>1、安装前的准备</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：<br>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)<br>Git</p><h2 id="2、安装Hexo"><a href="#2、安装Hexo" class="headerlink" title="2、安装Hexo"></a>2、安装Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完了以后可以通过hexo version 查看相应的版本<br><img src="https://img-blog.csdnimg.cn/2020021215253021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="版本信息"></p><h2 id="3、生成站点"><a href="#3、生成站点" class="headerlink" title="3、生成站点"></a>3、生成站点</h2><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：<br><img src="https://img-blog.csdnimg.cn/20200212152343204.png" alt="目录"><br>其中_config.yml 文件是网站的配置文件<br>package.json 是应用程序的信息<br>scaffolds<br>模版文件夹。当新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。<br>source<br>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<br>themes<br>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="4、安装主题"><a href="#4、安装主题" class="headerlink" title="4、安装主题"></a>4、安装主题</h2><p>Hexo提供了很多主题，我用的是hexo-theme-next主题，大家可以直接克隆我的主题<a href="https://github.com/xiejava1018/hexo-theme-next.git" target="_blank" rel="noopener">https://github.com/xiejava1018/hexo-theme-next.git</a> 这里修复了一些bug如乱码问题等。<br>cd 切换到站点目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/xiejava1018/hexo-theme-next.git themes/hexo-theme-next</span><br></pre></td></tr></table></figure><p>也可以用其他git客户端工具将主题拉取到themes目录下<br>修改_config.yml文件的theme改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme :</span> <span class="string">hexo-theme-next</span></span><br></pre></td></tr></table></figure><h2 id="5、写作"><a href="#5、写作" class="headerlink" title="5、写作"></a>5、写作</h2><p>可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。<br>如执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 2020-02-11-2020-02-11-看完全套149本《书虫》是种什么样的体验</span><br></pre></td></tr></table></figure><p>执行该命令后就会在响应的站点目录的source_posts下生成2020-02-11-看完全套149本《书虫》是种什么样的体验.md文件。<br><img src="https://img-blog.csdnimg.cn/2020021215265521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bGxidWc=,size_16,color_FFFFFF,t_70" alt="文件"><br>用任何喜欢的编辑器编辑这个.md文件即可，排版是支持MarkDown的。</p><h2 id="6、生成和发布"><a href="#6、生成和发布" class="headerlink" title="6、生成和发布"></a>6、生成和发布</h2><p>编辑好需要发表的内容后。执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>就会生成相应的静态文件。改命令也可以简写成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以通过该地址访问本地的站点。<br>在本地检查没有问题以后就可以发布到Github Pages上通过互联网上访问了。<br>首先在配置_config.yml文件配置需要发布的地址。这个地址就是你在github上申请的Github Pages库的git地址<br><img src="https://img-blog.csdnimg.cn/20200212152738164.png" alt="发布地址配置"><br>然后就可以通过命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>进行发布了。发布以后就可以通过<a href="https://xiejava1018.github.io" target="_blank" rel="noopener">https://xiejava1018.github.io</a> 或者自定义的域名 <a href="https://xiejavablog.ishareread.com" target="_blank" rel="noopener">https://xiejavablog.ishareread.com</a> 来访问了。需要注意的是，每次重新发布以后，需要重新设置域名绑定才能正确访问，否则会报404的错误。</p><p>欢迎大家访问我的BLOG  <a href="https://xiejavablog.ishareread.com/" target="_blank" rel="noopener">https://xiejavablog.ishareread.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看完全套149本《书虫》是种什么样的体验</title>
      <link href="/posts/40bbedc5/"/>
      <url>/posts/40bbedc5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200211/blogimage/english.png" alt="English" title="English"></p><p>一直想学好英语，可惜一直在陷入”从入门到放弃”的怪圈，这么多年来一直尝试各种方式方法来学英语始终未成正果。当然这一切都归因于自己没有恒心没有毅力。有过坚持了330天终于放弃了背单词的经历，也找了很多如何学好英语的书籍和方法。受了李笑来老师的《人人都能用英语》及伍君仪的《把你的词汇用起来》的影响。经过自己仔细思考认为确实如果要把英语学好必须要用起来。考虑到自己的实际情况，没有相应的语言环境，从听说开始用起来可能也不太现实，最现实的方式就是从大量的阅读开始将英语用起来。即学了知识又学了英语，还没有那么枯燥。</p><p>如何开始阅读，读什么东西呢？自己的水平还没有达到能够读懂英文原版书的程度，望着满片英文的原版书还是心生畏惧。也是在网上看大家学习英语的经验，有人就介绍了阅读的方式方法。初学者一开始就不要挑战太高难度了，容易打击自己的自信心。最好的方式是采取分级阅读的方式，阅读i+1的英语材料。也就是阅读比自己能力稍微高一点的英语材料。在找英语阅读的材料过程中发现了很多人推荐了《书虫》，也就是”书虫·牛津英汉双语读物”，这套读物是外语教学与研究出版社和牛津大学出版社联袂奉献给英语学习者的一大分级阅读精品书系，提供了从小学高年级至大学的全套阅读方案。图书按照词汇量和语言难度进行科学分级。共分了七个级别，15套，共149本书。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200211/blogimage/%E4%B9%A6%E8%99%AB2.png" alt="《书虫》系列" title="《书虫》系列"></p><p>我觉得这套读物比较适合像我这样的初学者。离开学校多年了，也不知道自己的英语水平究竟是属于什么级别，抱着空杯的心态，干脆就从最低级的开始看起（想想还可以给小孩看）。我是2019年6月18日购买的全套，从快递点搬回来的时候一大箱子很重。看着这满满一箱足足149本，比较兴奋又比较忐忑。兴奋的是我终于可以开始我的英语阅读之旅了，忐忑的是这也149本也忒多了吧？从来没有尝试过一次性读过这么多的书，即使是中文书也没有挑战过。</p><p>很欣赏伍君仪在《把你的词汇用起来》中的一句话，就是“学英语既然开始了，就一定要把它学好！”。反反复复从”从入门到放弃”浪费时间精力又没有什么效果。于是从2019年7月正式从书虫第一套入门级的第一本《 Survive！》生存游戏开始。入门级相当于小学高年级的水平，当然读起来很流畅很爽。有时候可以一口气看三、四本。入门级每一本都比较薄只有几十页，而且有一半还是中文解释。基本上没有什么挑战。毕竟有近150本怎么才能全部读完呢？我做了个计划给自己规定每天看40页或以上，准备用大半年的时间将这套书全部看完。书虫这套书可读性还是比较强，内容非常丰富，主题多样，包括悬疑、侦探、间谍等多种题材，大部分都是世界名著。小时候读名著读得比较少，这下可以过一下名著的瘾了，虽然是简写版的。尽管是简写版的但是改编得故事性挺强的，非常吸引人，很能提高阅读兴趣。为了让自己能够坚持下去，我每读一本都会在豆瓣上进行标记，并加入到自己的已读英文读本的豆列里。每读完一本就感觉到离胜利越近了一点。前面1至5级读得还很顺利，几乎都可以不用看中文翻译，后面到了第6级以后就有点磕磕绊绊了，有时候需要借助中文翻译才能看懂。不管怎么样，终于在2020年2月9日将全套书虫的最后一本《印度之行》全部读完，历时半年。除了其中11月底有段时间公司加班很厉害确实没有读以外，基本上每天都有阅读。看着满满的一箱书，这一本本标记已读的书，心里还是满满的成就感。</p><p>通过阅读全套书虫的经历，让我建立了学好英语的信心，培养了我阅读英语的兴趣。我想我再也不会“从入门到放弃”了。我花了半年的时间和精力把全套《书虫》都看完了，你要我放弃，那不这半年的努力都白费了吗？</p><p>但是有人可能会问我，看完全套书虫以后你的英语水平达到了什么程度。我想我会很遗憾的告诉你，“革命尚未成功，同志仍需努力”。我也曾经报有幻想，以为看完全套《书虫》自己的英语水平就很牛B了。但是越看到后面越清晰的认识到《书虫》这套书有它的局限性。整套书下来，最高级别的单词量才3000。也是高中毕业大学低年级的水平。也使我清晰的认识到自己目前的英语水平也就是高中毕业大学低年级的水平。一个意外的收获就是通过阅读《书虫》全套，大致的了解了英语的小说文学史，相当于给了我一个目录和一个指引。有哪些好的小说有兴趣可以更加深入的读下去。比如通过阅读书虫对英国文学史上著名的勃朗特三姐妹有了深刻的了解，因为里面有本书是写《勃朗特一家的故事》。这套书里还有《呼啸山庄》和《简·爱》,分别是勃朗特三姐妹中的艾米莉·勃朗特和夏洛蒂·勃朗特的名著，看了他们的简介再读了她们的作品理解更加全面和深刻了。让我有进一步看这两部名著的英文原版的欲望了。还有英国侦探小说女王阿加莎·克里斯蒂有本书《神秘女人——阿加莎•克里斯蒂》就是介绍她的经历和作品，看完以后我立马找了她的中文版的《东方快车谋杀案》看了觉得很有意思。还有狄更斯、哈代等的名作都让人看了还想看。通过这样大量的阅读体验以后，我对名著产生了浓厚的兴趣，我觉得我应该具备了阅读英文原版书的能力。下一个阶段我有信心准备开始我的英文原版书阅读了。今年我的计划是挑战看完十本英文原版书。</p><p>我读过的英文读本豆列： <a href="https://www.douban.com/doulist/118432400/" target="_blank" rel="noopener">https://www.douban.com/doulist/118432400/</a></p><p>爱分享读书豆瓣小组： <a href="https://www.douban.com/group/655112/" target="_blank" rel="noopener">https://www.douban.com/group/655112/</a></p><hr><center>关注：“爱分享读书”微信公众号 </center><p><img src="http://image.ishareread.com/qrcode_for_gh_70fb5d85a824_258.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><center>读书我们是认真的</center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坚持了330天，我终于放弃了背单词</title>
      <link href="/posts/48451ead/"/>
      <url>/posts/48451ead/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200211/blogimage/bdc.png" alt="不背单词，能学好英语吗？" title="不背单词，能学好英语吗？"><br>不背单词，能学好英语吗？<br>学习英语是我永远的痛，读书的时候没有把英语学好，工作后觉得英语很重要，经历了N多次从坚持到放弃。这一次，我是来真的，发誓不把英语学好不罢休，为此我下载了百词斩。为了有人监督我加入了打卡群，每天坚持英语背单词打卡，这是我坚持做得最好的一件事情，每天早上起床第一件事情就是背单词，每天20-30个，几乎从来没有中断过。但是我坚持到330天后，我还是决定放弃背单词了。为什么呢？因为没效果！！！我已经背完了从小学到大学以及新概念1-2册的单词，APP上显示我的词汇量已经达到7000，超过了80%的网友。可是我看英语文章还是一脸懵逼，即使是最浅的英语读物也有单词不认识。听不懂，更别奢望能说了。英语单词背了忘、忘了背，严重怀疑这个APP上显示7000多的单词量是哄我开心的，要不背了这么久的单词，英语水平还这么菜，依旧啥也看不懂……</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200211/blogimage/englishisharet.png" alt="学英语是会呼吸的痛" title="学英语是会呼吸的痛"></p><p>放弃背单词，并不代表我放弃了英语，因为我找了一本书–《人人都能用英语》。经过傻傻的认为打卡背单词就可以学好英语沉痛而失败的教训后，越发认为这本书相见恨晚。学英语就是要用，要不学英语干啥？坚持非常重要，但是坚持的方向错了一切都是白搭！</p><p>这不是一本英语的单词书、语法书。是一本教你如何学英语，不，应该是如何“用”英语的书。作者是我们都很熟悉的曾经是新东方专业英语老师，现在是比特币首富的–李笑来老师，《把时间当做朋友》的作者。虽然是专业的英语老师，在书中他没有卖弄自己的专业，而是非常真诚的讲述了自己学习英语的过程。整本书解决了我所有学英语的疑惑。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200211/blogimage/%E4%BA%BA%E4%BA%BA%E9%83%BD%E8%83%BD%E7%94%A8%E8%8B%B1%E8%AF%AD1.png" alt="《人人都能用英语》" title="《人人都能用英语》"></p><p>经历了N多次从坚持到放弃，我曾经就差点相信学习英语要有天赋才能学好，自己不是学英语的那块料。在书中作者花了很大量的篇幅来告诉我们，人人都可以学好英语！书中举了个例子，大约在1988年前后，他父亲的同事一位教英语的副教授去考了一次托福，成绩是570（满分677分），一个专职的英语教授考托福才考570分，想想这是个多么难的考试。当年，甚至若干年作者都不敢想象自己能够去考托福。直到2000年底，他急需要一份稳定的工作，想去新东方应聘，他花了4个月的时间专注学习，考了托福，考了GRE，拿了变态的成绩去应聘了新东方成为了那里的英语教师。他以亲身经历说明了一个问题，你学不好，是因为你不信，只有你相信你能做好，你才能真正做好。哪里有那么多天才呢？所谓的天才，只不过是反复练习，持之以恒的结果。</p><p>不要再“学”英语，你就应该“用”英语！这是最触动我的一句话，也是整本书的核心。大部分的人，包括我都是从初中、高中、大学，“学”了近十来年的英语，真正学会的人又有几个呢？只“学”不“用”的下场就是在十几年之后依然在学依然无用。依旧陷入从坚持到放弃的怪圈。学英语的核心其实是在用。只有不断地“用”，才能真正地学到，要不就会一直停留在“学”的阶段。既然不“用”就“学”不好，那不如从一开始就直接“用”。无论如何，一定要想明白对自己来说，英语真正的用处在哪儿？对于很多人来说，其实只要能够流利阅读英语或许已经足够了，至少对我来说已经够了。既然想要流利的阅读英语，那就直接从“用”英语阅读开始，抛开所谓的单词量、语法、语音、语调。不会的单词查字典，看不懂的句子查语法书。不管你是想流利的阅读，还是用英语交流，反正，用就是了。回想一下，也是哦，想想自己小学语文的经历，小学一年级还学下生字，二年级就开始学用字典查生字，以后慢慢的抛开字典可以自由的读写了。</p><p>其实如何通过“用”来学习外语，国学大师、学界泰斗季羡林，季老先生在自己的言传身教中已经说的非常清楚，并且可操作性非常强。他说到：“我想斗胆提出一个，‘无师自通’的办法，供胡同志和其他读者参考。你只需要找一位通德语的人，用上二三个小时，把字母读音学好。从此你就可以丢掉老师这个拐棍，自己行走了。你找一本有可靠的汉文译文的德文科技图书，伴之以一本浅易的德文语法。先把语法了解个大概的情况，不必太深入，就立即读德文原文，字典反正不能离手，语法也放在手边。一开始必然如堕入五里雾中。读不懂，再读，也许不止一遍两遍。等到你认为对原文已经有了一个大概的了解，为了验证自己了解的正确程度，只是到了此时，才把那一本可靠的译本拿过来，看看自己了解得究竟如何。就这样一页页读下去，一本原文读完了，再加以努力，你慢慢就能够读没有汉译本的德文原文了。”</p><p>嗯，我想我可以放心的放弃背单词，拿起我的那本英文版的《Spring in Action》开始慢慢啃了……</p><hr><center>关注：“爱分享读书”微信公众号 </center><p><img src="http://image.ishareread.com/qrcode_for_gh_70fb5d85a824_258.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><center>读书我们是认真的</center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把时间当作朋友，相信我，你并不孤独</title>
      <link href="/posts/a0bb2f7e/"/>
      <url>/posts/a0bb2f7e/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200106/blogimage/3.jpg" alt="把时间当做朋友" title="把时间当做朋友"><br>相信我，你并不孤独！自卑、对任何事情都没有兴趣、在工作多年后，对未来还是很迷茫，对自己的效率不满，对自己的能力怀疑。相信在此世间，此时此刻，困恼的不是我一个。  </p><p>《把时间当作朋友》这本书2009年出版，现在这本书已经是第三版了，并且还推出了逻辑思维独家定制版。该书长期在豆瓣上评分都是在8.3分以上，无数人看了以后都感觉到相见恨晚，受益匪浅。作者李笑来原来是新东方的老师，现在号称是投资人，比特币首富。新东方的老师像创始人俞敏洪、锤子手机的老罗、古典等都有个特点，都很都善于灌鸡汤，兜售所谓的成功学，很有煽动性。可以理解像英语那么枯燥有难度的学习过程，如果没有成功学的激励被放弃的几率还是蛮大的。成功离不开鸡血，也少不了鸡汤。   </p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200106/blogimage/4.jpg" alt="《把时间当做朋友》" title="《把时间当做朋友》"><br>《把时间当作朋友》这本书从心智成长的角度来谈时间管理、学习方法、兴趣、人脉等成功的关键所在。虽然书中有个章节是”小心所谓的成功学”。但不可否认，这本书就是告诉大家如何了解时间，和时间做朋友，用心智成长开启自己的人生成功之旅的“成功学”。其中的某些观点和做法我觉得很有道理并值得付之于行动。  </p><p>首先是对时间管理的认识，有很多书都在谈时间管理，而时间每天每个人都只有24小时，都在静静的不以人的意识为转移地流逝。时间它是不会听从任何人的管理，我们无法管理时间，我们真正能够管理的是我们自己。而管理好自己就是需要通过自己的大脑控制自己的大脑，需要有很强的意志力和成熟的心智。  </p><p>管理好自己利用好时间，需要对自己的时间有个清楚的了解，知道自己的时间都花到哪里去了。最有效的办法就是《奇特的一生》的作者，苏联生物学家柳比歇夫的事件-事件日志记录方法。将自己每天做的每件事情都花的多少时间详细的记录下来。想尽一切办法真正了解自己，真正了解时间，精确地感知时间，而后再想办法使自己的行为与时间”合拍”，与时间做朋友。  </p><p>学会了如何利用好自己的时间，接下来的就是行动。什么时候开始行动呢？如果要打算做某件事情，并且想做成的话，应该是立刻、马上、立即、now就开始行动！  </p><p>开始行动后就要学会坚持。所有学习上的成功，都只靠两件事：策略和坚持，而坚持本身就是最重要的策略，坚持其实就是重复，而重复说到底就是时间的投入，任何领域想要取得卓越的成就都必须用一生的努力才能取得，想要出类拔萃，就要努力至少一万小时。</p><h2 id="关于学习方法："><a href="#关于学习方法：" class="headerlink" title="关于学习方法："></a><strong>关于学习方法：</strong></h2><p>除了“试错”、“观察”、“阅读”之外，“思考”准确的说是“正确地思考”才是获得真正意义上的知识的主要手段。<br>提高自学能力</p><ol><li>自学能力的基础技能是阅读理解能力。</li><li>检索能力是建立在相当熟练的阅读能力之上的能力。</li><li>写作能力在自学能力中占据着重要的地位。</li><li>实践能力是自学能力最终能够转换为真正价值的根本。<br>教是最好的学习方法。</li></ol><h2 id="关于兴趣："><a href="#关于兴趣：" class="headerlink" title="关于兴趣："></a><strong>关于兴趣：</strong></h2><p>很多人，包括我自己，不知道自己的兴趣在哪里？或试图要培养自己的兴趣。书中的一段话给我很大的启示，只要一件事你能做好，并且做得比谁都好，或者至少比大多数人好，你就不会对那件事情没兴趣。往往并不是有兴趣才能做好，而是做好了才有兴趣。  </p><p>大多数事情都需要孰能生巧，做得多了，自然就擅长了，擅长了，就自然比别人做得好，做得比别人好，兴趣就大起来了，而后就更加喜欢做，更擅长，更……良性循环。但同样做得多久需要大量的时间投入，没兴趣，往往只不过是结果而已，如果被当做不去做好的理由，最终的惩罚就是大量的时间白白的流逝。</p><h2 id="关于人脉："><a href="#关于人脉：" class="headerlink" title="关于人脉："></a><strong>关于人脉：</strong></h2><p>打造人脉不如打造自己，只有优秀的人才拥有有效的人脉。  </p><p>关于书中讲到了通过自己的大脑控制自己的大脑。其实就是个人意志力的问题，只是书中换了个说法。个人的成功很大程度都是取决于个人意志力。通过意志力控制心智成长，让人成熟，成功。  </p><p>如果你现在还在迷茫，相信我，你并不孤独。把这本书看完吧。再牛逼的人都有段苦逼的经历，如果你还在苦逼的过程中，请把时间当做朋友，沉下心来慢慢学习积累，收获成长，笃性自己能够成功！大家一起共勉。</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终身学习时代，阅读是你大脑的磨刀石</title>
      <link href="/posts/da35ea85/"/>
      <url>/posts/da35ea85/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200106/blogimage/1.jpg" alt="图书馆" title="图书馆"><br>  在这个互联网信息知识大爆炸的时代，学习能力是每个人的核心能力，如何通过学习把知识转化为自己的能力，拓宽人生的可能性，是每个人孜孜不倦渴求的。而阅读，尤其是高效的阅读是掌握知识最简单、成本最低、也是最高效的学习方式。阅读能力是学习能力的根本，会阅读的人才会具备快速学习的能力和良好思维以及应变能力。认识到这一点，所以想读书的人越来越多，爱读书的人越来越多。但是很多人在阅读或培养阅读的过程中碰到了各种各样的困难和问题。如：知道阅读很重要，但是拿起书就想睡觉根本看不进书；没有时间阅读；读不懂，记不住，用不上等等。市面上也涌现了不少教大家阅读的书籍，如被誉为阅读圣经的《如何阅读一本书》、《越读者》、《书都不会读，你还想成功》、《如何高效读懂一本书》等等。</p><p>  好脑筋需要书本，就如同宝剑需要磨刀石。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200106/blogimage/2.jpg" alt="好脑筋需要书本，就如同宝剑需要磨刀石" title="好脑筋需要书本，就如同宝剑需要磨刀石"></p><p>  通过阅读我们可以系统性地获取知识，但很多人在阅读习惯养成的前期也会面临很多问题，很多人对阅读有障碍、有困难，实际上是我们对阅读这件事的理解并不清晰透彻，我们应该了解阅读的本质。阅读的本质就是在可以利用的时间里，以你自己能理解的程度去学习。有些初学者了解到阅读的重要性以后，心情非常迫切，一上来就捧起大部头的书，或者比较深奥烧脑的书看，结果要不就是看几页昏昏入睡，要不就是看了几天都看不完，渐渐的失去了耐心，阅读兴趣和想培养的阅读习惯也就在屡次的打击中放弃了。其实要想开始阅读或培养阅读习惯，最有效的办法就是根据自己的能力先从一些入门级的自己感兴趣的书籍着手。在《书都不会读，你还想成功》的书中，就是建议先给自己定个计划读100本书开始，这100本书先抛开任何功利性的想法，不管什么书，只要是自己感兴趣的或者能够看得下去的书就可以，看不下去的书先放一边，通过100本书慢慢培养自己的阅读兴趣和习惯。先有了阅读兴趣和习惯，想看了愿意看了。再来谈阅读方法的问题，通过阅读方法解决看得快，记得牢的问题。再来逐渐选择高于自己目前能力的书籍进行有目的性的阅读。</p><p>  其实阅读方法正如《洋葱阅读法》里所述，无非就是碎片化阅读、快速阅读、主题阅读。不管是那种阅读方法，都是需要带有强烈目的性的阅读，只有有目的的阅读，然后学以致用才能看得快，记得牢，用得上。</p><p>  碎片阅读实际就是利用碎片化的时间，学习碎片化的内容。如何取得碎片化阅读的效果呢？有人每天都碎片化的阅读一些微信文章啥的，但是长期以来除了感觉有些文章写得不错每天点赞外，对自己并没有什么提高呢。其中最关键的就是要建立自己的知识体系。在基于自己的知识体系的基础上将阅读到的碎片化的内容补充到自己的知识体系中建立相应的联系。要不然阅读到的碎片还是碎片，不和已有的知识进行关联，永远都是碎片，久而久之久会忘记掉。没有自己的知识体系就相当于没有建立自己的银行账户，碎片化阅读看到的内容相当于打零工赚回来的钱没有地方放。东放一点，西放一点时间久了自然就忘记了。有了自己的知识体系就相当于建立自己的知识银行账户，打零工赚的钱可以零存整取，不断的往自己的知识体系中填砖加瓦，让自己的知识银行账户余额越存越多。</p><p>  如何构建自己的知识体系呢，就要通过快速阅读和主题阅读。一本书本身的就是某个知识系统化的描述。所以要想系统的构建自己的知识体系，系统的看书是必经之路。</p><p>  快速阅读的本质就是提升阅读的速度，快速掌握书中的知识。核心就是带着问题来阅读。在阅读之前，先了解一下自己读这本书的目的，梳理一下问题，为什么要读这本书，这本书能够解决我什么问题，自己以前有没有读过类似的书等等。通过快速的阅读，在书中找这些问题。有些无关紧要的描述就可以快速略看，与问题相关的仔细阅读。通过变速阅读达到快速了解一本书掌握关键知识点的目的。</p><p>  主题阅读则更是为了构建自己的知识体系，在某个知识主题领域，通过广泛的阅读，同时阅读多本相同主题书的方式来深入对某个知识主题领域学习的过程。其主要目的是搞懂某个主题领域的知识。</p><p>  当然不管是碎片化阅读、快速阅读、主题阅读，要想通过阅读来提高自己的能力，首先要有构建自己知识体系的意识；其次是通过某种方式彻底的搞懂自己没有懂的知识如通过反复阅读，一本书重复多读几遍或通过读同一知识点不同作者写的书来搞懂，或者通过费曼读书法将阅读的知识通过自己的理解用自己的方式讲述给懂的人；最后就是要学以制用，将通过阅读学到的知识在平时的工作、生活、学习等各个方面用起来。只有这样才能真正的通过阅读不断的提高自己的能力，真正找到阅读的乐趣，越读越有味，越读越想读！</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用系统方式思考，高效的工作</title>
      <link href="/posts/f7e86db6/"/>
      <url>/posts/f7e86db6/</url>
      
        <content type="html"><![CDATA[<p>　　用系统方式工作的思想是萨姆·卡彭特在《用系统来工作》的书中提到的。大家可以想想华为、富士康等公司为什么效率高？因为有一套系统化的流程让各个环节高效的运作。所以咱们也可以参考，运用到我们的工作、学习、生活中来，让我们更高效。 </p><p>　　所有工作都可以用系统的视角的思考。如管理公司、上班的日常工作、学一门技能、健身等等。<br>　　首先我们要明确目标，比如管理公司我要达到什么经营目标，学习我要学到什么东西达到什么程度，减肥健身要达到什么效果，一定要有非常清晰的目标，最好是能够写下来，放在显眼的地方，时时关注。<br>　　其次我们要制定准则，即达到实现目标的大的方针，比如减肥健身，准则可以定义为控制饮食、加强锻炼等。<br>　　最后我们要明确做事的流程，如何明确流程？可以按照以下几点整理。<br>　　1、分解每个工作的任务项。<br>　　 将一个工作分解成一个个可以操作的具体任务项。如开会可以分解为确定会议室、准备会议材料、通知会议参与人、做会议纪要、跟踪会议结论执行情况等等。<br>　　 如减肥健身可以分解为：合理饮食、准备活动、有氧运动、肌肉强化运动、睡眠休息等等。<br>　　2、将每个工作任务项按依赖顺序整理形成固化的流程<br>　　 有些工作项是有依赖关系的，所以我们要按照依赖关系顺序整理成流程。先干什么，后干什么，这样做事才会更有条理，减少等待的时间更高效。<br>　　3、给每个工作任务项提供说明指导<br>　　 就是将每个细化的工作项做到最好。在华为，所有的岗位，每项工作都有具体的作业指导书。在作业指导书中详细定义了这个环节需要做什么，具体怎么做，完成后如何检查反馈。这个作业指导书是不断总结完善的。所以不管是老手，还是新来的菜鸟，都可以很好并高效的完成。<br>　　4、在实践的工作中不断完善流程<br>　　 一开始可能流程并不完善，我们可以在实际实施的过程中不断的优化调整，去掉一些不必要的环节，优化一些效率低下的环节，一切优化都是遵循我们开始定义的目标。 </p><p>　　通过系统方式思考做事情可以用到工作、学习、生活的各个方面，总的来说，就是明确目标、制定准则、定义流程，不断完善流程。将事情高效的做好。作为领导者，有了流程后，你还可以将这个流程交给任何一个人都可以做好。将自己释放出来。有更多的时间平衡工作、学习、生活。这就是系统的力量。</p><hr><center>关注：“爱分享读书”微信公众号 <p><img src="http://xiejava.gitee.io/xiejavaimagesrc/images/%E7%88%B1%E5%88%86%E4%BA%AB%E8%AF%BB%E4%B9%A6%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><p>读书我们是认真的</p></center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Hexo博客导航栏链接URL乱码问题</title>
      <link href="/posts/5661/"/>
      <url>/posts/5661/</url>
      
        <content type="html"><![CDATA[<p>今年的计划之一是搭建一个博客，开始写博客。于是在网上找了一些博客程序发现用Hexo在gitHub上搭建自己的个人博客是比较简单而且易于维护的做法。<br>在网上找了一些教程后开始搭建，用自己比较中意的hexo-theme-next模板，发现搭建成功后导航栏链接不对，出现了URL乱码的问题。在网上搜索了一把发现有些网友也碰到了类似的问题不过都还没有解决。<br>我是从 <a href="https://github.com/Doublemine/hexo-theme-next.git" target="_blank" rel="noopener">https://github.com/Doublemine/hexo-theme-next.git</a> 这里Fork下来的。仔细看了一下Fork下来的hexo-theme-next模板代码,尝试自己解决。</p><h2 id="问题现象："><a href="#问题现象：" class="headerlink" title="问题现象："></a>问题现象：</h2><p>URL乱码出现在两个地方，一个是上面的导航栏，一个是右边栏的“日志”菜单部分。<br>导航栏链接乱码问题<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/blogerror1.png" alt="乱码" title="导航栏链接乱码问题"><br>右边栏的“日志”菜单部分链接乱码问题<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/blogerror3.png" alt="乱码" title="右边栏的“日志”菜单部分"><br>发现链接后面都有乱码<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/blogerror2.png" alt="乱码" title="链接乱码"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h3 id="1-解决导航栏URL乱码"><a href="#1-解决导航栏URL乱码" class="headerlink" title="1.解决导航栏URL乱码"></a>1.解决导航栏URL乱码</h3><p>查看themes\hexo-theme-next\layout_partials 下面的 header.swig 代码和模板的配置文件 \themes\hexo-theme-next_config.yml，发现导航栏链接乱码是因为菜单配置是有空格造成的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class&#x3D;&quot;menu-item menu-item-&#123;&#123; itemName | replace(&#39; &#39;, &#39;-&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;&#123;&#123; url_for(path.split(&#39;||&#39;)[0]) | trim &#125;&#125;&quot; rel&#x3D;&quot;section&quot;&gt;</span><br><span class="line">&#123;% if theme.menu_icons.enable %&#125;</span><br><span class="line">  &lt;i class&#x3D;&quot;menu-item-icon fa fa-fw fa-&#123;&#123; path.split(&#39;||&#39;)[1] | trim | default(&#39;question-circle&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;i&gt; &lt;br &#x2F;&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;&#123; __(&#39;menu.&#39; + name) | replace(&#39;menu.&#39;, &#39;&#39;) &#125;&#125;</span><br><span class="line">  &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><p>因为url_for函数会将字符串转码，碰到空格或其他特殊字符会进行转意，就会出现乱码。<br>解决的办法是修改模板的配置文件 \themes\hexo-theme-next_config.yml文件去掉空格就是的。<br>原始配置文件配置如下：<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/codeblock1.png" alt="原始配置文件" title="原始配置文件"><br>去掉链接字符串的空格<br><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/codeblock2.png" alt="去掉空格后的配置文件" title="去掉空格后的配置文件"></p><h3 id="2-解决右边栏的“日志”菜单部分URL的乱码"><a href="#2-解决右边栏的“日志”菜单部分URL的乱码" class="headerlink" title="2.解决右边栏的“日志”菜单部分URL的乱码"></a>2.解决右边栏的“日志”菜单部分URL的乱码</h3><p>在 themes\hexo-theme-next\layout_macro 找到sidebar.swig 文件 找到如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if config.archive_dir !&#x3D; &#39;&#x2F;&#39; and site.posts.length &gt; 0 %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;site-state-item site-state-posts&quot;&gt;</span><br><span class="line">  &#123;% if theme.menu.archives %&#125;</span><br><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url_for(theme.menu.archives).split(&#39;||&#39;)[0] | trim &#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url_for(config.archive_dir) &#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;site-state-item-count&quot;&gt;&#123;&#123; site.posts.length &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&#39;state.posts&#39;) &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url_for(theme.menu.archives).split(&#39;||&#39;)[0] | trim &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url_for(theme.menu.archives.split(&#39;||&#39;)[0]) | trim &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>即可解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020是时候开启最棒的一年了！</title>
      <link href="/posts/ebb1fd51/"/>
      <url>/posts/ebb1fd51/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/dream1.png" alt="2020是时候开启最棒的一年了！" title="2020是时候开启最棒的一年了！"></p><p>2019已经过去，回首过去你是否懊恼？本来计划要坚持每天跑步健身的，结果买好了装备坚持了几天后半途而废。雄心勃勃的每天阅读的计划也无疾而终。想把英语学好，却总是停留在书的前几页。我想成为最好的自己、想减肥健康、想多存钱少花钱、想学习新技能、想开创自己的事业……有很多美好的想法，但是事到如今只是美好的想法，回首往事时后悔不已，后悔没有正确的做出决定，后悔没有开始，后悔没有坚持。然而后悔又有什么用呢？岁月还是这样无情的流逝了，你还是原来的那个你。2020年，是时候开启最棒的一年了！</p><p>今年是突破之年！是很多人发自内心的渴望。人们都喜欢在新年制定目标。但是在实现目标的过程中，一开始我们斗志昂扬，大步向前，信心满满。但之后要么计划被打乱，要么最终不了了之。然后大多数人开始以一种失落和懊悔的心情诉说自己的遭遇的一次次挫折和失败。大部分的人都曾经在某些年份制定过新年目标。但是人人都制定目标，并不意味着总是有效。今年是突破之年吗？能够突破制定计划-失败-懊恼-制定计划的怪圈吗？能够真正的突破成就最好的自己吗？</p><p>今年必须是突破的一年！来自全球知名高效能专家迈克尔·海亚特的这本《规划最好的一年》。写给无力改变现状的你，让你从个人、职业、财富、人际关系等全面升级。如果你想摆脱失意与迷茫，走向自信与明朗，获得成功一年的力量。相信《规划最好的一年》一书中有你想要的答案。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/book1.png" alt="《规划最好的一年》" title="《规划最好的一年》"></p><p>作者迈克尔·海亚特（Michael Hyatt），是全球知名高效能专家，《纽约时报》畅销书作家。全球极具魅力的传媒领袖、平台应用大师、自媒体营销泰斗。曾任美国最大的出版公司之一托马斯·纳尔逊出版公司董事会主席、CEO。他创作过《生命向前》（与丹尼尔·哈卡维合著）以及《平台：从喧闹世界脱颖而出》，荣登过《华尔街日报》《福布斯》《快公司》《企业家》的封面人物。迈克尔·海亚特在美国开设有“5天即达最棒的一年”线上及线下课程，改变了逾千万美国年轻人的命运。</p><p>相信无论你有过什么好的或是不好的经历，即使是在你曾经深度受挫的领域，今年都绝对有可能成为你最有意义的一年。因为这本书告诉了你改变自己具体的做法。是时候开始最棒的一年了。</p><h2 id="STEP-1-相信可能"><a href="#STEP-1-相信可能" class="headerlink" title="STEP 1 相信可能"></a>STEP 1 相信可能</h2><p>要创造最好的一年，首先就要升级观念，树立自我开放性观念，相信一切皆有可能。</p><p>有益的思维习惯往往产生积极的结果，例如幸福感、个体满足感，甚至是物质上的成就。然而，不好的思维习惯往往会产生相反的结果：不幸福感、不满足感，甚至是时运不济的哀怨感。个人的生活格律可以由你改变。即使现有的思维习惯已经带来不错的成果，你还是可以通过升级自己的信念，在生活的各个领域体验变革性的个人进步。一旦我们开始关注信念升级，我们的境况往往也会随之改善。</p><p>如果一个人经历的挫折越多，就会越不相信自己能够战胜挫折。自我怀疑是目标的毒药。消极的心态会毒害我们的灵魂，破坏我们的未来。所以我们要升级观念，改变信念，相信自己能够完成目标。这是决定目标能够实现的第一个关键因素。</p><p>观念升级，避开自我设限性观念陷阱。相信你现在所拥有的，足以改变你的生活。不管现在处于什么环境，我们都有能力追求更好的未来。资源从来都不是我们实现目标过程中的主要挑战。</p><p><em>具体行动计划：</em></p><h3 id="1-认识信念的力量"><a href="#1-认识信念的力量" class="headerlink" title="1.认识信念的力量"></a>1.认识信念的力量</h3><p>如塞尔维亚维托夫尼卡的僧侣撒迪厄斯所言:“我们的想法决定我们的生活。”无论是积极的信念还是消极的信念，都会对生活经历产生巨大影响。明白这个事实，是进入最好的一年的第一阶段。 </p><h3 id="2-直面自我设限性观念"><a href="#2-直面自我设限性观念" class="headerlink" title="2.直面自我设限性观念"></a>2.直面自我设限性观念</h3><p>我们都会有对世界、他人、自己的自我设限性观念。四个检验你是否陷入自我设限性观念的指标，你的观点是否有以下思维形成:非黑即白、主观化、小题大做、普遍化。还有很重要的一点，就是要识别出自我设限性观念的来源，即你的自我设限性观念是来自过去的经验、新闻媒体、社交媒体还是负面关系。 </p><h3 id="3-观念升级-识别自我设限性观念。"><a href="#3-观念升级-识别自我设限性观念。" class="headerlink" title="3.观念升级 识别自我设限性观念。"></a>3.观念升级 识别自我设限性观念。</h3><p>升级观念要从认识观念开始，因此首先要仔细思考阻碍你前进的观念。记录自我设限性观念。在左边的一栏写下自我设限性观念，文字表达有助于将自我设限，性观念客观化。反思自我实现新观念。评估某种观念对你的贡献，这种观念赋予你力量了吗？对你实现目标有帮助吗？摒弃/重构自我设限性观念。有时候你可以直接否定一种自我设限性观念；有时候你可能需要论证推翻它，或是从另一个角度审视障碍。修正自我设限性观念。针对旧的自我设限性观念写下新的自我开放性观念。重新定位。相信新的真理，重新投入生活。</p><h2 id="STEP-2-总结过去"><a href="#STEP-2-总结过去" class="headerlink" title="STEP 2 总结过去"></a>STEP 2 总结过去</h2><p>通过后向思考总结过去，在遗憾中发现机会，以及利用感恩优势培养富足性思维。</p><p>人们都会陷入同样的困境，我们自己也在某种程度上处于这种困境中。除了自我设限性观念，第二个最常见的障碍就是过往的经历。我们把过去绑在身上，就像拖着一辆载满了破旧家具的拖车。因为我们太过受制于过去，所以才不能充分考虑未来。</p><p>如果不愿意承认过去，过去就不会完整。不管我们在过去的岁月里经历过什么，都必须处理这些经历。如果采取无视的态度，不好的事就会重现。如果不寻求解决办法，我们就会把过去遗留下来的东西带到未来，破坏我们对未来的精心设计。</p><p>不管我们有怎么样的过程，只要我们怀着感恩的心看待现在，就会发现我们所拥有的比想象中的要多得多。感恩能够放大生活中的一切美好事物。感恩是能够消除稀缺性思维，培养富足性思维的最好方法。</p><p><em>具体行动计划：</em></p><h3 id="1-事后回顾"><a href="#1-事后回顾" class="headerlink" title="1.事后回顾"></a>1.事后回顾</h3><p>事后回顾四个关键步骤：</p><ul><li>陈述理想结果</li></ul><p>首先问问自己，怎么看待过去的一年。你的计划是什么、梦想是什么，如果你有具体的目标，这些目标又是什么？要清楚自己的感受。</p><ul><li>承认实际结果</li></ul><p>在陈述理想结果时，你可能已经意识到了差距。理想与现实之间总是有距离的，你可能还有一些目标甚至很多目标没有实现。所以问问自己：你在过去的一年中有什么失意或遗憾？悔恨的意义不是让你奢求改变过去，而是让你更好地思考现在。问问自己：在过去的一年中，什么事情让你感到自豪？我们不仅要关注什么事情不成功，还要关注什么事情成功，分析是什么信念或行动带来了这种成功。这种分析对认识自己的力量及总结过去战胜困难的方法具有重要作用，同时也会增加我们对未来的信心。</p><ul><li>从经验中学习</li></ul><p>从经历中提炼经验教训，让经历成为前进的工具。</p><ul><li>调整行为</li></ul><p>如果是你的某种观念或行为造成了理想与实际结果之间的差距，那么是时候做出改变了。</p><h3 id="2-在遗憾中看到机会"><a href="#2-在遗憾中看到机会" class="headerlink" title="2.在遗憾中看到机会"></a>2.在遗憾中看到机会</h3><p>在回答:“你在过去一年中有什么失意或遗憾？”问题时采取积极补救措施的可能性越大，遗憾的感觉就越强烈。所以问问自己，你的遗憾中隐藏着什么机会。</p><h3 id="3-感恩练习"><a href="#3-感恩练习" class="headerlink" title="3.感恩练习"></a>3.感恩练习</h3><p>感恩不是一种情绪，而是一种行动，尝试一下三个练习:早晚自省；通过感激生活的恩赐，练习感恩；记感恩日记。</p><h2 id="STEP-3-设计未来"><a href="#STEP-3-设计未来" class="headerlink" title="STEP 3 设计未来"></a>STEP 3 设计未来</h2><p>学习如何根据SMART目标管理原则建立成就型目标与习惯性目标的最佳组合，以及为什么要在舒适区之外设立目标。</p><p>顺其自然不会本来非凡的成就随波逐流，不能达到想去的终点。我们只能有意识的去思考自己想要什么，为什么想要并根据目标制定行动方案，这一步在帮助我们清理自己的需要创造理想的生活，这也是乐趣的开始。</p><p><em>具体行动计划：</em></p><h3 id="1-设立目标"><a href="#1-设立目标" class="headerlink" title="1.设立目标"></a>1.设立目标</h3><p>每年设立7~10个目标，目标要满足smarter原则:明确性，可衡量性，可行性风险性，定时性，激励性，相关性，根据不同的生活领域制定相应的目标，将目标分散到各个季度，以保证注意力集中以及全年节奏稳定。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/smart1.png" alt="SMART法则" title="SMART法则"></p><h3 id="2-成就型与习惯性目标合理结合"><a href="#2-成就型与习惯性目标合理结合" class="headerlink" title="2.成就型与习惯性目标合理结合"></a>2.成就型与习惯性目标合理结合</h3><p>成就型目标代表一次完成的成就；习惯型目标代表持续且规律的行动。习惯型目标还可以是成就型目标的实现方式。两种类型的目标都对规划最好的一年有所帮助，但是我们要根据个人需求来平衡这两种目标。对我们有用的组合就是正确的组合。</p><h3 id="3-在不适区设立目标"><a href="#3-在不适区设立目标" class="headerlink" title="3.在不适区设立目标"></a>3.在不适区设立目标</h3><p>一个有意义的目标必须让我们提升自己。这就意味着我们必须离开舒适区。如果你明确知道一个目标应该怎么实现，那说明这个目标还太简单了。人生中所有重要的事都发生在舒适区之外。有意义的目标一定是处在不适区的。不适区的目标给我们带来挑战，让我们最大的发挥自己的能力。而恐慌区的目标可能导致失败，带来沮丧和失望。通常的做法是设立一个接近恐慌区的目标，然后再把它稍稍拖回来一些，处在学习区的目标是比较合适的。</p><p><img src="https://xiejava1018.github.io/xiejavaimagesrc/images/20200105/blogimage/comfortzone.png" alt="舒适区三圈理论" title="舒适区三圈理论"></p><p>最好的是往往发生在我们不得不成长的时候。这在我们对未来一年的规划中是绝对真理，但这违反了我们规避风险的本能，以下4点将有助于我们克服阻力:</p><p>承认走出舒适区的价值。首先转变思维，只要你接受了挑战区的价值，接下来的事就简单多了。</p><p>直面痛苦。大多数阻碍来自我们的内心，但转变思维还不够，通过直面痛苦，我们改变的还有我们的意愿。</p><p>克服恐惧，负面情绪不可避免，不要无视负面情绪，你只需要将实现目标带来的成就感和负面情绪进行对比，是成就多，还是恐惧多？</p><p>避免过度分析。分析瘫痪是真实存在的，你不需要在开头就看到结尾，也不需要知道目标实现的整个过程，你只需要清楚自己下一步应该做什么。</p><h2 id="STEP-4-找到动力"><a href="#STEP-4-找到动力" class="headerlink" title="STEP 4 找到动力"></a>STEP 4 找到动力</h2><p>深入挖掘自己的内在动力，以及防止迷失自己的方法，与朋友同行。</p><p>切记，目标的设定必须明确、易于衡量、有章可循，且无太大风险，节点清晰、振奋人心，并与自己的生活息息相关。识别目标以及动机与目标相关联，给你的目标一个理由。这一点至关重要，因为我们注定会陷入泥沼。无论哪个梦想哪个目标、哪次尝试都逃脱不了这样的命运。我们有时会想，要是有更好的计划，到达终点的路便会少些痛苦、少些风雨。然而，往往事与愿违，要走出困境必须善加利用你的动机，只有这样才能获得动力与毅力，不畏险阻，不言放弃。</p><p><em>具体行动计划：</em></p><h3 id="1-回忆动机"><a href="#1-回忆动机" class="headerlink" title="1.回忆动机"></a>1.回忆动机</h3><p>从识别主要动机入手。你的初衷是什么？它对你来说为什么重要？找个本子，要不就拿出一张纸，一一列出主要动机。只列动机还远远不够，记得给他们排个序，把最好的理由写在前面。最后，用脑子去想，用心去体会。</p><h3 id="2-驾驭动机"><a href="#2-驾驭动机" class="headerlink" title="2.驾驭动机"></a>2.驾驭动机</h3><p>追逐目标的过程中，有4个方法能让我们坚持不懈:</p><p>（1）识别、憧憬未来。最终，事情本身便有了意义。</p><p>（2）要知道新习惯不是几个礼拜就能养成的，没准需要五六个月，所以别期望太高。</p><p>（3）游戏人生，请习惯使用一些养成软件和日历簿帮个忙。</p><p>（4）要衡量所得，而不是差距，珍视每个小的成就。</p><h3 id="3-组建团体"><a href="#3-组建团体" class="headerlink" title="3.组建团体"></a>3.组建团体</h3><p>若是有朋友同行，目标的实现便会容易不少。主动交朋友给了成功4个好处:学习、鼓励、责任、竞争，至少有7种朋友能够帮你成长，帮你实现目标:网络社区，跑步健身社区，交流社区，指导性社交圈，读书学习小组，责任小组，好朋友，若是找不到合适的团体，千万别犹豫，干脆自己建一个吧。</p><h2 id="STEP-5-付诸实践"><a href="#STEP-5-付诸实践" class="headerlink" title="STEP 5 付诸实践"></a>STEP 5 付诸实践</h2><p>规划是基础，行动才是关键。将目标付诸实现，勇于行动，全方位升级！</p><p>伟大并非来自一次冲动，而是由一系列小时汇集而成。确定目标是成功的一半，成功的另一半在于采取行动。</p><p><em>具体行动计划：</em></p><h3 id="1-将总目标分解为可执行的后续步骤"><a href="#1-将总目标分解为可执行的后续步骤" class="headerlink" title="1.将总目标分解为可执行的后续步骤"></a>1.将总目标分解为可执行的后续步骤</h3><p>设立目标在舒适区之外考虑，执行目标从舒适区开始。先完成最简单的任务，遇到困难的时候寻求外界帮助。快速取得初步成功能为后续行动带来动力。</p><h3 id="2-运动触发器"><a href="#2-运动触发器" class="headerlink" title="2.运动触发器"></a>2.运动触发器</h3><p>找到最有效的激活事件。利用杠杆效应，借助简单的任务完成困难的任务。不要依靠自己的即时自控力，通过清除诱惑、自动化、委托授权来优化触发器。</p><p>我们在追求目标的过程中，会遇到干扰事项，所以要预测干扰，预置回应。关键就是在被干扰事项打乱计划之前，先想好应对策略，如果应对策略效果不佳，则调整到满意为止。</p><h3 id="3-安排定期目标回顾"><a href="#3-安排定期目标回顾" class="headerlink" title="3.安排定期目标回顾"></a>3.安排定期目标回顾</h3><p>每日浏览目标列表，确保心中有目标，并在浏览时思考当天的具体任务，也就是“每日三大事”。</p><p>在每周回顾中重点关注主要动机对前一周的任务进展进行一次快速的事后回顾，审查每个目标的后续步骤，并确定接下来一周必须取得的三个成果，也就是“每周三大事”。用“每周三大事”指导“每日三大事”。</p><p>在季度回顾时，建议重新走一遍“5步实现新年目标”流程。重点如下:</p><p>如果已经取得完全或阶段性的胜利，就庆祝自己的胜利；</p><p>如果还没有取得任何形式的胜利，就重新开始追求目标；</p><p>如果不能重新开始，就修改目标；</p><p>如果不能修改，就删除目标；</p><p>用新目标替代被删除的目标。</p><p><em>不要拖着你的梦想。不要拖着你的目标。今日事今日毕，你的生活和工作才能有所起色。一旦下定决心，就行动起来。2020必须是突破的一年！</em></p><hr><center>关注：“爱分享读书”微信公众号 </center><p><img src="http://image.ishareread.com/qrcode_for_gh_70fb5d85a824_258.jpg" alt="“爱分享读书”微信公众号" title="“爱分享读书”微信公众号"></p><center>读书我们是认真的</center>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107/"/>
      <url>/posts/16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
